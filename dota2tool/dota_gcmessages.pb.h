// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages.proto

#ifndef PROTOBUF_dota_5fgcmessages_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "matchmaker_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_dota_5fgcmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[332];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCSODOTAGameAccountClientImpl();
void InitDefaultsCSODOTAGameAccountClient();
void InitDefaultsCSODOTAGameAccountClientInternalImpl();
void InitDefaultsCSODOTAGameAccountClientInternal();
void InitDefaultsCSODOTAPartyMemberImpl();
void InitDefaultsCSODOTAPartyMember();
void InitDefaultsCSODOTAPartyImpl();
void InitDefaultsCSODOTAParty();
void InitDefaultsCSODOTAPartyInternalImpl();
void InitDefaultsCSODOTAPartyInternal();
void InitDefaultsCSODOTAPartyMemcachedImpl();
void InitDefaultsCSODOTAPartyMemcached();
void InitDefaultsCSODOTAPartyInvite_PartyMemberImpl();
void InitDefaultsCSODOTAPartyInvite_PartyMember();
void InitDefaultsCSODOTAPartyInviteImpl();
void InitDefaultsCSODOTAPartyInvite();
void InitDefaultsCDOTALobbyMemberImpl();
void InitDefaultsCDOTALobbyMember();
void InitDefaultsCLobbyTeamDetailsImpl();
void InitDefaultsCLobbyTeamDetails();
void InitDefaultsCLobbyPendingPlayerReportImpl();
void InitDefaultsCLobbyPendingPlayerReport();
void InitDefaultsCLobbyTimedRewardDetailsImpl();
void InitDefaultsCLobbyTimedRewardDetails();
void InitDefaultsCSODOTALobbyImpl();
void InitDefaultsCSODOTALobby();
void InitDefaultsCSODOTALobbyInternalImpl();
void InitDefaultsCSODOTALobbyInternal();
void InitDefaultsCSODOTALobbyMemcachedImpl();
void InitDefaultsCSODOTALobbyMemcached();
void InitDefaultsCMsgConnectedPlayers_PlayerImpl();
void InitDefaultsCMsgConnectedPlayers_Player();
void InitDefaultsCMsgConnectedPlayersImpl();
void InitDefaultsCMsgConnectedPlayers();
void InitDefaultsCMsgMatchmakingLanguagePreferenceImpl();
void InitDefaultsCMsgMatchmakingLanguagePreference();
void InitDefaultsCMsgStartFindingMatchImpl();
void InitDefaultsCMsgStartFindingMatch();
void InitDefaultsCMsgStopFindingMatchImpl();
void InitDefaultsCMsgStopFindingMatch();
void InitDefaultsCMsgReadyUpImpl();
void InitDefaultsCMsgReadyUp();
void InitDefaultsCMsgReadyUpStatusImpl();
void InitDefaultsCMsgReadyUpStatus();
void InitDefaultsCMsgSpawnLootGreevilImpl();
void InitDefaultsCMsgSpawnLootGreevil();
void InitDefaultsCMsgDismissLootGreevilImpl();
void InitDefaultsCMsgDismissLootGreevil();
void InitDefaultsCMsgDismissLootGreevilResponseImpl();
void InitDefaultsCMsgDismissLootGreevilResponse();
void InitDefaultsCSourceTVGame_PlayerImpl();
void InitDefaultsCSourceTVGame_Player();
void InitDefaultsCSourceTVGameImpl();
void InitDefaultsCSourceTVGame();
void InitDefaultsCMsgSourceTVGamesResponseImpl();
void InitDefaultsCMsgSourceTVGamesResponse();
void InitDefaultsCMsgFindSourceTVGamesImpl();
void InitDefaultsCMsgFindSourceTVGames();
void InitDefaultsCMsgSpectateFriendGameImpl();
void InitDefaultsCMsgSpectateFriendGame();
void InitDefaultsCMsgSpectateFriendGameResponseImpl();
void InitDefaultsCMsgSpectateFriendGameResponse();
void InitDefaultsCMsgAbandonCurrentGameImpl();
void InitDefaultsCMsgAbandonCurrentGame();
void InitDefaultsCMsgGameServerInfoImpl();
void InitDefaultsCMsgGameServerInfo();
void InitDefaultsCMsgLeaverDetectedImpl();
void InitDefaultsCMsgLeaverDetected();
void InitDefaultsCMsgLeaverDetectedResponseImpl();
void InitDefaultsCMsgLeaverDetectedResponse();
void InitDefaultsCMsgPracticeLobbySetDetailsImpl();
void InitDefaultsCMsgPracticeLobbySetDetails();
void InitDefaultsCMsgPracticeLobbyCreate_SaveGameImpl();
void InitDefaultsCMsgPracticeLobbyCreate_SaveGame();
void InitDefaultsCMsgPracticeLobbyCreateImpl();
void InitDefaultsCMsgPracticeLobbyCreate();
void InitDefaultsCMsgPracticeLobbySetTeamSlotImpl();
void InitDefaultsCMsgPracticeLobbySetTeamSlot();
void InitDefaultsCMsgPracticeLobbyJoinBroadcastChannelImpl();
void InitDefaultsCMsgPracticeLobbyJoinBroadcastChannel();
void InitDefaultsCMsgPracticeLobbyKickImpl();
void InitDefaultsCMsgPracticeLobbyKick();
void InitDefaultsCMsgPracticeLobbyLeaveImpl();
void InitDefaultsCMsgPracticeLobbyLeave();
void InitDefaultsCMsgPracticeLobbyLaunchImpl();
void InitDefaultsCMsgPracticeLobbyLaunch();
void InitDefaultsCMsgApplyTeamToPracticeLobbyImpl();
void InitDefaultsCMsgApplyTeamToPracticeLobby();
void InitDefaultsCMsgPracticeLobbyListImpl();
void InitDefaultsCMsgPracticeLobbyList();
void InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMemberImpl();
void InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMember();
void InitDefaultsCMsgPracticeLobbyListResponseEntryImpl();
void InitDefaultsCMsgPracticeLobbyListResponseEntry();
void InitDefaultsCMsgPracticeLobbyListResponseImpl();
void InitDefaultsCMsgPracticeLobbyListResponse();
void InitDefaultsCMsgPracticeLobbyJoinImpl();
void InitDefaultsCMsgPracticeLobbyJoin();
void InitDefaultsCMsgPracticeLobbyJoinResponseImpl();
void InitDefaultsCMsgPracticeLobbyJoinResponse();
void InitDefaultsCMsgFriendPracticeLobbyListRequestImpl();
void InitDefaultsCMsgFriendPracticeLobbyListRequest();
void InitDefaultsCMsgFriendPracticeLobbyListResponseImpl();
void InitDefaultsCMsgFriendPracticeLobbyListResponse();
void InitDefaultsCMsgGuildmatePracticeLobbyListRequestImpl();
void InitDefaultsCMsgGuildmatePracticeLobbyListRequest();
void InitDefaultsCMsgGuildmatePracticeLobbyListResponseImpl();
void InitDefaultsCMsgGuildmatePracticeLobbyListResponse();
void InitDefaultsCMsgBotGameCreateImpl();
void InitDefaultsCMsgBotGameCreate();
void InitDefaultsCMsgRequestInternationalTicketImpl();
void InitDefaultsCMsgRequestInternationalTicket();
void InitDefaultsCMsgBalancedShuffleLobbyImpl();
void InitDefaultsCMsgBalancedShuffleLobby();
void InitDefaultsCMatchHeroSelectEventImpl();
void InitDefaultsCMatchHeroSelectEvent();
void InitDefaultsCMatchPlayerAbilityUpgradeImpl();
void InitDefaultsCMatchPlayerAbilityUpgrade();
void InitDefaultsCMatchAdditionalUnitInventoryImpl();
void InitDefaultsCMatchAdditionalUnitInventory();
void InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayerImpl();
void InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer();
void InitDefaultsCMsgGameMatchSignOut_CTeamImpl();
void InitDefaultsCMsgGameMatchSignOut_CTeam();
void InitDefaultsCMsgGameMatchSignOutImpl();
void InitDefaultsCMsgGameMatchSignOut();
void InitDefaultsCMsgGameMatchSignoutResponseImpl();
void InitDefaultsCMsgGameMatchSignoutResponse();
void InitDefaultsCMsgGameChatLog_CChatLineImpl();
void InitDefaultsCMsgGameChatLog_CChatLine();
void InitDefaultsCMsgGameChatLogImpl();
void InitDefaultsCMsgGameChatLog();
void InitDefaultsCMsgInitialQuestionnaireResponseImpl();
void InitDefaultsCMsgInitialQuestionnaireResponse();
void InitDefaultsCMsgInterGCSurgeTestImpl();
void InitDefaultsCMsgInterGCSurgeTest();
void InitDefaultsCMsgInterGCProfileImpl();
void InitDefaultsCMsgInterGCProfile();
void InitDefaultsCMsgDOTATournament_TeamImpl();
void InitDefaultsCMsgDOTATournament_Team();
void InitDefaultsCMsgDOTATournament_Game_ReplayURLImpl();
void InitDefaultsCMsgDOTATournament_Game_ReplayURL();
void InitDefaultsCMsgDOTATournament_GameImpl();
void InitDefaultsCMsgDOTATournament_Game();
void InitDefaultsCMsgDOTATournamentImpl();
void InitDefaultsCMsgDOTATournament();
void InitDefaultsCMsgDOTATournamentRequestImpl();
void InitDefaultsCMsgDOTATournamentRequest();
void InitDefaultsCMsgDOTATournamentResponseImpl();
void InitDefaultsCMsgDOTATournamentResponse();
void InitDefaultsCMsgDOTAClearTournamentGameImpl();
void InitDefaultsCMsgDOTAClearTournamentGame();
void InitDefaultsCMsgDOTAMatch_PlayerImpl();
void InitDefaultsCMsgDOTAMatch_Player();
void InitDefaultsCMsgDOTAMatchImpl();
void InitDefaultsCMsgDOTAMatch();
void InitDefaultsCMsgDOTAPlayerMatchHistoryImpl();
void InitDefaultsCMsgDOTAPlayerMatchHistory();
void InitDefaultsCMsgDOTAMatchHistoryFilterImpl();
void InitDefaultsCMsgDOTAMatchHistoryFilter();
void InitDefaultsCMsgDOTARequestMatchesImpl();
void InitDefaultsCMsgDOTARequestMatches();
void InitDefaultsCMsgDOTARequestMatchesResponseImpl();
void InitDefaultsCMsgDOTARequestMatchesResponse();
void InitDefaultsCMsgDOTAPopupImpl();
void InitDefaultsCMsgDOTAPopup();
void InitDefaultsCMsgDOTATeamMemberSDOImpl();
void InitDefaultsCMsgDOTATeamMemberSDO();
void InitDefaultsCMsgDOTATeamAdminSDOImpl();
void InitDefaultsCMsgDOTATeamAdminSDO();
void InitDefaultsCMsgDOTATeamMemberImpl();
void InitDefaultsCMsgDOTATeamMember();
void InitDefaultsCMsgDOTATeamImpl();
void InitDefaultsCMsgDOTATeam();
void InitDefaultsCMsgDOTACreateTeamImpl();
void InitDefaultsCMsgDOTACreateTeam();
void InitDefaultsCMsgDOTACreateTeamResponseImpl();
void InitDefaultsCMsgDOTACreateTeamResponse();
void InitDefaultsCMsgDOTAEditTeamImpl();
void InitDefaultsCMsgDOTAEditTeam();
void InitDefaultsCMsgDOTAEditTeamLogoImpl();
void InitDefaultsCMsgDOTAEditTeamLogo();
void InitDefaultsCMsgDOTAEditTeamLogoResponseImpl();
void InitDefaultsCMsgDOTAEditTeamLogoResponse();
void InitDefaultsCMsgDOTAEditTeamDetailsImpl();
void InitDefaultsCMsgDOTAEditTeamDetails();
void InitDefaultsCMsgDOTAEditTeamDetailsResponseImpl();
void InitDefaultsCMsgDOTAEditTeamDetailsResponse();
void InitDefaultsCMsgDOTADisbandTeamImpl();
void InitDefaultsCMsgDOTADisbandTeam();
void InitDefaultsCMsgDOTADisbandTeamResponseImpl();
void InitDefaultsCMsgDOTADisbandTeamResponse();
void InitDefaultsCMsgDOTARequestTeamDataImpl();
void InitDefaultsCMsgDOTARequestTeamData();
void InitDefaultsCMsgDOTARequestTeamDataResponseImpl();
void InitDefaultsCMsgDOTARequestTeamDataResponse();
void InitDefaultsCMsgDOTATeamDataImpl();
void InitDefaultsCMsgDOTATeamData();
void InitDefaultsCMsgDOTATeamProfileRequestImpl();
void InitDefaultsCMsgDOTATeamProfileRequest();
void InitDefaultsCMsgDOTATeamMemberProfileRequestImpl();
void InitDefaultsCMsgDOTATeamMemberProfileRequest();
void InitDefaultsCMsgDOTATeamIDByNameRequestImpl();
void InitDefaultsCMsgDOTATeamIDByNameRequest();
void InitDefaultsCMsgDOTATeamIDByNameResponseImpl();
void InitDefaultsCMsgDOTATeamIDByNameResponse();
void InitDefaultsCMsgDOTATeamProfileResponseImpl();
void InitDefaultsCMsgDOTATeamProfileResponse();
void InitDefaultsCMsgDOTAProTeamListRequestImpl();
void InitDefaultsCMsgDOTAProTeamListRequest();
void InitDefaultsCMsgDOTAProTeamListResponse_TeamEntryImpl();
void InitDefaultsCMsgDOTAProTeamListResponse_TeamEntry();
void InitDefaultsCMsgDOTAProTeamListResponseImpl();
void InitDefaultsCMsgDOTAProTeamListResponse();
void InitDefaultsCMsgDOTATeamInvite_InviterToGCImpl();
void InitDefaultsCMsgDOTATeamInvite_InviterToGC();
void InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviterImpl();
void InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviter();
void InitDefaultsCMsgDOTATeamInvite_GCRequestToInviteeImpl();
void InitDefaultsCMsgDOTATeamInvite_GCRequestToInvitee();
void InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGCImpl();
void InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGC();
void InitDefaultsCMsgDOTATeamInvite_GCResponseToInviterImpl();
void InitDefaultsCMsgDOTATeamInvite_GCResponseToInviter();
void InitDefaultsCMsgDOTATeamInvite_GCResponseToInviteeImpl();
void InitDefaultsCMsgDOTATeamInvite_GCResponseToInvitee();
void InitDefaultsCMsgDOTATeamOnProfileImpl();
void InitDefaultsCMsgDOTATeamOnProfile();
void InitDefaultsCMsgDOTAKickTeamMemberImpl();
void InitDefaultsCMsgDOTAKickTeamMember();
void InitDefaultsCMsgDOTAKickTeamMemberResponseImpl();
void InitDefaultsCMsgDOTAKickTeamMemberResponse();
void InitDefaultsCMsgDOTATransferTeamAdminImpl();
void InitDefaultsCMsgDOTATransferTeamAdmin();
void InitDefaultsCMsgDOTATransferTeamAdminResponseImpl();
void InitDefaultsCMsgDOTATransferTeamAdminResponse();
void InitDefaultsCMsgDOTALeaveTeamImpl();
void InitDefaultsCMsgDOTALeaveTeam();
void InitDefaultsCMsgDOTALeaveTeamResponseImpl();
void InitDefaultsCMsgDOTALeaveTeamResponse();
void InitDefaultsCMsgDOTABetaParticipationRequestImpl();
void InitDefaultsCMsgDOTABetaParticipationRequest();
void InitDefaultsCMsgDOTABetaParticipationImpl();
void InitDefaultsCMsgDOTABetaParticipation();
void InitDefaultsCMsgDOTAGenericResultImpl();
void InitDefaultsCMsgDOTAGenericResult();
void InitDefaultsCMsgDOTABroadcastNotificationImpl();
void InitDefaultsCMsgDOTABroadcastNotification();
void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_PlayerImpl();
void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player();
void InitDefaultsCMsgDOTALiveScoreboardUpdate_TeamImpl();
void InitDefaultsCMsgDOTALiveScoreboardUpdate_Team();
void InitDefaultsCMsgDOTALiveScoreboardUpdateImpl();
void InitDefaultsCMsgDOTALiveScoreboardUpdate();
void InitDefaultsCMsgDOTAJoinChatChannelImpl();
void InitDefaultsCMsgDOTAJoinChatChannel();
void InitDefaultsCMsgDOTALeaveChatChannelImpl();
void InitDefaultsCMsgDOTALeaveChatChannel();
void InitDefaultsCMsgDOTAChatMessageImpl();
void InitDefaultsCMsgDOTAChatMessage();
void InitDefaultsCMsgDOTASetChatChannelVerbosity_ChannelVerbosityImpl();
void InitDefaultsCMsgDOTASetChatChannelVerbosity_ChannelVerbosity();
void InitDefaultsCMsgDOTASetChatChannelVerbosityImpl();
void InitDefaultsCMsgDOTASetChatChannelVerbosity();
void InitDefaultsCMsgDOTAChatMemberImpl();
void InitDefaultsCMsgDOTAChatMember();
void InitDefaultsCMsgDOTAJoinChatChannelResponseImpl();
void InitDefaultsCMsgDOTAJoinChatChannelResponse();
void InitDefaultsCMsgDOTAChatChannelFullUpdateImpl();
void InitDefaultsCMsgDOTAChatChannelFullUpdate();
void InitDefaultsCMsgDOTAOtherJoinedChatChannelImpl();
void InitDefaultsCMsgDOTAOtherJoinedChatChannel();
void InitDefaultsCMsgDOTAOtherLeftChatChannelImpl();
void InitDefaultsCMsgDOTAOtherLeftChatChannel();
void InitDefaultsCMsgDOTARequestDefaultChatChannelImpl();
void InitDefaultsCMsgDOTARequestDefaultChatChannel();
void InitDefaultsCMsgDOTARequestDefaultChatChannelResponseImpl();
void InitDefaultsCMsgDOTARequestDefaultChatChannelResponse();
void InitDefaultsCMsgDOTARequestChatChannelListImpl();
void InitDefaultsCMsgDOTARequestChatChannelList();
void InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannelImpl();
void InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannel();
void InitDefaultsCMsgDOTARequestChatChannelListResponseImpl();
void InitDefaultsCMsgDOTARequestChatChannelListResponse();
void InitDefaultsCMsgDOTAGuildSDO_MemberImpl();
void InitDefaultsCMsgDOTAGuildSDO_Member();
void InitDefaultsCMsgDOTAGuildSDO_InvitationImpl();
void InitDefaultsCMsgDOTAGuildSDO_Invitation();
void InitDefaultsCMsgDOTAGuildSDOImpl();
void InitDefaultsCMsgDOTAGuildSDO();
void InitDefaultsCMsgDOTAGuildAuditSDO_EntryImpl();
void InitDefaultsCMsgDOTAGuildAuditSDO_Entry();
void InitDefaultsCMsgDOTAGuildAuditSDOImpl();
void InitDefaultsCMsgDOTAGuildAuditSDO();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_MembershipImpl();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_Membership();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_InvitationImpl();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_Invitation();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDOImpl();
void InitDefaultsCMsgDOTAAccountGuildMembershipsSDO();
void InitDefaultsCMsgDOTAGuildCreateRequestImpl();
void InitDefaultsCMsgDOTAGuildCreateRequest();
void InitDefaultsCMsgDOTAGuildCreateResponseImpl();
void InitDefaultsCMsgDOTAGuildCreateResponse();
void InitDefaultsCMsgDOTAGuildSetAccountRoleRequestImpl();
void InitDefaultsCMsgDOTAGuildSetAccountRoleRequest();
void InitDefaultsCMsgDOTAGuildSetAccountRoleResponseImpl();
void InitDefaultsCMsgDOTAGuildSetAccountRoleResponse();
void InitDefaultsCMsgDOTAGuildInviteAccountRequestImpl();
void InitDefaultsCMsgDOTAGuildInviteAccountRequest();
void InitDefaultsCMsgDOTAGuildInviteAccountResponseImpl();
void InitDefaultsCMsgDOTAGuildInviteAccountResponse();
void InitDefaultsCMsgDOTAGuildCancelInviteRequestImpl();
void InitDefaultsCMsgDOTAGuildCancelInviteRequest();
void InitDefaultsCMsgDOTAGuildCancelInviteResponseImpl();
void InitDefaultsCMsgDOTAGuildCancelInviteResponse();
void InitDefaultsCMsgDOTAGuildUpdateDetailsRequestImpl();
void InitDefaultsCMsgDOTAGuildUpdateDetailsRequest();
void InitDefaultsCMsgDOTAGuildUpdateDetailsResponseImpl();
void InitDefaultsCMsgDOTAGuildUpdateDetailsResponse();
void InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyRequestImpl();
void InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyRequest();
void InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyResponseImpl();
void InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyResponse();
void InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyRequestImpl();
void InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyRequest();
void InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyResponseImpl();
void InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyResponse();
void InitDefaultsCMsgDOTAPartySetOpenGuildRequestImpl();
void InitDefaultsCMsgDOTAPartySetOpenGuildRequest();
void InitDefaultsCMsgDOTAPartySetOpenGuildResponseImpl();
void InitDefaultsCMsgDOTAPartySetOpenGuildResponse();
void InitDefaultsCMsgDOTAJoinOpenGuildPartyRequestImpl();
void InitDefaultsCMsgDOTAJoinOpenGuildPartyRequest();
void InitDefaultsCMsgDOTAJoinOpenGuildPartyResponseImpl();
void InitDefaultsCMsgDOTAJoinOpenGuildPartyResponse();
void InitDefaultsCMsgDOTAGuildOpenPartyRefresh_OpenPartyImpl();
void InitDefaultsCMsgDOTAGuildOpenPartyRefresh_OpenParty();
void InitDefaultsCMsgDOTAGuildOpenPartyRefreshImpl();
void InitDefaultsCMsgDOTAGuildOpenPartyRefresh();
void InitDefaultsCMsgDOTARequestGuildDataImpl();
void InitDefaultsCMsgDOTARequestGuildData();
void InitDefaultsCMsgDOTAGuildDataImpl();
void InitDefaultsCMsgDOTAGuildData();
void InitDefaultsCMsgDOTAGuildInviteDataImpl();
void InitDefaultsCMsgDOTAGuildInviteData();
void InitDefaultsCMsgDOTAGuildUpdateMessageImpl();
void InitDefaultsCMsgDOTAGuildUpdateMessage();
void InitDefaultsCMsgDOTAGuildEditLogoRequestImpl();
void InitDefaultsCMsgDOTAGuildEditLogoRequest();
void InitDefaultsCMsgDOTAGuildEditLogoResponseImpl();
void InitDefaultsCMsgDOTAGuildEditLogoResponse();
void InitDefaultsCMsgDOTAPlayerReports_PlayerReportImpl();
void InitDefaultsCMsgDOTAPlayerReports_PlayerReport();
void InitDefaultsCMsgDOTAPlayerReportsImpl();
void InitDefaultsCMsgDOTAPlayerReports();
void InitDefaultsCMsgDOTAReportsRemainingRequestImpl();
void InitDefaultsCMsgDOTAReportsRemainingRequest();
void InitDefaultsCMsgDOTAReportsRemainingResponseImpl();
void InitDefaultsCMsgDOTAReportsRemainingResponse();
void InitDefaultsCMsgDOTASubmitPlayerReportImpl();
void InitDefaultsCMsgDOTASubmitPlayerReport();
void InitDefaultsCMsgDOTASubmitPlayerReportResponseImpl();
void InitDefaultsCMsgDOTASubmitPlayerReportResponse();
void InitDefaultsCMsgDOTAReportCountsRequestImpl();
void InitDefaultsCMsgDOTAReportCountsRequest();
void InitDefaultsCMsgDOTAReportCountsResponseImpl();
void InitDefaultsCMsgDOTAReportCountsResponse();
void InitDefaultsCMsgDOTARequestPlayerResourcesImpl();
void InitDefaultsCMsgDOTARequestPlayerResources();
void InitDefaultsCMsgDOTARequestPlayerResourcesResponseImpl();
void InitDefaultsCMsgDOTARequestPlayerResourcesResponse();
void InitDefaultsCMsgDOTAKickedFromMatchmakingQueueImpl();
void InitDefaultsCMsgDOTAKickedFromMatchmakingQueue();
void InitDefaultsCMsgDOTARequestSaveGamesImpl();
void InitDefaultsCMsgDOTARequestSaveGames();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerImpl();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_Player();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsImpl();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceImpl();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGameImpl();
void InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame();
void InitDefaultsCMsgDOTARequestSaveGamesResponseImpl();
void InitDefaultsCMsgDOTARequestSaveGamesResponse();
void InitDefaultsCMsgDOTAPlayerFailedToConnectImpl();
void InitDefaultsCMsgDOTAPlayerFailedToConnect();
void InitDefaultsCMsgGCToRelayConnectImpl();
void InitDefaultsCMsgGCToRelayConnect();
void InitDefaultsCMsgGCToRelayConnectResponseImpl();
void InitDefaultsCMsgGCToRelayConnectResponse();
void InitDefaultsCMsgWatchGameImpl();
void InitDefaultsCMsgWatchGame();
void InitDefaultsCMsgCancelWatchGameImpl();
void InitDefaultsCMsgCancelWatchGame();
void InitDefaultsCMsgWatchGameResponseImpl();
void InitDefaultsCMsgWatchGameResponse();
void InitDefaultsCMsgGCBanStatusRequestImpl();
void InitDefaultsCMsgGCBanStatusRequest();
void InitDefaultsCMsgGCBanStatusResponseImpl();
void InitDefaultsCMsgGCBanStatusResponse();
void InitDefaultsCMsgDOTADailyStatsImpl();
void InitDefaultsCMsgDOTADailyStats();
void InitDefaultsCMsgDOTARequestDailyStatsImpl();
void InitDefaultsCMsgDOTARequestDailyStats();
void InitDefaultsCMsgGCMatchDetailsRequestImpl();
void InitDefaultsCMsgGCMatchDetailsRequest();
void InitDefaultsCMsgGCMatchDetailsResponseImpl();
void InitDefaultsCMsgGCMatchDetailsResponse();
void InitDefaultsCMsgDOTAProfileRequestImpl();
void InitDefaultsCMsgDOTAProfileRequest();
void InitDefaultsCMsgDOTAProfileResponse_PlayedHeroImpl();
void InitDefaultsCMsgDOTAProfileResponse_PlayedHero();
void InitDefaultsCMsgDOTAProfileResponse_ShowcaseHeroImpl();
void InitDefaultsCMsgDOTAProfileResponse_ShowcaseHero();
void InitDefaultsCMsgDOTAProfileResponse_LeaguePassImpl();
void InitDefaultsCMsgDOTAProfileResponse_LeaguePass();
void InitDefaultsCMsgDOTAProfileResponse_EventTicketImpl();
void InitDefaultsCMsgDOTAProfileResponse_EventTicket();
void InitDefaultsCMsgDOTAProfileResponseImpl();
void InitDefaultsCMsgDOTAProfileResponse();
void InitDefaultsCMsgDOTAClearNotifySuccessfulReportImpl();
void InitDefaultsCMsgDOTAClearNotifySuccessfulReport();
void InitDefaultsCItemDropEventImpl();
void InitDefaultsCItemDropEvent();
void InitDefaultsCXPGainEventImpl();
void InitDefaultsCXPGainEvent();
void InitDefaultsCLowPriPenaltyImpl();
void InitDefaultsCLowPriPenalty();
void InitDefaultsCMsgDOTAWelcomeImpl();
void InitDefaultsCMsgDOTAWelcome();
void InitDefaultsCSODOTAGameHeroFavoritesImpl();
void InitDefaultsCSODOTAGameHeroFavorites();
void InitDefaultsCMsgDOTAHeroFavoritesAddImpl();
void InitDefaultsCMsgDOTAHeroFavoritesAdd();
void InitDefaultsCMsgDOTAHeroFavoritesRemoveImpl();
void InitDefaultsCMsgDOTAHeroFavoritesRemove();
void InitDefaultsCDOTAOverview_PlayersByRegionImpl();
void InitDefaultsCDOTAOverview_PlayersByRegion();
void InitDefaultsCDOTAOverview_ServersByRegion_Host_ServerImpl();
void InitDefaultsCDOTAOverview_ServersByRegion_Host_Server();
void InitDefaultsCDOTAOverview_ServersByRegion_HostImpl();
void InitDefaultsCDOTAOverview_ServersByRegion_Host();
void InitDefaultsCDOTAOverview_ServersByRegionImpl();
void InitDefaultsCDOTAOverview_ServersByRegion();
void InitDefaultsCDOTAOverviewImpl();
void InitDefaultsCDOTAOverview();
void InitDefaultsCMsgSetShowcaseHeroImpl();
void InitDefaultsCMsgSetShowcaseHero();
void InitDefaultsCMsgSetFeaturedItemsImpl();
void InitDefaultsCMsgSetFeaturedItems();
void InitDefaultsCMsgDOTAFeaturedItemsImpl();
void InitDefaultsCMsgDOTAFeaturedItems();
void InitDefaultsCMsgDOTAFeaturedItemsRequestImpl();
void InitDefaultsCMsgDOTAFeaturedItemsRequest();
void InitDefaultsCMsgDOTAFeaturedItemsResponseImpl();
void InitDefaultsCMsgDOTAFeaturedItemsResponse();
void InitDefaultsCMsgRequestLeagueInfoImpl();
void InitDefaultsCMsgRequestLeagueInfo();
void InitDefaultsCLeagueImpl();
void InitDefaultsCLeague();
void InitDefaultsCMsgResponseLeagueInfoImpl();
void InitDefaultsCMsgResponseLeagueInfo();
void InitDefaultsCMsgTournamentItemEventImpl();
void InitDefaultsCMsgTournamentItemEvent();
void InitDefaultsCMsgTournamentItemEventResponseImpl();
void InitDefaultsCMsgTournamentItemEventResponse();
void InitDefaultsCMsgDOTAMatchVotes_PlayerVoteImpl();
void InitDefaultsCMsgDOTAMatchVotes_PlayerVote();
void InitDefaultsCMsgDOTAMatchVotesImpl();
void InitDefaultsCMsgDOTAMatchVotes();
void InitDefaultsCMsgCastMatchVoteImpl();
void InitDefaultsCMsgCastMatchVote();
void InitDefaultsCMsgRetrieveMatchVoteImpl();
void InitDefaultsCMsgRetrieveMatchVote();
void InitDefaultsCMsgMatchVoteResponseImpl();
void InitDefaultsCMsgMatchVoteResponse();
void InitDefaultsCMsgTeamFanfareImpl();
void InitDefaultsCMsgTeamFanfare();
void InitDefaultsCMsgResponseTeamFanfareImpl();
void InitDefaultsCMsgResponseTeamFanfare();
void InitDefaultsCMsgSpectatorConnectImpl();
void InitDefaultsCMsgSpectatorConnect();
void InitDefaultsCMsgSpectatorDisconnectImpl();
void InitDefaultsCMsgSpectatorDisconnect();
void InitDefaultsCMsgGameServerUploadSaveGameImpl();
void InitDefaultsCMsgGameServerUploadSaveGame();
void InitDefaultsCMsgGameServerSaveGameResultImpl();
void InitDefaultsCMsgGameServerSaveGameResult();
void InitDefaultsCMsgGameServerGetLoadGameImpl();
void InitDefaultsCMsgGameServerGetLoadGame();
void InitDefaultsCMsgGameServerGetLoadGameResultImpl();
void InitDefaultsCMsgGameServerGetLoadGameResult();
void InitDefaultsCMsgCheckSpectatorOnlyImpl();
void InitDefaultsCMsgCheckSpectatorOnly();
void InitDefaultsCMsgCheckSpectatorOnlyResponseImpl();
void InitDefaultsCMsgCheckSpectatorOnlyResponse();
void InitDefaultsCMsgDOTAHallOfFame_FeaturedPlayerImpl();
void InitDefaultsCMsgDOTAHallOfFame_FeaturedPlayer();
void InitDefaultsCMsgDOTAHallOfFame_FeaturedFarmerImpl();
void InitDefaultsCMsgDOTAHallOfFame_FeaturedFarmer();
void InitDefaultsCMsgDOTAHallOfFameImpl();
void InitDefaultsCMsgDOTAHallOfFame();
void InitDefaultsCMsgDOTAHallOfFameRequestImpl();
void InitDefaultsCMsgDOTAHallOfFameRequest();
void InitDefaultsCMsgDOTAHallOfFameResponseImpl();
void InitDefaultsCMsgDOTAHallOfFameResponse();
void InitDefaultsCMsgDOTAGenerateDiretidePrizeListImpl();
void InitDefaultsCMsgDOTAGenerateDiretidePrizeList();
void InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponseImpl();
void InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponse();
void InitDefaultsCMsgDOTARewardDiretidePrizesImpl();
void InitDefaultsCMsgDOTARewardDiretidePrizes();
void InitDefaultsCMsgDOTADiretidePrizesRewardedResponseImpl();
void InitDefaultsCMsgDOTADiretidePrizesRewardedResponse();
void InitDefaultsCMsgDOTADiretidePrizeResponseImpl();
void InitDefaultsCMsgDOTADiretidePrizeResponse();
void InitDefaultsCMsgDOTAHalloweenHighScoreRequestImpl();
void InitDefaultsCMsgDOTAHalloweenHighScoreRequest();
void InitDefaultsCMsgDOTAHalloweenHighScoreResponseImpl();
void InitDefaultsCMsgDOTAHalloweenHighScoreResponse();
void InitDefaultsCMsgDOTANotifyResetKeybindingsImpl();
void InitDefaultsCMsgDOTANotifyResetKeybindings();
void InitDefaultsCMsgDOTAStorePromoPagesRequestImpl();
void InitDefaultsCMsgDOTAStorePromoPagesRequest();
void InitDefaultsCMsgDOTAStorePromoPagesResponse_PromoPageImpl();
void InitDefaultsCMsgDOTAStorePromoPagesResponse_PromoPage();
void InitDefaultsCMsgDOTAStorePromoPagesResponseImpl();
void InitDefaultsCMsgDOTAStorePromoPagesResponse();
void InitDefaultsCMsgDOTAGCToGCMatchCompletedImpl();
void InitDefaultsCMsgDOTAGCToGCMatchCompleted();
void InitDefaultsCMsgGCToGCCheckLeaguePermissionImpl();
void InitDefaultsCMsgGCToGCCheckLeaguePermission();
void InitDefaultsCMsgGCToGCCheckLeaguePermissionResponseImpl();
void InitDefaultsCMsgGCToGCCheckLeaguePermissionResponse();
void InitDefaultsCMsgLeagueScheduleBlockTeamInfoImpl();
void InitDefaultsCMsgLeagueScheduleBlockTeamInfo();
void InitDefaultsCMsgLeagueScheduleBlockImpl();
void InitDefaultsCMsgLeagueScheduleBlock();
void InitDefaultsCMsgDOTALeagueImpl();
void InitDefaultsCMsgDOTALeague();
void InitDefaultsCMsgDOTALeagueScheduleRequestImpl();
void InitDefaultsCMsgDOTALeagueScheduleRequest();
void InitDefaultsCMsgDOTALeagueScheduleResponseImpl();
void InitDefaultsCMsgDOTALeagueScheduleResponse();
void InitDefaultsCMsgDOTALeagueScheduleEditImpl();
void InitDefaultsCMsgDOTALeagueScheduleEdit();
void InitDefaultsCMsgDOTALeagueScheduleEditResponseImpl();
void InitDefaultsCMsgDOTALeagueScheduleEditResponse();
void InitDefaultsCMsgDOTALeaguesInMonthRequestImpl();
void InitDefaultsCMsgDOTALeaguesInMonthRequest();
void InitDefaultsCMsgDOTALeaguesInMonthResponseImpl();
void InitDefaultsCMsgDOTALeaguesInMonthResponse();
void InitDefaultsCMsgDOTAMatchmakingStatsRequestImpl();
void InitDefaultsCMsgDOTAMatchmakingStatsRequest();
void InitDefaultsCMsgDOTAMatchmakingStatsResponseImpl();
void InitDefaultsCMsgDOTAMatchmakingStatsResponse();
void InitDefaultsCMsgDOTASetMatchHistoryAccessImpl();
void InitDefaultsCMsgDOTASetMatchHistoryAccess();
void InitDefaultsCMsgDOTASetMatchHistoryAccessResponseImpl();
void InitDefaultsCMsgDOTASetMatchHistoryAccessResponse();
void InitDefaultsCMsgDOTANotifyMatchHistoryAccessChangeImpl();
void InitDefaultsCMsgDOTANotifyMatchHistoryAccessChange();
void InitDefaultsCMsgUpgradeLeagueItemImpl();
void InitDefaultsCMsgUpgradeLeagueItem();
void InitDefaultsCMsgUpgradeLeagueItemResponseImpl();
void InitDefaultsCMsgUpgradeLeagueItemResponse();
void InitDefaultsCMsgGCWatchDownloadedReplayImpl();
void InitDefaultsCMsgGCWatchDownloadedReplay();
void InitDefaultsCSODOTAMapLocationStateImpl();
void InitDefaultsCSODOTAMapLocationState();
void InitDefaultsCMsgSetMapLocationStateImpl();
void InitDefaultsCMsgSetMapLocationState();
void InitDefaultsCMsgSetMapLocationStateResponseImpl();
void InitDefaultsCMsgSetMapLocationStateResponse();
void InitDefaultsCMsgResetMapLocationsImpl();
void InitDefaultsCMsgResetMapLocations();
void InitDefaultsCMsgResetMapLocationsResponseImpl();
void InitDefaultsCMsgResetMapLocationsResponse();
void InitDefaultsCMsgRefreshPartnerAccountLinkImpl();
void InitDefaultsCMsgRefreshPartnerAccountLink();
void InitDefaultsCMsgClientsRejoinChatChannelsImpl();
void InitDefaultsCMsgClientsRejoinChatChannels();
void InitDefaultsCMsgGCToGCGetUserChatInfoImpl();
void InitDefaultsCMsgGCToGCGetUserChatInfo();
void InitDefaultsCMsgGCToGCGetUserChatInfoResponseImpl();
void InitDefaultsCMsgGCToGCGetUserChatInfoResponse();
void InitDefaultsCMsgGCToGCLeaveAllChatChannelsImpl();
void InitDefaultsCMsgGCToGCLeaveAllChatChannels();
void InitDefaultsCMsgGCToGCUpdateAccountChatBanImpl();
void InitDefaultsCMsgGCToGCUpdateAccountChatBan();
void InitDefaultsCMsgGCToGCCanInviteUserImpl();
void InitDefaultsCMsgGCToGCCanInviteUser();
void InitDefaultsCMsgGCToGCCanInviteUserResponseImpl();
void InitDefaultsCMsgGCToGCCanInviteUserResponse();
void InitDefaultsCMsgGCToGCGetUserRankImpl();
void InitDefaultsCMsgGCToGCGetUserRank();
void InitDefaultsCMsgGCToGCGetUserRankResponseImpl();
void InitDefaultsCMsgGCToGCGetUserRankResponse();
void InitDefaultsCMsgGCToGCGetTeamRankChangeImpl();
void InitDefaultsCMsgGCToGCGetTeamRankChange();
void InitDefaultsCMsgGCToGCGetTeamRankChangeResponseImpl();
void InitDefaultsCMsgGCToGCGetTeamRankChangeResponse();
void InitDefaultsCMsgGCToGCGetTeamRankImpl();
void InitDefaultsCMsgGCToGCGetTeamRank();
void InitDefaultsCMsgGCToGCGetTeamRankResponseImpl();
void InitDefaultsCMsgGCToGCGetTeamRankResponse();
void InitDefaultsCMsgGCToGCUpdateTeamStatsImpl();
void InitDefaultsCMsgGCToGCUpdateTeamStats();
void InitDefaultsCMsgDOTAPassportVoteTeamGuessImpl();
void InitDefaultsCMsgDOTAPassportVoteTeamGuess();
void InitDefaultsCMsgDOTAPassportVoteGenericSelectionImpl();
void InitDefaultsCMsgDOTAPassportVoteGenericSelection();
void InitDefaultsCMsgDOTAPassportStampedPlayerImpl();
void InitDefaultsCMsgDOTAPassportStampedPlayer();
void InitDefaultsCMsgDOTAPassportVoteImpl();
void InitDefaultsCMsgDOTAPassportVote();
void InitDefaultsCMsgPassportDataRequestImpl();
void InitDefaultsCMsgPassportDataRequest();
void InitDefaultsCMsgPassportDataResponseImpl();
void InitDefaultsCMsgPassportDataResponse();
void InitDefaultsCMsgPassportFeaturedMatchRequestImpl();
void InitDefaultsCMsgPassportFeaturedMatchRequest();
void InitDefaultsCMsgPassportFeaturedMatchResponseImpl();
void InitDefaultsCMsgPassportFeaturedMatchResponse();
void InitDefaultsCMsgGCToGCGetLeagueAdminImpl();
void InitDefaultsCMsgGCToGCGetLeagueAdmin();
void InitDefaultsCMsgGCToGCGetLeagueAdminResponseImpl();
void InitDefaultsCMsgGCToGCGetLeagueAdminResponse();
void InitDefaultsCMsgRequestLeaguePrizePoolImpl();
void InitDefaultsCMsgRequestLeaguePrizePool();
void InitDefaultsCMsgRequestLeaguePrizePoolResponseImpl();
void InitDefaultsCMsgRequestLeaguePrizePoolResponse();
void InitDefaultsCMsgGCToGCUpdateMatchmakingStatsImpl();
void InitDefaultsCMsgGCToGCUpdateMatchmakingStats();
void InitDefaultsCMsgGCGetHeroStandingsImpl();
void InitDefaultsCMsgGCGetHeroStandings();
void InitDefaultsCMsgGCGetHeroStandingsResponse_HeroImpl();
void InitDefaultsCMsgGCGetHeroStandingsResponse_Hero();
void InitDefaultsCMsgGCGetHeroStandingsResponseImpl();
void InitDefaultsCMsgGCGetHeroStandingsResponse();
void InitDefaultsCMsgGCItemEditorReservationsRequestImpl();
void InitDefaultsCMsgGCItemEditorReservationsRequest();
void InitDefaultsCMsgGCItemEditorReservationImpl();
void InitDefaultsCMsgGCItemEditorReservation();
void InitDefaultsCMsgGCItemEditorReservationsResponseImpl();
void InitDefaultsCMsgGCItemEditorReservationsResponse();
void InitDefaultsCMsgGCItemEditorReserveItemDefImpl();
void InitDefaultsCMsgGCItemEditorReserveItemDef();
void InitDefaultsCMsgGCItemEditorReserveItemDefResponseImpl();
void InitDefaultsCMsgGCItemEditorReserveItemDefResponse();
void InitDefaultsCMsgGCItemEditorReleaseReservationImpl();
void InitDefaultsCMsgGCItemEditorReleaseReservation();
void InitDefaultsCMsgGCItemEditorReleaseReservationResponseImpl();
void InitDefaultsCMsgGCItemEditorReleaseReservationResponse();
void InitDefaultsCMsgDOTARewardTutorialPrizesImpl();
void InitDefaultsCMsgDOTARewardTutorialPrizes();
void InitDefaultsCMsgDOTALastHitChallengeHighScorePostImpl();
void InitDefaultsCMsgDOTALastHitChallengeHighScorePost();
void InitDefaultsCMsgDOTALastHitChallengeHighScoreRequestImpl();
void InitDefaultsCMsgDOTALastHitChallengeHighScoreRequest();
void InitDefaultsCMsgDOTALastHitChallengeHighScoreResponseImpl();
void InitDefaultsCMsgDOTALastHitChallengeHighScoreResponse();
inline void InitDefaults() {
  InitDefaultsCSODOTAGameAccountClient();
  InitDefaultsCSODOTAGameAccountClientInternal();
  InitDefaultsCSODOTAPartyMember();
  InitDefaultsCSODOTAParty();
  InitDefaultsCSODOTAPartyInternal();
  InitDefaultsCSODOTAPartyMemcached();
  InitDefaultsCSODOTAPartyInvite_PartyMember();
  InitDefaultsCSODOTAPartyInvite();
  InitDefaultsCDOTALobbyMember();
  InitDefaultsCLobbyTeamDetails();
  InitDefaultsCLobbyPendingPlayerReport();
  InitDefaultsCLobbyTimedRewardDetails();
  InitDefaultsCSODOTALobby();
  InitDefaultsCSODOTALobbyInternal();
  InitDefaultsCSODOTALobbyMemcached();
  InitDefaultsCMsgConnectedPlayers_Player();
  InitDefaultsCMsgConnectedPlayers();
  InitDefaultsCMsgMatchmakingLanguagePreference();
  InitDefaultsCMsgStartFindingMatch();
  InitDefaultsCMsgStopFindingMatch();
  InitDefaultsCMsgReadyUp();
  InitDefaultsCMsgReadyUpStatus();
  InitDefaultsCMsgSpawnLootGreevil();
  InitDefaultsCMsgDismissLootGreevil();
  InitDefaultsCMsgDismissLootGreevilResponse();
  InitDefaultsCSourceTVGame_Player();
  InitDefaultsCSourceTVGame();
  InitDefaultsCMsgSourceTVGamesResponse();
  InitDefaultsCMsgFindSourceTVGames();
  InitDefaultsCMsgSpectateFriendGame();
  InitDefaultsCMsgSpectateFriendGameResponse();
  InitDefaultsCMsgAbandonCurrentGame();
  InitDefaultsCMsgGameServerInfo();
  InitDefaultsCMsgLeaverDetected();
  InitDefaultsCMsgLeaverDetectedResponse();
  InitDefaultsCMsgPracticeLobbySetDetails();
  InitDefaultsCMsgPracticeLobbyCreate_SaveGame();
  InitDefaultsCMsgPracticeLobbyCreate();
  InitDefaultsCMsgPracticeLobbySetTeamSlot();
  InitDefaultsCMsgPracticeLobbyJoinBroadcastChannel();
  InitDefaultsCMsgPracticeLobbyKick();
  InitDefaultsCMsgPracticeLobbyLeave();
  InitDefaultsCMsgPracticeLobbyLaunch();
  InitDefaultsCMsgApplyTeamToPracticeLobby();
  InitDefaultsCMsgPracticeLobbyList();
  InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMember();
  InitDefaultsCMsgPracticeLobbyListResponseEntry();
  InitDefaultsCMsgPracticeLobbyListResponse();
  InitDefaultsCMsgPracticeLobbyJoin();
  InitDefaultsCMsgPracticeLobbyJoinResponse();
  InitDefaultsCMsgFriendPracticeLobbyListRequest();
  InitDefaultsCMsgFriendPracticeLobbyListResponse();
  InitDefaultsCMsgGuildmatePracticeLobbyListRequest();
  InitDefaultsCMsgGuildmatePracticeLobbyListResponse();
  InitDefaultsCMsgBotGameCreate();
  InitDefaultsCMsgRequestInternationalTicket();
  InitDefaultsCMsgBalancedShuffleLobby();
  InitDefaultsCMatchHeroSelectEvent();
  InitDefaultsCMatchPlayerAbilityUpgrade();
  InitDefaultsCMatchAdditionalUnitInventory();
  InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayer();
  InitDefaultsCMsgGameMatchSignOut_CTeam();
  InitDefaultsCMsgGameMatchSignOut();
  InitDefaultsCMsgGameMatchSignoutResponse();
  InitDefaultsCMsgGameChatLog_CChatLine();
  InitDefaultsCMsgGameChatLog();
  InitDefaultsCMsgInitialQuestionnaireResponse();
  InitDefaultsCMsgInterGCSurgeTest();
  InitDefaultsCMsgInterGCProfile();
  InitDefaultsCMsgDOTATournament_Team();
  InitDefaultsCMsgDOTATournament_Game_ReplayURL();
  InitDefaultsCMsgDOTATournament_Game();
  InitDefaultsCMsgDOTATournament();
  InitDefaultsCMsgDOTATournamentRequest();
  InitDefaultsCMsgDOTATournamentResponse();
  InitDefaultsCMsgDOTAClearTournamentGame();
  InitDefaultsCMsgDOTAMatch_Player();
  InitDefaultsCMsgDOTAMatch();
  InitDefaultsCMsgDOTAPlayerMatchHistory();
  InitDefaultsCMsgDOTAMatchHistoryFilter();
  InitDefaultsCMsgDOTARequestMatches();
  InitDefaultsCMsgDOTARequestMatchesResponse();
  InitDefaultsCMsgDOTAPopup();
  InitDefaultsCMsgDOTATeamMemberSDO();
  InitDefaultsCMsgDOTATeamAdminSDO();
  InitDefaultsCMsgDOTATeamMember();
  InitDefaultsCMsgDOTATeam();
  InitDefaultsCMsgDOTACreateTeam();
  InitDefaultsCMsgDOTACreateTeamResponse();
  InitDefaultsCMsgDOTAEditTeam();
  InitDefaultsCMsgDOTAEditTeamLogo();
  InitDefaultsCMsgDOTAEditTeamLogoResponse();
  InitDefaultsCMsgDOTAEditTeamDetails();
  InitDefaultsCMsgDOTAEditTeamDetailsResponse();
  InitDefaultsCMsgDOTADisbandTeam();
  InitDefaultsCMsgDOTADisbandTeamResponse();
  InitDefaultsCMsgDOTARequestTeamData();
  InitDefaultsCMsgDOTARequestTeamDataResponse();
  InitDefaultsCMsgDOTATeamData();
  InitDefaultsCMsgDOTATeamProfileRequest();
  InitDefaultsCMsgDOTATeamMemberProfileRequest();
  InitDefaultsCMsgDOTATeamIDByNameRequest();
  InitDefaultsCMsgDOTATeamIDByNameResponse();
  InitDefaultsCMsgDOTATeamProfileResponse();
  InitDefaultsCMsgDOTAProTeamListRequest();
  InitDefaultsCMsgDOTAProTeamListResponse_TeamEntry();
  InitDefaultsCMsgDOTAProTeamListResponse();
  InitDefaultsCMsgDOTATeamInvite_InviterToGC();
  InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviter();
  InitDefaultsCMsgDOTATeamInvite_GCRequestToInvitee();
  InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGC();
  InitDefaultsCMsgDOTATeamInvite_GCResponseToInviter();
  InitDefaultsCMsgDOTATeamInvite_GCResponseToInvitee();
  InitDefaultsCMsgDOTATeamOnProfile();
  InitDefaultsCMsgDOTAKickTeamMember();
  InitDefaultsCMsgDOTAKickTeamMemberResponse();
  InitDefaultsCMsgDOTATransferTeamAdmin();
  InitDefaultsCMsgDOTATransferTeamAdminResponse();
  InitDefaultsCMsgDOTALeaveTeam();
  InitDefaultsCMsgDOTALeaveTeamResponse();
  InitDefaultsCMsgDOTABetaParticipationRequest();
  InitDefaultsCMsgDOTABetaParticipation();
  InitDefaultsCMsgDOTAGenericResult();
  InitDefaultsCMsgDOTABroadcastNotification();
  InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_Player();
  InitDefaultsCMsgDOTALiveScoreboardUpdate_Team();
  InitDefaultsCMsgDOTALiveScoreboardUpdate();
  InitDefaultsCMsgDOTAJoinChatChannel();
  InitDefaultsCMsgDOTALeaveChatChannel();
  InitDefaultsCMsgDOTAChatMessage();
  InitDefaultsCMsgDOTASetChatChannelVerbosity_ChannelVerbosity();
  InitDefaultsCMsgDOTASetChatChannelVerbosity();
  InitDefaultsCMsgDOTAChatMember();
  InitDefaultsCMsgDOTAJoinChatChannelResponse();
  InitDefaultsCMsgDOTAChatChannelFullUpdate();
  InitDefaultsCMsgDOTAOtherJoinedChatChannel();
  InitDefaultsCMsgDOTAOtherLeftChatChannel();
  InitDefaultsCMsgDOTARequestDefaultChatChannel();
  InitDefaultsCMsgDOTARequestDefaultChatChannelResponse();
  InitDefaultsCMsgDOTARequestChatChannelList();
  InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannel();
  InitDefaultsCMsgDOTARequestChatChannelListResponse();
  InitDefaultsCMsgDOTAGuildSDO_Member();
  InitDefaultsCMsgDOTAGuildSDO_Invitation();
  InitDefaultsCMsgDOTAGuildSDO();
  InitDefaultsCMsgDOTAGuildAuditSDO_Entry();
  InitDefaultsCMsgDOTAGuildAuditSDO();
  InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_Membership();
  InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_Invitation();
  InitDefaultsCMsgDOTAAccountGuildMembershipsSDO();
  InitDefaultsCMsgDOTAGuildCreateRequest();
  InitDefaultsCMsgDOTAGuildCreateResponse();
  InitDefaultsCMsgDOTAGuildSetAccountRoleRequest();
  InitDefaultsCMsgDOTAGuildSetAccountRoleResponse();
  InitDefaultsCMsgDOTAGuildInviteAccountRequest();
  InitDefaultsCMsgDOTAGuildInviteAccountResponse();
  InitDefaultsCMsgDOTAGuildCancelInviteRequest();
  InitDefaultsCMsgDOTAGuildCancelInviteResponse();
  InitDefaultsCMsgDOTAGuildUpdateDetailsRequest();
  InitDefaultsCMsgDOTAGuildUpdateDetailsResponse();
  InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyRequest();
  InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyResponse();
  InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyRequest();
  InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyResponse();
  InitDefaultsCMsgDOTAPartySetOpenGuildRequest();
  InitDefaultsCMsgDOTAPartySetOpenGuildResponse();
  InitDefaultsCMsgDOTAJoinOpenGuildPartyRequest();
  InitDefaultsCMsgDOTAJoinOpenGuildPartyResponse();
  InitDefaultsCMsgDOTAGuildOpenPartyRefresh_OpenParty();
  InitDefaultsCMsgDOTAGuildOpenPartyRefresh();
  InitDefaultsCMsgDOTARequestGuildData();
  InitDefaultsCMsgDOTAGuildData();
  InitDefaultsCMsgDOTAGuildInviteData();
  InitDefaultsCMsgDOTAGuildUpdateMessage();
  InitDefaultsCMsgDOTAGuildEditLogoRequest();
  InitDefaultsCMsgDOTAGuildEditLogoResponse();
  InitDefaultsCMsgDOTAPlayerReports_PlayerReport();
  InitDefaultsCMsgDOTAPlayerReports();
  InitDefaultsCMsgDOTAReportsRemainingRequest();
  InitDefaultsCMsgDOTAReportsRemainingResponse();
  InitDefaultsCMsgDOTASubmitPlayerReport();
  InitDefaultsCMsgDOTASubmitPlayerReportResponse();
  InitDefaultsCMsgDOTAReportCountsRequest();
  InitDefaultsCMsgDOTAReportCountsResponse();
  InitDefaultsCMsgDOTARequestPlayerResources();
  InitDefaultsCMsgDOTARequestPlayerResourcesResponse();
  InitDefaultsCMsgDOTAKickedFromMatchmakingQueue();
  InitDefaultsCMsgDOTARequestSaveGames();
  InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_Player();
  InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions();
  InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance();
  InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame();
  InitDefaultsCMsgDOTARequestSaveGamesResponse();
  InitDefaultsCMsgDOTAPlayerFailedToConnect();
  InitDefaultsCMsgGCToRelayConnect();
  InitDefaultsCMsgGCToRelayConnectResponse();
  InitDefaultsCMsgWatchGame();
  InitDefaultsCMsgCancelWatchGame();
  InitDefaultsCMsgWatchGameResponse();
  InitDefaultsCMsgGCBanStatusRequest();
  InitDefaultsCMsgGCBanStatusResponse();
  InitDefaultsCMsgDOTADailyStats();
  InitDefaultsCMsgDOTARequestDailyStats();
  InitDefaultsCMsgGCMatchDetailsRequest();
  InitDefaultsCMsgGCMatchDetailsResponse();
  InitDefaultsCMsgDOTAProfileRequest();
  InitDefaultsCMsgDOTAProfileResponse_PlayedHero();
  InitDefaultsCMsgDOTAProfileResponse_ShowcaseHero();
  InitDefaultsCMsgDOTAProfileResponse_LeaguePass();
  InitDefaultsCMsgDOTAProfileResponse_EventTicket();
  InitDefaultsCMsgDOTAProfileResponse();
  InitDefaultsCMsgDOTAClearNotifySuccessfulReport();
  InitDefaultsCItemDropEvent();
  InitDefaultsCXPGainEvent();
  InitDefaultsCLowPriPenalty();
  InitDefaultsCMsgDOTAWelcome();
  InitDefaultsCSODOTAGameHeroFavorites();
  InitDefaultsCMsgDOTAHeroFavoritesAdd();
  InitDefaultsCMsgDOTAHeroFavoritesRemove();
  InitDefaultsCDOTAOverview_PlayersByRegion();
  InitDefaultsCDOTAOverview_ServersByRegion_Host_Server();
  InitDefaultsCDOTAOverview_ServersByRegion_Host();
  InitDefaultsCDOTAOverview_ServersByRegion();
  InitDefaultsCDOTAOverview();
  InitDefaultsCMsgSetShowcaseHero();
  InitDefaultsCMsgSetFeaturedItems();
  InitDefaultsCMsgDOTAFeaturedItems();
  InitDefaultsCMsgDOTAFeaturedItemsRequest();
  InitDefaultsCMsgDOTAFeaturedItemsResponse();
  InitDefaultsCMsgRequestLeagueInfo();
  InitDefaultsCLeague();
  InitDefaultsCMsgResponseLeagueInfo();
  InitDefaultsCMsgTournamentItemEvent();
  InitDefaultsCMsgTournamentItemEventResponse();
  InitDefaultsCMsgDOTAMatchVotes_PlayerVote();
  InitDefaultsCMsgDOTAMatchVotes();
  InitDefaultsCMsgCastMatchVote();
  InitDefaultsCMsgRetrieveMatchVote();
  InitDefaultsCMsgMatchVoteResponse();
  InitDefaultsCMsgTeamFanfare();
  InitDefaultsCMsgResponseTeamFanfare();
  InitDefaultsCMsgSpectatorConnect();
  InitDefaultsCMsgSpectatorDisconnect();
  InitDefaultsCMsgGameServerUploadSaveGame();
  InitDefaultsCMsgGameServerSaveGameResult();
  InitDefaultsCMsgGameServerGetLoadGame();
  InitDefaultsCMsgGameServerGetLoadGameResult();
  InitDefaultsCMsgCheckSpectatorOnly();
  InitDefaultsCMsgCheckSpectatorOnlyResponse();
  InitDefaultsCMsgDOTAHallOfFame_FeaturedPlayer();
  InitDefaultsCMsgDOTAHallOfFame_FeaturedFarmer();
  InitDefaultsCMsgDOTAHallOfFame();
  InitDefaultsCMsgDOTAHallOfFameRequest();
  InitDefaultsCMsgDOTAHallOfFameResponse();
  InitDefaultsCMsgDOTAGenerateDiretidePrizeList();
  InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponse();
  InitDefaultsCMsgDOTARewardDiretidePrizes();
  InitDefaultsCMsgDOTADiretidePrizesRewardedResponse();
  InitDefaultsCMsgDOTADiretidePrizeResponse();
  InitDefaultsCMsgDOTAHalloweenHighScoreRequest();
  InitDefaultsCMsgDOTAHalloweenHighScoreResponse();
  InitDefaultsCMsgDOTANotifyResetKeybindings();
  InitDefaultsCMsgDOTAStorePromoPagesRequest();
  InitDefaultsCMsgDOTAStorePromoPagesResponse_PromoPage();
  InitDefaultsCMsgDOTAStorePromoPagesResponse();
  InitDefaultsCMsgDOTAGCToGCMatchCompleted();
  InitDefaultsCMsgGCToGCCheckLeaguePermission();
  InitDefaultsCMsgGCToGCCheckLeaguePermissionResponse();
  InitDefaultsCMsgLeagueScheduleBlockTeamInfo();
  InitDefaultsCMsgLeagueScheduleBlock();
  InitDefaultsCMsgDOTALeague();
  InitDefaultsCMsgDOTALeagueScheduleRequest();
  InitDefaultsCMsgDOTALeagueScheduleResponse();
  InitDefaultsCMsgDOTALeagueScheduleEdit();
  InitDefaultsCMsgDOTALeagueScheduleEditResponse();
  InitDefaultsCMsgDOTALeaguesInMonthRequest();
  InitDefaultsCMsgDOTALeaguesInMonthResponse();
  InitDefaultsCMsgDOTAMatchmakingStatsRequest();
  InitDefaultsCMsgDOTAMatchmakingStatsResponse();
  InitDefaultsCMsgDOTASetMatchHistoryAccess();
  InitDefaultsCMsgDOTASetMatchHistoryAccessResponse();
  InitDefaultsCMsgDOTANotifyMatchHistoryAccessChange();
  InitDefaultsCMsgUpgradeLeagueItem();
  InitDefaultsCMsgUpgradeLeagueItemResponse();
  InitDefaultsCMsgGCWatchDownloadedReplay();
  InitDefaultsCSODOTAMapLocationState();
  InitDefaultsCMsgSetMapLocationState();
  InitDefaultsCMsgSetMapLocationStateResponse();
  InitDefaultsCMsgResetMapLocations();
  InitDefaultsCMsgResetMapLocationsResponse();
  InitDefaultsCMsgRefreshPartnerAccountLink();
  InitDefaultsCMsgClientsRejoinChatChannels();
  InitDefaultsCMsgGCToGCGetUserChatInfo();
  InitDefaultsCMsgGCToGCGetUserChatInfoResponse();
  InitDefaultsCMsgGCToGCLeaveAllChatChannels();
  InitDefaultsCMsgGCToGCUpdateAccountChatBan();
  InitDefaultsCMsgGCToGCCanInviteUser();
  InitDefaultsCMsgGCToGCCanInviteUserResponse();
  InitDefaultsCMsgGCToGCGetUserRank();
  InitDefaultsCMsgGCToGCGetUserRankResponse();
  InitDefaultsCMsgGCToGCGetTeamRankChange();
  InitDefaultsCMsgGCToGCGetTeamRankChangeResponse();
  InitDefaultsCMsgGCToGCGetTeamRank();
  InitDefaultsCMsgGCToGCGetTeamRankResponse();
  InitDefaultsCMsgGCToGCUpdateTeamStats();
  InitDefaultsCMsgDOTAPassportVoteTeamGuess();
  InitDefaultsCMsgDOTAPassportVoteGenericSelection();
  InitDefaultsCMsgDOTAPassportStampedPlayer();
  InitDefaultsCMsgDOTAPassportVote();
  InitDefaultsCMsgPassportDataRequest();
  InitDefaultsCMsgPassportDataResponse();
  InitDefaultsCMsgPassportFeaturedMatchRequest();
  InitDefaultsCMsgPassportFeaturedMatchResponse();
  InitDefaultsCMsgGCToGCGetLeagueAdmin();
  InitDefaultsCMsgGCToGCGetLeagueAdminResponse();
  InitDefaultsCMsgRequestLeaguePrizePool();
  InitDefaultsCMsgRequestLeaguePrizePoolResponse();
  InitDefaultsCMsgGCToGCUpdateMatchmakingStats();
  InitDefaultsCMsgGCGetHeroStandings();
  InitDefaultsCMsgGCGetHeroStandingsResponse_Hero();
  InitDefaultsCMsgGCGetHeroStandingsResponse();
  InitDefaultsCMsgGCItemEditorReservationsRequest();
  InitDefaultsCMsgGCItemEditorReservation();
  InitDefaultsCMsgGCItemEditorReservationsResponse();
  InitDefaultsCMsgGCItemEditorReserveItemDef();
  InitDefaultsCMsgGCItemEditorReserveItemDefResponse();
  InitDefaultsCMsgGCItemEditorReleaseReservation();
  InitDefaultsCMsgGCItemEditorReleaseReservationResponse();
  InitDefaultsCMsgDOTARewardTutorialPrizes();
  InitDefaultsCMsgDOTALastHitChallengeHighScorePost();
  InitDefaultsCMsgDOTALastHitChallengeHighScoreRequest();
  InitDefaultsCMsgDOTALastHitChallengeHighScoreResponse();
}
}  // namespace protobuf_dota_5fgcmessages_2eproto
class CDOTALobbyMember;
class CDOTALobbyMemberDefaultTypeInternal;
extern CDOTALobbyMemberDefaultTypeInternal _CDOTALobbyMember_default_instance_;
class CDOTAOverview;
class CDOTAOverviewDefaultTypeInternal;
extern CDOTAOverviewDefaultTypeInternal _CDOTAOverview_default_instance_;
class CDOTAOverview_PlayersByRegion;
class CDOTAOverview_PlayersByRegionDefaultTypeInternal;
extern CDOTAOverview_PlayersByRegionDefaultTypeInternal _CDOTAOverview_PlayersByRegion_default_instance_;
class CDOTAOverview_ServersByRegion;
class CDOTAOverview_ServersByRegionDefaultTypeInternal;
extern CDOTAOverview_ServersByRegionDefaultTypeInternal _CDOTAOverview_ServersByRegion_default_instance_;
class CDOTAOverview_ServersByRegion_Host;
class CDOTAOverview_ServersByRegion_HostDefaultTypeInternal;
extern CDOTAOverview_ServersByRegion_HostDefaultTypeInternal _CDOTAOverview_ServersByRegion_Host_default_instance_;
class CDOTAOverview_ServersByRegion_Host_Server;
class CDOTAOverview_ServersByRegion_Host_ServerDefaultTypeInternal;
extern CDOTAOverview_ServersByRegion_Host_ServerDefaultTypeInternal _CDOTAOverview_ServersByRegion_Host_Server_default_instance_;
class CItemDropEvent;
class CItemDropEventDefaultTypeInternal;
extern CItemDropEventDefaultTypeInternal _CItemDropEvent_default_instance_;
class CLeague;
class CLeagueDefaultTypeInternal;
extern CLeagueDefaultTypeInternal _CLeague_default_instance_;
class CLobbyPendingPlayerReport;
class CLobbyPendingPlayerReportDefaultTypeInternal;
extern CLobbyPendingPlayerReportDefaultTypeInternal _CLobbyPendingPlayerReport_default_instance_;
class CLobbyTeamDetails;
class CLobbyTeamDetailsDefaultTypeInternal;
extern CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetails;
class CLobbyTimedRewardDetailsDefaultTypeInternal;
extern CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
class CLowPriPenalty;
class CLowPriPenaltyDefaultTypeInternal;
extern CLowPriPenaltyDefaultTypeInternal _CLowPriPenalty_default_instance_;
class CMatchAdditionalUnitInventory;
class CMatchAdditionalUnitInventoryDefaultTypeInternal;
extern CMatchAdditionalUnitInventoryDefaultTypeInternal _CMatchAdditionalUnitInventory_default_instance_;
class CMatchHeroSelectEvent;
class CMatchHeroSelectEventDefaultTypeInternal;
extern CMatchHeroSelectEventDefaultTypeInternal _CMatchHeroSelectEvent_default_instance_;
class CMatchPlayerAbilityUpgrade;
class CMatchPlayerAbilityUpgradeDefaultTypeInternal;
extern CMatchPlayerAbilityUpgradeDefaultTypeInternal _CMatchPlayerAbilityUpgrade_default_instance_;
class CMsgAbandonCurrentGame;
class CMsgAbandonCurrentGameDefaultTypeInternal;
extern CMsgAbandonCurrentGameDefaultTypeInternal _CMsgAbandonCurrentGame_default_instance_;
class CMsgApplyTeamToPracticeLobby;
class CMsgApplyTeamToPracticeLobbyDefaultTypeInternal;
extern CMsgApplyTeamToPracticeLobbyDefaultTypeInternal _CMsgApplyTeamToPracticeLobby_default_instance_;
class CMsgBalancedShuffleLobby;
class CMsgBalancedShuffleLobbyDefaultTypeInternal;
extern CMsgBalancedShuffleLobbyDefaultTypeInternal _CMsgBalancedShuffleLobby_default_instance_;
class CMsgBotGameCreate;
class CMsgBotGameCreateDefaultTypeInternal;
extern CMsgBotGameCreateDefaultTypeInternal _CMsgBotGameCreate_default_instance_;
class CMsgCancelWatchGame;
class CMsgCancelWatchGameDefaultTypeInternal;
extern CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
class CMsgCastMatchVote;
class CMsgCastMatchVoteDefaultTypeInternal;
extern CMsgCastMatchVoteDefaultTypeInternal _CMsgCastMatchVote_default_instance_;
class CMsgCheckSpectatorOnly;
class CMsgCheckSpectatorOnlyDefaultTypeInternal;
extern CMsgCheckSpectatorOnlyDefaultTypeInternal _CMsgCheckSpectatorOnly_default_instance_;
class CMsgCheckSpectatorOnlyResponse;
class CMsgCheckSpectatorOnlyResponseDefaultTypeInternal;
extern CMsgCheckSpectatorOnlyResponseDefaultTypeInternal _CMsgCheckSpectatorOnlyResponse_default_instance_;
class CMsgClientsRejoinChatChannels;
class CMsgClientsRejoinChatChannelsDefaultTypeInternal;
extern CMsgClientsRejoinChatChannelsDefaultTypeInternal _CMsgClientsRejoinChatChannels_default_instance_;
class CMsgConnectedPlayers;
class CMsgConnectedPlayersDefaultTypeInternal;
extern CMsgConnectedPlayersDefaultTypeInternal _CMsgConnectedPlayers_default_instance_;
class CMsgConnectedPlayers_Player;
class CMsgConnectedPlayers_PlayerDefaultTypeInternal;
extern CMsgConnectedPlayers_PlayerDefaultTypeInternal _CMsgConnectedPlayers_Player_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDO;
class CMsgDOTAAccountGuildMembershipsSDODefaultTypeInternal;
extern CMsgDOTAAccountGuildMembershipsSDODefaultTypeInternal _CMsgDOTAAccountGuildMembershipsSDO_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDO_Invitation;
class CMsgDOTAAccountGuildMembershipsSDO_InvitationDefaultTypeInternal;
extern CMsgDOTAAccountGuildMembershipsSDO_InvitationDefaultTypeInternal _CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDO_Membership;
class CMsgDOTAAccountGuildMembershipsSDO_MembershipDefaultTypeInternal;
extern CMsgDOTAAccountGuildMembershipsSDO_MembershipDefaultTypeInternal _CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_;
class CMsgDOTABetaParticipation;
class CMsgDOTABetaParticipationDefaultTypeInternal;
extern CMsgDOTABetaParticipationDefaultTypeInternal _CMsgDOTABetaParticipation_default_instance_;
class CMsgDOTABetaParticipationRequest;
class CMsgDOTABetaParticipationRequestDefaultTypeInternal;
extern CMsgDOTABetaParticipationRequestDefaultTypeInternal _CMsgDOTABetaParticipationRequest_default_instance_;
class CMsgDOTABroadcastNotification;
class CMsgDOTABroadcastNotificationDefaultTypeInternal;
extern CMsgDOTABroadcastNotificationDefaultTypeInternal _CMsgDOTABroadcastNotification_default_instance_;
class CMsgDOTAChatChannelFullUpdate;
class CMsgDOTAChatChannelFullUpdateDefaultTypeInternal;
extern CMsgDOTAChatChannelFullUpdateDefaultTypeInternal _CMsgDOTAChatChannelFullUpdate_default_instance_;
class CMsgDOTAChatMember;
class CMsgDOTAChatMemberDefaultTypeInternal;
extern CMsgDOTAChatMemberDefaultTypeInternal _CMsgDOTAChatMember_default_instance_;
class CMsgDOTAChatMessage;
class CMsgDOTAChatMessageDefaultTypeInternal;
extern CMsgDOTAChatMessageDefaultTypeInternal _CMsgDOTAChatMessage_default_instance_;
class CMsgDOTAClearNotifySuccessfulReport;
class CMsgDOTAClearNotifySuccessfulReportDefaultTypeInternal;
extern CMsgDOTAClearNotifySuccessfulReportDefaultTypeInternal _CMsgDOTAClearNotifySuccessfulReport_default_instance_;
class CMsgDOTAClearTournamentGame;
class CMsgDOTAClearTournamentGameDefaultTypeInternal;
extern CMsgDOTAClearTournamentGameDefaultTypeInternal _CMsgDOTAClearTournamentGame_default_instance_;
class CMsgDOTACreateTeam;
class CMsgDOTACreateTeamDefaultTypeInternal;
extern CMsgDOTACreateTeamDefaultTypeInternal _CMsgDOTACreateTeam_default_instance_;
class CMsgDOTACreateTeamResponse;
class CMsgDOTACreateTeamResponseDefaultTypeInternal;
extern CMsgDOTACreateTeamResponseDefaultTypeInternal _CMsgDOTACreateTeamResponse_default_instance_;
class CMsgDOTADailyStats;
class CMsgDOTADailyStatsDefaultTypeInternal;
extern CMsgDOTADailyStatsDefaultTypeInternal _CMsgDOTADailyStats_default_instance_;
class CMsgDOTADiretidePrizeResponse;
class CMsgDOTADiretidePrizeResponseDefaultTypeInternal;
extern CMsgDOTADiretidePrizeResponseDefaultTypeInternal _CMsgDOTADiretidePrizeResponse_default_instance_;
class CMsgDOTADiretidePrizesRewardedResponse;
class CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal;
extern CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal _CMsgDOTADiretidePrizesRewardedResponse_default_instance_;
class CMsgDOTADisbandTeam;
class CMsgDOTADisbandTeamDefaultTypeInternal;
extern CMsgDOTADisbandTeamDefaultTypeInternal _CMsgDOTADisbandTeam_default_instance_;
class CMsgDOTADisbandTeamResponse;
class CMsgDOTADisbandTeamResponseDefaultTypeInternal;
extern CMsgDOTADisbandTeamResponseDefaultTypeInternal _CMsgDOTADisbandTeamResponse_default_instance_;
class CMsgDOTAEditTeam;
class CMsgDOTAEditTeamDefaultTypeInternal;
extern CMsgDOTAEditTeamDefaultTypeInternal _CMsgDOTAEditTeam_default_instance_;
class CMsgDOTAEditTeamDetails;
class CMsgDOTAEditTeamDetailsDefaultTypeInternal;
extern CMsgDOTAEditTeamDetailsDefaultTypeInternal _CMsgDOTAEditTeamDetails_default_instance_;
class CMsgDOTAEditTeamDetailsResponse;
class CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal;
extern CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal _CMsgDOTAEditTeamDetailsResponse_default_instance_;
class CMsgDOTAEditTeamLogo;
class CMsgDOTAEditTeamLogoDefaultTypeInternal;
extern CMsgDOTAEditTeamLogoDefaultTypeInternal _CMsgDOTAEditTeamLogo_default_instance_;
class CMsgDOTAEditTeamLogoResponse;
class CMsgDOTAEditTeamLogoResponseDefaultTypeInternal;
extern CMsgDOTAEditTeamLogoResponseDefaultTypeInternal _CMsgDOTAEditTeamLogoResponse_default_instance_;
class CMsgDOTAFeaturedItems;
class CMsgDOTAFeaturedItemsDefaultTypeInternal;
extern CMsgDOTAFeaturedItemsDefaultTypeInternal _CMsgDOTAFeaturedItems_default_instance_;
class CMsgDOTAFeaturedItemsRequest;
class CMsgDOTAFeaturedItemsRequestDefaultTypeInternal;
extern CMsgDOTAFeaturedItemsRequestDefaultTypeInternal _CMsgDOTAFeaturedItemsRequest_default_instance_;
class CMsgDOTAFeaturedItemsResponse;
class CMsgDOTAFeaturedItemsResponseDefaultTypeInternal;
extern CMsgDOTAFeaturedItemsResponseDefaultTypeInternal _CMsgDOTAFeaturedItemsResponse_default_instance_;
class CMsgDOTAGCToGCDestroyOpenGuildPartyRequest;
class CMsgDOTAGCToGCDestroyOpenGuildPartyRequestDefaultTypeInternal;
extern CMsgDOTAGCToGCDestroyOpenGuildPartyRequestDefaultTypeInternal _CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_;
class CMsgDOTAGCToGCDestroyOpenGuildPartyResponse;
class CMsgDOTAGCToGCDestroyOpenGuildPartyResponseDefaultTypeInternal;
extern CMsgDOTAGCToGCDestroyOpenGuildPartyResponseDefaultTypeInternal _CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_;
class CMsgDOTAGCToGCMatchCompleted;
class CMsgDOTAGCToGCMatchCompletedDefaultTypeInternal;
extern CMsgDOTAGCToGCMatchCompletedDefaultTypeInternal _CMsgDOTAGCToGCMatchCompleted_default_instance_;
class CMsgDOTAGCToGCUpdateOpenGuildPartyRequest;
class CMsgDOTAGCToGCUpdateOpenGuildPartyRequestDefaultTypeInternal;
extern CMsgDOTAGCToGCUpdateOpenGuildPartyRequestDefaultTypeInternal _CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_;
class CMsgDOTAGCToGCUpdateOpenGuildPartyResponse;
class CMsgDOTAGCToGCUpdateOpenGuildPartyResponseDefaultTypeInternal;
extern CMsgDOTAGCToGCUpdateOpenGuildPartyResponseDefaultTypeInternal _CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_;
class CMsgDOTAGenerateDiretidePrizeList;
class CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal;
extern CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal _CMsgDOTAGenerateDiretidePrizeList_default_instance_;
class CMsgDOTAGenerateDiretidePrizeListResponse;
class CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal;
extern CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_;
class CMsgDOTAGenericResult;
class CMsgDOTAGenericResultDefaultTypeInternal;
extern CMsgDOTAGenericResultDefaultTypeInternal _CMsgDOTAGenericResult_default_instance_;
class CMsgDOTAGuildAuditSDO;
class CMsgDOTAGuildAuditSDODefaultTypeInternal;
extern CMsgDOTAGuildAuditSDODefaultTypeInternal _CMsgDOTAGuildAuditSDO_default_instance_;
class CMsgDOTAGuildAuditSDO_Entry;
class CMsgDOTAGuildAuditSDO_EntryDefaultTypeInternal;
extern CMsgDOTAGuildAuditSDO_EntryDefaultTypeInternal _CMsgDOTAGuildAuditSDO_Entry_default_instance_;
class CMsgDOTAGuildCancelInviteRequest;
class CMsgDOTAGuildCancelInviteRequestDefaultTypeInternal;
extern CMsgDOTAGuildCancelInviteRequestDefaultTypeInternal _CMsgDOTAGuildCancelInviteRequest_default_instance_;
class CMsgDOTAGuildCancelInviteResponse;
class CMsgDOTAGuildCancelInviteResponseDefaultTypeInternal;
extern CMsgDOTAGuildCancelInviteResponseDefaultTypeInternal _CMsgDOTAGuildCancelInviteResponse_default_instance_;
class CMsgDOTAGuildCreateRequest;
class CMsgDOTAGuildCreateRequestDefaultTypeInternal;
extern CMsgDOTAGuildCreateRequestDefaultTypeInternal _CMsgDOTAGuildCreateRequest_default_instance_;
class CMsgDOTAGuildCreateResponse;
class CMsgDOTAGuildCreateResponseDefaultTypeInternal;
extern CMsgDOTAGuildCreateResponseDefaultTypeInternal _CMsgDOTAGuildCreateResponse_default_instance_;
class CMsgDOTAGuildData;
class CMsgDOTAGuildDataDefaultTypeInternal;
extern CMsgDOTAGuildDataDefaultTypeInternal _CMsgDOTAGuildData_default_instance_;
class CMsgDOTAGuildEditLogoRequest;
class CMsgDOTAGuildEditLogoRequestDefaultTypeInternal;
extern CMsgDOTAGuildEditLogoRequestDefaultTypeInternal _CMsgDOTAGuildEditLogoRequest_default_instance_;
class CMsgDOTAGuildEditLogoResponse;
class CMsgDOTAGuildEditLogoResponseDefaultTypeInternal;
extern CMsgDOTAGuildEditLogoResponseDefaultTypeInternal _CMsgDOTAGuildEditLogoResponse_default_instance_;
class CMsgDOTAGuildInviteAccountRequest;
class CMsgDOTAGuildInviteAccountRequestDefaultTypeInternal;
extern CMsgDOTAGuildInviteAccountRequestDefaultTypeInternal _CMsgDOTAGuildInviteAccountRequest_default_instance_;
class CMsgDOTAGuildInviteAccountResponse;
class CMsgDOTAGuildInviteAccountResponseDefaultTypeInternal;
extern CMsgDOTAGuildInviteAccountResponseDefaultTypeInternal _CMsgDOTAGuildInviteAccountResponse_default_instance_;
class CMsgDOTAGuildInviteData;
class CMsgDOTAGuildInviteDataDefaultTypeInternal;
extern CMsgDOTAGuildInviteDataDefaultTypeInternal _CMsgDOTAGuildInviteData_default_instance_;
class CMsgDOTAGuildOpenPartyRefresh;
class CMsgDOTAGuildOpenPartyRefreshDefaultTypeInternal;
extern CMsgDOTAGuildOpenPartyRefreshDefaultTypeInternal _CMsgDOTAGuildOpenPartyRefresh_default_instance_;
class CMsgDOTAGuildOpenPartyRefresh_OpenParty;
class CMsgDOTAGuildOpenPartyRefresh_OpenPartyDefaultTypeInternal;
extern CMsgDOTAGuildOpenPartyRefresh_OpenPartyDefaultTypeInternal _CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_;
class CMsgDOTAGuildSDO;
class CMsgDOTAGuildSDODefaultTypeInternal;
extern CMsgDOTAGuildSDODefaultTypeInternal _CMsgDOTAGuildSDO_default_instance_;
class CMsgDOTAGuildSDO_Invitation;
class CMsgDOTAGuildSDO_InvitationDefaultTypeInternal;
extern CMsgDOTAGuildSDO_InvitationDefaultTypeInternal _CMsgDOTAGuildSDO_Invitation_default_instance_;
class CMsgDOTAGuildSDO_Member;
class CMsgDOTAGuildSDO_MemberDefaultTypeInternal;
extern CMsgDOTAGuildSDO_MemberDefaultTypeInternal _CMsgDOTAGuildSDO_Member_default_instance_;
class CMsgDOTAGuildSetAccountRoleRequest;
class CMsgDOTAGuildSetAccountRoleRequestDefaultTypeInternal;
extern CMsgDOTAGuildSetAccountRoleRequestDefaultTypeInternal _CMsgDOTAGuildSetAccountRoleRequest_default_instance_;
class CMsgDOTAGuildSetAccountRoleResponse;
class CMsgDOTAGuildSetAccountRoleResponseDefaultTypeInternal;
extern CMsgDOTAGuildSetAccountRoleResponseDefaultTypeInternal _CMsgDOTAGuildSetAccountRoleResponse_default_instance_;
class CMsgDOTAGuildUpdateDetailsRequest;
class CMsgDOTAGuildUpdateDetailsRequestDefaultTypeInternal;
extern CMsgDOTAGuildUpdateDetailsRequestDefaultTypeInternal _CMsgDOTAGuildUpdateDetailsRequest_default_instance_;
class CMsgDOTAGuildUpdateDetailsResponse;
class CMsgDOTAGuildUpdateDetailsResponseDefaultTypeInternal;
extern CMsgDOTAGuildUpdateDetailsResponseDefaultTypeInternal _CMsgDOTAGuildUpdateDetailsResponse_default_instance_;
class CMsgDOTAGuildUpdateMessage;
class CMsgDOTAGuildUpdateMessageDefaultTypeInternal;
extern CMsgDOTAGuildUpdateMessageDefaultTypeInternal _CMsgDOTAGuildUpdateMessage_default_instance_;
class CMsgDOTAHallOfFame;
class CMsgDOTAHallOfFameDefaultTypeInternal;
extern CMsgDOTAHallOfFameDefaultTypeInternal _CMsgDOTAHallOfFame_default_instance_;
class CMsgDOTAHallOfFameRequest;
class CMsgDOTAHallOfFameRequestDefaultTypeInternal;
extern CMsgDOTAHallOfFameRequestDefaultTypeInternal _CMsgDOTAHallOfFameRequest_default_instance_;
class CMsgDOTAHallOfFameResponse;
class CMsgDOTAHallOfFameResponseDefaultTypeInternal;
extern CMsgDOTAHallOfFameResponseDefaultTypeInternal _CMsgDOTAHallOfFameResponse_default_instance_;
class CMsgDOTAHallOfFame_FeaturedFarmer;
class CMsgDOTAHallOfFame_FeaturedFarmerDefaultTypeInternal;
extern CMsgDOTAHallOfFame_FeaturedFarmerDefaultTypeInternal _CMsgDOTAHallOfFame_FeaturedFarmer_default_instance_;
class CMsgDOTAHallOfFame_FeaturedPlayer;
class CMsgDOTAHallOfFame_FeaturedPlayerDefaultTypeInternal;
extern CMsgDOTAHallOfFame_FeaturedPlayerDefaultTypeInternal _CMsgDOTAHallOfFame_FeaturedPlayer_default_instance_;
class CMsgDOTAHalloweenHighScoreRequest;
class CMsgDOTAHalloweenHighScoreRequestDefaultTypeInternal;
extern CMsgDOTAHalloweenHighScoreRequestDefaultTypeInternal _CMsgDOTAHalloweenHighScoreRequest_default_instance_;
class CMsgDOTAHalloweenHighScoreResponse;
class CMsgDOTAHalloweenHighScoreResponseDefaultTypeInternal;
extern CMsgDOTAHalloweenHighScoreResponseDefaultTypeInternal _CMsgDOTAHalloweenHighScoreResponse_default_instance_;
class CMsgDOTAHeroFavoritesAdd;
class CMsgDOTAHeroFavoritesAddDefaultTypeInternal;
extern CMsgDOTAHeroFavoritesAddDefaultTypeInternal _CMsgDOTAHeroFavoritesAdd_default_instance_;
class CMsgDOTAHeroFavoritesRemove;
class CMsgDOTAHeroFavoritesRemoveDefaultTypeInternal;
extern CMsgDOTAHeroFavoritesRemoveDefaultTypeInternal _CMsgDOTAHeroFavoritesRemove_default_instance_;
class CMsgDOTAJoinChatChannel;
class CMsgDOTAJoinChatChannelDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelDefaultTypeInternal _CMsgDOTAJoinChatChannel_default_instance_;
class CMsgDOTAJoinChatChannelResponse;
class CMsgDOTAJoinChatChannelResponseDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelResponseDefaultTypeInternal _CMsgDOTAJoinChatChannelResponse_default_instance_;
class CMsgDOTAJoinOpenGuildPartyRequest;
class CMsgDOTAJoinOpenGuildPartyRequestDefaultTypeInternal;
extern CMsgDOTAJoinOpenGuildPartyRequestDefaultTypeInternal _CMsgDOTAJoinOpenGuildPartyRequest_default_instance_;
class CMsgDOTAJoinOpenGuildPartyResponse;
class CMsgDOTAJoinOpenGuildPartyResponseDefaultTypeInternal;
extern CMsgDOTAJoinOpenGuildPartyResponseDefaultTypeInternal _CMsgDOTAJoinOpenGuildPartyResponse_default_instance_;
class CMsgDOTAKickTeamMember;
class CMsgDOTAKickTeamMemberDefaultTypeInternal;
extern CMsgDOTAKickTeamMemberDefaultTypeInternal _CMsgDOTAKickTeamMember_default_instance_;
class CMsgDOTAKickTeamMemberResponse;
class CMsgDOTAKickTeamMemberResponseDefaultTypeInternal;
extern CMsgDOTAKickTeamMemberResponseDefaultTypeInternal _CMsgDOTAKickTeamMemberResponse_default_instance_;
class CMsgDOTAKickedFromMatchmakingQueue;
class CMsgDOTAKickedFromMatchmakingQueueDefaultTypeInternal;
extern CMsgDOTAKickedFromMatchmakingQueueDefaultTypeInternal _CMsgDOTAKickedFromMatchmakingQueue_default_instance_;
class CMsgDOTALastHitChallengeHighScorePost;
class CMsgDOTALastHitChallengeHighScorePostDefaultTypeInternal;
extern CMsgDOTALastHitChallengeHighScorePostDefaultTypeInternal _CMsgDOTALastHitChallengeHighScorePost_default_instance_;
class CMsgDOTALastHitChallengeHighScoreRequest;
class CMsgDOTALastHitChallengeHighScoreRequestDefaultTypeInternal;
extern CMsgDOTALastHitChallengeHighScoreRequestDefaultTypeInternal _CMsgDOTALastHitChallengeHighScoreRequest_default_instance_;
class CMsgDOTALastHitChallengeHighScoreResponse;
class CMsgDOTALastHitChallengeHighScoreResponseDefaultTypeInternal;
extern CMsgDOTALastHitChallengeHighScoreResponseDefaultTypeInternal _CMsgDOTALastHitChallengeHighScoreResponse_default_instance_;
class CMsgDOTALeague;
class CMsgDOTALeagueDefaultTypeInternal;
extern CMsgDOTALeagueDefaultTypeInternal _CMsgDOTALeague_default_instance_;
class CMsgDOTALeagueScheduleEdit;
class CMsgDOTALeagueScheduleEditDefaultTypeInternal;
extern CMsgDOTALeagueScheduleEditDefaultTypeInternal _CMsgDOTALeagueScheduleEdit_default_instance_;
class CMsgDOTALeagueScheduleEditResponse;
class CMsgDOTALeagueScheduleEditResponseDefaultTypeInternal;
extern CMsgDOTALeagueScheduleEditResponseDefaultTypeInternal _CMsgDOTALeagueScheduleEditResponse_default_instance_;
class CMsgDOTALeagueScheduleRequest;
class CMsgDOTALeagueScheduleRequestDefaultTypeInternal;
extern CMsgDOTALeagueScheduleRequestDefaultTypeInternal _CMsgDOTALeagueScheduleRequest_default_instance_;
class CMsgDOTALeagueScheduleResponse;
class CMsgDOTALeagueScheduleResponseDefaultTypeInternal;
extern CMsgDOTALeagueScheduleResponseDefaultTypeInternal _CMsgDOTALeagueScheduleResponse_default_instance_;
class CMsgDOTALeaguesInMonthRequest;
class CMsgDOTALeaguesInMonthRequestDefaultTypeInternal;
extern CMsgDOTALeaguesInMonthRequestDefaultTypeInternal _CMsgDOTALeaguesInMonthRequest_default_instance_;
class CMsgDOTALeaguesInMonthResponse;
class CMsgDOTALeaguesInMonthResponseDefaultTypeInternal;
extern CMsgDOTALeaguesInMonthResponseDefaultTypeInternal _CMsgDOTALeaguesInMonthResponse_default_instance_;
class CMsgDOTALeaveChatChannel;
class CMsgDOTALeaveChatChannelDefaultTypeInternal;
extern CMsgDOTALeaveChatChannelDefaultTypeInternal _CMsgDOTALeaveChatChannel_default_instance_;
class CMsgDOTALeaveTeam;
class CMsgDOTALeaveTeamDefaultTypeInternal;
extern CMsgDOTALeaveTeamDefaultTypeInternal _CMsgDOTALeaveTeam_default_instance_;
class CMsgDOTALeaveTeamResponse;
class CMsgDOTALeaveTeamResponseDefaultTypeInternal;
extern CMsgDOTALeaveTeamResponseDefaultTypeInternal _CMsgDOTALeaveTeamResponse_default_instance_;
class CMsgDOTALiveScoreboardUpdate;
class CMsgDOTALiveScoreboardUpdateDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdateDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team;
class CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_Player;
class CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
class CMsgDOTAMatch;
class CMsgDOTAMatchDefaultTypeInternal;
extern CMsgDOTAMatchDefaultTypeInternal _CMsgDOTAMatch_default_instance_;
class CMsgDOTAMatchHistoryFilter;
class CMsgDOTAMatchHistoryFilterDefaultTypeInternal;
extern CMsgDOTAMatchHistoryFilterDefaultTypeInternal _CMsgDOTAMatchHistoryFilter_default_instance_;
class CMsgDOTAMatchVotes;
class CMsgDOTAMatchVotesDefaultTypeInternal;
extern CMsgDOTAMatchVotesDefaultTypeInternal _CMsgDOTAMatchVotes_default_instance_;
class CMsgDOTAMatchVotes_PlayerVote;
class CMsgDOTAMatchVotes_PlayerVoteDefaultTypeInternal;
extern CMsgDOTAMatchVotes_PlayerVoteDefaultTypeInternal _CMsgDOTAMatchVotes_PlayerVote_default_instance_;
class CMsgDOTAMatch_Player;
class CMsgDOTAMatch_PlayerDefaultTypeInternal;
extern CMsgDOTAMatch_PlayerDefaultTypeInternal _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatchmakingStatsRequest;
class CMsgDOTAMatchmakingStatsRequestDefaultTypeInternal;
extern CMsgDOTAMatchmakingStatsRequestDefaultTypeInternal _CMsgDOTAMatchmakingStatsRequest_default_instance_;
class CMsgDOTAMatchmakingStatsResponse;
class CMsgDOTAMatchmakingStatsResponseDefaultTypeInternal;
extern CMsgDOTAMatchmakingStatsResponseDefaultTypeInternal _CMsgDOTAMatchmakingStatsResponse_default_instance_;
class CMsgDOTANotifyMatchHistoryAccessChange;
class CMsgDOTANotifyMatchHistoryAccessChangeDefaultTypeInternal;
extern CMsgDOTANotifyMatchHistoryAccessChangeDefaultTypeInternal _CMsgDOTANotifyMatchHistoryAccessChange_default_instance_;
class CMsgDOTANotifyResetKeybindings;
class CMsgDOTANotifyResetKeybindingsDefaultTypeInternal;
extern CMsgDOTANotifyResetKeybindingsDefaultTypeInternal _CMsgDOTANotifyResetKeybindings_default_instance_;
class CMsgDOTAOtherJoinedChatChannel;
class CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal _CMsgDOTAOtherJoinedChatChannel_default_instance_;
class CMsgDOTAOtherLeftChatChannel;
class CMsgDOTAOtherLeftChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherLeftChatChannelDefaultTypeInternal _CMsgDOTAOtherLeftChatChannel_default_instance_;
class CMsgDOTAPartySetOpenGuildRequest;
class CMsgDOTAPartySetOpenGuildRequestDefaultTypeInternal;
extern CMsgDOTAPartySetOpenGuildRequestDefaultTypeInternal _CMsgDOTAPartySetOpenGuildRequest_default_instance_;
class CMsgDOTAPartySetOpenGuildResponse;
class CMsgDOTAPartySetOpenGuildResponseDefaultTypeInternal;
extern CMsgDOTAPartySetOpenGuildResponseDefaultTypeInternal _CMsgDOTAPartySetOpenGuildResponse_default_instance_;
class CMsgDOTAPassportStampedPlayer;
class CMsgDOTAPassportStampedPlayerDefaultTypeInternal;
extern CMsgDOTAPassportStampedPlayerDefaultTypeInternal _CMsgDOTAPassportStampedPlayer_default_instance_;
class CMsgDOTAPassportVote;
class CMsgDOTAPassportVoteDefaultTypeInternal;
extern CMsgDOTAPassportVoteDefaultTypeInternal _CMsgDOTAPassportVote_default_instance_;
class CMsgDOTAPassportVoteGenericSelection;
class CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal;
extern CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal _CMsgDOTAPassportVoteGenericSelection_default_instance_;
class CMsgDOTAPassportVoteTeamGuess;
class CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal;
extern CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal _CMsgDOTAPassportVoteTeamGuess_default_instance_;
class CMsgDOTAPlayerFailedToConnect;
class CMsgDOTAPlayerFailedToConnectDefaultTypeInternal;
extern CMsgDOTAPlayerFailedToConnectDefaultTypeInternal _CMsgDOTAPlayerFailedToConnect_default_instance_;
class CMsgDOTAPlayerMatchHistory;
class CMsgDOTAPlayerMatchHistoryDefaultTypeInternal;
extern CMsgDOTAPlayerMatchHistoryDefaultTypeInternal _CMsgDOTAPlayerMatchHistory_default_instance_;
class CMsgDOTAPlayerReports;
class CMsgDOTAPlayerReportsDefaultTypeInternal;
extern CMsgDOTAPlayerReportsDefaultTypeInternal _CMsgDOTAPlayerReports_default_instance_;
class CMsgDOTAPlayerReports_PlayerReport;
class CMsgDOTAPlayerReports_PlayerReportDefaultTypeInternal;
extern CMsgDOTAPlayerReports_PlayerReportDefaultTypeInternal _CMsgDOTAPlayerReports_PlayerReport_default_instance_;
class CMsgDOTAPopup;
class CMsgDOTAPopupDefaultTypeInternal;
extern CMsgDOTAPopupDefaultTypeInternal _CMsgDOTAPopup_default_instance_;
class CMsgDOTAProTeamListRequest;
class CMsgDOTAProTeamListRequestDefaultTypeInternal;
extern CMsgDOTAProTeamListRequestDefaultTypeInternal _CMsgDOTAProTeamListRequest_default_instance_;
class CMsgDOTAProTeamListResponse;
class CMsgDOTAProTeamListResponseDefaultTypeInternal;
extern CMsgDOTAProTeamListResponseDefaultTypeInternal _CMsgDOTAProTeamListResponse_default_instance_;
class CMsgDOTAProTeamListResponse_TeamEntry;
class CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal;
extern CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
class CMsgDOTAProfileRequest;
class CMsgDOTAProfileRequestDefaultTypeInternal;
extern CMsgDOTAProfileRequestDefaultTypeInternal _CMsgDOTAProfileRequest_default_instance_;
class CMsgDOTAProfileResponse;
class CMsgDOTAProfileResponseDefaultTypeInternal;
extern CMsgDOTAProfileResponseDefaultTypeInternal _CMsgDOTAProfileResponse_default_instance_;
class CMsgDOTAProfileResponse_EventTicket;
class CMsgDOTAProfileResponse_EventTicketDefaultTypeInternal;
extern CMsgDOTAProfileResponse_EventTicketDefaultTypeInternal _CMsgDOTAProfileResponse_EventTicket_default_instance_;
class CMsgDOTAProfileResponse_LeaguePass;
class CMsgDOTAProfileResponse_LeaguePassDefaultTypeInternal;
extern CMsgDOTAProfileResponse_LeaguePassDefaultTypeInternal _CMsgDOTAProfileResponse_LeaguePass_default_instance_;
class CMsgDOTAProfileResponse_PlayedHero;
class CMsgDOTAProfileResponse_PlayedHeroDefaultTypeInternal;
extern CMsgDOTAProfileResponse_PlayedHeroDefaultTypeInternal _CMsgDOTAProfileResponse_PlayedHero_default_instance_;
class CMsgDOTAProfileResponse_ShowcaseHero;
class CMsgDOTAProfileResponse_ShowcaseHeroDefaultTypeInternal;
extern CMsgDOTAProfileResponse_ShowcaseHeroDefaultTypeInternal _CMsgDOTAProfileResponse_ShowcaseHero_default_instance_;
class CMsgDOTAReportCountsRequest;
class CMsgDOTAReportCountsRequestDefaultTypeInternal;
extern CMsgDOTAReportCountsRequestDefaultTypeInternal _CMsgDOTAReportCountsRequest_default_instance_;
class CMsgDOTAReportCountsResponse;
class CMsgDOTAReportCountsResponseDefaultTypeInternal;
extern CMsgDOTAReportCountsResponseDefaultTypeInternal _CMsgDOTAReportCountsResponse_default_instance_;
class CMsgDOTAReportsRemainingRequest;
class CMsgDOTAReportsRemainingRequestDefaultTypeInternal;
extern CMsgDOTAReportsRemainingRequestDefaultTypeInternal _CMsgDOTAReportsRemainingRequest_default_instance_;
class CMsgDOTAReportsRemainingResponse;
class CMsgDOTAReportsRemainingResponseDefaultTypeInternal;
extern CMsgDOTAReportsRemainingResponseDefaultTypeInternal _CMsgDOTAReportsRemainingResponse_default_instance_;
class CMsgDOTARequestChatChannelList;
class CMsgDOTARequestChatChannelListDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListDefaultTypeInternal _CMsgDOTARequestChatChannelList_default_instance_;
class CMsgDOTARequestChatChannelListResponse;
class CMsgDOTARequestChatChannelListResponseDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponseDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_default_instance_;
class CMsgDOTARequestChatChannelListResponse_ChatChannel;
class CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgDOTARequestDailyStats;
class CMsgDOTARequestDailyStatsDefaultTypeInternal;
extern CMsgDOTARequestDailyStatsDefaultTypeInternal _CMsgDOTARequestDailyStats_default_instance_;
class CMsgDOTARequestDefaultChatChannel;
class CMsgDOTARequestDefaultChatChannelDefaultTypeInternal;
extern CMsgDOTARequestDefaultChatChannelDefaultTypeInternal _CMsgDOTARequestDefaultChatChannel_default_instance_;
class CMsgDOTARequestDefaultChatChannelResponse;
class CMsgDOTARequestDefaultChatChannelResponseDefaultTypeInternal;
extern CMsgDOTARequestDefaultChatChannelResponseDefaultTypeInternal _CMsgDOTARequestDefaultChatChannelResponse_default_instance_;
class CMsgDOTARequestGuildData;
class CMsgDOTARequestGuildDataDefaultTypeInternal;
extern CMsgDOTARequestGuildDataDefaultTypeInternal _CMsgDOTARequestGuildData_default_instance_;
class CMsgDOTARequestMatches;
class CMsgDOTARequestMatchesDefaultTypeInternal;
extern CMsgDOTARequestMatchesDefaultTypeInternal _CMsgDOTARequestMatches_default_instance_;
class CMsgDOTARequestMatchesResponse;
class CMsgDOTARequestMatchesResponseDefaultTypeInternal;
extern CMsgDOTARequestMatchesResponseDefaultTypeInternal _CMsgDOTARequestMatchesResponse_default_instance_;
class CMsgDOTARequestPlayerResources;
class CMsgDOTARequestPlayerResourcesDefaultTypeInternal;
extern CMsgDOTARequestPlayerResourcesDefaultTypeInternal _CMsgDOTARequestPlayerResources_default_instance_;
class CMsgDOTARequestPlayerResourcesResponse;
class CMsgDOTARequestPlayerResourcesResponseDefaultTypeInternal;
extern CMsgDOTARequestPlayerResourcesResponseDefaultTypeInternal _CMsgDOTARequestPlayerResourcesResponse_default_instance_;
class CMsgDOTARequestSaveGames;
class CMsgDOTARequestSaveGamesDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesDefaultTypeInternal _CMsgDOTARequestSaveGames_default_instance_;
class CMsgDOTARequestSaveGamesResponse;
class CMsgDOTARequestSaveGamesResponseDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesResponseDefaultTypeInternal _CMsgDOTARequestSaveGamesResponse_default_instance_;
class CMsgDOTARequestSaveGamesResponse_SaveGame;
class CMsgDOTARequestSaveGamesResponse_SaveGameDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesResponse_SaveGameDefaultTypeInternal _CMsgDOTARequestSaveGamesResponse_SaveGame_default_instance_;
class CMsgDOTARequestSaveGamesResponse_SaveGame_Player;
class CMsgDOTARequestSaveGamesResponse_SaveGame_PlayerDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesResponse_SaveGame_PlayerDefaultTypeInternal _CMsgDOTARequestSaveGamesResponse_SaveGame_Player_default_instance_;
class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance;
class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceDefaultTypeInternal _CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_default_instance_;
class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions;
class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal;
extern CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal _CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_default_instance_;
class CMsgDOTARequestTeamData;
class CMsgDOTARequestTeamDataDefaultTypeInternal;
extern CMsgDOTARequestTeamDataDefaultTypeInternal _CMsgDOTARequestTeamData_default_instance_;
class CMsgDOTARequestTeamDataResponse;
class CMsgDOTARequestTeamDataResponseDefaultTypeInternal;
extern CMsgDOTARequestTeamDataResponseDefaultTypeInternal _CMsgDOTARequestTeamDataResponse_default_instance_;
class CMsgDOTARewardDiretidePrizes;
class CMsgDOTARewardDiretidePrizesDefaultTypeInternal;
extern CMsgDOTARewardDiretidePrizesDefaultTypeInternal _CMsgDOTARewardDiretidePrizes_default_instance_;
class CMsgDOTARewardTutorialPrizes;
class CMsgDOTARewardTutorialPrizesDefaultTypeInternal;
extern CMsgDOTARewardTutorialPrizesDefaultTypeInternal _CMsgDOTARewardTutorialPrizes_default_instance_;
class CMsgDOTASetChatChannelVerbosity;
class CMsgDOTASetChatChannelVerbosityDefaultTypeInternal;
extern CMsgDOTASetChatChannelVerbosityDefaultTypeInternal _CMsgDOTASetChatChannelVerbosity_default_instance_;
class CMsgDOTASetChatChannelVerbosity_ChannelVerbosity;
class CMsgDOTASetChatChannelVerbosity_ChannelVerbosityDefaultTypeInternal;
extern CMsgDOTASetChatChannelVerbosity_ChannelVerbosityDefaultTypeInternal _CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_default_instance_;
class CMsgDOTASetMatchHistoryAccess;
class CMsgDOTASetMatchHistoryAccessDefaultTypeInternal;
extern CMsgDOTASetMatchHistoryAccessDefaultTypeInternal _CMsgDOTASetMatchHistoryAccess_default_instance_;
class CMsgDOTASetMatchHistoryAccessResponse;
class CMsgDOTASetMatchHistoryAccessResponseDefaultTypeInternal;
extern CMsgDOTASetMatchHistoryAccessResponseDefaultTypeInternal _CMsgDOTASetMatchHistoryAccessResponse_default_instance_;
class CMsgDOTAStorePromoPagesRequest;
class CMsgDOTAStorePromoPagesRequestDefaultTypeInternal;
extern CMsgDOTAStorePromoPagesRequestDefaultTypeInternal _CMsgDOTAStorePromoPagesRequest_default_instance_;
class CMsgDOTAStorePromoPagesResponse;
class CMsgDOTAStorePromoPagesResponseDefaultTypeInternal;
extern CMsgDOTAStorePromoPagesResponseDefaultTypeInternal _CMsgDOTAStorePromoPagesResponse_default_instance_;
class CMsgDOTAStorePromoPagesResponse_PromoPage;
class CMsgDOTAStorePromoPagesResponse_PromoPageDefaultTypeInternal;
extern CMsgDOTAStorePromoPagesResponse_PromoPageDefaultTypeInternal _CMsgDOTAStorePromoPagesResponse_PromoPage_default_instance_;
class CMsgDOTASubmitPlayerReport;
class CMsgDOTASubmitPlayerReportDefaultTypeInternal;
extern CMsgDOTASubmitPlayerReportDefaultTypeInternal _CMsgDOTASubmitPlayerReport_default_instance_;
class CMsgDOTASubmitPlayerReportResponse;
class CMsgDOTASubmitPlayerReportResponseDefaultTypeInternal;
extern CMsgDOTASubmitPlayerReportResponseDefaultTypeInternal _CMsgDOTASubmitPlayerReportResponse_default_instance_;
class CMsgDOTATeam;
class CMsgDOTATeamDefaultTypeInternal;
extern CMsgDOTATeamDefaultTypeInternal _CMsgDOTATeam_default_instance_;
class CMsgDOTATeamAdminSDO;
class CMsgDOTATeamAdminSDODefaultTypeInternal;
extern CMsgDOTATeamAdminSDODefaultTypeInternal _CMsgDOTATeamAdminSDO_default_instance_;
class CMsgDOTATeamData;
class CMsgDOTATeamDataDefaultTypeInternal;
extern CMsgDOTATeamDataDefaultTypeInternal _CMsgDOTATeamData_default_instance_;
class CMsgDOTATeamIDByNameRequest;
class CMsgDOTATeamIDByNameRequestDefaultTypeInternal;
extern CMsgDOTATeamIDByNameRequestDefaultTypeInternal _CMsgDOTATeamIDByNameRequest_default_instance_;
class CMsgDOTATeamIDByNameResponse;
class CMsgDOTATeamIDByNameResponseDefaultTypeInternal;
extern CMsgDOTATeamIDByNameResponseDefaultTypeInternal _CMsgDOTATeamIDByNameResponse_default_instance_;
class CMsgDOTATeamInvite_GCImmediateResponseToInviter;
class CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCRequestToInvitee;
class CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInvitee;
class CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviter;
class CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_InviteeResponseToGC;
class CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal;
extern CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
class CMsgDOTATeamInvite_InviterToGC;
class CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal;
extern CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviterToGC_default_instance_;
class CMsgDOTATeamMember;
class CMsgDOTATeamMemberDefaultTypeInternal;
extern CMsgDOTATeamMemberDefaultTypeInternal _CMsgDOTATeamMember_default_instance_;
class CMsgDOTATeamMemberProfileRequest;
class CMsgDOTATeamMemberProfileRequestDefaultTypeInternal;
extern CMsgDOTATeamMemberProfileRequestDefaultTypeInternal _CMsgDOTATeamMemberProfileRequest_default_instance_;
class CMsgDOTATeamMemberSDO;
class CMsgDOTATeamMemberSDODefaultTypeInternal;
extern CMsgDOTATeamMemberSDODefaultTypeInternal _CMsgDOTATeamMemberSDO_default_instance_;
class CMsgDOTATeamOnProfile;
class CMsgDOTATeamOnProfileDefaultTypeInternal;
extern CMsgDOTATeamOnProfileDefaultTypeInternal _CMsgDOTATeamOnProfile_default_instance_;
class CMsgDOTATeamProfileRequest;
class CMsgDOTATeamProfileRequestDefaultTypeInternal;
extern CMsgDOTATeamProfileRequestDefaultTypeInternal _CMsgDOTATeamProfileRequest_default_instance_;
class CMsgDOTATeamProfileResponse;
class CMsgDOTATeamProfileResponseDefaultTypeInternal;
extern CMsgDOTATeamProfileResponseDefaultTypeInternal _CMsgDOTATeamProfileResponse_default_instance_;
class CMsgDOTATournament;
class CMsgDOTATournamentDefaultTypeInternal;
extern CMsgDOTATournamentDefaultTypeInternal _CMsgDOTATournament_default_instance_;
class CMsgDOTATournamentRequest;
class CMsgDOTATournamentRequestDefaultTypeInternal;
extern CMsgDOTATournamentRequestDefaultTypeInternal _CMsgDOTATournamentRequest_default_instance_;
class CMsgDOTATournamentResponse;
class CMsgDOTATournamentResponseDefaultTypeInternal;
extern CMsgDOTATournamentResponseDefaultTypeInternal _CMsgDOTATournamentResponse_default_instance_;
class CMsgDOTATournament_Game;
class CMsgDOTATournament_GameDefaultTypeInternal;
extern CMsgDOTATournament_GameDefaultTypeInternal _CMsgDOTATournament_Game_default_instance_;
class CMsgDOTATournament_Game_ReplayURL;
class CMsgDOTATournament_Game_ReplayURLDefaultTypeInternal;
extern CMsgDOTATournament_Game_ReplayURLDefaultTypeInternal _CMsgDOTATournament_Game_ReplayURL_default_instance_;
class CMsgDOTATournament_Team;
class CMsgDOTATournament_TeamDefaultTypeInternal;
extern CMsgDOTATournament_TeamDefaultTypeInternal _CMsgDOTATournament_Team_default_instance_;
class CMsgDOTATransferTeamAdmin;
class CMsgDOTATransferTeamAdminDefaultTypeInternal;
extern CMsgDOTATransferTeamAdminDefaultTypeInternal _CMsgDOTATransferTeamAdmin_default_instance_;
class CMsgDOTATransferTeamAdminResponse;
class CMsgDOTATransferTeamAdminResponseDefaultTypeInternal;
extern CMsgDOTATransferTeamAdminResponseDefaultTypeInternal _CMsgDOTATransferTeamAdminResponse_default_instance_;
class CMsgDOTAWelcome;
class CMsgDOTAWelcomeDefaultTypeInternal;
extern CMsgDOTAWelcomeDefaultTypeInternal _CMsgDOTAWelcome_default_instance_;
class CMsgDismissLootGreevil;
class CMsgDismissLootGreevilDefaultTypeInternal;
extern CMsgDismissLootGreevilDefaultTypeInternal _CMsgDismissLootGreevil_default_instance_;
class CMsgDismissLootGreevilResponse;
class CMsgDismissLootGreevilResponseDefaultTypeInternal;
extern CMsgDismissLootGreevilResponseDefaultTypeInternal _CMsgDismissLootGreevilResponse_default_instance_;
class CMsgFindSourceTVGames;
class CMsgFindSourceTVGamesDefaultTypeInternal;
extern CMsgFindSourceTVGamesDefaultTypeInternal _CMsgFindSourceTVGames_default_instance_;
class CMsgFriendPracticeLobbyListRequest;
class CMsgFriendPracticeLobbyListRequestDefaultTypeInternal;
extern CMsgFriendPracticeLobbyListRequestDefaultTypeInternal _CMsgFriendPracticeLobbyListRequest_default_instance_;
class CMsgFriendPracticeLobbyListResponse;
class CMsgFriendPracticeLobbyListResponseDefaultTypeInternal;
extern CMsgFriendPracticeLobbyListResponseDefaultTypeInternal _CMsgFriendPracticeLobbyListResponse_default_instance_;
class CMsgGCBanStatusRequest;
class CMsgGCBanStatusRequestDefaultTypeInternal;
extern CMsgGCBanStatusRequestDefaultTypeInternal _CMsgGCBanStatusRequest_default_instance_;
class CMsgGCBanStatusResponse;
class CMsgGCBanStatusResponseDefaultTypeInternal;
extern CMsgGCBanStatusResponseDefaultTypeInternal _CMsgGCBanStatusResponse_default_instance_;
class CMsgGCGetHeroStandings;
class CMsgGCGetHeroStandingsDefaultTypeInternal;
extern CMsgGCGetHeroStandingsDefaultTypeInternal _CMsgGCGetHeroStandings_default_instance_;
class CMsgGCGetHeroStandingsResponse;
class CMsgGCGetHeroStandingsResponseDefaultTypeInternal;
extern CMsgGCGetHeroStandingsResponseDefaultTypeInternal _CMsgGCGetHeroStandingsResponse_default_instance_;
class CMsgGCGetHeroStandingsResponse_Hero;
class CMsgGCGetHeroStandingsResponse_HeroDefaultTypeInternal;
extern CMsgGCGetHeroStandingsResponse_HeroDefaultTypeInternal _CMsgGCGetHeroStandingsResponse_Hero_default_instance_;
class CMsgGCItemEditorReleaseReservation;
class CMsgGCItemEditorReleaseReservationDefaultTypeInternal;
extern CMsgGCItemEditorReleaseReservationDefaultTypeInternal _CMsgGCItemEditorReleaseReservation_default_instance_;
class CMsgGCItemEditorReleaseReservationResponse;
class CMsgGCItemEditorReleaseReservationResponseDefaultTypeInternal;
extern CMsgGCItemEditorReleaseReservationResponseDefaultTypeInternal _CMsgGCItemEditorReleaseReservationResponse_default_instance_;
class CMsgGCItemEditorReservation;
class CMsgGCItemEditorReservationDefaultTypeInternal;
extern CMsgGCItemEditorReservationDefaultTypeInternal _CMsgGCItemEditorReservation_default_instance_;
class CMsgGCItemEditorReservationsRequest;
class CMsgGCItemEditorReservationsRequestDefaultTypeInternal;
extern CMsgGCItemEditorReservationsRequestDefaultTypeInternal _CMsgGCItemEditorReservationsRequest_default_instance_;
class CMsgGCItemEditorReservationsResponse;
class CMsgGCItemEditorReservationsResponseDefaultTypeInternal;
extern CMsgGCItemEditorReservationsResponseDefaultTypeInternal _CMsgGCItemEditorReservationsResponse_default_instance_;
class CMsgGCItemEditorReserveItemDef;
class CMsgGCItemEditorReserveItemDefDefaultTypeInternal;
extern CMsgGCItemEditorReserveItemDefDefaultTypeInternal _CMsgGCItemEditorReserveItemDef_default_instance_;
class CMsgGCItemEditorReserveItemDefResponse;
class CMsgGCItemEditorReserveItemDefResponseDefaultTypeInternal;
extern CMsgGCItemEditorReserveItemDefResponseDefaultTypeInternal _CMsgGCItemEditorReserveItemDefResponse_default_instance_;
class CMsgGCMatchDetailsRequest;
class CMsgGCMatchDetailsRequestDefaultTypeInternal;
extern CMsgGCMatchDetailsRequestDefaultTypeInternal _CMsgGCMatchDetailsRequest_default_instance_;
class CMsgGCMatchDetailsResponse;
class CMsgGCMatchDetailsResponseDefaultTypeInternal;
extern CMsgGCMatchDetailsResponseDefaultTypeInternal _CMsgGCMatchDetailsResponse_default_instance_;
class CMsgGCToGCCanInviteUser;
class CMsgGCToGCCanInviteUserDefaultTypeInternal;
extern CMsgGCToGCCanInviteUserDefaultTypeInternal _CMsgGCToGCCanInviteUser_default_instance_;
class CMsgGCToGCCanInviteUserResponse;
class CMsgGCToGCCanInviteUserResponseDefaultTypeInternal;
extern CMsgGCToGCCanInviteUserResponseDefaultTypeInternal _CMsgGCToGCCanInviteUserResponse_default_instance_;
class CMsgGCToGCCheckLeaguePermission;
class CMsgGCToGCCheckLeaguePermissionDefaultTypeInternal;
extern CMsgGCToGCCheckLeaguePermissionDefaultTypeInternal _CMsgGCToGCCheckLeaguePermission_default_instance_;
class CMsgGCToGCCheckLeaguePermissionResponse;
class CMsgGCToGCCheckLeaguePermissionResponseDefaultTypeInternal;
extern CMsgGCToGCCheckLeaguePermissionResponseDefaultTypeInternal _CMsgGCToGCCheckLeaguePermissionResponse_default_instance_;
class CMsgGCToGCGetLeagueAdmin;
class CMsgGCToGCGetLeagueAdminDefaultTypeInternal;
extern CMsgGCToGCGetLeagueAdminDefaultTypeInternal _CMsgGCToGCGetLeagueAdmin_default_instance_;
class CMsgGCToGCGetLeagueAdminResponse;
class CMsgGCToGCGetLeagueAdminResponseDefaultTypeInternal;
extern CMsgGCToGCGetLeagueAdminResponseDefaultTypeInternal _CMsgGCToGCGetLeagueAdminResponse_default_instance_;
class CMsgGCToGCGetTeamRank;
class CMsgGCToGCGetTeamRankDefaultTypeInternal;
extern CMsgGCToGCGetTeamRankDefaultTypeInternal _CMsgGCToGCGetTeamRank_default_instance_;
class CMsgGCToGCGetTeamRankChange;
class CMsgGCToGCGetTeamRankChangeDefaultTypeInternal;
extern CMsgGCToGCGetTeamRankChangeDefaultTypeInternal _CMsgGCToGCGetTeamRankChange_default_instance_;
class CMsgGCToGCGetTeamRankChangeResponse;
class CMsgGCToGCGetTeamRankChangeResponseDefaultTypeInternal;
extern CMsgGCToGCGetTeamRankChangeResponseDefaultTypeInternal _CMsgGCToGCGetTeamRankChangeResponse_default_instance_;
class CMsgGCToGCGetTeamRankResponse;
class CMsgGCToGCGetTeamRankResponseDefaultTypeInternal;
extern CMsgGCToGCGetTeamRankResponseDefaultTypeInternal _CMsgGCToGCGetTeamRankResponse_default_instance_;
class CMsgGCToGCGetUserChatInfo;
class CMsgGCToGCGetUserChatInfoDefaultTypeInternal;
extern CMsgGCToGCGetUserChatInfoDefaultTypeInternal _CMsgGCToGCGetUserChatInfo_default_instance_;
class CMsgGCToGCGetUserChatInfoResponse;
class CMsgGCToGCGetUserChatInfoResponseDefaultTypeInternal;
extern CMsgGCToGCGetUserChatInfoResponseDefaultTypeInternal _CMsgGCToGCGetUserChatInfoResponse_default_instance_;
class CMsgGCToGCGetUserRank;
class CMsgGCToGCGetUserRankDefaultTypeInternal;
extern CMsgGCToGCGetUserRankDefaultTypeInternal _CMsgGCToGCGetUserRank_default_instance_;
class CMsgGCToGCGetUserRankResponse;
class CMsgGCToGCGetUserRankResponseDefaultTypeInternal;
extern CMsgGCToGCGetUserRankResponseDefaultTypeInternal _CMsgGCToGCGetUserRankResponse_default_instance_;
class CMsgGCToGCLeaveAllChatChannels;
class CMsgGCToGCLeaveAllChatChannelsDefaultTypeInternal;
extern CMsgGCToGCLeaveAllChatChannelsDefaultTypeInternal _CMsgGCToGCLeaveAllChatChannels_default_instance_;
class CMsgGCToGCUpdateAccountChatBan;
class CMsgGCToGCUpdateAccountChatBanDefaultTypeInternal;
extern CMsgGCToGCUpdateAccountChatBanDefaultTypeInternal _CMsgGCToGCUpdateAccountChatBan_default_instance_;
class CMsgGCToGCUpdateMatchmakingStats;
class CMsgGCToGCUpdateMatchmakingStatsDefaultTypeInternal;
extern CMsgGCToGCUpdateMatchmakingStatsDefaultTypeInternal _CMsgGCToGCUpdateMatchmakingStats_default_instance_;
class CMsgGCToGCUpdateTeamStats;
class CMsgGCToGCUpdateTeamStatsDefaultTypeInternal;
extern CMsgGCToGCUpdateTeamStatsDefaultTypeInternal _CMsgGCToGCUpdateTeamStats_default_instance_;
class CMsgGCToRelayConnect;
class CMsgGCToRelayConnectDefaultTypeInternal;
extern CMsgGCToRelayConnectDefaultTypeInternal _CMsgGCToRelayConnect_default_instance_;
class CMsgGCToRelayConnectResponse;
class CMsgGCToRelayConnectResponseDefaultTypeInternal;
extern CMsgGCToRelayConnectResponseDefaultTypeInternal _CMsgGCToRelayConnectResponse_default_instance_;
class CMsgGCWatchDownloadedReplay;
class CMsgGCWatchDownloadedReplayDefaultTypeInternal;
extern CMsgGCWatchDownloadedReplayDefaultTypeInternal _CMsgGCWatchDownloadedReplay_default_instance_;
class CMsgGameChatLog;
class CMsgGameChatLogDefaultTypeInternal;
extern CMsgGameChatLogDefaultTypeInternal _CMsgGameChatLog_default_instance_;
class CMsgGameChatLog_CChatLine;
class CMsgGameChatLog_CChatLineDefaultTypeInternal;
extern CMsgGameChatLog_CChatLineDefaultTypeInternal _CMsgGameChatLog_CChatLine_default_instance_;
class CMsgGameMatchSignOut;
class CMsgGameMatchSignOutDefaultTypeInternal;
extern CMsgGameMatchSignOutDefaultTypeInternal _CMsgGameMatchSignOut_default_instance_;
class CMsgGameMatchSignOut_CTeam;
class CMsgGameMatchSignOut_CTeamDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeamDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer;
class CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
class CMsgGameMatchSignoutResponse;
class CMsgGameMatchSignoutResponseDefaultTypeInternal;
extern CMsgGameMatchSignoutResponseDefaultTypeInternal _CMsgGameMatchSignoutResponse_default_instance_;
class CMsgGameServerGetLoadGame;
class CMsgGameServerGetLoadGameDefaultTypeInternal;
extern CMsgGameServerGetLoadGameDefaultTypeInternal _CMsgGameServerGetLoadGame_default_instance_;
class CMsgGameServerGetLoadGameResult;
class CMsgGameServerGetLoadGameResultDefaultTypeInternal;
extern CMsgGameServerGetLoadGameResultDefaultTypeInternal _CMsgGameServerGetLoadGameResult_default_instance_;
class CMsgGameServerInfo;
class CMsgGameServerInfoDefaultTypeInternal;
extern CMsgGameServerInfoDefaultTypeInternal _CMsgGameServerInfo_default_instance_;
class CMsgGameServerSaveGameResult;
class CMsgGameServerSaveGameResultDefaultTypeInternal;
extern CMsgGameServerSaveGameResultDefaultTypeInternal _CMsgGameServerSaveGameResult_default_instance_;
class CMsgGameServerUploadSaveGame;
class CMsgGameServerUploadSaveGameDefaultTypeInternal;
extern CMsgGameServerUploadSaveGameDefaultTypeInternal _CMsgGameServerUploadSaveGame_default_instance_;
class CMsgGuildmatePracticeLobbyListRequest;
class CMsgGuildmatePracticeLobbyListRequestDefaultTypeInternal;
extern CMsgGuildmatePracticeLobbyListRequestDefaultTypeInternal _CMsgGuildmatePracticeLobbyListRequest_default_instance_;
class CMsgGuildmatePracticeLobbyListResponse;
class CMsgGuildmatePracticeLobbyListResponseDefaultTypeInternal;
extern CMsgGuildmatePracticeLobbyListResponseDefaultTypeInternal _CMsgGuildmatePracticeLobbyListResponse_default_instance_;
class CMsgInitialQuestionnaireResponse;
class CMsgInitialQuestionnaireResponseDefaultTypeInternal;
extern CMsgInitialQuestionnaireResponseDefaultTypeInternal _CMsgInitialQuestionnaireResponse_default_instance_;
class CMsgInterGCProfile;
class CMsgInterGCProfileDefaultTypeInternal;
extern CMsgInterGCProfileDefaultTypeInternal _CMsgInterGCProfile_default_instance_;
class CMsgInterGCSurgeTest;
class CMsgInterGCSurgeTestDefaultTypeInternal;
extern CMsgInterGCSurgeTestDefaultTypeInternal _CMsgInterGCSurgeTest_default_instance_;
class CMsgLeagueScheduleBlock;
class CMsgLeagueScheduleBlockDefaultTypeInternal;
extern CMsgLeagueScheduleBlockDefaultTypeInternal _CMsgLeagueScheduleBlock_default_instance_;
class CMsgLeagueScheduleBlockTeamInfo;
class CMsgLeagueScheduleBlockTeamInfoDefaultTypeInternal;
extern CMsgLeagueScheduleBlockTeamInfoDefaultTypeInternal _CMsgLeagueScheduleBlockTeamInfo_default_instance_;
class CMsgLeaverDetected;
class CMsgLeaverDetectedDefaultTypeInternal;
extern CMsgLeaverDetectedDefaultTypeInternal _CMsgLeaverDetected_default_instance_;
class CMsgLeaverDetectedResponse;
class CMsgLeaverDetectedResponseDefaultTypeInternal;
extern CMsgLeaverDetectedResponseDefaultTypeInternal _CMsgLeaverDetectedResponse_default_instance_;
class CMsgMatchVoteResponse;
class CMsgMatchVoteResponseDefaultTypeInternal;
extern CMsgMatchVoteResponseDefaultTypeInternal _CMsgMatchVoteResponse_default_instance_;
class CMsgMatchmakingLanguagePreference;
class CMsgMatchmakingLanguagePreferenceDefaultTypeInternal;
extern CMsgMatchmakingLanguagePreferenceDefaultTypeInternal _CMsgMatchmakingLanguagePreference_default_instance_;
class CMsgPassportDataRequest;
class CMsgPassportDataRequestDefaultTypeInternal;
extern CMsgPassportDataRequestDefaultTypeInternal _CMsgPassportDataRequest_default_instance_;
class CMsgPassportDataResponse;
class CMsgPassportDataResponseDefaultTypeInternal;
extern CMsgPassportDataResponseDefaultTypeInternal _CMsgPassportDataResponse_default_instance_;
class CMsgPassportFeaturedMatchRequest;
class CMsgPassportFeaturedMatchRequestDefaultTypeInternal;
extern CMsgPassportFeaturedMatchRequestDefaultTypeInternal _CMsgPassportFeaturedMatchRequest_default_instance_;
class CMsgPassportFeaturedMatchResponse;
class CMsgPassportFeaturedMatchResponseDefaultTypeInternal;
extern CMsgPassportFeaturedMatchResponseDefaultTypeInternal _CMsgPassportFeaturedMatchResponse_default_instance_;
class CMsgPracticeLobbyCreate;
class CMsgPracticeLobbyCreateDefaultTypeInternal;
extern CMsgPracticeLobbyCreateDefaultTypeInternal _CMsgPracticeLobbyCreate_default_instance_;
class CMsgPracticeLobbyCreate_SaveGame;
class CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal;
extern CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
class CMsgPracticeLobbyJoin;
class CMsgPracticeLobbyJoinDefaultTypeInternal;
extern CMsgPracticeLobbyJoinDefaultTypeInternal _CMsgPracticeLobbyJoin_default_instance_;
class CMsgPracticeLobbyJoinBroadcastChannel;
class CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal;
extern CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
class CMsgPracticeLobbyJoinResponse;
class CMsgPracticeLobbyJoinResponseDefaultTypeInternal;
extern CMsgPracticeLobbyJoinResponseDefaultTypeInternal _CMsgPracticeLobbyJoinResponse_default_instance_;
class CMsgPracticeLobbyKick;
class CMsgPracticeLobbyKickDefaultTypeInternal;
extern CMsgPracticeLobbyKickDefaultTypeInternal _CMsgPracticeLobbyKick_default_instance_;
class CMsgPracticeLobbyLaunch;
class CMsgPracticeLobbyLaunchDefaultTypeInternal;
extern CMsgPracticeLobbyLaunchDefaultTypeInternal _CMsgPracticeLobbyLaunch_default_instance_;
class CMsgPracticeLobbyLeave;
class CMsgPracticeLobbyLeaveDefaultTypeInternal;
extern CMsgPracticeLobbyLeaveDefaultTypeInternal _CMsgPracticeLobbyLeave_default_instance_;
class CMsgPracticeLobbyList;
class CMsgPracticeLobbyListDefaultTypeInternal;
extern CMsgPracticeLobbyListDefaultTypeInternal _CMsgPracticeLobbyList_default_instance_;
class CMsgPracticeLobbyListResponse;
class CMsgPracticeLobbyListResponseDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseDefaultTypeInternal _CMsgPracticeLobbyListResponse_default_instance_;
class CMsgPracticeLobbyListResponseEntry;
class CMsgPracticeLobbyListResponseEntryDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseEntryDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_default_instance_;
class CMsgPracticeLobbyListResponseEntry_CLobbyMember;
class CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
class CMsgPracticeLobbySetDetails;
class CMsgPracticeLobbySetDetailsDefaultTypeInternal;
extern CMsgPracticeLobbySetDetailsDefaultTypeInternal _CMsgPracticeLobbySetDetails_default_instance_;
class CMsgPracticeLobbySetTeamSlot;
class CMsgPracticeLobbySetTeamSlotDefaultTypeInternal;
extern CMsgPracticeLobbySetTeamSlotDefaultTypeInternal _CMsgPracticeLobbySetTeamSlot_default_instance_;
class CMsgReadyUp;
class CMsgReadyUpDefaultTypeInternal;
extern CMsgReadyUpDefaultTypeInternal _CMsgReadyUp_default_instance_;
class CMsgReadyUpStatus;
class CMsgReadyUpStatusDefaultTypeInternal;
extern CMsgReadyUpStatusDefaultTypeInternal _CMsgReadyUpStatus_default_instance_;
class CMsgRefreshPartnerAccountLink;
class CMsgRefreshPartnerAccountLinkDefaultTypeInternal;
extern CMsgRefreshPartnerAccountLinkDefaultTypeInternal _CMsgRefreshPartnerAccountLink_default_instance_;
class CMsgRequestInternationalTicket;
class CMsgRequestInternationalTicketDefaultTypeInternal;
extern CMsgRequestInternationalTicketDefaultTypeInternal _CMsgRequestInternationalTicket_default_instance_;
class CMsgRequestLeagueInfo;
class CMsgRequestLeagueInfoDefaultTypeInternal;
extern CMsgRequestLeagueInfoDefaultTypeInternal _CMsgRequestLeagueInfo_default_instance_;
class CMsgRequestLeaguePrizePool;
class CMsgRequestLeaguePrizePoolDefaultTypeInternal;
extern CMsgRequestLeaguePrizePoolDefaultTypeInternal _CMsgRequestLeaguePrizePool_default_instance_;
class CMsgRequestLeaguePrizePoolResponse;
class CMsgRequestLeaguePrizePoolResponseDefaultTypeInternal;
extern CMsgRequestLeaguePrizePoolResponseDefaultTypeInternal _CMsgRequestLeaguePrizePoolResponse_default_instance_;
class CMsgResetMapLocations;
class CMsgResetMapLocationsDefaultTypeInternal;
extern CMsgResetMapLocationsDefaultTypeInternal _CMsgResetMapLocations_default_instance_;
class CMsgResetMapLocationsResponse;
class CMsgResetMapLocationsResponseDefaultTypeInternal;
extern CMsgResetMapLocationsResponseDefaultTypeInternal _CMsgResetMapLocationsResponse_default_instance_;
class CMsgResponseLeagueInfo;
class CMsgResponseLeagueInfoDefaultTypeInternal;
extern CMsgResponseLeagueInfoDefaultTypeInternal _CMsgResponseLeagueInfo_default_instance_;
class CMsgResponseTeamFanfare;
class CMsgResponseTeamFanfareDefaultTypeInternal;
extern CMsgResponseTeamFanfareDefaultTypeInternal _CMsgResponseTeamFanfare_default_instance_;
class CMsgRetrieveMatchVote;
class CMsgRetrieveMatchVoteDefaultTypeInternal;
extern CMsgRetrieveMatchVoteDefaultTypeInternal _CMsgRetrieveMatchVote_default_instance_;
class CMsgSetFeaturedItems;
class CMsgSetFeaturedItemsDefaultTypeInternal;
extern CMsgSetFeaturedItemsDefaultTypeInternal _CMsgSetFeaturedItems_default_instance_;
class CMsgSetMapLocationState;
class CMsgSetMapLocationStateDefaultTypeInternal;
extern CMsgSetMapLocationStateDefaultTypeInternal _CMsgSetMapLocationState_default_instance_;
class CMsgSetMapLocationStateResponse;
class CMsgSetMapLocationStateResponseDefaultTypeInternal;
extern CMsgSetMapLocationStateResponseDefaultTypeInternal _CMsgSetMapLocationStateResponse_default_instance_;
class CMsgSetShowcaseHero;
class CMsgSetShowcaseHeroDefaultTypeInternal;
extern CMsgSetShowcaseHeroDefaultTypeInternal _CMsgSetShowcaseHero_default_instance_;
class CMsgSourceTVGamesResponse;
class CMsgSourceTVGamesResponseDefaultTypeInternal;
extern CMsgSourceTVGamesResponseDefaultTypeInternal _CMsgSourceTVGamesResponse_default_instance_;
class CMsgSpawnLootGreevil;
class CMsgSpawnLootGreevilDefaultTypeInternal;
extern CMsgSpawnLootGreevilDefaultTypeInternal _CMsgSpawnLootGreevil_default_instance_;
class CMsgSpectateFriendGame;
class CMsgSpectateFriendGameDefaultTypeInternal;
extern CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponse;
class CMsgSpectateFriendGameResponseDefaultTypeInternal;
extern CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
class CMsgSpectatorConnect;
class CMsgSpectatorConnectDefaultTypeInternal;
extern CMsgSpectatorConnectDefaultTypeInternal _CMsgSpectatorConnect_default_instance_;
class CMsgSpectatorDisconnect;
class CMsgSpectatorDisconnectDefaultTypeInternal;
extern CMsgSpectatorDisconnectDefaultTypeInternal _CMsgSpectatorDisconnect_default_instance_;
class CMsgStartFindingMatch;
class CMsgStartFindingMatchDefaultTypeInternal;
extern CMsgStartFindingMatchDefaultTypeInternal _CMsgStartFindingMatch_default_instance_;
class CMsgStopFindingMatch;
class CMsgStopFindingMatchDefaultTypeInternal;
extern CMsgStopFindingMatchDefaultTypeInternal _CMsgStopFindingMatch_default_instance_;
class CMsgTeamFanfare;
class CMsgTeamFanfareDefaultTypeInternal;
extern CMsgTeamFanfareDefaultTypeInternal _CMsgTeamFanfare_default_instance_;
class CMsgTournamentItemEvent;
class CMsgTournamentItemEventDefaultTypeInternal;
extern CMsgTournamentItemEventDefaultTypeInternal _CMsgTournamentItemEvent_default_instance_;
class CMsgTournamentItemEventResponse;
class CMsgTournamentItemEventResponseDefaultTypeInternal;
extern CMsgTournamentItemEventResponseDefaultTypeInternal _CMsgTournamentItemEventResponse_default_instance_;
class CMsgUpgradeLeagueItem;
class CMsgUpgradeLeagueItemDefaultTypeInternal;
extern CMsgUpgradeLeagueItemDefaultTypeInternal _CMsgUpgradeLeagueItem_default_instance_;
class CMsgUpgradeLeagueItemResponse;
class CMsgUpgradeLeagueItemResponseDefaultTypeInternal;
extern CMsgUpgradeLeagueItemResponseDefaultTypeInternal _CMsgUpgradeLeagueItemResponse_default_instance_;
class CMsgWatchGame;
class CMsgWatchGameDefaultTypeInternal;
extern CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
class CMsgWatchGameResponse;
class CMsgWatchGameResponseDefaultTypeInternal;
extern CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
class CSODOTAGameAccountClient;
class CSODOTAGameAccountClientDefaultTypeInternal;
extern CSODOTAGameAccountClientDefaultTypeInternal _CSODOTAGameAccountClient_default_instance_;
class CSODOTAGameAccountClientInternal;
class CSODOTAGameAccountClientInternalDefaultTypeInternal;
extern CSODOTAGameAccountClientInternalDefaultTypeInternal _CSODOTAGameAccountClientInternal_default_instance_;
class CSODOTAGameHeroFavorites;
class CSODOTAGameHeroFavoritesDefaultTypeInternal;
extern CSODOTAGameHeroFavoritesDefaultTypeInternal _CSODOTAGameHeroFavorites_default_instance_;
class CSODOTALobby;
class CSODOTALobbyDefaultTypeInternal;
extern CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
class CSODOTALobbyInternal;
class CSODOTALobbyInternalDefaultTypeInternal;
extern CSODOTALobbyInternalDefaultTypeInternal _CSODOTALobbyInternal_default_instance_;
class CSODOTALobbyMemcached;
class CSODOTALobbyMemcachedDefaultTypeInternal;
extern CSODOTALobbyMemcachedDefaultTypeInternal _CSODOTALobbyMemcached_default_instance_;
class CSODOTAMapLocationState;
class CSODOTAMapLocationStateDefaultTypeInternal;
extern CSODOTAMapLocationStateDefaultTypeInternal _CSODOTAMapLocationState_default_instance_;
class CSODOTAParty;
class CSODOTAPartyDefaultTypeInternal;
extern CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
class CSODOTAPartyInternal;
class CSODOTAPartyInternalDefaultTypeInternal;
extern CSODOTAPartyInternalDefaultTypeInternal _CSODOTAPartyInternal_default_instance_;
class CSODOTAPartyInvite;
class CSODOTAPartyInviteDefaultTypeInternal;
extern CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
class CSODOTAPartyInvite_PartyMember;
class CSODOTAPartyInvite_PartyMemberDefaultTypeInternal;
extern CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyMember;
class CSODOTAPartyMemberDefaultTypeInternal;
extern CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
class CSODOTAPartyMemcached;
class CSODOTAPartyMemcachedDefaultTypeInternal;
extern CSODOTAPartyMemcachedDefaultTypeInternal _CSODOTAPartyMemcached_default_instance_;
class CSourceTVGame;
class CSourceTVGameDefaultTypeInternal;
extern CSourceTVGameDefaultTypeInternal _CSourceTVGame_default_instance_;
class CSourceTVGame_Player;
class CSourceTVGame_PlayerDefaultTypeInternal;
extern CSourceTVGame_PlayerDefaultTypeInternal _CSourceTVGame_Player_default_instance_;
class CXPGainEvent;
class CXPGainEventDefaultTypeInternal;
extern CXPGainEventDefaultTypeInternal _CXPGainEvent_default_instance_;

enum CSODOTAParty_State {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
const CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
const CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
const int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor();
inline const ::std::string& CSODOTAParty_State_Name(CSODOTAParty_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), value);
}
inline bool CSODOTAParty_State_Parse(
    const ::std::string& name, CSODOTAParty_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
const CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
const CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
const int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor();
inline const ::std::string& CSODOTALobby_State_Name(CSODOTALobby_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), value);
}
inline bool CSODOTALobby_State_Parse(
    const ::std::string& name, CSODOTALobby_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_TOURNAMENT = 2,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_SOLO_QUEUE_MATCH = 6
};
bool CSODOTALobby_LobbyType_IsValid(int value);
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_SOLO_QUEUE_MATCH;
const int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
inline const ::std::string& CSODOTALobby_LobbyType_Name(CSODOTALobby_LobbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    const ::std::string& name, CSODOTALobby_LobbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum CMsgGameServerInfo_ServerType {
  CMsgGameServerInfo_ServerType_UNSPECIFIED = 0,
  CMsgGameServerInfo_ServerType_GAME = 1,
  CMsgGameServerInfo_ServerType_PROXY = 2
};
bool CMsgGameServerInfo_ServerType_IsValid(int value);
const CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MIN = CMsgGameServerInfo_ServerType_UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MAX = CMsgGameServerInfo_ServerType_PROXY;
const int CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE = CMsgGameServerInfo_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor();
inline const ::std::string& CMsgGameServerInfo_ServerType_Name(CMsgGameServerInfo_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGameServerInfo_ServerType_descriptor(), value);
}
inline bool CMsgGameServerInfo_ServerType_Parse(
    const ::std::string& name, CMsgGameServerInfo_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGameServerInfo_ServerType>(
    CMsgGameServerInfo_ServerType_descriptor(), name, value);
}
enum CMsgDOTAMatch_ReplayState {
  CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE = 0,
  CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED = 1,
  CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED = 2
};
bool CMsgDOTAMatch_ReplayState_IsValid(int value);
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MIN = CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MAX = CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
const int CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE = CMsgDOTAMatch_ReplayState_ReplayState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor();
inline const ::std::string& CMsgDOTAMatch_ReplayState_Name(CMsgDOTAMatch_ReplayState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAMatch_ReplayState_descriptor(), value);
}
inline bool CMsgDOTAMatch_ReplayState_Parse(
    const ::std::string& name, CMsgDOTAMatch_ReplayState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAMatch_ReplayState>(
    CMsgDOTAMatch_ReplayState_descriptor(), name, value);
}
enum CMsgDOTARequestMatches_SkillLevel {
  CMsgDOTARequestMatches_SkillLevel_Any = 0,
  CMsgDOTARequestMatches_SkillLevel_Normal = 1,
  CMsgDOTARequestMatches_SkillLevel_High = 2,
  CMsgDOTARequestMatches_SkillLevel_VeryHigh = 3
};
bool CMsgDOTARequestMatches_SkillLevel_IsValid(int value);
const CMsgDOTARequestMatches_SkillLevel CMsgDOTARequestMatches_SkillLevel_SkillLevel_MIN = CMsgDOTARequestMatches_SkillLevel_Any;
const CMsgDOTARequestMatches_SkillLevel CMsgDOTARequestMatches_SkillLevel_SkillLevel_MAX = CMsgDOTARequestMatches_SkillLevel_VeryHigh;
const int CMsgDOTARequestMatches_SkillLevel_SkillLevel_ARRAYSIZE = CMsgDOTARequestMatches_SkillLevel_SkillLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARequestMatches_SkillLevel_descriptor();
inline const ::std::string& CMsgDOTARequestMatches_SkillLevel_Name(CMsgDOTARequestMatches_SkillLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARequestMatches_SkillLevel_descriptor(), value);
}
inline bool CMsgDOTARequestMatches_SkillLevel_Parse(
    const ::std::string& name, CMsgDOTARequestMatches_SkillLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARequestMatches_SkillLevel>(
    CMsgDOTARequestMatches_SkillLevel_descriptor(), name, value);
}
enum CMsgDOTAPopup_PopupID {
  CMsgDOTAPopup_PopupID_KICKED_FROM_LOBBY = 0,
  CMsgDOTAPopup_PopupID_KICKED_FROM_PARTY = 1,
  CMsgDOTAPopup_PopupID_KICKED_FROM_TEAM = 2,
  CMsgDOTAPopup_PopupID_TEAM_WAS_DISBANDED = 3,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_MATCH = 4,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_FINDING = 5,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FULL = 6,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_ADD = 7,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_ADD_CURRENT = 8,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAILED_TEAM_MEMBER = 9,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_GAME = 10,
  CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_GET_PARTY = 11,
  CMsgDOTAPopup_PopupID_MATCHMAKING_DISABLED = 12,
  CMsgDOTAPopup_PopupID_INVITE_DENIED = 13,
  CMsgDOTAPopup_PopupID_PARTY_FULL = 14,
  CMsgDOTAPopup_PopupID_MADE_ADMIN = 15,
  CMsgDOTAPopup_PopupID_NEED_TO_PURCHASE = 16,
  CMsgDOTAPopup_PopupID_SIGNON_MESSAGE = 17,
  CMsgDOTAPopup_PopupID_GUILD_KICKED = 18,
  CMsgDOTAPopup_PopupID_MATCHMAKING_REGION_OFFLINE = 19
};
bool CMsgDOTAPopup_PopupID_IsValid(int value);
const CMsgDOTAPopup_PopupID CMsgDOTAPopup_PopupID_PopupID_MIN = CMsgDOTAPopup_PopupID_KICKED_FROM_LOBBY;
const CMsgDOTAPopup_PopupID CMsgDOTAPopup_PopupID_PopupID_MAX = CMsgDOTAPopup_PopupID_MATCHMAKING_REGION_OFFLINE;
const int CMsgDOTAPopup_PopupID_PopupID_ARRAYSIZE = CMsgDOTAPopup_PopupID_PopupID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAPopup_PopupID_descriptor();
inline const ::std::string& CMsgDOTAPopup_PopupID_Name(CMsgDOTAPopup_PopupID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAPopup_PopupID_descriptor(), value);
}
inline bool CMsgDOTAPopup_PopupID_Parse(
    const ::std::string& name, CMsgDOTAPopup_PopupID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAPopup_PopupID>(
    CMsgDOTAPopup_PopupID_descriptor(), name, value);
}
enum CMsgDOTACreateTeamResponse_Result {
  CMsgDOTACreateTeamResponse_Result_INVALID = -1,
  CMsgDOTACreateTeamResponse_Result_SUCCESS = 0,
  CMsgDOTACreateTeamResponse_Result_NAME_EMPTY = 1,
  CMsgDOTACreateTeamResponse_Result_NAME_BAD_CHARACTERS = 2,
  CMsgDOTACreateTeamResponse_Result_NAME_TAKEN = 3,
  CMsgDOTACreateTeamResponse_Result_NAME_TOO_LONG = 4,
  CMsgDOTACreateTeamResponse_Result_TAG_EMPTY = 5,
  CMsgDOTACreateTeamResponse_Result_TAG_BAD_CHARACTERS = 6,
  CMsgDOTACreateTeamResponse_Result_TAG_TAKEN = 7,
  CMsgDOTACreateTeamResponse_Result_TAG_TOO_LONG = 8,
  CMsgDOTACreateTeamResponse_Result_CREATOR_BUSY = 9,
  CMsgDOTACreateTeamResponse_Result_UNSPECIFIED_ERROR = 10,
  CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_LIMIT_REACHED = 11,
  CMsgDOTACreateTeamResponse_Result_NO_LOGO = 12,
  CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_CREATION_COOLDOWN = 13,
  CMsgDOTACreateTeamResponse_Result_LOGO_UPLOAD_FAILED = 14,
  CMsgDOTACreateTeamResponse_Result_NAME_CHANGED_TOO_RECENTLY = 15
};
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value);
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse_Result_Result_MIN = CMsgDOTACreateTeamResponse_Result_INVALID;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse_Result_Result_MAX = CMsgDOTACreateTeamResponse_Result_NAME_CHANGED_TOO_RECENTLY;
const int CMsgDOTACreateTeamResponse_Result_Result_ARRAYSIZE = CMsgDOTACreateTeamResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor();
inline const ::std::string& CMsgDOTACreateTeamResponse_Result_Name(CMsgDOTACreateTeamResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTACreateTeamResponse_Result_descriptor(), value);
}
inline bool CMsgDOTACreateTeamResponse_Result_Parse(
    const ::std::string& name, CMsgDOTACreateTeamResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTACreateTeamResponse_Result>(
    CMsgDOTACreateTeamResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAEditTeamLogoResponse_Result {
  CMsgDOTAEditTeamLogoResponse_Result_INVALID = -1,
  CMsgDOTAEditTeamLogoResponse_Result_SUCCESS = 0,
  CMsgDOTAEditTeamLogoResponse_Result_CREATOR_BUSY = 9,
  CMsgDOTAEditTeamLogoResponse_Result_UNSPECIFIED_ERROR = 10,
  CMsgDOTAEditTeamLogoResponse_Result_NO_LOGO = 12
};
bool CMsgDOTAEditTeamLogoResponse_Result_IsValid(int value);
const CMsgDOTAEditTeamLogoResponse_Result CMsgDOTAEditTeamLogoResponse_Result_Result_MIN = CMsgDOTAEditTeamLogoResponse_Result_INVALID;
const CMsgDOTAEditTeamLogoResponse_Result CMsgDOTAEditTeamLogoResponse_Result_Result_MAX = CMsgDOTAEditTeamLogoResponse_Result_NO_LOGO;
const int CMsgDOTAEditTeamLogoResponse_Result_Result_ARRAYSIZE = CMsgDOTAEditTeamLogoResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamLogoResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAEditTeamLogoResponse_Result_Name(CMsgDOTAEditTeamLogoResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAEditTeamLogoResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAEditTeamLogoResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAEditTeamLogoResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAEditTeamLogoResponse_Result>(
    CMsgDOTAEditTeamLogoResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAEditTeamDetailsResponse_Result {
  CMsgDOTAEditTeamDetailsResponse_Result_INVALID = -1,
  CMsgDOTAEditTeamDetailsResponse_Result_SUCCESS = 0,
  CMsgDOTAEditTeamDetailsResponse_Result_CREATOR_BUSY = 9,
  CMsgDOTAEditTeamDetailsResponse_Result_UNSPECIFIED_ERROR = 10
};
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value);
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse_Result_Result_MIN = CMsgDOTAEditTeamDetailsResponse_Result_INVALID;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX = CMsgDOTAEditTeamDetailsResponse_Result_UNSPECIFIED_ERROR;
const int CMsgDOTAEditTeamDetailsResponse_Result_Result_ARRAYSIZE = CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAEditTeamDetailsResponse_Result_Name(CMsgDOTAEditTeamDetailsResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAEditTeamDetailsResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAEditTeamDetailsResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAEditTeamDetailsResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAEditTeamDetailsResponse_Result>(
    CMsgDOTAEditTeamDetailsResponse_Result_descriptor(), name, value);
}
enum CMsgDOTADisbandTeamResponse_Result {
  CMsgDOTADisbandTeamResponse_Result_SUCCESS = 0,
  CMsgDOTADisbandTeamResponse_Result_FAILURE = 1,
  CMsgDOTADisbandTeamResponse_Result_FAILURE_NOT_EMPTY = 2
};
bool CMsgDOTADisbandTeamResponse_Result_IsValid(int value);
const CMsgDOTADisbandTeamResponse_Result CMsgDOTADisbandTeamResponse_Result_Result_MIN = CMsgDOTADisbandTeamResponse_Result_SUCCESS;
const CMsgDOTADisbandTeamResponse_Result CMsgDOTADisbandTeamResponse_Result_Result_MAX = CMsgDOTADisbandTeamResponse_Result_FAILURE_NOT_EMPTY;
const int CMsgDOTADisbandTeamResponse_Result_Result_ARRAYSIZE = CMsgDOTADisbandTeamResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTADisbandTeamResponse_Result_descriptor();
inline const ::std::string& CMsgDOTADisbandTeamResponse_Result_Name(CMsgDOTADisbandTeamResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTADisbandTeamResponse_Result_descriptor(), value);
}
inline bool CMsgDOTADisbandTeamResponse_Result_Parse(
    const ::std::string& name, CMsgDOTADisbandTeamResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTADisbandTeamResponse_Result>(
    CMsgDOTADisbandTeamResponse_Result_descriptor(), name, value);
}
enum CMsgDOTARequestTeamDataResponse_Result {
  CMsgDOTARequestTeamDataResponse_Result_SUCCESS = 0,
  CMsgDOTARequestTeamDataResponse_Result_FAILURE = 1
};
bool CMsgDOTARequestTeamDataResponse_Result_IsValid(int value);
const CMsgDOTARequestTeamDataResponse_Result CMsgDOTARequestTeamDataResponse_Result_Result_MIN = CMsgDOTARequestTeamDataResponse_Result_SUCCESS;
const CMsgDOTARequestTeamDataResponse_Result CMsgDOTARequestTeamDataResponse_Result_Result_MAX = CMsgDOTARequestTeamDataResponse_Result_FAILURE;
const int CMsgDOTARequestTeamDataResponse_Result_Result_ARRAYSIZE = CMsgDOTARequestTeamDataResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTARequestTeamDataResponse_Result_descriptor();
inline const ::std::string& CMsgDOTARequestTeamDataResponse_Result_Name(CMsgDOTARequestTeamDataResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTARequestTeamDataResponse_Result_descriptor(), value);
}
inline bool CMsgDOTARequestTeamDataResponse_Result_Parse(
    const ::std::string& name, CMsgDOTARequestTeamDataResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTARequestTeamDataResponse_Result>(
    CMsgDOTARequestTeamDataResponse_Result_descriptor(), name, value);
}
enum CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result {
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_SUCCESS = 0,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_MEMBER_LIMIT = 1,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_NOT_AVAILABLE = 2,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_BUSY = 3,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_ALREADY_ON_THE_TEAM = 4,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_ALREADY_ON_TOO_MANY_TEAMS = 5,
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_UNSPECIFIED_ERROR = 6
};
bool CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_IsValid(int value);
const CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_MIN = CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_SUCCESS;
const CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_MAX = CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_UNSPECIFIED_ERROR;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_ARRAYSIZE = CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_descriptor();
inline const ::std::string& CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Name(CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_descriptor(), value);
}
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Parse(
    const ::std::string& name, CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result>(
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_descriptor(), name, value);
}
enum CMsgDOTATeamInvite_InviteeResponseToGC_Result {
  CMsgDOTATeamInvite_InviteeResponseToGC_Result_JOIN = 0,
  CMsgDOTATeamInvite_InviteeResponseToGC_Result_REJECT = 1,
  CMsgDOTATeamInvite_InviteeResponseToGC_Result_TIMEOUT = 2
};
bool CMsgDOTATeamInvite_InviteeResponseToGC_Result_IsValid(int value);
const CMsgDOTATeamInvite_InviteeResponseToGC_Result CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_MIN = CMsgDOTATeamInvite_InviteeResponseToGC_Result_JOIN;
const CMsgDOTATeamInvite_InviteeResponseToGC_Result CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_MAX = CMsgDOTATeamInvite_InviteeResponseToGC_Result_TIMEOUT;
const int CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_ARRAYSIZE = CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATeamInvite_InviteeResponseToGC_Result_descriptor();
inline const ::std::string& CMsgDOTATeamInvite_InviteeResponseToGC_Result_Name(CMsgDOTATeamInvite_InviteeResponseToGC_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_descriptor(), value);
}
inline bool CMsgDOTATeamInvite_InviteeResponseToGC_Result_Parse(
    const ::std::string& name, CMsgDOTATeamInvite_InviteeResponseToGC_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATeamInvite_InviteeResponseToGC_Result>(
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_descriptor(), name, value);
}
enum CMsgDOTATeamInvite_GCResponseToInviter_Result {
  CMsgDOTATeamInvite_GCResponseToInviter_Result_JOINED = 0,
  CMsgDOTATeamInvite_GCResponseToInviter_Result_REJECTION = 1,
  CMsgDOTATeamInvite_GCResponseToInviter_Result_TIMEOUT = 2,
  CMsgDOTATeamInvite_GCResponseToInviter_Result_UNSPECIFIED_ERROR = 3
};
bool CMsgDOTATeamInvite_GCResponseToInviter_Result_IsValid(int value);
const CMsgDOTATeamInvite_GCResponseToInviter_Result CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_MIN = CMsgDOTATeamInvite_GCResponseToInviter_Result_JOINED;
const CMsgDOTATeamInvite_GCResponseToInviter_Result CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_MAX = CMsgDOTATeamInvite_GCResponseToInviter_Result_UNSPECIFIED_ERROR;
const int CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_ARRAYSIZE = CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATeamInvite_GCResponseToInviter_Result_descriptor();
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInviter_Result_Name(CMsgDOTATeamInvite_GCResponseToInviter_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATeamInvite_GCResponseToInviter_Result_descriptor(), value);
}
inline bool CMsgDOTATeamInvite_GCResponseToInviter_Result_Parse(
    const ::std::string& name, CMsgDOTATeamInvite_GCResponseToInviter_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATeamInvite_GCResponseToInviter_Result>(
    CMsgDOTATeamInvite_GCResponseToInviter_Result_descriptor(), name, value);
}
enum CMsgDOTATeamInvite_GCResponseToInvitee_Result {
  CMsgDOTATeamInvite_GCResponseToInvitee_Result_SUCCESS = 0,
  CMsgDOTATeamInvite_GCResponseToInvitee_Result_FAILURE = 1
};
bool CMsgDOTATeamInvite_GCResponseToInvitee_Result_IsValid(int value);
const CMsgDOTATeamInvite_GCResponseToInvitee_Result CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_MIN = CMsgDOTATeamInvite_GCResponseToInvitee_Result_SUCCESS;
const CMsgDOTATeamInvite_GCResponseToInvitee_Result CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_MAX = CMsgDOTATeamInvite_GCResponseToInvitee_Result_FAILURE;
const int CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_ARRAYSIZE = CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATeamInvite_GCResponseToInvitee_Result_descriptor();
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInvitee_Result_Name(CMsgDOTATeamInvite_GCResponseToInvitee_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_descriptor(), value);
}
inline bool CMsgDOTATeamInvite_GCResponseToInvitee_Result_Parse(
    const ::std::string& name, CMsgDOTATeamInvite_GCResponseToInvitee_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATeamInvite_GCResponseToInvitee_Result>(
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_descriptor(), name, value);
}
enum CMsgDOTAKickTeamMemberResponse_Result {
  CMsgDOTAKickTeamMemberResponse_Result_SUCCESS = 0,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE = 1
};
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value);
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse_Result_Result_MIN = CMsgDOTAKickTeamMemberResponse_Result_SUCCESS;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse_Result_Result_MAX = CMsgDOTAKickTeamMemberResponse_Result_FAILURE;
const int CMsgDOTAKickTeamMemberResponse_Result_Result_ARRAYSIZE = CMsgDOTAKickTeamMemberResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAKickTeamMemberResponse_Result_Name(CMsgDOTAKickTeamMemberResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAKickTeamMemberResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAKickTeamMemberResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAKickTeamMemberResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAKickTeamMemberResponse_Result>(
    CMsgDOTAKickTeamMemberResponse_Result_descriptor(), name, value);
}
enum CMsgDOTATransferTeamAdminResponse_Result {
  CMsgDOTATransferTeamAdminResponse_Result_SUCCESS = 0,
  CMsgDOTATransferTeamAdminResponse_Result_NOT_ADMIN = 1,
  CMsgDOTATransferTeamAdminResponse_Result_ON_OTHER_TEAM = 2,
  CMsgDOTATransferTeamAdminResponse_Result_ADMIN_OF_OTHER_TEAM = 3,
  CMsgDOTATransferTeamAdminResponse_Result_UNSPECIFIED_ERROR = 4
};
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value);
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse_Result_Result_MIN = CMsgDOTATransferTeamAdminResponse_Result_SUCCESS;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse_Result_Result_MAX = CMsgDOTATransferTeamAdminResponse_Result_UNSPECIFIED_ERROR;
const int CMsgDOTATransferTeamAdminResponse_Result_Result_ARRAYSIZE = CMsgDOTATransferTeamAdminResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor();
inline const ::std::string& CMsgDOTATransferTeamAdminResponse_Result_Name(CMsgDOTATransferTeamAdminResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATransferTeamAdminResponse_Result_descriptor(), value);
}
inline bool CMsgDOTATransferTeamAdminResponse_Result_Parse(
    const ::std::string& name, CMsgDOTATransferTeamAdminResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATransferTeamAdminResponse_Result>(
    CMsgDOTATransferTeamAdminResponse_Result_descriptor(), name, value);
}
enum CMsgDOTALeaveTeamResponse_Result {
  CMsgDOTALeaveTeamResponse_Result_SUCCESS = 0,
  CMsgDOTALeaveTeamResponse_Result_FAILURE = 1
};
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value);
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse_Result_Result_MIN = CMsgDOTALeaveTeamResponse_Result_SUCCESS;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse_Result_Result_MAX = CMsgDOTALeaveTeamResponse_Result_FAILURE;
const int CMsgDOTALeaveTeamResponse_Result_Result_ARRAYSIZE = CMsgDOTALeaveTeamResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor();
inline const ::std::string& CMsgDOTALeaveTeamResponse_Result_Name(CMsgDOTALeaveTeamResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTALeaveTeamResponse_Result_descriptor(), value);
}
inline bool CMsgDOTALeaveTeamResponse_Result_Parse(
    const ::std::string& name, CMsgDOTALeaveTeamResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTALeaveTeamResponse_Result>(
    CMsgDOTALeaveTeamResponse_Result_descriptor(), name, value);
}
enum CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned = 0,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown = 1,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana = 2,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady = 3
};
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value);
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
const int CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), value);
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(
    const ::std::string& name, CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), name, value);
}
enum CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t {
  CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannel_AllVerbose = 0,
  CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannelIgnore_OthersJoined = 1
};
bool CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_IsValid(int value);
const CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_MIN = CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannel_AllVerbose;
const CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_MAX = CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannelIgnore_OthersJoined;
const int CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_ARRAYSIZE = CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_descriptor();
inline const ::std::string& CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_Name(CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_descriptor(), value);
}
inline bool CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_Parse(
    const ::std::string& name, CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t>(
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_descriptor(), name, value);
}
enum CMsgDOTAGuildCreateResponse_EError {
  CMsgDOTAGuildCreateResponse_EError_UNSPECIFIED = 0,
  CMsgDOTAGuildCreateResponse_EError_NAME_EMPTY = 1,
  CMsgDOTAGuildCreateResponse_EError_NAME_BAD_CHARACTERS = 2,
  CMsgDOTAGuildCreateResponse_EError_NAME_TOO_LONG = 3,
  CMsgDOTAGuildCreateResponse_EError_NAME_TAKEN = 4,
  CMsgDOTAGuildCreateResponse_EError_TAG_EMPTY = 5,
  CMsgDOTAGuildCreateResponse_EError_TAG_BAD_CHARACTERS = 6,
  CMsgDOTAGuildCreateResponse_EError_TAG_TOO_LONG = 7,
  CMsgDOTAGuildCreateResponse_EError_ACCOUNT_TOO_MANY_GUILDS = 8,
  CMsgDOTAGuildCreateResponse_EError_LOGO_UPLOAD_FAILED = 9
};
bool CMsgDOTAGuildCreateResponse_EError_IsValid(int value);
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse_EError_EError_MIN = CMsgDOTAGuildCreateResponse_EError_UNSPECIFIED;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse_EError_EError_MAX = CMsgDOTAGuildCreateResponse_EError_LOGO_UPLOAD_FAILED;
const int CMsgDOTAGuildCreateResponse_EError_EError_ARRAYSIZE = CMsgDOTAGuildCreateResponse_EError_EError_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCreateResponse_EError_descriptor();
inline const ::std::string& CMsgDOTAGuildCreateResponse_EError_Name(CMsgDOTAGuildCreateResponse_EError value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildCreateResponse_EError_descriptor(), value);
}
inline bool CMsgDOTAGuildCreateResponse_EError_Parse(
    const ::std::string& name, CMsgDOTAGuildCreateResponse_EError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildCreateResponse_EError>(
    CMsgDOTAGuildCreateResponse_EError_descriptor(), name, value);
}
enum CMsgDOTAGuildSetAccountRoleResponse_EResult {
  CMsgDOTAGuildSetAccountRoleResponse_EResult_SUCCESS = 0,
  CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_NO_OTHER_LEADER = 3,
  CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_ACCOUNT_TOO_MANY_GUILDS = 4,
  CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_GUILD_TOO_MANY_MEMBERS = 5
};
bool CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(int value);
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_MIN = CMsgDOTAGuildSetAccountRoleResponse_EResult_SUCCESS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_MAX = CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_GUILD_TOO_MANY_MEMBERS;
const int CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAGuildSetAccountRoleResponse_EResult_Name(CMsgDOTAGuildSetAccountRoleResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAGuildSetAccountRoleResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAGuildSetAccountRoleResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildSetAccountRoleResponse_EResult>(
    CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAGuildInviteAccountResponse_EResult {
  CMsgDOTAGuildInviteAccountResponse_EResult_SUCCESS = 0,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_ALREADY_INVITED = 3,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_ALREADY_IN_GUILD = 4,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_TOO_MANY_INVITES = 5,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_GUILD_TOO_MANY_INVITES = 6,
  CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_TOO_MANY_GUILDS = 7
};
bool CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(int value);
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse_EResult_EResult_MIN = CMsgDOTAGuildInviteAccountResponse_EResult_SUCCESS;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse_EResult_EResult_MAX = CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_TOO_MANY_GUILDS;
const int CMsgDOTAGuildInviteAccountResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAGuildInviteAccountResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildInviteAccountResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAGuildInviteAccountResponse_EResult_Name(CMsgDOTAGuildInviteAccountResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildInviteAccountResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAGuildInviteAccountResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAGuildInviteAccountResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildInviteAccountResponse_EResult>(
    CMsgDOTAGuildInviteAccountResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAGuildCancelInviteResponse_EResult {
  CMsgDOTAGuildCancelInviteResponse_EResult_SUCCESS = 0,
  CMsgDOTAGuildCancelInviteResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAGuildCancelInviteResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(int value);
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse_EResult_EResult_MIN = CMsgDOTAGuildCancelInviteResponse_EResult_SUCCESS;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse_EResult_EResult_MAX = CMsgDOTAGuildCancelInviteResponse_EResult_ERROR_NO_PERMISSION;
const int CMsgDOTAGuildCancelInviteResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAGuildCancelInviteResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCancelInviteResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAGuildCancelInviteResponse_EResult_Name(CMsgDOTAGuildCancelInviteResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildCancelInviteResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAGuildCancelInviteResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAGuildCancelInviteResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildCancelInviteResponse_EResult>(
    CMsgDOTAGuildCancelInviteResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAGuildUpdateDetailsResponse_EResult {
  CMsgDOTAGuildUpdateDetailsResponse_EResult_SUCCESS = 0,
  CMsgDOTAGuildUpdateDetailsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAGuildUpdateDetailsResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(int value);
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_MIN = CMsgDOTAGuildUpdateDetailsResponse_EResult_SUCCESS;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_MAX = CMsgDOTAGuildUpdateDetailsResponse_EResult_ERROR_NO_PERMISSION;
const int CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAGuildUpdateDetailsResponse_EResult_Name(CMsgDOTAGuildUpdateDetailsResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAGuildUpdateDetailsResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAGuildUpdateDetailsResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildUpdateDetailsResponse_EResult>(
    CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAPartySetOpenGuildResponse_EResult {
  CMsgDOTAPartySetOpenGuildResponse_EResult_SUCCESS = 0,
  CMsgDOTAPartySetOpenGuildResponse_EResult_ERROR_UNSPECIFIED = 1
};
bool CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(int value);
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_MIN = CMsgDOTAPartySetOpenGuildResponse_EResult_SUCCESS;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_MAX = CMsgDOTAPartySetOpenGuildResponse_EResult_ERROR_UNSPECIFIED;
const int CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAPartySetOpenGuildResponse_EResult_Name(CMsgDOTAPartySetOpenGuildResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAPartySetOpenGuildResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAPartySetOpenGuildResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAPartySetOpenGuildResponse_EResult>(
    CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAJoinOpenGuildPartyResponse_EResult {
  CMsgDOTAJoinOpenGuildPartyResponse_EResult_SUCCESS = 0,
  CMsgDOTAJoinOpenGuildPartyResponse_EResult_ERROR_UNSPECIFIED = 1
};
bool CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(int value);
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_MIN = CMsgDOTAJoinOpenGuildPartyResponse_EResult_SUCCESS;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_MAX = CMsgDOTAJoinOpenGuildPartyResponse_EResult_ERROR_UNSPECIFIED;
const int CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAJoinOpenGuildPartyResponse_EResult_Name(CMsgDOTAJoinOpenGuildPartyResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAJoinOpenGuildPartyResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAJoinOpenGuildPartyResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAJoinOpenGuildPartyResponse_EResult>(
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAGuildEditLogoResponse_EResult {
  CMsgDOTAGuildEditLogoResponse_EResult_SUCCESS = 0,
  CMsgDOTAGuildEditLogoResponse_EResult_NO_PERMISSION = 1,
  CMsgDOTAGuildEditLogoResponse_EResult_LOGO_UPLOAD_FAILED = 2,
  CMsgDOTAGuildEditLogoResponse_EResult_UNSPECIFIED_ERROR = 3
};
bool CMsgDOTAGuildEditLogoResponse_EResult_IsValid(int value);
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse_EResult_EResult_MIN = CMsgDOTAGuildEditLogoResponse_EResult_SUCCESS;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse_EResult_EResult_MAX = CMsgDOTAGuildEditLogoResponse_EResult_UNSPECIFIED_ERROR;
const int CMsgDOTAGuildEditLogoResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAGuildEditLogoResponse_EResult_EResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildEditLogoResponse_EResult_descriptor();
inline const ::std::string& CMsgDOTAGuildEditLogoResponse_EResult_Name(CMsgDOTAGuildEditLogoResponse_EResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAGuildEditLogoResponse_EResult_descriptor(), value);
}
inline bool CMsgDOTAGuildEditLogoResponse_EResult_Parse(
    const ::std::string& name, CMsgDOTAGuildEditLogoResponse_EResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAGuildEditLogoResponse_EResult>(
    CMsgDOTAGuildEditLogoResponse_EResult_descriptor(), name, value);
}
enum CMsgWatchGameResponse_WatchGameResult {
  CMsgWatchGameResponse_WatchGameResult_PENDING = 0,
  CMsgWatchGameResponse_WatchGameResult_READY = 1,
  CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND = 2,
  CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE = 3,
  CMsgWatchGameResponse_WatchGameResult_CANCELLED = 4,
  CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION = 5,
  CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION = 6,
  CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND = 7
};
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value);
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN = CMsgWatchGameResponse_WatchGameResult_PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
const int CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE = CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor();
inline const ::std::string& CMsgWatchGameResponse_WatchGameResult_Name(CMsgWatchGameResponse_WatchGameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), value);
}
inline bool CMsgWatchGameResponse_WatchGameResult_Parse(
    const ::std::string& name, CMsgWatchGameResponse_WatchGameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWatchGameResponse_WatchGameResult>(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), name, value);
}
enum CMsgGameServerSaveGameResult_Result {
  CMsgGameServerSaveGameResult_Result_SaveSuccessful = 0,
  CMsgGameServerSaveGameResult_Result_SessionNotFound = 1,
  CMsgGameServerSaveGameResult_Result_DatabaseError = 2,
  CMsgGameServerSaveGameResult_Result_TooBig = 3
};
bool CMsgGameServerSaveGameResult_Result_IsValid(int value);
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MIN = CMsgGameServerSaveGameResult_Result_SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MAX = CMsgGameServerSaveGameResult_Result_TooBig;
const int CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE = CMsgGameServerSaveGameResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor();
inline const ::std::string& CMsgGameServerSaveGameResult_Result_Name(CMsgGameServerSaveGameResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGameServerSaveGameResult_Result_descriptor(), value);
}
inline bool CMsgGameServerSaveGameResult_Result_Parse(
    const ::std::string& name, CMsgGameServerSaveGameResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGameServerSaveGameResult_Result>(
    CMsgGameServerSaveGameResult_Result_descriptor(), name, value);
}
enum EDOTAGCMsg {
  k_EMsgGCDOTABase = 7000,
  k_EMsgGCGeneralResponse = 7001,
  k_EMsgGCGameMatchSignOut = 7004,
  k_EMsgGCGameMatchSignOutResponse = 7005,
  k_EMsgGCJoinChatChannel = 7009,
  k_EMsgGCJoinChatChannelResponse = 7010,
  k_EMsgGCOtherJoinedChannel = 7013,
  k_EMsgGCOtherLeftChannel = 7014,
  k_EMsgGCMatchHistoryList = 7017,
  k_EMsgGCStatus = 7026,
  k_EMsgGCGetRecentMatches = 7027,
  k_EMsgGCRecentMatchesResponse = 7028,
  k_EMsgGCFindSourceTVGames = 7031,
  k_EMsgGCSourceTVGamesResponse = 7032,
  k_EMsgGCStartFindingMatch = 7033,
  k_EMsgGCConnectedPlayers = 7034,
  k_EMsgGCAbandonCurrentGame = 7035,
  k_EMsgGCStopFindingMatch = 7036,
  k_EMsgGCPracticeLobbyCreate = 7038,
  k_EMsgGCPracticeLobbyLeave = 7040,
  k_EMsgGCPracticeLobbyLaunch = 7041,
  k_EMsgGCPracticeLobbyList = 7042,
  k_EMsgGCPracticeLobbyListResponse = 7043,
  k_EMsgGCPracticeLobbyJoin = 7044,
  k_EMsgGCPracticeLobbySetDetails = 7046,
  k_EMsgGCPracticeLobbySetTeamSlot = 7047,
  k_EMsgGCInitialQuestionnaireResponse = 7049,
  k_EMsgGCTournamentRequest = 7051,
  k_EMsgGCTournamentResponse = 7052,
  k_EMsgGCBetaParticiaptionRequest = 7053,
  k_EMsgGCBetaParticiaptionResponse = 7054,
  k_EMsgGCPracticeLobbyResponse = 7055,
  k_EMsgGCBroadcastNotification = 7056,
  k_EMsgGCLiveScoreboardUpdate = 7057,
  k_EMsgGCRequestDefaultChatChannel = 7058,
  k_EMsgGCRequestDefaultChatChannelResponse = 7059,
  k_EMsgGCRequestChatChannelList = 7060,
  k_EMsgGCRequestChatChannelListResponse = 7061,
  k_EMsgGCRequestMatches = 7064,
  k_EMsgGCRequestMatchesResponse = 7065,
  k_EMsgGCRequestPlayerResources = 7068,
  k_EMsgGCRequestPlayerResourcesResponse = 7069,
  k_EMsgGCReadyUp = 7070,
  k_EMsgGCKickedFromMatchmakingQueue = 7071,
  k_EMsgGCLeaverDetected = 7072,
  k_EMsgGCSpectateFriendGame = 7073,
  k_EMsgGCSpectateFriendGameResponse = 7074,
  k_EMsgGCPlayerReports = 7075,
  k_EMsgGCReportsRemainingRequest = 7076,
  k_EMsgGCReportsRemainingResponse = 7077,
  k_EMsgGCSubmitPlayerReport = 7078,
  k_EMsgGCSubmitPlayerReportResponse = 7079,
  k_EMsgGCGameChatLog = 7080,
  k_EMsgGCPracticeLobbyKick = 7081,
  k_EMsgGCReportCountsRequest = 7082,
  k_EMsgGCReportCountsResponse = 7083,
  k_EMsgGCRequestSaveGames = 7084,
  k_EMsgGCRequestSaveGamesServer = 7085,
  k_EMsgGCRequestSaveGamesResponse = 7086,
  k_EMsgGCLeaverDetectedResponse = 7087,
  k_EMsgGCPlayerFailedToConnect = 7088,
  k_EMsgGCGCToRelayConnect = 7089,
  k_EMsgGCGCToRelayConnectresponse = 7090,
  k_EMsgGCWatchGame = 7091,
  k_EMsgGCWatchGameResponse = 7092,
  k_EMsgGCBanStatusRequest = 7093,
  k_EMsgGCBanStatusResponse = 7094,
  k_EMsgGCMatchDetailsRequest = 7095,
  k_EMsgGCMatchDetailsResponse = 7096,
  k_EMsgGCCancelWatchGame = 7097,
  k_EMsgGCProfileRequest = 7098,
  k_EMsgGCProfileResponse = 7099,
  k_EMsgGCPopup = 7102,
  k_EMsgGCDOTAClearNotifySuccessfulReport = 7104,
  k_EMsgGCGenericResult = 7108,
  k_EMsgGCFriendPracticeLobbyListRequest = 7111,
  k_EMsgGCFriendPracticeLobbyListResponse = 7112,
  k_EMsgGCPracticeLobbyJoinResponse = 7113,
  k_EMsgClientEconNotification_Job = 7114,
  k_EMsgGCCreateTeam = 7115,
  k_EMsgGCCreateTeamResponse = 7116,
  k_EMsgGCDisbandTeam = 7117,
  k_EMsgGCDisbandTeamResponse = 7118,
  k_EMsgGCRequestTeamData = 7119,
  k_EMsgGCRequestTeamDataResponse = 7120,
  k_EMsgGCTeamData = 7121,
  k_EMsgGCTeamInvite_InviterToGC = 7122,
  k_EMsgGCTeamInvite_GCImmediateResponseToInviter = 7123,
  k_EMsgGCTeamInvite_GCRequestToInvitee = 7124,
  k_EMsgGCTeamInvite_InviteeResponseToGC = 7125,
  k_EMsgGCTeamInvite_GCResponseToInviter = 7126,
  k_EMsgGCTeamInvite_GCResponseToInvitee = 7127,
  k_EMsgGCKickTeamMember = 7128,
  k_EMsgGCKickTeamMemberResponse = 7129,
  k_EMsgGCLeaveTeam = 7130,
  k_EMsgGCLeaveTeamResponse = 7131,
  k_EMsgGCSuggestTeamMatchmaking = 7132,
  k_EMsgGCPlayerHeroesFavoritesAdd = 7133,
  k_EMsgGCPlayerHeroesFavoritesRemove = 7134,
  k_EMsgGCEditTeamLogo = 7139,
  k_EMsgGCEditTeamLogoResponse = 7140,
  k_EMsgGCSetShowcaseHero = 7141,
  k_EMsgGCApplyTeamToPracticeLobby = 7142,
  k_EMsgGCRequestInternatinalTicketEmail = 7143,
  k_EMsgGCTransferTeamAdmin = 7144,
  k_EMsgGCClearTournamentGame = 7145,
  k_EMsgRequestLeagueInfo = 7147,
  k_EMsgResponseLeagueInfo = 7148,
  k_EMsgGCPracticeLobbyJoinBroadcastChannel = 7149,
  k_EMsgGC_TournamentItemEvent = 7150,
  k_EMsgGC_TournamentItemEventResponse = 7151,
  k_EMsgCastMatchVote = 7152,
  k_EMsgCastMatchVoteResponse = 7153,
  k_EMsgRetrieveMatchVote = 7154,
  k_EMsgRetrieveMatchVoteResponse = 7155,
  k_EMsgTeamFanfare = 7156,
  k_EMsgResponseTeamFanfare = 7157,
  k_EMsgGC_GameServerUploadSaveGame = 7158,
  k_EMsgGC_GameServerSaveGameResult = 7159,
  k_EMsgGC_GameServerGetLoadGame = 7160,
  k_EMsgGC_GameServerGetLoadGameResult = 7161,
  k_EMsgCheckSpectatorOnly = 7162,
  k_EMsgCheckSpectatorOnlyResponse = 7163,
  k_EMsgGCTeamProfileRequest = 7164,
  k_EMsgGCTeamProfileResponse = 7165,
  k_EMsgGCEditTeamDetails = 7166,
  k_EMsgGCEditTeamDetailsResponse = 7167,
  k_EMsgGCProTeamListRequest = 7168,
  k_EMsgGCProTeamListResponse = 7169,
  k_EMsgGCReadyUpStatus = 7170,
  k_EMsgGCHallOfFame = 7171,
  k_EMsgGCHallOfFameRequest = 7172,
  k_EMsgGCHallOfFameResponse = 7173,
  k_EMsgGCGenerateDiretidePrizeList = 7174,
  k_EMsgGCDiretidePrizeResponse = 7175,
  k_EMsgGCRewardDiretidePrizes = 7176,
  k_EMsgGCDiretidePrizesRewardedResponse = 7177,
  k_EMsgGCHalloweenHighScoreRequest = 7178,
  k_EMsgGCHalloweenHighScoreResponse = 7179,
  k_EMsgGCGenerateDiretidePrizeListResponse = 7180,
  k_EMsgGCNotifyResetKeybindings = 7181,
  k_EMsgGCStorePromoPagesRequest = 7182,
  k_EMsgGCStorePromoPagesResponse = 7183,
  k_EMsgGCSpawnLootGreevil = 7184,
  k_EMsgGCDismissLootGreevil = 7185,
  k_EMsgGCToGCMatchCompleted = 7186,
  k_EMsgGCDismissLootGreevilResponse = 7187,
  k_EMsgGCBalancedShuffleLobby = 7188,
  k_EMsgGCToGCCheckLeaguePermission = 7189,
  k_EMsgGCToGCCheckLeaguePermissionResponse = 7190,
  k_EMsgGCLeagueScheduleRequest = 7191,
  k_EMsgGCLeagueScheduleResponse = 7192,
  k_EMsgGCLeagueScheduleEdit = 7193,
  k_EMsgGCLeagueScheduleEditResponse = 7194,
  k_EMsgGCLeaguesInMonthRequest = 7195,
  k_EMsgGCLeaguesInMonthResponse = 7196,
  k_EMsgGCMatchmakingStatsRequest = 7197,
  k_EMsgGCMatchmakingStatsResponse = 7198,
  k_EMsgGCBotGameCreate = 7199,
  k_EMsgGCSetMatchHistoryAccess = 7200,
  k_EMsgGCSetMatchHistoryAccessResponse = 7201,
  k_EMsgGCNotifyMatchHistoryAccessChange = 7202,
  k_EMsgUpgradeLeagueItem = 7203,
  k_EMsgUpgradeLeagueItemResponse = 7204,
  k_EMsgGCTeamMemberProfileRequest = 7205,
  k_EMsgGCWatchDownloadedReplay = 7206,
  k_EMsgGCSetMapLocationState = 7207,
  k_EMsgGCSetMapLocationStateResponse = 7208,
  k_EMsgGCResetMapLocations = 7209,
  k_EMsgGCResetMapLocationsResponse = 7210,
  k_EMsgGCTeamOnProfile = 7211,
  k_EMsgGCSetFeaturedItems = 7212,
  k_EMsgGCFeaturedItemsRequest = 7213,
  k_EMsgGCFeaturedItemsResponse = 7214,
  k_EMsgGCFeaturedItems = 7215,
  k_EMsgRefreshPartnerAccountLink = 7216,
  k_EMsgClientsRejoinChatChannels = 7217,
  k_EMsgGCToGCGetUserChatInfo = 7218,
  k_EMsgGCToGCGetUserChatInfoResponse = 7219,
  k_EMsgGCToGCLeaveAllChatChannels = 7220,
  k_EMsgGCToGCUpdateAccountChatBan = 7221,
  k_EMsgGCGuildCreateRequest = 7222,
  k_EMsgGCGuildCreateResponse = 7223,
  k_EMsgGCGuildSetAccountRoleRequest = 7224,
  k_EMsgGCGuildSetAccountRoleResponse = 7225,
  k_EMsgGCRequestGuildData = 7226,
  k_EMsgGCGuildData = 7227,
  k_EMsgGCGuildInviteAccountRequest = 7228,
  k_EMsgGCGuildInviteAccountResponse = 7229,
  k_EMsgGCGuildCancelInviteRequest = 7230,
  k_EMsgGCGuildCancelInviteResponse = 7231,
  k_EMsgGCGuildUpdateDetailsRequest = 7232,
  k_EMsgGCGuildUpdateDetailsResponse = 7233,
  k_EMsgGCToGCCanInviteUser = 7234,
  k_EMsgGCToGCCanInviteUserResponse = 7235,
  k_EMsgGCToGCGetUserRank = 7236,
  k_EMsgGCToGCGetUserRankResponse = 7237,
  k_EMsgGCToGCGetTeamRankChange = 7238,
  k_EMsgGCToGCGetTeamRankChangeResponse = 7239,
  k_EMsgGCToGCUpdateTeamStats = 7240,
  k_EMsgGCToGCGetTeamRank = 7241,
  k_EMsgGCToGCGetTeamRankResponse = 7242,
  k_EMsgGCTeamIDByNameRequest = 7245,
  k_EMsgGCTeamIDByNameResponse = 7246,
  k_EMsgGCEditTeam = 7247,
  k_EMsgGCPassportDataRequest = 7248,
  k_EMsgGCPassportDataResponse = 7249,
  k_EMsgGCNotInGuildData = 7251,
  k_EMsgGCPassportVote = 7253,
  k_EMsgGCGuildInviteData = 7254,
  k_EMsgGCToGCGetLeagueAdmin = 7255,
  k_EMsgGCToGCGetLeagueAdminResponse = 7256,
  k_EMsgGCPassportVoteSelection = 7257,
  k_EMsgGCRequestLeaguePrizePool = 7258,
  k_EMsgGCRequestLeaguePrizePoolResponse = 7259,
  k_EMsgGCToGCUpdateMatchmakingStats = 7260,
  k_EMsgGCToGCUpdateOpenGuildPartyRequest = 7261,
  k_EMsgGCToGCUpdateOpenGuildPartyResponse = 7262,
  k_EMsgGCToGCDestroyOpenGuildPartyRequest = 7263,
  k_EMsgGCToGCDestroyOpenGuildPartyResponse = 7264,
  k_EMsgGCGuildUpdateMessage = 7265,
  k_EMsgGCPartySetOpenGuildRequest = 7266,
  k_EMsgGCPartySetOpenGuildResponse = 7267,
  k_EMsgGCGuildOpenPartyRefresh = 7268,
  k_EMsgGCJoinOpenGuildPartyRequest = 7269,
  k_EMsgGCJoinOpenGuildPartyResponse = 7270,
  k_EMsgGCLeaveChatChannel = 7272,
  k_EMsgGCChatMessage = 7273,
  k_EMsgGCGetHeroStandings = 7274,
  k_EMsgGCGetHeroStandingsResponse = 7275,
  k_EMsgGCMatchmakingLanguagePreference = 7276,
  k_EMsgGCPassportFeaturedMatchRequest = 7277,
  k_EMsgGCPassportFeaturedMatchResponse = 7278,
  k_EMsgGCGuildEditLogoRequest = 7279,
  k_EMsgGCGuildEditLogoResponse = 7280,
  k_EMsgGCGuildmatePracticeLobbyListRequest = 7281,
  k_EMsgGCGuildmatePracticeLobbyListResponse = 7282,
  k_EMsgGCItemEditorReservationsRequest = 7283,
  k_EMsgGCItemEditorReservationsResponse = 7284,
  k_EMsgGCItemEditorReserveItemDef = 7285,
  k_EMsgGCItemEditorReserveItemDefResponse = 7286,
  k_EMsgGCItemEditorReleaseReservation = 7287,
  k_EMsgGCItemEditorReleaseReservationResponse = 7288,
  k_EMsgGCRewardTutorialPrizes = 7289,
  k_EMsgGCLastHitChallengeHighScorePost = 7290,
  k_EMsgGCLastHitChallengeHighScoreRequest = 7291,
  k_EMsgGCLastHitChallengeHighScoreResponse = 7292,
  k_EMsgGCDev_GrantWarKill = 8001
};
bool EDOTAGCMsg_IsValid(int value);
const EDOTAGCMsg EDOTAGCMsg_MIN = k_EMsgGCDOTABase;
const EDOTAGCMsg EDOTAGCMsg_MAX = k_EMsgGCDev_GrantWarKill;
const int EDOTAGCMsg_ARRAYSIZE = EDOTAGCMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor();
inline const ::std::string& EDOTAGCMsg_Name(EDOTAGCMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCMsg_descriptor(), value);
}
inline bool EDOTAGCMsg_Parse(
    const ::std::string& name, EDOTAGCMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCMsg>(
    EDOTAGCMsg_descriptor(), name, value);
}
enum DOTA_PartnerAccountType {
  DOTA_PARTNER_NONE = 0,
  DOTA_PARTNER_PERFECT_WORLD = 1,
  DOTA_PARTNER_NEXON = 2
};
bool DOTA_PartnerAccountType_IsValid(int value);
const DOTA_PartnerAccountType DOTA_PartnerAccountType_MIN = DOTA_PARTNER_NONE;
const DOTA_PartnerAccountType DOTA_PartnerAccountType_MAX = DOTA_PARTNER_NEXON;
const int DOTA_PartnerAccountType_ARRAYSIZE = DOTA_PartnerAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_PartnerAccountType_descriptor();
inline const ::std::string& DOTA_PartnerAccountType_Name(DOTA_PartnerAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_PartnerAccountType_descriptor(), value);
}
inline bool DOTA_PartnerAccountType_Parse(
    const ::std::string& name, DOTA_PartnerAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_PartnerAccountType>(
    DOTA_PartnerAccountType_descriptor(), name, value);
}
enum DOTA_GameMode {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14
};
bool DOTA_GameMode_IsValid(int value);
const DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
const DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_FH;
const int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor();
inline const ::std::string& DOTA_GameMode_Name(DOTA_GameMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), value);
}
inline bool DOTA_GameMode_Parse(
    const ::std::string& name, DOTA_GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum DOTA_GameState {
  DOTA_GAMERULES_STATE_INIT = 0,
  DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
  DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
  DOTA_GAMERULES_STATE_PRE_GAME = 4,
  DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
  DOTA_GAMERULES_STATE_POST_GAME = 6,
  DOTA_GAMERULES_STATE_DISCONNECT = 7,
  DOTA_GAMERULES_STATE_LAST = 8
};
bool DOTA_GameState_IsValid(int value);
const DOTA_GameState DOTA_GameState_MIN = DOTA_GAMERULES_STATE_INIT;
const DOTA_GameState DOTA_GameState_MAX = DOTA_GAMERULES_STATE_LAST;
const int DOTA_GameState_ARRAYSIZE = DOTA_GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor();
inline const ::std::string& DOTA_GameState_Name(DOTA_GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameState_descriptor(), value);
}
inline bool DOTA_GameState_Parse(
    const ::std::string& name, DOTA_GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameState>(
    DOTA_GameState_descriptor(), name, value);
}
enum DOTA_GC_TEAM {
  DOTA_GC_TEAM_GOOD_GUYS = 0,
  DOTA_GC_TEAM_BAD_GUYS = 1,
  DOTA_GC_TEAM_BROADCASTER = 2,
  DOTA_GC_TEAM_SPECTATOR = 3,
  DOTA_GC_TEAM_PLAYER_POOL = 4,
  DOTA_GC_TEAM_NOTEAM = 5
};
bool DOTA_GC_TEAM_IsValid(int value);
const DOTA_GC_TEAM DOTA_GC_TEAM_MIN = DOTA_GC_TEAM_GOOD_GUYS;
const DOTA_GC_TEAM DOTA_GC_TEAM_MAX = DOTA_GC_TEAM_NOTEAM;
const int DOTA_GC_TEAM_ARRAYSIZE = DOTA_GC_TEAM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor();
inline const ::std::string& DOTA_GC_TEAM_Name(DOTA_GC_TEAM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GC_TEAM_descriptor(), value);
}
inline bool DOTA_GC_TEAM_Parse(
    const ::std::string& name, DOTA_GC_TEAM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GC_TEAM>(
    DOTA_GC_TEAM_descriptor(), name, value);
}
enum DOTA_CM_PICK {
  DOTA_CM_RANDOM = 0,
  DOTA_CM_GOOD_GUYS = 1,
  DOTA_CM_BAD_GUYS = 2
};
bool DOTA_CM_PICK_IsValid(int value);
const DOTA_CM_PICK DOTA_CM_PICK_MIN = DOTA_CM_RANDOM;
const DOTA_CM_PICK DOTA_CM_PICK_MAX = DOTA_CM_BAD_GUYS;
const int DOTA_CM_PICK_ARRAYSIZE = DOTA_CM_PICK_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor();
inline const ::std::string& DOTA_CM_PICK_Name(DOTA_CM_PICK value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CM_PICK_descriptor(), value);
}
inline bool DOTA_CM_PICK_Parse(
    const ::std::string& name, DOTA_CM_PICK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CM_PICK>(
    DOTA_CM_PICK_descriptor(), name, value);
}
enum DOTALeaverStatus_t {
  DOTA_LEAVER_NONE = 0,
  DOTA_LEAVER_DISCONNECTED = 1,
  DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
  DOTA_LEAVER_ABANDONED = 3,
  DOTA_LEAVER_AFK = 4,
  DOTA_LEAVER_NEVER_CONNECTED = 5,
  DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6
};
bool DOTALeaverStatus_t_IsValid(int value);
const DOTALeaverStatus_t DOTALeaverStatus_t_MIN = DOTA_LEAVER_NONE;
const DOTALeaverStatus_t DOTALeaverStatus_t_MAX = DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG;
const int DOTALeaverStatus_t_ARRAYSIZE = DOTALeaverStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor();
inline const ::std::string& DOTALeaverStatus_t_Name(DOTALeaverStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALeaverStatus_t_descriptor(), value);
}
inline bool DOTALeaverStatus_t_Parse(
    const ::std::string& name, DOTALeaverStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALeaverStatus_t>(
    DOTALeaverStatus_t_descriptor(), name, value);
}
enum DOTALobbyReadyState {
  DOTALobbyReadyState_UNDECLARED = 0,
  DOTALobbyReadyState_ACCEPTED = 1,
  DOTALobbyReadyState_DECLINED = 2
};
bool DOTALobbyReadyState_IsValid(int value);
const DOTALobbyReadyState DOTALobbyReadyState_MIN = DOTALobbyReadyState_UNDECLARED;
const DOTALobbyReadyState DOTALobbyReadyState_MAX = DOTALobbyReadyState_DECLINED;
const int DOTALobbyReadyState_ARRAYSIZE = DOTALobbyReadyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor();
inline const ::std::string& DOTALobbyReadyState_Name(DOTALobbyReadyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyReadyState_descriptor(), value);
}
inline bool DOTALobbyReadyState_Parse(
    const ::std::string& name, DOTALobbyReadyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyReadyState>(
    DOTALobbyReadyState_descriptor(), name, value);
}
enum DOTAGameVersion {
  GAME_VERSION_CURRENT = 0,
  GAME_VERSION_STABLE = 1
};
bool DOTAGameVersion_IsValid(int value);
const DOTAGameVersion DOTAGameVersion_MIN = GAME_VERSION_CURRENT;
const DOTAGameVersion DOTAGameVersion_MAX = GAME_VERSION_STABLE;
const int DOTAGameVersion_ARRAYSIZE = DOTAGameVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor();
inline const ::std::string& DOTAGameVersion_Name(DOTAGameVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAGameVersion_descriptor(), value);
}
inline bool DOTAGameVersion_Parse(
    const ::std::string& name, DOTAGameVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAGameVersion>(
    DOTAGameVersion_descriptor(), name, value);
}
enum DOTAJoinLobbyResult {
  DOTA_JOIN_RESULT_SUCCESS = 0,
  DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
  DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
  DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
  DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
  DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
  DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
  DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7
};
bool DOTAJoinLobbyResult_IsValid(int value);
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MIN = DOTA_JOIN_RESULT_SUCCESS;
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MAX = DOTA_JOIN_RESULT_IN_TEAM_PARTY;
const int DOTAJoinLobbyResult_ARRAYSIZE = DOTAJoinLobbyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor();
inline const ::std::string& DOTAJoinLobbyResult_Name(DOTAJoinLobbyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAJoinLobbyResult_descriptor(), value);
}
inline bool DOTAJoinLobbyResult_Parse(
    const ::std::string& name, DOTAJoinLobbyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAJoinLobbyResult>(
    DOTAJoinLobbyResult_descriptor(), name, value);
}
enum DOTAMatchVote {
  DOTAMatchVote_INVALID = 0,
  DOTAMatchVote_POSITIVE = 1,
  DOTAMatchVote_NEGATIVE = 2
};
bool DOTAMatchVote_IsValid(int value);
const DOTAMatchVote DOTAMatchVote_MIN = DOTAMatchVote_INVALID;
const DOTAMatchVote DOTAMatchVote_MAX = DOTAMatchVote_NEGATIVE;
const int DOTAMatchVote_ARRAYSIZE = DOTAMatchVote_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor();
inline const ::std::string& DOTAMatchVote_Name(DOTAMatchVote value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAMatchVote_descriptor(), value);
}
inline bool DOTAMatchVote_Parse(
    const ::std::string& name, DOTAMatchVote* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAMatchVote>(
    DOTAMatchVote_descriptor(), name, value);
}
enum LobbyDotaTVDelay {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2
};
bool LobbyDotaTVDelay_IsValid(int value);
const LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
const LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_300;
const int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor();
inline const ::std::string& LobbyDotaTVDelay_Name(LobbyDotaTVDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), value);
}
inline bool LobbyDotaTVDelay_Parse(
    const ::std::string& name, LobbyDotaTVDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum DOTAChatChannelType_t {
  DOTAChannelType_Regional = 0,
  DOTAChannelType_Custom = 1,
  DOTAChannelType_Party = 2,
  DOTAChannelType_Lobby = 3,
  DOTAChannelType_Team = 4,
  DOTAChannelType_Guild = 5
};
bool DOTAChatChannelType_t_IsValid(int value);
const DOTAChatChannelType_t DOTAChatChannelType_t_MIN = DOTAChannelType_Regional;
const DOTAChatChannelType_t DOTAChatChannelType_t_MAX = DOTAChannelType_Guild;
const int DOTAChatChannelType_t_ARRAYSIZE = DOTAChatChannelType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor();
inline const ::std::string& DOTAChatChannelType_t_Name(DOTAChatChannelType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAChatChannelType_t_descriptor(), value);
}
inline bool DOTAChatChannelType_t_Parse(
    const ::std::string& name, DOTAChatChannelType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAChatChannelType_t>(
    DOTAChatChannelType_t_descriptor(), name, value);
}
enum DOTA_TournamentEvents {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5
};
bool DOTA_TournamentEvents_IsValid(int value);
const DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
const DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_AEGIS_STOLEN;
const int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor();
inline const ::std::string& DOTA_TournamentEvents_Name(DOTA_TournamentEvents value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), value);
}
inline bool DOTA_TournamentEvents_Parse(
    const ::std::string& name, DOTA_TournamentEvents* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
enum DOTA_WatchReplayType {
  DOTA_WATCH_REPLAY_NORMAL = 0,
  DOTA_WATCH_REPLAY_HIGHLIGHTS = 1
};
bool DOTA_WatchReplayType_IsValid(int value);
const DOTA_WatchReplayType DOTA_WatchReplayType_MIN = DOTA_WATCH_REPLAY_NORMAL;
const DOTA_WatchReplayType DOTA_WatchReplayType_MAX = DOTA_WATCH_REPLAY_HIGHLIGHTS;
const int DOTA_WatchReplayType_ARRAYSIZE = DOTA_WatchReplayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_WatchReplayType_descriptor();
inline const ::std::string& DOTA_WatchReplayType_Name(DOTA_WatchReplayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_WatchReplayType_descriptor(), value);
}
inline bool DOTA_WatchReplayType_Parse(
    const ::std::string& name, DOTA_WatchReplayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_WatchReplayType>(
    DOTA_WatchReplayType_descriptor(), name, value);
}
enum Fantasy_Roles {
  FANTASY_ROLE_UNDEFINED = 0,
  FANTASY_ROLE_CARRY = 1,
  FANTASY_ROLE_SOLO = 2,
  FANTASY_ROLE_SUPPORT = 3
};
bool Fantasy_Roles_IsValid(int value);
const Fantasy_Roles Fantasy_Roles_MIN = FANTASY_ROLE_UNDEFINED;
const Fantasy_Roles Fantasy_Roles_MAX = FANTASY_ROLE_SUPPORT;
const int Fantasy_Roles_ARRAYSIZE = Fantasy_Roles_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor();
inline const ::std::string& Fantasy_Roles_Name(Fantasy_Roles value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Roles_descriptor(), value);
}
inline bool Fantasy_Roles_Parse(
    const ::std::string& name, Fantasy_Roles* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Roles>(
    Fantasy_Roles_descriptor(), name, value);
}
enum Fantasy_Team_Slots {
  FANTASY_SLOT_CARRY = 1,
  FANTASY_SLOT_SOLO = 2,
  FANTASY_SLOT_SUPPORT = 4,
  FANTASY_SLOT_ANY = 7
};
bool Fantasy_Team_Slots_IsValid(int value);
const Fantasy_Team_Slots Fantasy_Team_Slots_MIN = FANTASY_SLOT_CARRY;
const Fantasy_Team_Slots Fantasy_Team_Slots_MAX = FANTASY_SLOT_ANY;
const int Fantasy_Team_Slots_ARRAYSIZE = Fantasy_Team_Slots_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor();
inline const ::std::string& Fantasy_Team_Slots_Name(Fantasy_Team_Slots value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Team_Slots_descriptor(), value);
}
inline bool Fantasy_Team_Slots_Parse(
    const ::std::string& name, Fantasy_Team_Slots* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Team_Slots>(
    Fantasy_Team_Slots_descriptor(), name, value);
}
enum DOTA_2013PassportSelectionIndices {
  PP13_SEL_ALLSTAR_PLAYER_0 = 0,
  PP13_SEL_ALLSTAR_PLAYER_1 = 1,
  PP13_SEL_ALLSTAR_PLAYER_2 = 2,
  PP13_SEL_ALLSTAR_PLAYER_3 = 3,
  PP13_SEL_ALLSTAR_PLAYER_4 = 4,
  PP13_SEL_ALLSTAR_PLAYER_5 = 5,
  PP13_SEL_ALLSTAR_PLAYER_6 = 6,
  PP13_SEL_ALLSTAR_PLAYER_7 = 7,
  PP13_SEL_ALLSTAR_PLAYER_8 = 8,
  PP13_SEL_ALLSTAR_PLAYER_9 = 9,
  PP13_SEL_QUALPRED_WEST_0 = 10,
  PP13_SEL_QUALPRED_WEST_1 = 11,
  PP13_SEL_QUALPRED_WEST_2 = 12,
  PP13_SEL_QUALPRED_WEST_3 = 13,
  PP13_SEL_QUALPRED_WEST_4 = 14,
  PP13_SEL_QUALPRED_WEST_5 = 15,
  PP13_SEL_QUALPRED_WEST_6 = 16,
  PP13_SEL_QUALPRED_WEST_7 = 17,
  PP13_SEL_QUALPRED_WEST_8 = 18,
  PP13_SEL_QUALPRED_WEST_9 = 19,
  PP13_SEL_QUALPRED_WEST_10 = 20,
  PP13_SEL_QUALPRED_WEST_11 = 21,
  PP13_SEL_QUALPRED_WEST_12 = 22,
  PP13_SEL_QUALPRED_WEST_13 = 23,
  PP13_SEL_QUALPRED_WEST_14 = 24,
  PP13_SEL_QUALPRED_EAST_0 = 25,
  PP13_SEL_QUALPRED_EAST_1 = 26,
  PP13_SEL_QUALPRED_EAST_2 = 27,
  PP13_SEL_QUALPRED_EAST_3 = 28,
  PP13_SEL_QUALPRED_EAST_4 = 29,
  PP13_SEL_QUALPRED_EAST_5 = 30,
  PP13_SEL_QUALPRED_EAST_6 = 31,
  PP13_SEL_QUALPRED_EAST_7 = 32,
  PP13_SEL_QUALPRED_EAST_8 = 33,
  PP13_SEL_QUALPRED_EAST_9 = 34,
  PP13_SEL_QUALPRED_EAST_10 = 35,
  PP13_SEL_QUALPRED_EAST_11 = 36,
  PP13_SEL_QUALPRED_EAST_12 = 37,
  PP13_SEL_QUALPRED_EAST_13 = 38,
  PP13_SEL_QUALPRED_EAST_14 = 39,
  PP13_SEL_TEAMCUP_TEAM = 40,
  PP13_SEL_TEAMCUP_PLAYER = 41,
  PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
  PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
  PP13_SEL_EVENTPRED_0 = 44,
  PP13_SEL_EVENTPRED_1 = 45,
  PP13_SEL_EVENTPRED_2 = 46,
  PP13_SEL_EVENTPRED_3 = 47,
  PP13_SEL_EVENTPRED_4 = 48,
  PP13_SEL_EVENTPRED_5 = 49,
  PP13_SEL_EVENTPRED_6 = 50,
  PP13_SEL_EVENTPRED_7 = 51,
  PP13_SEL_EVENTPRED_8 = 52,
  PP13_SEL_EVENTPRED_9 = 53,
  PP13_SEL_EVENTPRED_10 = 54,
  PP13_SEL_EVENTPRED_11 = 55,
  PP13_SEL_EVENTPRED_12 = 56,
  PP13_SEL_EVENTPRED_13 = 57,
  PP13_SEL_EVENTPRED_14 = 58,
  PP13_SEL_EVENTPRED_15 = 59,
  PP13_SEL_EVENTPRED_16 = 60,
  PP13_SEL_EVENTPRED_17 = 61,
  PP13_SEL_EVENTPRED_18 = 62,
  PP13_SEL_EVENTPRED_19 = 63,
  PP13_SEL_EVENTPRED_20 = 64,
  PP13_SEL_EVENTPRED_21 = 65,
  PP13_SEL_EVENTPRED_22 = 66,
  PP13_SEL_EVENTPRED_23 = 67,
  PP13_SEL_EVENTPRED_24 = 68,
  PP13_SEL_EVENTPRED_25 = 69,
  PP13_SEL_EVENTPRED_26 = 70,
  PP13_SEL_EVENTPRED_27 = 71,
  PP13_SEL_EVENTPRED_28 = 72,
  PP13_SEL_EVENTPRED_29 = 73,
  PP13_SEL_EVENTPRED_30 = 74,
  PP13_SEL_EVENTPRED_31 = 75,
  PP13_SEL_EVENTPRED_32 = 76,
  PP13_SEL_EVENTPRED_33 = 77,
  PP13_SEL_EVENTPRED_34 = 78,
  PP13_SEL_EVENTPRED_35 = 79,
  PP13_SEL_EVENTPRED_36 = 80,
  PP13_SEL_EVENTPRED_37 = 81,
  PP13_SEL_EVENTPRED_38 = 82,
  PP13_SEL_EVENTPRED_39 = 83,
  PP13_SEL_EVENTPRED_40 = 84,
  PP13_SEL_EVENTPRED_41 = 85,
  PP13_SEL_EVENTPRED_42 = 86,
  PP13_SEL_EVENTPRED_43 = 87
};
bool DOTA_2013PassportSelectionIndices_IsValid(int value);
const DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MIN = PP13_SEL_ALLSTAR_PLAYER_0;
const DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MAX = PP13_SEL_EVENTPRED_43;
const int DOTA_2013PassportSelectionIndices_ARRAYSIZE = DOTA_2013PassportSelectionIndices_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor();
inline const ::std::string& DOTA_2013PassportSelectionIndices_Name(DOTA_2013PassportSelectionIndices value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_2013PassportSelectionIndices_descriptor(), value);
}
inline bool DOTA_2013PassportSelectionIndices_Parse(
    const ::std::string& name, DOTA_2013PassportSelectionIndices* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_2013PassportSelectionIndices>(
    DOTA_2013PassportSelectionIndices_descriptor(), name, value);
}
enum EDOTAGCSessionNeed {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203
};
bool EDOTAGCSessionNeed_IsValid(int value);
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerRelay;
const int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
inline const ::std::string& EDOTAGCSessionNeed_Name(EDOTAGCSessionNeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), value);
}
inline bool EDOTAGCSessionNeed_Parse(
    const ::std::string& name, EDOTAGCSessionNeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum EItemEditorReservationResult {
  k_EItemEditorReservationResult_OK = 1,
  k_EItemEditorReservationResult_AlreadyExists = 2,
  k_EItemEditorReservationResult_Reserved = 3,
  k_EItemEditorReservationResult_TimedOut = 4
};
bool EItemEditorReservationResult_IsValid(int value);
const EItemEditorReservationResult EItemEditorReservationResult_MIN = k_EItemEditorReservationResult_OK;
const EItemEditorReservationResult EItemEditorReservationResult_MAX = k_EItemEditorReservationResult_TimedOut;
const int EItemEditorReservationResult_ARRAYSIZE = EItemEditorReservationResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemEditorReservationResult_descriptor();
inline const ::std::string& EItemEditorReservationResult_Name(EItemEditorReservationResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemEditorReservationResult_descriptor(), value);
}
inline bool EItemEditorReservationResult_Parse(
    const ::std::string& name, EItemEditorReservationResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemEditorReservationResult>(
    EItemEditorReservationResult_descriptor(), name, value);
}
enum DOTASelectionPriorityRules {
  k_DOTASelectionPriorityRules_Manual = 0,
  k_DOTASelectionPriorityRules_Automatic = 1
};
bool DOTASelectionPriorityRules_IsValid(int value);
const DOTASelectionPriorityRules DOTASelectionPriorityRules_MIN = k_DOTASelectionPriorityRules_Manual;
const DOTASelectionPriorityRules DOTASelectionPriorityRules_MAX = k_DOTASelectionPriorityRules_Automatic;
const int DOTASelectionPriorityRules_ARRAYSIZE = DOTASelectionPriorityRules_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTASelectionPriorityRules_descriptor();
inline const ::std::string& DOTASelectionPriorityRules_Name(DOTASelectionPriorityRules value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTASelectionPriorityRules_descriptor(), value);
}
inline bool DOTASelectionPriorityRules_Parse(
    const ::std::string& name, DOTASelectionPriorityRules* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTASelectionPriorityRules>(
    DOTASelectionPriorityRules_descriptor(), name, value);
}
enum LobbyDotaPauseSetting {
  LobbyDotaPauseSetting_Unlimited = 0,
  LobbyDotaPauseSetting_Limited = 1,
  LobbyDotaPauseSetting_Disabled = 2
};
bool LobbyDotaPauseSetting_IsValid(int value);
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MIN = LobbyDotaPauseSetting_Unlimited;
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MAX = LobbyDotaPauseSetting_Disabled;
const int LobbyDotaPauseSetting_ARRAYSIZE = LobbyDotaPauseSetting_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor();
inline const ::std::string& LobbyDotaPauseSetting_Name(LobbyDotaPauseSetting value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaPauseSetting_descriptor(), value);
}
inline bool LobbyDotaPauseSetting_Parse(
    const ::std::string& name, LobbyDotaPauseSetting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaPauseSetting>(
    LobbyDotaPauseSetting_descriptor(), name, value);
}
enum DOTALobbyVisibility {
  DOTALobbyVisibility_Public = 0,
  DOTALobbyVisibility_Friends = 1,
  DOTALobbyVisibility_Unlisted = 2
};
bool DOTALobbyVisibility_IsValid(int value);
const DOTALobbyVisibility DOTALobbyVisibility_MIN = DOTALobbyVisibility_Public;
const DOTALobbyVisibility DOTALobbyVisibility_MAX = DOTALobbyVisibility_Unlisted;
const int DOTALobbyVisibility_ARRAYSIZE = DOTALobbyVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor();
inline const ::std::string& DOTALobbyVisibility_Name(DOTALobbyVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyVisibility_descriptor(), value);
}
inline bool DOTALobbyVisibility_Parse(
    const ::std::string& name, DOTALobbyVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyVisibility>(
    DOTALobbyVisibility_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameAccountClient) */ {
 public:
  CSODOTAGameAccountClient();
  virtual ~CSODOTAGameAccountClient();

  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);

  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAGameAccountClient(CSODOTAGameAccountClient&& from) noexcept
    : CSODOTAGameAccountClient() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountClient& operator=(CSODOTAGameAccountClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameAccountClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAGameAccountClient* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountClient*>(
               &_CSODOTAGameAccountClient_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CSODOTAGameAccountClient* other);
  friend void swap(CSODOTAGameAccountClient& a, CSODOTAGameAccountClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAGameAccountClient* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAGameAccountClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAGameAccountClient& from);
  void MergeFrom(const CSODOTAGameAccountClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAGameAccountClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 3;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 3;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 4;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 4;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // optional uint32 xp = 12;
  bool has_xp() const;
  void clear_xp();
  static const int kXpFieldNumber = 12;
  ::google::protobuf::uint32 xp() const;
  void set_xp(::google::protobuf::uint32 value);

  // optional uint32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 initial_skill = 14;
  bool has_initial_skill() const;
  void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 14;
  ::google::protobuf::uint32 initial_skill() const;
  void set_initial_skill(::google::protobuf::uint32 value);

  // optional uint32 leaver_count = 15;
  bool has_leaver_count() const;
  void clear_leaver_count();
  static const int kLeaverCountFieldNumber = 15;
  ::google::protobuf::uint32 leaver_count() const;
  void set_leaver_count(::google::protobuf::uint32 value);

  // optional uint32 prevent_match_until_date = 18;
  bool has_prevent_match_until_date() const;
  void clear_prevent_match_until_date();
  static const int kPreventMatchUntilDateFieldNumber = 18;
  ::google::protobuf::uint32 prevent_match_until_date() const;
  void set_prevent_match_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_text_chat_until_date = 20;
  bool has_prevent_text_chat_until_date() const;
  void clear_prevent_text_chat_until_date();
  static const int kPreventTextChatUntilDateFieldNumber = 20;
  ::google::protobuf::uint32 prevent_text_chat_until_date() const;
  void set_prevent_text_chat_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_voice_until_date = 21;
  bool has_prevent_voice_until_date() const;
  void clear_prevent_voice_until_date();
  static const int kPreventVoiceUntilDateFieldNumber = 21;
  ::google::protobuf::uint32 prevent_voice_until_date() const;
  void set_prevent_voice_until_date(::google::protobuf::uint32 value);

  // optional uint32 last_abandoned_game_date = 22;
  bool has_last_abandoned_game_date() const;
  void clear_last_abandoned_game_date();
  static const int kLastAbandonedGameDateFieldNumber = 22;
  ::google::protobuf::uint32 last_abandoned_game_date() const;
  void set_last_abandoned_game_date(::google::protobuf::uint32 value);

  // optional uint32 leaver_penalty_count = 23;
  bool has_leaver_penalty_count() const;
  void clear_leaver_penalty_count();
  static const int kLeaverPenaltyCountFieldNumber = 23;
  ::google::protobuf::uint32 leaver_penalty_count() const;
  void set_leaver_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 completed_game_streak = 24;
  bool has_completed_game_streak() const;
  void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 24;
  ::google::protobuf::uint32 completed_game_streak() const;
  void set_completed_game_streak(::google::protobuf::uint32 value);

  // optional uint32 teaching = 28;
  bool has_teaching() const;
  void clear_teaching();
  static const int kTeachingFieldNumber = 28;
  ::google::protobuf::uint32 teaching() const;
  void set_teaching(::google::protobuf::uint32 value);

  // optional uint32 leadership = 29;
  bool has_leadership() const;
  void clear_leadership();
  static const int kLeadershipFieldNumber = 29;
  ::google::protobuf::uint32 leadership() const;
  void set_leadership(::google::protobuf::uint32 value);

  // optional uint32 friendly = 30;
  bool has_friendly() const;
  void clear_friendly();
  static const int kFriendlyFieldNumber = 30;
  ::google::protobuf::uint32 friendly() const;
  void set_friendly(::google::protobuf::uint32 value);

  // optional uint32 forgiving = 31;
  bool has_forgiving() const;
  void clear_forgiving();
  static const int kForgivingFieldNumber = 31;
  ::google::protobuf::uint32 forgiving() const;
  void set_forgiving(::google::protobuf::uint32 value);

  // optional uint32 successful_report_count = 36;
  bool has_successful_report_count() const;
  void clear_successful_report_count();
  static const int kSuccessfulReportCountFieldNumber = 36;
  ::google::protobuf::uint32 successful_report_count() const;
  void set_successful_report_count(::google::protobuf::uint32 value);

  // optional uint32 notify_successful_report = 37;
  bool has_notify_successful_report() const;
  void clear_notify_successful_report();
  static const int kNotifySuccessfulReportFieldNumber = 37;
  ::google::protobuf::uint32 notify_successful_report() const;
  void set_notify_successful_report(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_until_date = 38;
  bool has_account_disabled_until_date() const;
  void clear_account_disabled_until_date();
  static const int kAccountDisabledUntilDateFieldNumber = 38;
  ::google::protobuf::uint32 account_disabled_until_date() const;
  void set_account_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 account_disabled_count = 39;
  bool has_account_disabled_count() const;
  void clear_account_disabled_count();
  static const int kAccountDisabledCountFieldNumber = 39;
  ::google::protobuf::uint32 account_disabled_count() const;
  void set_account_disabled_count(::google::protobuf::uint32 value);

  // optional uint32 showcase_hero_id = 40;
  bool has_showcase_hero_id() const;
  void clear_showcase_hero_id();
  static const int kShowcaseHeroIdFieldNumber = 40;
  ::google::protobuf::uint32 showcase_hero_id() const;
  void set_showcase_hero_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 41;
  bool has_match_disabled_until_date() const;
  void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 41;
  ::google::protobuf::uint32 match_disabled_until_date() const;
  void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_count = 42;
  bool has_match_disabled_count() const;
  void clear_match_disabled_count();
  static const int kMatchDisabledCountFieldNumber = 42;
  ::google::protobuf::uint32 match_disabled_count() const;
  void set_match_disabled_count(::google::protobuf::uint32 value);

  // optional .DOTA_PartnerAccountType partner_account_type = 44 [default = DOTA_PARTNER_NONE];
  bool has_partner_account_type() const;
  void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 44;
  ::DOTA_PartnerAccountType partner_account_type() const;
  void set_partner_account_type(::DOTA_PartnerAccountType value);

  // optional uint32 partner_account_state = 45;
  bool has_partner_account_state() const;
  void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 45;
  ::google::protobuf::uint32 partner_account_state() const;
  void set_partner_account_state(::google::protobuf::uint32 value);

  // optional uint32 matchmaking_language_preference = 46;
  bool has_matchmaking_language_preference() const;
  void clear_matchmaking_language_preference();
  static const int kMatchmakingLanguagePreferenceFieldNumber = 46;
  ::google::protobuf::uint32 matchmaking_language_preference() const;
  void set_matchmaking_language_preference(::google::protobuf::uint32 value);

  // optional uint32 shutdownlawterminatetime = 47;
  bool has_shutdownlawterminatetime() const;
  void clear_shutdownlawterminatetime();
  static const int kShutdownlawterminatetimeFieldNumber = 47;
  ::google::protobuf::uint32 shutdownlawterminatetime() const;
  void set_shutdownlawterminatetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_wins();
  void clear_has_wins();
  void set_has_losses();
  void clear_has_losses();
  void set_has_xp();
  void clear_has_xp();
  void set_has_level();
  void clear_has_level();
  void set_has_initial_skill();
  void clear_has_initial_skill();
  void set_has_leaver_count();
  void clear_has_leaver_count();
  void set_has_prevent_match_until_date();
  void clear_has_prevent_match_until_date();
  void set_has_prevent_text_chat_until_date();
  void clear_has_prevent_text_chat_until_date();
  void set_has_prevent_voice_until_date();
  void clear_has_prevent_voice_until_date();
  void set_has_last_abandoned_game_date();
  void clear_has_last_abandoned_game_date();
  void set_has_leaver_penalty_count();
  void clear_has_leaver_penalty_count();
  void set_has_completed_game_streak();
  void clear_has_completed_game_streak();
  void set_has_teaching();
  void clear_has_teaching();
  void set_has_leadership();
  void clear_has_leadership();
  void set_has_friendly();
  void clear_has_friendly();
  void set_has_forgiving();
  void clear_has_forgiving();
  void set_has_successful_report_count();
  void clear_has_successful_report_count();
  void set_has_notify_successful_report();
  void clear_has_notify_successful_report();
  void set_has_account_disabled_until_date();
  void clear_has_account_disabled_until_date();
  void set_has_account_disabled_count();
  void clear_has_account_disabled_count();
  void set_has_showcase_hero_id();
  void clear_has_showcase_hero_id();
  void set_has_match_disabled_until_date();
  void clear_has_match_disabled_until_date();
  void set_has_match_disabled_count();
  void clear_has_match_disabled_count();
  void set_has_partner_account_type();
  void clear_has_partner_account_type();
  void set_has_partner_account_state();
  void clear_has_partner_account_state();
  void set_has_matchmaking_language_preference();
  void clear_has_matchmaking_language_preference();
  void set_has_shutdownlawterminatetime();
  void clear_has_shutdownlawterminatetime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 initial_skill_;
  ::google::protobuf::uint32 leaver_count_;
  ::google::protobuf::uint32 prevent_match_until_date_;
  ::google::protobuf::uint32 prevent_text_chat_until_date_;
  ::google::protobuf::uint32 prevent_voice_until_date_;
  ::google::protobuf::uint32 last_abandoned_game_date_;
  ::google::protobuf::uint32 leaver_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 teaching_;
  ::google::protobuf::uint32 leadership_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 forgiving_;
  ::google::protobuf::uint32 successful_report_count_;
  ::google::protobuf::uint32 notify_successful_report_;
  ::google::protobuf::uint32 account_disabled_until_date_;
  ::google::protobuf::uint32 account_disabled_count_;
  ::google::protobuf::uint32 showcase_hero_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_count_;
  int partner_account_type_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 matchmaking_language_preference_;
  ::google::protobuf::uint32 shutdownlawterminatetime_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAGameAccountClientImpl();
};
// -------------------------------------------------------------------

class CSODOTAGameAccountClientInternal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameAccountClientInternal) */ {
 public:
  CSODOTAGameAccountClientInternal();
  virtual ~CSODOTAGameAccountClientInternal();

  CSODOTAGameAccountClientInternal(const CSODOTAGameAccountClientInternal& from);

  inline CSODOTAGameAccountClientInternal& operator=(const CSODOTAGameAccountClientInternal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAGameAccountClientInternal(CSODOTAGameAccountClientInternal&& from) noexcept
    : CSODOTAGameAccountClientInternal() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountClientInternal& operator=(CSODOTAGameAccountClientInternal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameAccountClientInternal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAGameAccountClientInternal* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountClientInternal*>(
               &_CSODOTAGameAccountClientInternal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CSODOTAGameAccountClientInternal* other);
  friend void swap(CSODOTAGameAccountClientInternal& a, CSODOTAGameAccountClientInternal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAGameAccountClientInternal* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAGameAccountClientInternal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAGameAccountClientInternal& from);
  void MergeFrom(const CSODOTAGameAccountClientInternal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAGameAccountClientInternal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 rank_uncertainty = 2;
  bool has_rank_uncertainty() const;
  void clear_rank_uncertainty();
  static const int kRankUncertaintyFieldNumber = 2;
  ::google::protobuf::uint32 rank_uncertainty() const;
  void set_rank_uncertainty(::google::protobuf::uint32 value);

  // optional int32 win_loss_streak = 3;
  bool has_win_loss_streak() const;
  void clear_win_loss_streak();
  static const int kWinLossStreakFieldNumber = 3;
  ::google::protobuf::int32 win_loss_streak() const;
  void set_win_loss_streak(::google::protobuf::int32 value);

  // optional uint32 feeding_count = 5;
  bool has_feeding_count() const;
  void clear_feeding_count();
  static const int kFeedingCountFieldNumber = 5;
  ::google::protobuf::uint32 feeding_count() const;
  void set_feeding_count(::google::protobuf::uint32 value);

  // optional uint32 voice_reports = 7;
  bool has_voice_reports() const;
  void clear_voice_reports();
  static const int kVoiceReportsFieldNumber = 7;
  ::google::protobuf::uint32 voice_reports() const;
  void set_voice_reports(::google::protobuf::uint32 value);

  // optional uint32 text_reports = 8;
  bool has_text_reports() const;
  void clear_text_reports();
  static const int kTextReportsFieldNumber = 8;
  ::google::protobuf::uint32 text_reports() const;
  void set_text_reports(::google::protobuf::uint32 value);

  // optional uint32 ability_reports = 9;
  bool has_ability_reports() const;
  void clear_ability_reports();
  static const int kAbilityReportsFieldNumber = 9;
  ::google::protobuf::uint32 ability_reports() const;
  void set_ability_reports(::google::protobuf::uint32 value);

  // optional uint32 feeding_reports = 10;
  bool has_feeding_reports() const;
  void clear_feeding_reports();
  static const int kFeedingReportsFieldNumber = 10;
  ::google::protobuf::uint32 feeding_reports() const;
  void set_feeding_reports(::google::protobuf::uint32 value);

  // optional uint32 automatic_report_penalty = 11;
  bool has_automatic_report_penalty() const;
  void clear_automatic_report_penalty();
  static const int kAutomaticReportPenaltyFieldNumber = 11;
  ::google::protobuf::uint32 automatic_report_penalty() const;
  void set_automatic_report_penalty(::google::protobuf::uint32 value);

  // optional uint32 games_since_report_penalty = 12;
  bool has_games_since_report_penalty() const;
  void clear_games_since_report_penalty();
  static const int kGamesSinceReportPenaltyFieldNumber = 12;
  ::google::protobuf::uint32 games_since_report_penalty() const;
  void set_games_since_report_penalty(::google::protobuf::uint32 value);

  // optional uint32 report_penalty_count = 13;
  bool has_report_penalty_count() const;
  void clear_report_penalty_count();
  static const int kReportPenaltyCountFieldNumber = 13;
  ::google::protobuf::uint32 report_penalty_count() const;
  void set_report_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 pending_detected_reports = 14;
  bool has_pending_detected_reports() const;
  void clear_pending_detected_reports();
  static const int kPendingDetectedReportsFieldNumber = 14;
  ::google::protobuf::uint32 pending_detected_reports() const;
  void set_pending_detected_reports(::google::protobuf::uint32 value);

  // optional uint32 pending_in_game_reports = 15;
  bool has_pending_in_game_reports() const;
  void clear_pending_in_game_reports();
  static const int kPendingInGameReportsFieldNumber = 15;
  ::google::protobuf::uint32 pending_in_game_reports() const;
  void set_pending_in_game_reports(::google::protobuf::uint32 value);

  // optional uint32 pending_out_of_game_reports = 16;
  bool has_pending_out_of_game_reports() const;
  void clear_pending_out_of_game_reports();
  static const int kPendingOutOfGameReportsFieldNumber = 16;
  ::google::protobuf::uint32 pending_out_of_game_reports() const;
  void set_pending_out_of_game_reports(::google::protobuf::uint32 value);

  // optional uint32 automated_penalty_date = 17;
  bool has_automated_penalty_date() const;
  void clear_automated_penalty_date();
  static const int kAutomatedPenaltyDateFieldNumber = 17;
  ::google::protobuf::uint32 automated_penalty_date() const;
  void set_automated_penalty_date(::google::protobuf::uint32 value);

  // optional uint32 last_reported_match_id = 18;
  bool has_last_reported_match_id() const;
  void clear_last_reported_match_id();
  static const int kLastReportedMatchIdFieldNumber = 18;
  ::google::protobuf::uint32 last_reported_match_id() const;
  void set_last_reported_match_id(::google::protobuf::uint32 value);

  // optional uint32 pending_reported_games = 19;
  bool has_pending_reported_games() const;
  void clear_pending_reported_games();
  static const int kPendingReportedGamesFieldNumber = 19;
  ::google::protobuf::uint32 pending_reported_games() const;
  void set_pending_reported_games(::google::protobuf::uint32 value);

  // optional fixed32 last_communication_report_time = 20;
  bool has_last_communication_report_time() const;
  void clear_last_communication_report_time();
  static const int kLastCommunicationReportTimeFieldNumber = 20;
  ::google::protobuf::uint32 last_communication_report_time() const;
  void set_last_communication_report_time(::google::protobuf::uint32 value);

  // optional uint32 communication_penalty_severity = 21;
  bool has_communication_penalty_severity() const;
  void clear_communication_penalty_severity();
  static const int kCommunicationPenaltySeverityFieldNumber = 21;
  ::google::protobuf::uint32 communication_penalty_severity() const;
  void set_communication_penalty_severity(::google::protobuf::uint32 value);

  // optional uint32 solo_rank = 22;
  bool has_solo_rank() const;
  void clear_solo_rank();
  static const int kSoloRankFieldNumber = 22;
  ::google::protobuf::uint32 solo_rank() const;
  void set_solo_rank(::google::protobuf::uint32 value);

  // optional uint32 solo_rank_uncertainty = 23;
  bool has_solo_rank_uncertainty() const;
  void clear_solo_rank_uncertainty();
  static const int kSoloRankUncertaintyFieldNumber = 23;
  ::google::protobuf::uint32 solo_rank_uncertainty() const;
  void set_solo_rank_uncertainty(::google::protobuf::uint32 value);

  // optional uint32 bonus_reports_remaining = 24;
  bool has_bonus_reports_remaining() const;
  void clear_bonus_reports_remaining();
  static const int kBonusReportsRemainingFieldNumber = 24;
  ::google::protobuf::uint32 bonus_reports_remaining() const;
  void set_bonus_reports_remaining(::google::protobuf::uint32 value);

  // optional uint32 last_timed_player_card_drop = 25;
  bool has_last_timed_player_card_drop() const;
  void clear_last_timed_player_card_drop();
  static const int kLastTimedPlayerCardDropFieldNumber = 25;
  ::google::protobuf::uint32 last_timed_player_card_drop() const;
  void set_last_timed_player_card_drop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClientInternal)
 private:
  void set_has_rank();
  void clear_has_rank();
  void set_has_rank_uncertainty();
  void clear_has_rank_uncertainty();
  void set_has_win_loss_streak();
  void clear_has_win_loss_streak();
  void set_has_feeding_count();
  void clear_has_feeding_count();
  void set_has_voice_reports();
  void clear_has_voice_reports();
  void set_has_text_reports();
  void clear_has_text_reports();
  void set_has_ability_reports();
  void clear_has_ability_reports();
  void set_has_feeding_reports();
  void clear_has_feeding_reports();
  void set_has_automatic_report_penalty();
  void clear_has_automatic_report_penalty();
  void set_has_games_since_report_penalty();
  void clear_has_games_since_report_penalty();
  void set_has_report_penalty_count();
  void clear_has_report_penalty_count();
  void set_has_pending_detected_reports();
  void clear_has_pending_detected_reports();
  void set_has_pending_in_game_reports();
  void clear_has_pending_in_game_reports();
  void set_has_pending_out_of_game_reports();
  void clear_has_pending_out_of_game_reports();
  void set_has_automated_penalty_date();
  void clear_has_automated_penalty_date();
  void set_has_last_reported_match_id();
  void clear_has_last_reported_match_id();
  void set_has_pending_reported_games();
  void clear_has_pending_reported_games();
  void set_has_last_communication_report_time();
  void clear_has_last_communication_report_time();
  void set_has_communication_penalty_severity();
  void clear_has_communication_penalty_severity();
  void set_has_solo_rank();
  void clear_has_solo_rank();
  void set_has_solo_rank_uncertainty();
  void clear_has_solo_rank_uncertainty();
  void set_has_bonus_reports_remaining();
  void clear_has_bonus_reports_remaining();
  void set_has_last_timed_player_card_drop();
  void clear_has_last_timed_player_card_drop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 rank_uncertainty_;
  ::google::protobuf::int32 win_loss_streak_;
  ::google::protobuf::uint32 feeding_count_;
  ::google::protobuf::uint32 voice_reports_;
  ::google::protobuf::uint32 text_reports_;
  ::google::protobuf::uint32 ability_reports_;
  ::google::protobuf::uint32 feeding_reports_;
  ::google::protobuf::uint32 automatic_report_penalty_;
  ::google::protobuf::uint32 games_since_report_penalty_;
  ::google::protobuf::uint32 report_penalty_count_;
  ::google::protobuf::uint32 pending_detected_reports_;
  ::google::protobuf::uint32 pending_in_game_reports_;
  ::google::protobuf::uint32 pending_out_of_game_reports_;
  ::google::protobuf::uint32 automated_penalty_date_;
  ::google::protobuf::uint32 last_reported_match_id_;
  ::google::protobuf::uint32 pending_reported_games_;
  ::google::protobuf::uint32 last_communication_report_time_;
  ::google::protobuf::uint32 communication_penalty_severity_;
  ::google::protobuf::uint32 solo_rank_;
  ::google::protobuf::uint32 solo_rank_uncertainty_;
  ::google::protobuf::uint32 bonus_reports_remaining_;
  ::google::protobuf::uint32 last_timed_player_card_drop_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAGameAccountClientInternalImpl();
};
// -------------------------------------------------------------------

class CSODOTAPartyMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyMember) */ {
 public:
  CSODOTAPartyMember();
  virtual ~CSODOTAPartyMember();

  CSODOTAPartyMember(const CSODOTAPartyMember& from);

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyMember(CSODOTAPartyMember&& from) noexcept
    : CSODOTAPartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyMember& operator=(CSODOTAPartyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyMember*>(
               &_CSODOTAPartyMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CSODOTAPartyMember* other);
  friend void swap(CSODOTAPartyMember& a, CSODOTAPartyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAPartyMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAPartyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_PartnerAccountType partner_type = 1 [default = DOTA_PARTNER_NONE];
  bool has_partner_type() const;
  void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  ::DOTA_PartnerAccountType partner_type() const;
  void set_partner_type(::DOTA_PartnerAccountType value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  void set_has_partner_type();
  void clear_has_partner_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int partner_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyMemberImpl();
};
// -------------------------------------------------------------------

class CSODOTAParty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAParty) */ {
 public:
  CSODOTAParty();
  virtual ~CSODOTAParty();

  CSODOTAParty(const CSODOTAParty& from);

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAParty(CSODOTAParty&& from) noexcept
    : CSODOTAParty() {
    *this = ::std::move(from);
  }

  inline CSODOTAParty& operator=(CSODOTAParty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAParty* internal_default_instance() {
    return reinterpret_cast<const CSODOTAParty*>(
               &_CSODOTAParty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CSODOTAParty* other);
  friend void swap(CSODOTAParty& a, CSODOTAParty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAParty* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAParty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAParty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static const State UI =
    CSODOTAParty_State_UI;
  static const State FINDING_MATCH =
    CSODOTAParty_State_FINDING_MATCH;
  static const State IN_MATCH =
    CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTAParty_State_State_MIN;
  static const State State_MAX =
    CSODOTAParty_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTAParty_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed64 member_ids = 3;
  int member_ids_size() const;
  void clear_member_ids();
  static const int kMemberIdsFieldNumber = 3;
  ::google::protobuf::uint64 member_ids(int index) const;
  void set_member_ids(int index, ::google::protobuf::uint64 value);
  void add_member_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      member_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_member_ids();

  // repeated fixed64 pending_invites = 5;
  int pending_invites_size() const;
  void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 5;
  ::google::protobuf::uint64 pending_invites(int index) const;
  void set_pending_invites(int index, ::google::protobuf::uint64 value);
  void add_pending_invites(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();

  // repeated .CSODOTAPartyMember members = 29;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 29;
  const ::CSODOTAPartyMember& members(int index) const;
  ::CSODOTAPartyMember* mutable_members(int index);
  ::CSODOTAPartyMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;

  // repeated uint32 common_guilds = 31;
  int common_guilds_size() const;
  void clear_common_guilds();
  static const int kCommonGuildsFieldNumber = 31;
  ::google::protobuf::uint32 common_guilds(int index) const;
  void set_common_guilds(int index, ::google::protobuf::uint32 value);
  void add_common_guilds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      common_guilds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_common_guilds();

  // optional uint64 party_id = 1 [(.key_field) = true];
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 2;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  ::google::protobuf::uint64 leader_id() const;
  void set_leader_id(::google::protobuf::uint64 value);

  // optional uint32 game_modes = 4;
  bool has_game_modes() const;
  void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  ::google::protobuf::uint32 game_modes() const;
  void set_game_modes(::google::protobuf::uint32 value);

  // optional .CSODOTAParty.State state = 6 [default = UI];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::CSODOTAParty_State state() const;
  void set_state(::CSODOTAParty_State value);

  // optional uint32 started_matchmaking_time = 7;
  bool has_started_matchmaking_time() const;
  void clear_started_matchmaking_time();
  static const int kStartedMatchmakingTimeFieldNumber = 7;
  ::google::protobuf::uint32 started_matchmaking_time() const;
  void set_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 matchgroups = 11;
  bool has_matchgroups() const;
  void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 11;
  ::google::protobuf::uint32 matchgroups() const;
  void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 prevent_match_until_date = 18;
  bool has_prevent_match_until_date() const;
  void clear_prevent_match_until_date();
  static const int kPreventMatchUntilDateFieldNumber = 18;
  ::google::protobuf::uint32 prevent_match_until_date() const;
  void set_prevent_match_until_date(::google::protobuf::uint32 value);

  // optional uint32 prevent_match_account_id = 19;
  bool has_prevent_match_account_id() const;
  void clear_prevent_match_account_id();
  static const int kPreventMatchAccountIdFieldNumber = 19;
  ::google::protobuf::uint32 prevent_match_account_id() const;
  void set_prevent_match_account_id(::google::protobuf::uint32 value);

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_RANKED];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 21;
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 22;
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);

  // optional uint32 team_id = 23;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 23;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 24;
  bool has_match_disabled_until_date() const;
  void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 24;
  ::google::protobuf::uint32 match_disabled_until_date() const;
  void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_account_id = 25;
  bool has_match_disabled_account_id() const;
  void clear_match_disabled_account_id();
  static const int kMatchDisabledAccountIdFieldNumber = 25;
  ::google::protobuf::uint32 match_disabled_account_id() const;
  void set_match_disabled_account_id(::google::protobuf::uint32 value);

  // optional uint32 matchmaking_max_range_minutes = 26;
  bool has_matchmaking_max_range_minutes() const;
  void clear_matchmaking_max_range_minutes();
  static const int kMatchmakingMaxRangeMinutesFieldNumber = 26;
  ::google::protobuf::uint32 matchmaking_max_range_minutes() const;
  void set_matchmaking_max_range_minutes(::google::protobuf::uint32 value);

  // optional uint32 matchlanguages = 27;
  bool has_matchlanguages() const;
  void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 27;
  ::google::protobuf::uint32 matchlanguages() const;
  void set_matchlanguages(::google::protobuf::uint32 value);

  // optional uint32 open_guild_id = 30;
  bool has_open_guild_id() const;
  void clear_open_guild_id();
  static const int kOpenGuildIdFieldNumber = 30;
  ::google::protobuf::uint32 open_guild_id() const;
  void set_open_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_leader_id();
  void clear_has_leader_id();
  void set_has_game_modes();
  void clear_has_game_modes();
  void set_has_state();
  void clear_has_state();
  void set_has_started_matchmaking_time();
  void clear_has_started_matchmaking_time();
  void set_has_matchgroups();
  void clear_has_matchgroups();
  void set_has_prevent_match_until_date();
  void clear_has_prevent_match_until_date();
  void set_has_prevent_match_account_id();
  void clear_has_prevent_match_account_id();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_bot_difficulty();
  void clear_has_bot_difficulty();
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_match_disabled_until_date();
  void clear_has_match_disabled_until_date();
  void set_has_match_disabled_account_id();
  void clear_has_match_disabled_account_id();
  void set_has_matchmaking_max_range_minutes();
  void clear_has_matchmaking_max_range_minutes();
  void set_has_matchlanguages();
  void clear_has_matchlanguages();
  void set_has_open_guild_id();
  void clear_has_open_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > member_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > common_guilds_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint32 game_modes_;
  int state_;
  ::google::protobuf::uint32 started_matchmaking_time_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 prevent_match_until_date_;
  ::google::protobuf::uint32 prevent_match_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_account_id_;
  ::google::protobuf::uint32 matchmaking_max_range_minutes_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 open_guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyImpl();
};
// -------------------------------------------------------------------

class CSODOTAPartyInternal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInternal) */ {
 public:
  CSODOTAPartyInternal();
  virtual ~CSODOTAPartyInternal();

  CSODOTAPartyInternal(const CSODOTAPartyInternal& from);

  inline CSODOTAPartyInternal& operator=(const CSODOTAPartyInternal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyInternal(CSODOTAPartyInternal&& from) noexcept
    : CSODOTAPartyInternal() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInternal& operator=(CSODOTAPartyInternal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInternal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyInternal* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInternal*>(
               &_CSODOTAPartyInternal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CSODOTAPartyInternal* other);
  friend void swap(CSODOTAPartyInternal& a, CSODOTAPartyInternal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInternal* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAPartyInternal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAPartyInternal& from);
  void MergeFrom(const CSODOTAPartyInternal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAPartyInternal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInternal)
 private:
  void set_has_search_key();
  void clear_has_search_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyInternalImpl();
};
// -------------------------------------------------------------------

class CSODOTAPartyMemcached : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyMemcached) */ {
 public:
  CSODOTAPartyMemcached();
  virtual ~CSODOTAPartyMemcached();

  CSODOTAPartyMemcached(const CSODOTAPartyMemcached& from);

  inline CSODOTAPartyMemcached& operator=(const CSODOTAPartyMemcached& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyMemcached(CSODOTAPartyMemcached&& from) noexcept
    : CSODOTAPartyMemcached() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyMemcached& operator=(CSODOTAPartyMemcached&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyMemcached& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyMemcached* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyMemcached*>(
               &_CSODOTAPartyMemcached_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CSODOTAPartyMemcached* other);
  friend void swap(CSODOTAPartyMemcached& a, CSODOTAPartyMemcached& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyMemcached* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAPartyMemcached* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAPartyMemcached& from);
  void MergeFrom(const CSODOTAPartyMemcached& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAPartyMemcached* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSODOTAParty party = 1;
  bool has_party() const;
  void clear_party();
  static const int kPartyFieldNumber = 1;
  const ::CSODOTAParty& party() const;
  ::CSODOTAParty* release_party();
  ::CSODOTAParty* mutable_party();
  void set_allocated_party(::CSODOTAParty* party);

  // optional .CSODOTAPartyInternal internal = 2;
  bool has_internal() const;
  void clear_internal();
  static const int kInternalFieldNumber = 2;
  const ::CSODOTAPartyInternal& internal() const;
  ::CSODOTAPartyInternal* release_internal();
  ::CSODOTAPartyInternal* mutable_internal();
  void set_allocated_internal(::CSODOTAPartyInternal* internal);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMemcached)
 private:
  void set_has_party();
  void clear_has_party();
  void set_has_internal();
  void clear_has_internal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CSODOTAParty* party_;
  ::CSODOTAPartyInternal* internal_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyMemcachedImpl();
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite.PartyMember) */ {
 public:
  CSODOTAPartyInvite_PartyMember();
  virtual ~CSODOTAPartyInvite_PartyMember();

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyInvite_PartyMember(CSODOTAPartyInvite_PartyMember&& from) noexcept
    : CSODOTAPartyInvite_PartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite_PartyMember& operator=(CSODOTAPartyInvite_PartyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite_PartyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyInvite_PartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite_PartyMember*>(
               &_CSODOTAPartyInvite_PartyMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CSODOTAPartyInvite_PartyMember* other);
  friend void swap(CSODOTAPartyInvite_PartyMember& a, CSODOTAPartyInvite_PartyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite_PartyMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAPartyInvite_PartyMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAPartyInvite_PartyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyInvite_PartyMemberImpl();
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite) */ {
 public:
  CSODOTAPartyInvite();
  virtual ~CSODOTAPartyInvite();

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyInvite(CSODOTAPartyInvite&& from) noexcept
    : CSODOTAPartyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite& operator=(CSODOTAPartyInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite*>(
               &_CSODOTAPartyInvite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CSODOTAPartyInvite* other);
  friend void swap(CSODOTAPartyInvite& a, CSODOTAPartyInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAPartyInvite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAPartyInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  ::CSODOTAPartyInvite_PartyMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  const ::std::string& sender_name() const;
  void set_sender_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_name(::std::string&& value);
  #endif
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  ::std::string* mutable_sender_name();
  ::std::string* release_sender_name();
  void set_allocated_sender_name(::std::string* sender_name);

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 group_id() const;
  void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  ::google::protobuf::uint64 sender_id() const;
  void set_sender_id(::google::protobuf::uint64 value);

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_sender_id();
  void clear_has_sender_id();
  void set_has_sender_name();
  void clear_has_sender_name();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
  ::google::protobuf::internal::ArenaStringPtr sender_name_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAPartyInviteImpl();
};
// -------------------------------------------------------------------

class CDOTALobbyMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTALobbyMember) */ {
 public:
  CDOTALobbyMember();
  virtual ~CDOTALobbyMember();

  CDOTALobbyMember(const CDOTALobbyMember& from);

  inline CDOTALobbyMember& operator=(const CDOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTALobbyMember(CDOTALobbyMember&& from) noexcept
    : CDOTALobbyMember() {
    *this = ::std::move(from);
  }

  inline CDOTALobbyMember& operator=(CDOTALobbyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTALobbyMember* internal_default_instance() {
    return reinterpret_cast<const CDOTALobbyMember*>(
               &_CDOTALobbyMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CDOTALobbyMember* other);
  friend void swap(CDOTALobbyMember& a, CDOTALobbyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTALobbyMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTALobbyMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTALobbyMember& from);
  void MergeFrom(const CDOTALobbyMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTALobbyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 disabled_hero_id = 20;
  int disabled_hero_id_size() const;
  void clear_disabled_hero_id();
  static const int kDisabledHeroIdFieldNumber = 20;
  ::google::protobuf::uint32 disabled_hero_id(int index) const;
  void set_disabled_hero_id(int index, ::google::protobuf::uint32 value);
  void add_disabled_hero_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_hero_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_hero_id();

  // repeated uint32 enabled_hero_id = 22;
  int enabled_hero_id_size() const;
  void clear_enabled_hero_id();
  static const int kEnabledHeroIdFieldNumber = 22;
  ::google::protobuf::uint32 enabled_hero_id(int index) const;
  void set_enabled_hero_id(int index, ::google::protobuf::uint32 value);
  void add_enabled_hero_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enabled_hero_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enabled_hero_id();

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed64 id = 1 [(.key_field) = true];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 3;
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);

  // optional bool connected_to_game_server = 4;
  bool has_connected_to_game_server() const;
  void clear_connected_to_game_server();
  static const int kConnectedToGameServerFieldNumber = 4;
  bool connected_to_game_server() const;
  void set_connected_to_game_server(bool value);

  // optional uint32 slot = 7;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 7;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // optional float latitude = 8;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  float latitude() const;
  void set_latitude(float value);

  // optional float longitude = 9;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 9;
  float longitude() const;
  void set_longitude(float value);

  // optional uint64 party_id = 12;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 12;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional .DOTALobbyReadyState ready_state = 11 [default = DOTALobbyReadyState_UNDECLARED];
  bool has_ready_state() const;
  void clear_ready_state();
  static const int kReadyStateFieldNumber = 11;
  ::DOTALobbyReadyState ready_state() const;
  void set_ready_state(::DOTALobbyReadyState value);

  // optional uint32 meta_level = 13;
  bool has_meta_level() const;
  void clear_meta_level();
  static const int kMetaLevelFieldNumber = 13;
  ::google::protobuf::uint32 meta_level() const;
  void set_meta_level(::google::protobuf::uint32 value);

  // optional uint32 meta_xp = 14;
  bool has_meta_xp() const;
  void clear_meta_xp();
  static const int kMetaXpFieldNumber = 14;
  ::google::protobuf::uint32 meta_xp() const;
  void set_meta_xp(::google::protobuf::uint32 value);

  // optional uint32 meta_xp_awarded = 15;
  bool has_meta_xp_awarded() const;
  void clear_meta_xp_awarded();
  static const int kMetaXpAwardedFieldNumber = 15;
  ::google::protobuf::uint32 meta_xp_awarded() const;
  void set_meta_xp_awarded(::google::protobuf::uint32 value);

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 16;
  ::DOTALeaverStatus_t leaver_status() const;
  void set_leaver_status(::DOTALeaverStatus_t value);

  // optional uint32 channel = 17;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 17;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional uint32 prize_def_index = 18;
  bool has_prize_def_index() const;
  void clear_prize_def_index();
  static const int kPrizeDefIndexFieldNumber = 18;
  ::google::protobuf::uint32 prize_def_index() const;
  void set_prize_def_index(::google::protobuf::uint32 value);

  // optional uint32 meta_xp_bonus_rate = 19;
  bool has_meta_xp_bonus_rate() const;
  void clear_meta_xp_bonus_rate();
  static const int kMetaXpBonusRateFieldNumber = 19;
  ::google::protobuf::uint32 meta_xp_bonus_rate() const;
  void set_meta_xp_bonus_rate(::google::protobuf::uint32 value);

  // optional .DOTA_PartnerAccountType partner_account_type = 21 [default = DOTA_PARTNER_NONE];
  bool has_partner_account_type() const;
  void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 21;
  ::DOTA_PartnerAccountType partner_account_type() const;
  void set_partner_account_type(::DOTA_PartnerAccountType value);

  // @@protoc_insertion_point(class_scope:CDOTALobbyMember)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_team();
  void clear_has_team();
  void set_has_connected_to_game_server();
  void clear_has_connected_to_game_server();
  void set_has_name();
  void clear_has_name();
  void set_has_slot();
  void clear_has_slot();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_ready_state();
  void clear_has_ready_state();
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_meta_level();
  void clear_has_meta_level();
  void set_has_meta_xp();
  void clear_has_meta_xp();
  void set_has_meta_xp_awarded();
  void clear_has_meta_xp_awarded();
  void set_has_leaver_status();
  void clear_has_leaver_status();
  void set_has_channel();
  void clear_has_channel();
  void set_has_prize_def_index();
  void clear_has_prize_def_index();
  void set_has_meta_xp_bonus_rate();
  void clear_has_meta_xp_bonus_rate();
  void set_has_partner_account_type();
  void clear_has_partner_account_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enabled_hero_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 hero_id_;
  int team_;
  bool connected_to_game_server_;
  ::google::protobuf::uint32 slot_;
  float latitude_;
  float longitude_;
  ::google::protobuf::uint64 party_id_;
  int ready_state_;
  ::google::protobuf::uint32 meta_level_;
  ::google::protobuf::uint32 meta_xp_;
  ::google::protobuf::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 prize_def_index_;
  ::google::protobuf::uint32 meta_xp_bonus_rate_;
  int partner_account_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTALobbyMemberImpl();
};
// -------------------------------------------------------------------

class CLobbyTeamDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLobbyTeamDetails) */ {
 public:
  CLobbyTeamDetails();
  virtual ~CLobbyTeamDetails();

  CLobbyTeamDetails(const CLobbyTeamDetails& from);

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyTeamDetails(CLobbyTeamDetails&& from) noexcept
    : CLobbyTeamDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTeamDetails& operator=(CLobbyTeamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTeamDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTeamDetails*>(
               &_CLobbyTeamDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CLobbyTeamDetails* other);
  friend void swap(CLobbyTeamDetails& a, CLobbyTeamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTeamDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CLobbyTeamDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLobbyTeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 1;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional string guild_name = 9;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_tag = 10;
  bool has_guild_tag() const;
  void clear_guild_tag();
  static const int kGuildTagFieldNumber = 10;
  const ::std::string& guild_tag() const;
  void set_guild_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_tag(::std::string&& value);
  #endif
  void set_guild_tag(const char* value);
  void set_guild_tag(const char* value, size_t size);
  ::std::string* mutable_guild_tag();
  ::std::string* release_guild_tag();
  void set_allocated_guild_tag(::std::string* guild_tag);

  // optional string team_logo_url = 20;
  bool has_team_logo_url() const;
  void clear_team_logo_url();
  static const int kTeamLogoUrlFieldNumber = 20;
  const ::std::string& team_logo_url() const;
  void set_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_team_logo_url(::std::string&& value);
  #endif
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_team_logo_url();
  ::std::string* release_team_logo_url();
  void set_allocated_team_logo_url(::std::string* team_logo_url);

  // optional uint64 team_logo = 5;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 5;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 6;
  bool has_team_base_logo() const;
  void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 6;
  ::google::protobuf::uint64 team_base_logo() const;
  void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint64 team_banner_logo = 7;
  bool has_team_banner_logo() const;
  void clear_team_banner_logo();
  static const int kTeamBannerLogoFieldNumber = 7;
  ::google::protobuf::uint64 team_banner_logo() const;
  void set_team_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 guild_id = 11;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 11;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 12;
  bool has_guild_logo() const;
  void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 12;
  ::google::protobuf::uint64 guild_logo() const;
  void set_guild_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_base_logo = 13;
  bool has_guild_base_logo() const;
  void clear_guild_base_logo();
  static const int kGuildBaseLogoFieldNumber = 13;
  ::google::protobuf::uint64 guild_base_logo() const;
  void set_guild_base_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_banner_logo = 14;
  bool has_guild_banner_logo() const;
  void clear_guild_banner_logo();
  static const int kGuildBannerLogoFieldNumber = 14;
  ::google::protobuf::uint64 guild_banner_logo() const;
  void set_guild_banner_logo(::google::protobuf::uint64 value);

  // optional bool team_complete = 8;
  bool has_team_complete() const;
  void clear_team_complete();
  static const int kTeamCompleteFieldNumber = 8;
  bool team_complete() const;
  void set_team_complete(bool value);

  // optional bool is_home_team = 17;
  bool has_is_home_team() const;
  void clear_is_home_team();
  static const int kIsHomeTeamFieldNumber = 17;
  bool is_home_team() const;
  void set_is_home_team(bool value);

  // optional bool is_challenge_match = 18;
  bool has_is_challenge_match() const;
  void clear_is_challenge_match();
  static const int kIsChallengeMatchFieldNumber = 18;
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);

  // optional uint32 rank = 15;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 15;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint64 challenge_match_token_account = 19;
  bool has_challenge_match_token_account() const;
  void clear_challenge_match_token_account();
  static const int kChallengeMatchTokenAccountFieldNumber = 19;
  ::google::protobuf::uint64 challenge_match_token_account() const;
  void set_challenge_match_token_account(::google::protobuf::uint64 value);

  // optional sint32 rank_change = 16;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 16;
  ::google::protobuf::int32 rank_change() const;
  void set_rank_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_tag();
  void clear_has_team_tag();
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_team_logo();
  void clear_has_team_logo();
  void set_has_team_base_logo();
  void clear_has_team_base_logo();
  void set_has_team_banner_logo();
  void clear_has_team_banner_logo();
  void set_has_team_complete();
  void clear_has_team_complete();
  void set_has_team_logo_url();
  void clear_has_team_logo_url();
  void set_has_guild_name();
  void clear_has_guild_name();
  void set_has_guild_tag();
  void clear_has_guild_tag();
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_guild_logo();
  void clear_has_guild_logo();
  void set_has_guild_base_logo();
  void clear_has_guild_base_logo();
  void set_has_guild_banner_logo();
  void clear_has_guild_banner_logo();
  void set_has_rank();
  void clear_has_rank();
  void set_has_rank_change();
  void clear_has_rank_change();
  void set_has_is_home_team();
  void clear_has_is_home_team();
  void set_has_is_challenge_match();
  void clear_has_is_challenge_match();
  void set_has_challenge_match_token_account();
  void clear_has_challenge_match_token_account();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_tag_;
  ::google::protobuf::internal::ArenaStringPtr team_logo_url_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint64 team_banner_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint64 guild_base_logo_;
  ::google::protobuf::uint64 guild_banner_logo_;
  bool team_complete_;
  bool is_home_team_;
  bool is_challenge_match_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 challenge_match_token_account_;
  ::google::protobuf::int32 rank_change_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCLobbyTeamDetailsImpl();
};
// -------------------------------------------------------------------

class CLobbyPendingPlayerReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLobbyPendingPlayerReport) */ {
 public:
  CLobbyPendingPlayerReport();
  virtual ~CLobbyPendingPlayerReport();

  CLobbyPendingPlayerReport(const CLobbyPendingPlayerReport& from);

  inline CLobbyPendingPlayerReport& operator=(const CLobbyPendingPlayerReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyPendingPlayerReport(CLobbyPendingPlayerReport&& from) noexcept
    : CLobbyPendingPlayerReport() {
    *this = ::std::move(from);
  }

  inline CLobbyPendingPlayerReport& operator=(CLobbyPendingPlayerReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyPendingPlayerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyPendingPlayerReport* internal_default_instance() {
    return reinterpret_cast<const CLobbyPendingPlayerReport*>(
               &_CLobbyPendingPlayerReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CLobbyPendingPlayerReport* other);
  friend void swap(CLobbyPendingPlayerReport& a, CLobbyPendingPlayerReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyPendingPlayerReport* New() const PROTOBUF_FINAL { return New(NULL); }

  CLobbyPendingPlayerReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLobbyPendingPlayerReport& from);
  void MergeFrom(const CLobbyPendingPlayerReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLobbyPendingPlayerReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional fixed32 date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  ::google::protobuf::uint32 date() const;
  void set_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLobbyPendingPlayerReport)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_date();
  void clear_has_date();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 date_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCLobbyPendingPlayerReportImpl();
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLobbyTimedRewardDetails) */ {
 public:
  CLobbyTimedRewardDetails();
  virtual ~CLobbyTimedRewardDetails();

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyTimedRewardDetails(CLobbyTimedRewardDetails&& from) noexcept
    : CLobbyTimedRewardDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTimedRewardDetails& operator=(CLobbyTimedRewardDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTimedRewardDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyTimedRewardDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTimedRewardDetails*>(
               &_CLobbyTimedRewardDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CLobbyTimedRewardDetails* other);
  friend void swap(CLobbyTimedRewardDetails& a, CLobbyTimedRewardDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTimedRewardDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CLobbyTimedRewardDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLobbyTimedRewardDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  ::google::protobuf::uint32 item_def_index() const;
  void set_item_def_index(::google::protobuf::uint32 value);

  // optional bool is_supply_crate = 3;
  bool has_is_supply_crate() const;
  void clear_is_supply_crate();
  static const int kIsSupplyCrateFieldNumber = 3;
  bool is_supply_crate() const;
  void set_is_supply_crate(bool value);

  // optional bool is_timed_drop = 4;
  bool has_is_timed_drop() const;
  void clear_is_timed_drop();
  static const int kIsTimedDropFieldNumber = 4;
  bool is_timed_drop() const;
  void set_is_timed_drop(bool value);

  // optional uint32 account_id = 5;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_item_def_index();
  void clear_has_item_def_index();
  void set_has_is_supply_crate();
  void clear_has_is_supply_crate();
  void set_has_is_timed_drop();
  void clear_has_is_timed_drop();
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCLobbyTimedRewardDetailsImpl();
};
// -------------------------------------------------------------------

class CSODOTALobby : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTALobby) */ {
 public:
  CSODOTALobby();
  virtual ~CSODOTALobby();

  CSODOTALobby(const CSODOTALobby& from);

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobby(CSODOTALobby&& from) noexcept
    : CSODOTALobby() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby& operator=(CSODOTALobby&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby*>(
               &_CSODOTALobby_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CSODOTALobby* other);
  friend void swap(CSODOTALobby& a, CSODOTALobby& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobby* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTALobby* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTALobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_State State;
  static const State UI =
    CSODOTALobby_State_UI;
  static const State READYUP =
    CSODOTALobby_State_READYUP;
  static const State SERVERSETUP =
    CSODOTALobby_State_SERVERSETUP;
  static const State RUN =
    CSODOTALobby_State_RUN;
  static const State POSTGAME =
    CSODOTALobby_State_POSTGAME;
  static const State NOTREADY =
    CSODOTALobby_State_NOTREADY;
  static const State SERVERASSIGN =
    CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTALobby_State_State_MIN;
  static const State State_MAX =
    CSODOTALobby_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTALobby_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static const LobbyType INVALID =
    CSODOTALobby_LobbyType_INVALID;
  static const LobbyType MATCH =
    CSODOTALobby_LobbyType_MATCH;
  static const LobbyType PRACTICE =
    CSODOTALobby_LobbyType_PRACTICE;
  static const LobbyType TOURNAMENT =
    CSODOTALobby_LobbyType_TOURNAMENT;
  static const LobbyType COOP_BOT_MATCH =
    CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static const LobbyType TEAM_MATCH =
    CSODOTALobby_LobbyType_TEAM_MATCH;
  static const LobbyType SOLO_QUEUE_MATCH =
    CSODOTALobby_LobbyType_SOLO_QUEUE_MATCH;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static const LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static const LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static const int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  static inline const ::std::string& LobbyType_Name(LobbyType value) {
    return CSODOTALobby_LobbyType_Name(value);
  }
  static inline bool LobbyType_Parse(const ::std::string& name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CDOTALobbyMember members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::CDOTALobbyMember& members(int index) const;
  ::CDOTALobbyMember* mutable_members(int index);
  ::CDOTALobbyMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      members() const;

  // repeated .CDOTALobbyMember left_members = 7;
  int left_members_size() const;
  void clear_left_members();
  static const int kLeftMembersFieldNumber = 7;
  const ::CDOTALobbyMember& left_members(int index) const;
  ::CDOTALobbyMember* mutable_left_members(int index);
  ::CDOTALobbyMember* add_left_members();
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_left_members();
  const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      left_members() const;

  // repeated fixed64 pending_invites = 10;
  int pending_invites_size() const;
  void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 10;
  ::google::protobuf::uint64 pending_invites(int index) const;
  void set_pending_invites(int index, ::google::protobuf::uint64 value);
  void add_pending_invites(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();

  // repeated .CLobbyTeamDetails team_details = 17;
  int team_details_size() const;
  void clear_team_details();
  static const int kTeamDetailsFieldNumber = 17;
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::CLobbyTeamDetails* add_team_details();
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  int timed_reward_details_size() const;
  void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 38;
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  int bot_slot_difficulty_size() const;
  void clear_bot_slot_difficulty();
  static const int kBotSlotDifficultyFieldNumber = 41;
  ::DOTABotDifficulty bot_slot_difficulty(int index) const;
  void set_bot_slot_difficulty(int index, ::DOTABotDifficulty value);
  void add_bot_slot_difficulty(::DOTABotDifficulty value);
  const ::google::protobuf::RepeatedField<int>& bot_slot_difficulty() const;
  ::google::protobuf::RepeatedField<int>* mutable_bot_slot_difficulty();

  // optional string connect = 5;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 5;
  const ::std::string& connect() const;
  void set_connect(const ::std::string& value);
  #if LANG_CXX11
  void set_connect(::std::string&& value);
  #endif
  void set_connect(const char* value);
  void set_connect(const char* value, size_t size);
  ::std::string* mutable_connect();
  ::std::string* release_connect();
  void set_allocated_connect(::std::string* connect);

  // optional string game_name = 16;
  bool has_game_name() const;
  void clear_game_name();
  static const int kGameNameFieldNumber = 16;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // optional string pass_key = 39;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 39;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional uint64 lobby_id = 1 [(.key_field) = true];
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 3;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional .CSODOTALobby.State state = 4 [default = UI];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::CSODOTALobby_State state() const;
  void set_state(::CSODOTALobby_State value);

  // optional fixed64 server_id = 6 [default = 0];
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 11;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 11;
  ::google::protobuf::uint64 leader_id() const;
  void set_leader_id(::google::protobuf::uint64 value);

  // optional bool allow_cheats = 13;
  bool has_allow_cheats() const;
  void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 13;
  bool allow_cheats() const;
  void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 14;
  bool has_fill_with_bots() const;
  void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 14;
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);

  // optional bool intro_mode = 15;
  bool has_intro_mode() const;
  void clear_intro_mode();
  static const int kIntroModeFieldNumber = 15;
  bool intro_mode() const;
  void set_intro_mode(bool value);

  // optional bool leaver_detected = 27;
  bool has_leaver_detected() const;
  void clear_leaver_detected();
  static const int kLeaverDetectedFieldNumber = 27;
  bool leaver_detected() const;
  void set_leaver_detected(bool value);

  // optional uint32 tutorial_lesson = 18;
  bool has_tutorial_lesson() const;
  void clear_tutorial_lesson();
  static const int kTutorialLessonFieldNumber = 18;
  ::google::protobuf::uint32 tutorial_lesson() const;
  void set_tutorial_lesson(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 19;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 19;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 20;
  bool has_tournament_game_id() const;
  void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 20;
  ::google::protobuf::uint32 tournament_game_id() const;
  void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional uint32 server_region = 21 [default = 0];
  bool has_server_region() const;
  void clear_server_region();
  static const int kServerRegionFieldNumber = 21;
  ::google::protobuf::uint32 server_region() const;
  void set_server_region(::google::protobuf::uint32 value);

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 22;
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);

  // optional uint32 num_spectators = 23;
  bool has_num_spectators() const;
  void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 23;
  ::google::protobuf::uint32 num_spectators() const;
  void set_num_spectators(::google::protobuf::uint32 value);

  // optional uint32 tower_state = 24;
  bool has_tower_state() const;
  void clear_tower_state();
  static const int kTowerStateFieldNumber = 24;
  ::google::protobuf::uint32 tower_state() const;
  void set_tower_state(::google::protobuf::uint32 value);

  // optional uint32 matchgroup = 25;
  bool has_matchgroup() const;
  void clear_matchgroup();
  static const int kMatchgroupFieldNumber = 25;
  ::google::protobuf::uint32 matchgroup() const;
  void set_matchgroup(::google::protobuf::uint32 value);

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  void clear_cm_pick();
  static const int kCmPickFieldNumber = 28;
  ::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::DOTA_CM_PICK value);

  // optional uint32 match_id = 30;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 30;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  bool has_game_version() const;
  void clear_game_version();
  static const int kGameVersionFieldNumber = 37;
  ::DOTAGameVersion game_version() const;
  void set_game_version(::DOTAGameVersion value);

  // optional float drop_rate_bonus = 40;
  bool has_drop_rate_bonus() const;
  void clear_drop_rate_bonus();
  static const int kDropRateBonusFieldNumber = 40;
  float drop_rate_bonus() const;
  void set_drop_rate_bonus(float value);

  // optional uint32 leagueid = 42;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 42;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  bool has_penalty_level_radiant() const;
  void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 43;
  ::google::protobuf::uint32 penalty_level_radiant() const;
  void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 44 [default = 0];
  bool has_penalty_level_dire() const;
  void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 44;
  ::google::protobuf::uint32 penalty_level_dire() const;
  void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 45;
  bool has_load_game_id() const;
  void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 45;
  ::google::protobuf::uint32 load_game_id() const;
  void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 46;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 46;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  bool has_dota_tv_delay() const;
  void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 53;
  ::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::LobbyDotaTVDelay value);

  // optional uint32 radiant_series_wins = 47;
  bool has_radiant_series_wins() const;
  void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 47;
  ::google::protobuf::uint32 radiant_series_wins() const;
  void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 48;
  bool has_dire_series_wins() const;
  void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 48;
  ::google::protobuf::uint32 dire_series_wins() const;
  void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional uint32 loot_generated = 49;
  bool has_loot_generated() const;
  void clear_loot_generated();
  static const int kLootGeneratedFieldNumber = 49;
  ::google::protobuf::uint32 loot_generated() const;
  void set_loot_generated(::google::protobuf::uint32 value);

  // optional uint32 loot_awarded = 50;
  bool has_loot_awarded() const;
  void clear_loot_awarded();
  static const int kLootAwardedFieldNumber = 50;
  ::google::protobuf::uint32 loot_awarded() const;
  void set_loot_awarded(::google::protobuf::uint32 value);

  // optional bool allchat = 51 [default = false];
  bool has_allchat() const;
  void clear_allchat();
  static const int kAllchatFieldNumber = 51;
  bool allchat() const;
  void set_allchat(bool value);

  // optional uint32 rank_change = 52;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 52;
  ::google::protobuf::uint32 rank_change() const;
  void set_rank_change(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 36;
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 12;
  ::CSODOTALobby_LobbyType lobby_type() const;
  void set_lobby_type(::CSODOTALobby_LobbyType value);

  // optional bool allow_spectating = 31 [default = true];
  bool has_allow_spectating() const;
  void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 31;
  bool allow_spectating() const;
  void set_allow_spectating(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_leader_id();
  void clear_has_leader_id();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_state();
  void clear_has_state();
  void set_has_connect();
  void clear_has_connect();
  void set_has_lobby_type();
  void clear_has_lobby_type();
  void set_has_allow_cheats();
  void clear_has_allow_cheats();
  void set_has_fill_with_bots();
  void clear_has_fill_with_bots();
  void set_has_intro_mode();
  void clear_has_intro_mode();
  void set_has_game_name();
  void clear_has_game_name();
  void set_has_tutorial_lesson();
  void clear_has_tutorial_lesson();
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_tournament_game_id();
  void clear_has_tournament_game_id();
  void set_has_server_region();
  void clear_has_server_region();
  void set_has_game_state();
  void clear_has_game_state();
  void set_has_num_spectators();
  void clear_has_num_spectators();
  void set_has_tower_state();
  void clear_has_tower_state();
  void set_has_matchgroup();
  void clear_has_matchgroup();
  void set_has_leaver_detected();
  void clear_has_leaver_detected();
  void set_has_cm_pick();
  void clear_has_cm_pick();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_allow_spectating();
  void clear_has_allow_spectating();
  void set_has_bot_difficulty();
  void clear_has_bot_difficulty();
  void set_has_game_version();
  void clear_has_game_version();
  void set_has_pass_key();
  void clear_has_pass_key();
  void set_has_drop_rate_bonus();
  void clear_has_drop_rate_bonus();
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_penalty_level_radiant();
  void clear_has_penalty_level_radiant();
  void set_has_penalty_level_dire();
  void clear_has_penalty_level_dire();
  void set_has_load_game_id();
  void clear_has_load_game_id();
  void set_has_series_type();
  void clear_has_series_type();
  void set_has_radiant_series_wins();
  void clear_has_radiant_series_wins();
  void set_has_dire_series_wins();
  void clear_has_dire_series_wins();
  void set_has_loot_generated();
  void clear_has_loot_generated();
  void set_has_loot_awarded();
  void clear_has_loot_awarded();
  void set_has_allchat();
  void clear_has_allchat();
  void set_has_rank_change();
  void clear_has_rank_change();
  void set_has_dota_tv_delay();
  void clear_has_dota_tv_delay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > members_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > left_members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::google::protobuf::RepeatedField<int> bot_slot_difficulty_;
  ::google::protobuf::internal::ArenaStringPtr connect_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 game_mode_;
  int state_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 leader_id_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool leaver_detected_;
  ::google::protobuf::uint32 tutorial_lesson_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 server_region_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 tower_state_;
  ::google::protobuf::uint32 matchgroup_;
  int cm_pick_;
  ::google::protobuf::uint32 match_id_;
  int game_version_;
  float drop_rate_bonus_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  int dota_tv_delay_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 loot_generated_;
  ::google::protobuf::uint32 loot_awarded_;
  bool allchat_;
  ::google::protobuf::uint32 rank_change_;
  int bot_difficulty_;
  int lobby_type_;
  bool allow_spectating_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTALobbyImpl();
};
// -------------------------------------------------------------------

class CSODOTALobbyInternal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyInternal) */ {
 public:
  CSODOTALobbyInternal();
  virtual ~CSODOTALobbyInternal();

  CSODOTALobbyInternal(const CSODOTALobbyInternal& from);

  inline CSODOTALobbyInternal& operator=(const CSODOTALobbyInternal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobbyInternal(CSODOTALobbyInternal&& from) noexcept
    : CSODOTALobbyInternal() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInternal& operator=(CSODOTALobbyInternal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInternal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobbyInternal* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInternal*>(
               &_CSODOTALobbyInternal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CSODOTALobbyInternal* other);
  friend void swap(CSODOTALobbyInternal& a, CSODOTALobbyInternal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyInternal* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTALobbyInternal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTALobbyInternal& from);
  void MergeFrom(const CSODOTALobbyInternal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTALobbyInternal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CLobbyPendingPlayerReport pending_player_reports = 2;
  int pending_player_reports_size() const;
  void clear_pending_player_reports();
  static const int kPendingPlayerReportsFieldNumber = 2;
  const ::CLobbyPendingPlayerReport& pending_player_reports(int index) const;
  ::CLobbyPendingPlayerReport* mutable_pending_player_reports(int index);
  ::CLobbyPendingPlayerReport* add_pending_player_reports();
  ::google::protobuf::RepeatedPtrField< ::CLobbyPendingPlayerReport >*
      mutable_pending_player_reports();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyPendingPlayerReport >&
      pending_player_reports() const;

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 average_rank = 3;
  bool has_average_rank() const;
  void clear_average_rank();
  static const int kAverageRankFieldNumber = 3;
  ::google::protobuf::uint32 average_rank() const;
  void set_average_rank(::google::protobuf::uint32 value);

  // optional fixed32 replay_salt = 4;
  bool has_replay_salt() const;
  void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 4;
  ::google::protobuf::uint32 replay_salt() const;
  void set_replay_salt(::google::protobuf::uint32 value);

  // optional bool disable_radiant_automatic_team_detection = 5;
  bool has_disable_radiant_automatic_team_detection() const;
  void clear_disable_radiant_automatic_team_detection();
  static const int kDisableRadiantAutomaticTeamDetectionFieldNumber = 5;
  bool disable_radiant_automatic_team_detection() const;
  void set_disable_radiant_automatic_team_detection(bool value);

  // optional bool disable_dire_automatic_team_detection = 6;
  bool has_disable_dire_automatic_team_detection() const;
  void clear_disable_dire_automatic_team_detection();
  static const int kDisableDireAutomaticTeamDetectionFieldNumber = 6;
  bool disable_dire_automatic_team_detection() const;
  void set_disable_dire_automatic_team_detection(bool value);

  // optional bool submitted_match_history = 8;
  bool has_submitted_match_history() const;
  void clear_submitted_match_history();
  static const int kSubmittedMatchHistoryFieldNumber = 8;
  bool submitted_match_history() const;
  void set_submitted_match_history(bool value);

  // optional uint32 final_match_duration = 7;
  bool has_final_match_duration() const;
  void clear_final_match_duration();
  static const int kFinalMatchDurationFieldNumber = 7;
  ::google::protobuf::uint32 final_match_duration() const;
  void set_final_match_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInternal)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_average_rank();
  void clear_has_average_rank();
  void set_has_replay_salt();
  void clear_has_replay_salt();
  void set_has_disable_radiant_automatic_team_detection();
  void clear_has_disable_radiant_automatic_team_detection();
  void set_has_disable_dire_automatic_team_detection();
  void clear_has_disable_dire_automatic_team_detection();
  void set_has_final_match_duration();
  void clear_has_final_match_duration();
  void set_has_submitted_match_history();
  void clear_has_submitted_match_history();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyPendingPlayerReport > pending_player_reports_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 average_rank_;
  ::google::protobuf::uint32 replay_salt_;
  bool disable_radiant_automatic_team_detection_;
  bool disable_dire_automatic_team_detection_;
  bool submitted_match_history_;
  ::google::protobuf::uint32 final_match_duration_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTALobbyInternalImpl();
};
// -------------------------------------------------------------------

class CSODOTALobbyMemcached : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyMemcached) */ {
 public:
  CSODOTALobbyMemcached();
  virtual ~CSODOTALobbyMemcached();

  CSODOTALobbyMemcached(const CSODOTALobbyMemcached& from);

  inline CSODOTALobbyMemcached& operator=(const CSODOTALobbyMemcached& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobbyMemcached(CSODOTALobbyMemcached&& from) noexcept
    : CSODOTALobbyMemcached() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyMemcached& operator=(CSODOTALobbyMemcached&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyMemcached& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobbyMemcached* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyMemcached*>(
               &_CSODOTALobbyMemcached_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CSODOTALobbyMemcached* other);
  friend void swap(CSODOTALobbyMemcached& a, CSODOTALobbyMemcached& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyMemcached* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTALobbyMemcached* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTALobbyMemcached& from);
  void MergeFrom(const CSODOTALobbyMemcached& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTALobbyMemcached* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSODOTALobby lobby = 1;
  bool has_lobby() const;
  void clear_lobby();
  static const int kLobbyFieldNumber = 1;
  const ::CSODOTALobby& lobby() const;
  ::CSODOTALobby* release_lobby();
  ::CSODOTALobby* mutable_lobby();
  void set_allocated_lobby(::CSODOTALobby* lobby);

  // optional .CSODOTALobbyInternal internal = 2;
  bool has_internal() const;
  void clear_internal();
  static const int kInternalFieldNumber = 2;
  const ::CSODOTALobbyInternal& internal() const;
  ::CSODOTALobbyInternal* release_internal();
  ::CSODOTALobbyInternal* mutable_internal();
  void set_allocated_internal(::CSODOTALobbyInternal* internal);

  // @@protoc_insertion_point(class_scope:CSODOTALobbyMemcached)
 private:
  void set_has_lobby();
  void clear_has_lobby();
  void set_has_internal();
  void clear_has_internal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CSODOTALobby* lobby_;
  ::CSODOTALobbyInternal* internal_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTALobbyMemcachedImpl();
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgConnectedPlayers.Player) */ {
 public:
  CMsgConnectedPlayers_Player();
  virtual ~CMsgConnectedPlayers_Player();

  CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from);

  inline CMsgConnectedPlayers_Player& operator=(const CMsgConnectedPlayers_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgConnectedPlayers_Player(CMsgConnectedPlayers_Player&& from) noexcept
    : CMsgConnectedPlayers_Player() {
    *this = ::std::move(from);
  }

  inline CMsgConnectedPlayers_Player& operator=(CMsgConnectedPlayers_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgConnectedPlayers_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgConnectedPlayers_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgConnectedPlayers_Player*>(
               &_CMsgConnectedPlayers_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CMsgConnectedPlayers_Player* other);
  friend void swap(CMsgConnectedPlayers_Player& a, CMsgConnectedPlayers_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgConnectedPlayers_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgConnectedPlayers_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgConnectedPlayers_Player& from);
  void MergeFrom(const CMsgConnectedPlayers_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgConnectedPlayers_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers.Player)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgConnectedPlayers_PlayerImpl();
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgConnectedPlayers) */ {
 public:
  CMsgConnectedPlayers();
  virtual ~CMsgConnectedPlayers();

  CMsgConnectedPlayers(const CMsgConnectedPlayers& from);

  inline CMsgConnectedPlayers& operator=(const CMsgConnectedPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgConnectedPlayers(CMsgConnectedPlayers&& from) noexcept
    : CMsgConnectedPlayers() {
    *this = ::std::move(from);
  }

  inline CMsgConnectedPlayers& operator=(CMsgConnectedPlayers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgConnectedPlayers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgConnectedPlayers* internal_default_instance() {
    return reinterpret_cast<const CMsgConnectedPlayers*>(
               &_CMsgConnectedPlayers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CMsgConnectedPlayers* other);
  friend void swap(CMsgConnectedPlayers& a, CMsgConnectedPlayers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgConnectedPlayers* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgConnectedPlayers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgConnectedPlayers& from);
  void MergeFrom(const CMsgConnectedPlayers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgConnectedPlayers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgConnectedPlayers_Player Player;

  // accessors -------------------------------------------------------

  // repeated .CMsgConnectedPlayers.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::CMsgConnectedPlayers_Player& players(int index) const;
  ::CMsgConnectedPlayers_Player* mutable_players(int index);
  ::CMsgConnectedPlayers_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
      players() const;

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);

  // optional uint32 num_spectators = 3;
  bool has_num_spectators() const;
  void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 3;
  ::google::protobuf::uint32 num_spectators() const;
  void set_num_spectators(::google::protobuf::uint32 value);

  // optional uint32 tower_state = 4;
  bool has_tower_state() const;
  void clear_tower_state();
  static const int kTowerStateFieldNumber = 4;
  ::google::protobuf::uint32 tower_state() const;
  void set_tower_state(::google::protobuf::uint32 value);

  // optional bool skip_player_validation = 5;
  bool has_skip_player_validation() const;
  void clear_skip_player_validation();
  static const int kSkipPlayerValidationFieldNumber = 5;
  bool skip_player_validation() const;
  void set_skip_player_validation(bool value);

  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers)
 private:
  void set_has_game_state();
  void clear_has_game_state();
  void set_has_num_spectators();
  void clear_has_num_spectators();
  void set_has_tower_state();
  void clear_has_tower_state();
  void set_has_skip_player_validation();
  void clear_has_skip_player_validation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player > players_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 tower_state_;
  bool skip_player_validation_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgConnectedPlayersImpl();
};
// -------------------------------------------------------------------

class CMsgMatchmakingLanguagePreference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgMatchmakingLanguagePreference) */ {
 public:
  CMsgMatchmakingLanguagePreference();
  virtual ~CMsgMatchmakingLanguagePreference();

  CMsgMatchmakingLanguagePreference(const CMsgMatchmakingLanguagePreference& from);

  inline CMsgMatchmakingLanguagePreference& operator=(const CMsgMatchmakingLanguagePreference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchmakingLanguagePreference(CMsgMatchmakingLanguagePreference&& from) noexcept
    : CMsgMatchmakingLanguagePreference() {
    *this = ::std::move(from);
  }

  inline CMsgMatchmakingLanguagePreference& operator=(CMsgMatchmakingLanguagePreference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMatchmakingLanguagePreference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchmakingLanguagePreference* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchmakingLanguagePreference*>(
               &_CMsgMatchmakingLanguagePreference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CMsgMatchmakingLanguagePreference* other);
  friend void swap(CMsgMatchmakingLanguagePreference& a, CMsgMatchmakingLanguagePreference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchmakingLanguagePreference* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgMatchmakingLanguagePreference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgMatchmakingLanguagePreference& from);
  void MergeFrom(const CMsgMatchmakingLanguagePreference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgMatchmakingLanguagePreference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matchmaking_language_preference = 1;
  bool has_matchmaking_language_preference() const;
  void clear_matchmaking_language_preference();
  static const int kMatchmakingLanguagePreferenceFieldNumber = 1;
  ::google::protobuf::uint32 matchmaking_language_preference() const;
  void set_matchmaking_language_preference(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMatchmakingLanguagePreference)
 private:
  void set_has_matchmaking_language_preference();
  void clear_has_matchmaking_language_preference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 matchmaking_language_preference_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgMatchmakingLanguagePreferenceImpl();
};
// -------------------------------------------------------------------

class CMsgStartFindingMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgStartFindingMatch) */ {
 public:
  CMsgStartFindingMatch();
  virtual ~CMsgStartFindingMatch();

  CMsgStartFindingMatch(const CMsgStartFindingMatch& from);

  inline CMsgStartFindingMatch& operator=(const CMsgStartFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgStartFindingMatch(CMsgStartFindingMatch&& from) noexcept
    : CMsgStartFindingMatch() {
    *this = ::std::move(from);
  }

  inline CMsgStartFindingMatch& operator=(CMsgStartFindingMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStartFindingMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgStartFindingMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgStartFindingMatch*>(
               &_CMsgStartFindingMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CMsgStartFindingMatch* other);
  friend void swap(CMsgStartFindingMatch& a, CMsgStartFindingMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgStartFindingMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgStartFindingMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgStartFindingMatch& from);
  void MergeFrom(const CMsgStartFindingMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgStartFindingMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 client_version = 3;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 3;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_RANKED];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);

  // optional uint32 team_id = 8;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 8;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 matchgroups = 2 [default = 4294967295];
  bool has_matchgroups() const;
  void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 2;
  ::google::protobuf::uint32 matchgroups() const;
  void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 game_modes = 4 [default = 4294967295];
  bool has_game_modes() const;
  void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  ::google::protobuf::uint32 game_modes() const;
  void set_game_modes(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 5;
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  bool has_matchlanguages() const;
  void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 7;
  ::google::protobuf::uint32 matchlanguages() const;
  void set_matchlanguages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgStartFindingMatch)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_matchgroups();
  void clear_has_matchgroups();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_game_modes();
  void clear_has_game_modes();
  void set_has_bot_difficulty();
  void clear_has_bot_difficulty();
  void set_has_match_type();
  void clear_has_match_type();
  void set_has_matchlanguages();
  void clear_has_matchlanguages();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 client_version_;
  int match_type_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 game_modes_;
  int bot_difficulty_;
  ::google::protobuf::uint32 matchlanguages_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgStartFindingMatchImpl();
};
// -------------------------------------------------------------------

class CMsgStopFindingMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgStopFindingMatch) */ {
 public:
  CMsgStopFindingMatch();
  virtual ~CMsgStopFindingMatch();

  CMsgStopFindingMatch(const CMsgStopFindingMatch& from);

  inline CMsgStopFindingMatch& operator=(const CMsgStopFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgStopFindingMatch(CMsgStopFindingMatch&& from) noexcept
    : CMsgStopFindingMatch() {
    *this = ::std::move(from);
  }

  inline CMsgStopFindingMatch& operator=(CMsgStopFindingMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStopFindingMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgStopFindingMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgStopFindingMatch*>(
               &_CMsgStopFindingMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CMsgStopFindingMatch* other);
  friend void swap(CMsgStopFindingMatch& a, CMsgStopFindingMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgStopFindingMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgStopFindingMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgStopFindingMatch& from);
  void MergeFrom(const CMsgStopFindingMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgStopFindingMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgStopFindingMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgStopFindingMatchImpl();
};
// -------------------------------------------------------------------

class CMsgReadyUp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgReadyUp) */ {
 public:
  CMsgReadyUp();
  virtual ~CMsgReadyUp();

  CMsgReadyUp(const CMsgReadyUp& from);

  inline CMsgReadyUp& operator=(const CMsgReadyUp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgReadyUp(CMsgReadyUp&& from) noexcept
    : CMsgReadyUp() {
    *this = ::std::move(from);
  }

  inline CMsgReadyUp& operator=(CMsgReadyUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgReadyUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgReadyUp* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyUp*>(
               &_CMsgReadyUp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CMsgReadyUp* other);
  friend void swap(CMsgReadyUp& a, CMsgReadyUp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyUp* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgReadyUp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgReadyUp& from);
  void MergeFrom(const CMsgReadyUp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgReadyUp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::DOTALobbyReadyState state() const;
  void set_state(::DOTALobbyReadyState value);

  // @@protoc_insertion_point(class_scope:CMsgReadyUp)
 private:
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int state_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgReadyUpImpl();
};
// -------------------------------------------------------------------

class CMsgReadyUpStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgReadyUpStatus) */ {
 public:
  CMsgReadyUpStatus();
  virtual ~CMsgReadyUpStatus();

  CMsgReadyUpStatus(const CMsgReadyUpStatus& from);

  inline CMsgReadyUpStatus& operator=(const CMsgReadyUpStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgReadyUpStatus(CMsgReadyUpStatus&& from) noexcept
    : CMsgReadyUpStatus() {
    *this = ::std::move(from);
  }

  inline CMsgReadyUpStatus& operator=(CMsgReadyUpStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgReadyUpStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgReadyUpStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyUpStatus*>(
               &_CMsgReadyUpStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CMsgReadyUpStatus* other);
  friend void swap(CMsgReadyUpStatus& a, CMsgReadyUpStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyUpStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgReadyUpStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgReadyUpStatus& from);
  void MergeFrom(const CMsgReadyUpStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgReadyUpStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 accepted_ids = 2;
  int accepted_ids_size() const;
  void clear_accepted_ids();
  static const int kAcceptedIdsFieldNumber = 2;
  ::google::protobuf::uint32 accepted_ids(int index) const;
  void set_accepted_ids(int index, ::google::protobuf::uint32 value);
  void add_accepted_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      accepted_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_accepted_ids();

  // repeated uint32 declined_ids = 3;
  int declined_ids_size() const;
  void clear_declined_ids();
  static const int kDeclinedIdsFieldNumber = 3;
  ::google::protobuf::uint32 declined_ids(int index) const;
  void set_declined_ids(int index, ::google::protobuf::uint32 value);
  void add_declined_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      declined_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_declined_ids();

  // optional fixed64 lobby_id = 1;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgReadyUpStatus)
 private:
  void set_has_lobby_id();
  void clear_has_lobby_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > accepted_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > declined_ids_;
  ::google::protobuf::uint64 lobby_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgReadyUpStatusImpl();
};
// -------------------------------------------------------------------

class CMsgSpawnLootGreevil : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSpawnLootGreevil) */ {
 public:
  CMsgSpawnLootGreevil();
  virtual ~CMsgSpawnLootGreevil();

  CMsgSpawnLootGreevil(const CMsgSpawnLootGreevil& from);

  inline CMsgSpawnLootGreevil& operator=(const CMsgSpawnLootGreevil& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpawnLootGreevil(CMsgSpawnLootGreevil&& from) noexcept
    : CMsgSpawnLootGreevil() {
    *this = ::std::move(from);
  }

  inline CMsgSpawnLootGreevil& operator=(CMsgSpawnLootGreevil&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpawnLootGreevil& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpawnLootGreevil* internal_default_instance() {
    return reinterpret_cast<const CMsgSpawnLootGreevil*>(
               &_CMsgSpawnLootGreevil_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CMsgSpawnLootGreevil* other);
  friend void swap(CMsgSpawnLootGreevil& a, CMsgSpawnLootGreevil& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpawnLootGreevil* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpawnLootGreevil* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpawnLootGreevil& from);
  void MergeFrom(const CMsgSpawnLootGreevil& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpawnLootGreevil* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool rare = 1;
  bool has_rare() const;
  void clear_rare();
  static const int kRareFieldNumber = 1;
  bool rare() const;
  void set_rare(bool value);

  // @@protoc_insertion_point(class_scope:CMsgSpawnLootGreevil)
 private:
  void set_has_rare();
  void clear_has_rare();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool rare_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSpawnLootGreevilImpl();
};
// -------------------------------------------------------------------

class CMsgDismissLootGreevil : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDismissLootGreevil) */ {
 public:
  CMsgDismissLootGreevil();
  virtual ~CMsgDismissLootGreevil();

  CMsgDismissLootGreevil(const CMsgDismissLootGreevil& from);

  inline CMsgDismissLootGreevil& operator=(const CMsgDismissLootGreevil& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDismissLootGreevil(CMsgDismissLootGreevil&& from) noexcept
    : CMsgDismissLootGreevil() {
    *this = ::std::move(from);
  }

  inline CMsgDismissLootGreevil& operator=(CMsgDismissLootGreevil&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDismissLootGreevil& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDismissLootGreevil* internal_default_instance() {
    return reinterpret_cast<const CMsgDismissLootGreevil*>(
               &_CMsgDismissLootGreevil_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CMsgDismissLootGreevil* other);
  friend void swap(CMsgDismissLootGreevil& a, CMsgDismissLootGreevil& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDismissLootGreevil* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDismissLootGreevil* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDismissLootGreevil& from);
  void MergeFrom(const CMsgDismissLootGreevil& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDismissLootGreevil* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool killed = 2;
  bool has_killed() const;
  void clear_killed();
  static const int kKilledFieldNumber = 2;
  bool killed() const;
  void set_killed(bool value);

  // optional bool rare = 3;
  bool has_rare() const;
  void clear_rare();
  static const int kRareFieldNumber = 3;
  bool rare() const;
  void set_rare(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDismissLootGreevil)
 private:
  void set_has_killed();
  void clear_has_killed();
  void set_has_rare();
  void clear_has_rare();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool killed_;
  bool rare_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDismissLootGreevilImpl();
};
// -------------------------------------------------------------------

class CMsgDismissLootGreevilResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDismissLootGreevilResponse) */ {
 public:
  CMsgDismissLootGreevilResponse();
  virtual ~CMsgDismissLootGreevilResponse();

  CMsgDismissLootGreevilResponse(const CMsgDismissLootGreevilResponse& from);

  inline CMsgDismissLootGreevilResponse& operator=(const CMsgDismissLootGreevilResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDismissLootGreevilResponse(CMsgDismissLootGreevilResponse&& from) noexcept
    : CMsgDismissLootGreevilResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDismissLootGreevilResponse& operator=(CMsgDismissLootGreevilResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDismissLootGreevilResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDismissLootGreevilResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDismissLootGreevilResponse*>(
               &_CMsgDismissLootGreevilResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(CMsgDismissLootGreevilResponse* other);
  friend void swap(CMsgDismissLootGreevilResponse& a, CMsgDismissLootGreevilResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDismissLootGreevilResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDismissLootGreevilResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDismissLootGreevilResponse& from);
  void MergeFrom(const CMsgDismissLootGreevilResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDismissLootGreevilResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDismissLootGreevilResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDismissLootGreevilResponseImpl();
};
// -------------------------------------------------------------------

class CSourceTVGame_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSourceTVGame.Player) */ {
 public:
  CSourceTVGame_Player();
  virtual ~CSourceTVGame_Player();

  CSourceTVGame_Player(const CSourceTVGame_Player& from);

  inline CSourceTVGame_Player& operator=(const CSourceTVGame_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSourceTVGame_Player(CSourceTVGame_Player&& from) noexcept
    : CSourceTVGame_Player() {
    *this = ::std::move(from);
  }

  inline CSourceTVGame_Player& operator=(CSourceTVGame_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGame_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSourceTVGame_Player* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGame_Player*>(
               &_CSourceTVGame_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CSourceTVGame_Player* other);
  friend void swap(CSourceTVGame_Player& a, CSourceTVGame_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSourceTVGame_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CSourceTVGame_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSourceTVGame_Player& from);
  void MergeFrom(const CSourceTVGame_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSourceTVGame_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSourceTVGame.Player)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_name();
  void clear_has_name();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSourceTVGame_PlayerImpl();
};
// -------------------------------------------------------------------

class CSourceTVGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSourceTVGame) */ {
 public:
  CSourceTVGame();
  virtual ~CSourceTVGame();

  CSourceTVGame(const CSourceTVGame& from);

  inline CSourceTVGame& operator=(const CSourceTVGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSourceTVGame(CSourceTVGame&& from) noexcept
    : CSourceTVGame() {
    *this = ::std::move(from);
  }

  inline CSourceTVGame& operator=(CSourceTVGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSourceTVGame* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGame*>(
               &_CSourceTVGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CSourceTVGame* other);
  friend void swap(CSourceTVGame& a, CSourceTVGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSourceTVGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CSourceTVGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSourceTVGame& from);
  void MergeFrom(const CSourceTVGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSourceTVGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CSourceTVGame_Player Player;

  // accessors -------------------------------------------------------

  // repeated .CLobbyTeamDetails team_details = 9;
  int team_details_size() const;
  void clear_team_details();
  static const int kTeamDetailsFieldNumber = 9;
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::CLobbyTeamDetails* add_team_details();
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // repeated .CSourceTVGame.Player good_players = 14;
  int good_players_size() const;
  void clear_good_players();
  static const int kGoodPlayersFieldNumber = 14;
  const ::CSourceTVGame_Player& good_players(int index) const;
  ::CSourceTVGame_Player* mutable_good_players(int index);
  ::CSourceTVGame_Player* add_good_players();
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
      mutable_good_players();
  const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
      good_players() const;

  // repeated .CSourceTVGame.Player bad_players = 15;
  int bad_players_size() const;
  void clear_bad_players();
  static const int kBadPlayersFieldNumber = 15;
  const ::CSourceTVGame_Player& bad_players(int index) const;
  ::CSourceTVGame_Player* mutable_bad_players(int index);
  ::CSourceTVGame_Player* add_bad_players();
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
      mutable_bad_players();
  const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
      bad_players() const;

  // repeated .CSourceTVGame.Player other_players = 16;
  int other_players_size() const;
  void clear_other_players();
  static const int kOtherPlayersFieldNumber = 16;
  const ::CSourceTVGame_Player& other_players(int index) const;
  ::CSourceTVGame_Player* mutable_other_players(int index);
  ::CSourceTVGame_Player* add_other_players();
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
      mutable_other_players();
  const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
      other_players() const;

  // optional string game_name = 7;
  bool has_game_name() const;
  void clear_game_name();
  static const int kGameNameFieldNumber = 7;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // optional uint32 source_tv_public_addr = 1;
  bool has_source_tv_public_addr() const;
  void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 1;
  ::google::protobuf::uint32 source_tv_public_addr() const;
  void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 2;
  bool has_source_tv_private_addr() const;
  void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 2;
  ::google::protobuf::uint32 source_tv_private_addr() const;
  void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_port = 3;
  bool has_source_tv_port() const;
  void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 3;
  ::google::protobuf::uint32 source_tv_port() const;
  void set_source_tv_port(::google::protobuf::uint32 value);

  // optional uint32 num_spectators = 10;
  bool has_num_spectators() const;
  void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 10;
  ::google::protobuf::uint32 num_spectators() const;
  void set_num_spectators(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 11;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 11;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 12;
  bool has_tournament_game_id() const;
  void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 12;
  ::google::protobuf::uint32 tournament_game_id() const;
  void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional uint32 tower_state = 13;
  bool has_tower_state() const;
  void clear_tower_state();
  static const int kTowerStateFieldNumber = 13;
  ::google::protobuf::uint32 tower_state() const;
  void set_tower_state(::google::protobuf::uint32 value);

  // optional float tv_broadcast_time = 17;
  bool has_tv_broadcast_time() const;
  void clear_tv_broadcast_time();
  static const int kTvBroadcastTimeFieldNumber = 17;
  float tv_broadcast_time() const;
  void set_tv_broadcast_time(float value);

  // optional .DOTA_GameMode game_mode = 21 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 21;
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);

  // optional fixed64 server_steamid = 19;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 19;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // optional float game_time = 18;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 18;
  float game_time() const;
  void set_game_time(float value);

  // optional uint32 leagueid = 20;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 20;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSourceTVGame)
 private:
  void set_has_source_tv_public_addr();
  void clear_has_source_tv_public_addr();
  void set_has_source_tv_private_addr();
  void clear_has_source_tv_private_addr();
  void set_has_source_tv_port();
  void clear_has_source_tv_port();
  void set_has_game_name();
  void clear_has_game_name();
  void set_has_num_spectators();
  void clear_has_num_spectators();
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_tournament_game_id();
  void clear_has_tournament_game_id();
  void set_has_tower_state();
  void clear_has_tower_state();
  void set_has_tv_broadcast_time();
  void clear_has_tv_broadcast_time();
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_server_steamid();
  void clear_has_server_steamid();
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_game_mode();
  void clear_has_game_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player > good_players_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player > bad_players_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player > other_players_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 tower_state_;
  float tv_broadcast_time_;
  int game_mode_;
  ::google::protobuf::uint64 server_steamid_;
  float game_time_;
  ::google::protobuf::uint32 leagueid_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSourceTVGameImpl();
};
// -------------------------------------------------------------------

class CMsgSourceTVGamesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSourceTVGamesResponse) */ {
 public:
  CMsgSourceTVGamesResponse();
  virtual ~CMsgSourceTVGamesResponse();

  CMsgSourceTVGamesResponse(const CMsgSourceTVGamesResponse& from);

  inline CMsgSourceTVGamesResponse& operator=(const CMsgSourceTVGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSourceTVGamesResponse(CMsgSourceTVGamesResponse&& from) noexcept
    : CMsgSourceTVGamesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSourceTVGamesResponse& operator=(CMsgSourceTVGamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSourceTVGamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSourceTVGamesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSourceTVGamesResponse*>(
               &_CMsgSourceTVGamesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CMsgSourceTVGamesResponse* other);
  friend void swap(CMsgSourceTVGamesResponse& a, CMsgSourceTVGamesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSourceTVGamesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSourceTVGamesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSourceTVGamesResponse& from);
  void MergeFrom(const CMsgSourceTVGamesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSourceTVGamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSourceTVGame games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  const ::CSourceTVGame& games(int index) const;
  ::CSourceTVGame* mutable_games(int index);
  ::CSourceTVGame* add_games();
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame >*
      mutable_games();
  const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame >&
      games() const;

  // optional uint32 num_total_games = 2;
  bool has_num_total_games() const;
  void clear_num_total_games();
  static const int kNumTotalGamesFieldNumber = 2;
  ::google::protobuf::uint32 num_total_games() const;
  void set_num_total_games(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSourceTVGamesResponse)
 private:
  void set_has_num_total_games();
  void clear_has_num_total_games();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGame > games_;
  ::google::protobuf::uint32 num_total_games_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSourceTVGamesResponseImpl();
};
// -------------------------------------------------------------------

class CMsgFindSourceTVGames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgFindSourceTVGames) */ {
 public:
  CMsgFindSourceTVGames();
  virtual ~CMsgFindSourceTVGames();

  CMsgFindSourceTVGames(const CMsgFindSourceTVGames& from);

  inline CMsgFindSourceTVGames& operator=(const CMsgFindSourceTVGames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgFindSourceTVGames(CMsgFindSourceTVGames&& from) noexcept
    : CMsgFindSourceTVGames() {
    *this = ::std::move(from);
  }

  inline CMsgFindSourceTVGames& operator=(CMsgFindSourceTVGames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFindSourceTVGames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgFindSourceTVGames* internal_default_instance() {
    return reinterpret_cast<const CMsgFindSourceTVGames*>(
               &_CMsgFindSourceTVGames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(CMsgFindSourceTVGames* other);
  friend void swap(CMsgFindSourceTVGames& a, CMsgFindSourceTVGames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgFindSourceTVGames* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgFindSourceTVGames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgFindSourceTVGames& from);
  void MergeFrom(const CMsgFindSourceTVGames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgFindSourceTVGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // optional uint32 num_games = 3;
  bool has_num_games() const;
  void clear_num_games();
  static const int kNumGamesFieldNumber = 3;
  ::google::protobuf::uint32 num_games() const;
  void set_num_games(::google::protobuf::uint32 value);

  // optional uint32 leagueid = 4;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 4;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 heroid = 5;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  ::google::protobuf::uint32 heroid() const;
  void set_heroid(::google::protobuf::uint32 value);

  // optional bool team_game = 6;
  bool has_team_game() const;
  void clear_team_game();
  static const int kTeamGameFieldNumber = 6;
  bool team_game() const;
  void set_team_game(bool value);

  // optional bool diretide = 7;
  bool has_diretide() const;
  void clear_diretide();
  static const int kDiretideFieldNumber = 7;
  bool diretide() const;
  void set_diretide(bool value);

  // optional bool xmas = 8;
  bool has_xmas() const;
  void clear_xmas();
  static const int kXmasFieldNumber = 8;
  bool xmas() const;
  void set_xmas(bool value);

  // @@protoc_insertion_point(class_scope:CMsgFindSourceTVGames)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_start();
  void clear_has_start();
  void set_has_num_games();
  void clear_has_num_games();
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_heroid();
  void clear_has_heroid();
  void set_has_team_game();
  void clear_has_team_game();
  void set_has_diretide();
  void clear_has_diretide();
  void set_has_xmas();
  void clear_has_xmas();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 num_games_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 heroid_;
  bool team_game_;
  bool diretide_;
  bool xmas_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgFindSourceTVGamesImpl();
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSpectateFriendGame) */ {
 public:
  CMsgSpectateFriendGame();
  virtual ~CMsgSpectateFriendGame();

  CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from);

  inline CMsgSpectateFriendGame& operator=(const CMsgSpectateFriendGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectateFriendGame(CMsgSpectateFriendGame&& from) noexcept
    : CMsgSpectateFriendGame() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGame& operator=(CMsgSpectateFriendGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectateFriendGame* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGame*>(
               &_CMsgSpectateFriendGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(CMsgSpectateFriendGame* other);
  friend void swap(CMsgSpectateFriendGame& a, CMsgSpectateFriendGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectateFriendGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectateFriendGame& from);
  void MergeFrom(const CMsgSpectateFriendGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectateFriendGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGame)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSpectateFriendGameImpl();
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSpectateFriendGameResponse) */ {
 public:
  CMsgSpectateFriendGameResponse();
  virtual ~CMsgSpectateFriendGameResponse();

  CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from);

  inline CMsgSpectateFriendGameResponse& operator=(const CMsgSpectateFriendGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectateFriendGameResponse(CMsgSpectateFriendGameResponse&& from) noexcept
    : CMsgSpectateFriendGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGameResponse& operator=(CMsgSpectateFriendGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectateFriendGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGameResponse*>(
               &_CMsgSpectateFriendGameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(CMsgSpectateFriendGameResponse* other);
  friend void swap(CMsgSpectateFriendGameResponse& a, CMsgSpectateFriendGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectateFriendGameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectateFriendGameResponse& from);
  void MergeFrom(const CMsgSpectateFriendGameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectateFriendGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steamid = 4;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 4;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGameResponse)
 private:
  void set_has_server_steamid();
  void clear_has_server_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steamid_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSpectateFriendGameResponseImpl();
};
// -------------------------------------------------------------------

class CMsgAbandonCurrentGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgAbandonCurrentGame) */ {
 public:
  CMsgAbandonCurrentGame();
  virtual ~CMsgAbandonCurrentGame();

  CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from);

  inline CMsgAbandonCurrentGame& operator=(const CMsgAbandonCurrentGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgAbandonCurrentGame(CMsgAbandonCurrentGame&& from) noexcept
    : CMsgAbandonCurrentGame() {
    *this = ::std::move(from);
  }

  inline CMsgAbandonCurrentGame& operator=(CMsgAbandonCurrentGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAbandonCurrentGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgAbandonCurrentGame* internal_default_instance() {
    return reinterpret_cast<const CMsgAbandonCurrentGame*>(
               &_CMsgAbandonCurrentGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(CMsgAbandonCurrentGame* other);
  friend void swap(CMsgAbandonCurrentGame& a, CMsgAbandonCurrentGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgAbandonCurrentGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgAbandonCurrentGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgAbandonCurrentGame& from);
  void MergeFrom(const CMsgAbandonCurrentGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgAbandonCurrentGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgAbandonCurrentGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgAbandonCurrentGameImpl();
};
// -------------------------------------------------------------------

class CMsgGameServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerInfo) */ {
 public:
  CMsgGameServerInfo();
  virtual ~CMsgGameServerInfo();

  CMsgGameServerInfo(const CMsgGameServerInfo& from);

  inline CMsgGameServerInfo& operator=(const CMsgGameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameServerInfo(CMsgGameServerInfo&& from) noexcept
    : CMsgGameServerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerInfo& operator=(CMsgGameServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameServerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerInfo*>(
               &_CMsgGameServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(CMsgGameServerInfo* other);
  friend void swap(CMsgGameServerInfo& a, CMsgGameServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameServerInfo& from);
  void MergeFrom(const CMsgGameServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerInfo_ServerType ServerType;
  static const ServerType UNSPECIFIED =
    CMsgGameServerInfo_ServerType_UNSPECIFIED;
  static const ServerType GAME =
    CMsgGameServerInfo_ServerType_GAME;
  static const ServerType PROXY =
    CMsgGameServerInfo_ServerType_PROXY;
  static inline bool ServerType_IsValid(int value) {
    return CMsgGameServerInfo_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    CMsgGameServerInfo_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    CMsgGameServerInfo_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return CMsgGameServerInfo_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return CMsgGameServerInfo_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return CMsgGameServerInfo_ServerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string server_key = 5;
  bool has_server_key() const;
  void clear_server_key();
  static const int kServerKeyFieldNumber = 5;
  const ::std::string& server_key() const;
  void set_server_key(const ::std::string& value);
  #if LANG_CXX11
  void set_server_key(::std::string&& value);
  #endif
  void set_server_key(const char* value);
  void set_server_key(const char* value, size_t size);
  ::std::string* mutable_server_key();
  ::std::string* release_server_key();
  void set_allocated_server_key(::std::string* server_key);

  // optional fixed32 server_public_ip_addr = 1;
  bool has_server_public_ip_addr() const;
  void clear_server_public_ip_addr();
  static const int kServerPublicIpAddrFieldNumber = 1;
  ::google::protobuf::uint32 server_public_ip_addr() const;
  void set_server_public_ip_addr(::google::protobuf::uint32 value);

  // optional fixed32 server_private_ip_addr = 2;
  bool has_server_private_ip_addr() const;
  void clear_server_private_ip_addr();
  static const int kServerPrivateIpAddrFieldNumber = 2;
  ::google::protobuf::uint32 server_private_ip_addr() const;
  void set_server_private_ip_addr(::google::protobuf::uint32 value);

  // optional uint32 server_port = 3;
  bool has_server_port() const;
  void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // optional uint32 server_tv_port = 4;
  bool has_server_tv_port() const;
  void clear_server_tv_port();
  static const int kServerTvPortFieldNumber = 4;
  ::google::protobuf::uint32 server_tv_port() const;
  void set_server_tv_port(::google::protobuf::uint32 value);

  // optional bool server_hibernation = 6;
  bool has_server_hibernation() const;
  void clear_server_hibernation();
  static const int kServerHibernationFieldNumber = 6;
  bool server_hibernation() const;
  void set_server_hibernation(bool value);

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 7;
  ::CMsgGameServerInfo_ServerType server_type() const;
  void set_server_type(::CMsgGameServerInfo_ServerType value);

  // optional uint32 server_region = 8;
  bool has_server_region() const;
  void clear_server_region();
  static const int kServerRegionFieldNumber = 8;
  ::google::protobuf::uint32 server_region() const;
  void set_server_region(::google::protobuf::uint32 value);

  // optional float server_loadavg = 9;
  bool has_server_loadavg() const;
  void clear_server_loadavg();
  static const int kServerLoadavgFieldNumber = 9;
  float server_loadavg() const;
  void set_server_loadavg(float value);

  // optional float server_tv_broadcast_time = 10;
  bool has_server_tv_broadcast_time() const;
  void clear_server_tv_broadcast_time();
  static const int kServerTvBroadcastTimeFieldNumber = 10;
  float server_tv_broadcast_time() const;
  void set_server_tv_broadcast_time(float value);

  // optional float server_game_time = 11;
  bool has_server_game_time() const;
  void clear_server_game_time();
  static const int kServerGameTimeFieldNumber = 11;
  float server_game_time() const;
  void set_server_game_time(float value);

  // optional fixed64 server_relay_connected_steam_id = 12;
  bool has_server_relay_connected_steam_id() const;
  void clear_server_relay_connected_steam_id();
  static const int kServerRelayConnectedSteamIdFieldNumber = 12;
  ::google::protobuf::uint64 server_relay_connected_steam_id() const;
  void set_server_relay_connected_steam_id(::google::protobuf::uint64 value);

  // optional uint32 relay_slots_max = 13;
  bool has_relay_slots_max() const;
  void clear_relay_slots_max();
  static const int kRelaySlotsMaxFieldNumber = 13;
  ::google::protobuf::uint32 relay_slots_max() const;
  void set_relay_slots_max(::google::protobuf::uint32 value);

  // optional int32 relays_connected = 14;
  bool has_relays_connected() const;
  void clear_relays_connected();
  static const int kRelaysConnectedFieldNumber = 14;
  ::google::protobuf::int32 relays_connected() const;
  void set_relays_connected(::google::protobuf::int32 value);

  // optional fixed64 relayed_game_server_steam_id = 16;
  bool has_relayed_game_server_steam_id() const;
  void clear_relayed_game_server_steam_id();
  static const int kRelayedGameServerSteamIdFieldNumber = 16;
  ::google::protobuf::uint64 relayed_game_server_steam_id() const;
  void set_relayed_game_server_steam_id(::google::protobuf::uint64 value);

  // optional int32 relay_clients_connected = 15;
  bool has_relay_clients_connected() const;
  void clear_relay_clients_connected();
  static const int kRelayClientsConnectedFieldNumber = 15;
  ::google::protobuf::int32 relay_clients_connected() const;
  void set_relay_clients_connected(::google::protobuf::int32 value);

  // optional uint32 parent_relay_count = 17;
  bool has_parent_relay_count() const;
  void clear_parent_relay_count();
  static const int kParentRelayCountFieldNumber = 17;
  ::google::protobuf::uint32 parent_relay_count() const;
  void set_parent_relay_count(::google::protobuf::uint32 value);

  // optional fixed64 tv_secret_code = 18;
  bool has_tv_secret_code() const;
  void clear_tv_secret_code();
  static const int kTvSecretCodeFieldNumber = 18;
  ::google::protobuf::uint64 tv_secret_code() const;
  void set_tv_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGameServerInfo)
 private:
  void set_has_server_public_ip_addr();
  void clear_has_server_public_ip_addr();
  void set_has_server_private_ip_addr();
  void clear_has_server_private_ip_addr();
  void set_has_server_port();
  void clear_has_server_port();
  void set_has_server_tv_port();
  void clear_has_server_tv_port();
  void set_has_server_key();
  void clear_has_server_key();
  void set_has_server_hibernation();
  void clear_has_server_hibernation();
  void set_has_server_type();
  void clear_has_server_type();
  void set_has_server_region();
  void clear_has_server_region();
  void set_has_server_loadavg();
  void clear_has_server_loadavg();
  void set_has_server_tv_broadcast_time();
  void clear_has_server_tv_broadcast_time();
  void set_has_server_game_time();
  void clear_has_server_game_time();
  void set_has_server_relay_connected_steam_id();
  void clear_has_server_relay_connected_steam_id();
  void set_has_relay_slots_max();
  void clear_has_relay_slots_max();
  void set_has_relays_connected();
  void clear_has_relays_connected();
  void set_has_relay_clients_connected();
  void clear_has_relay_clients_connected();
  void set_has_relayed_game_server_steam_id();
  void clear_has_relayed_game_server_steam_id();
  void set_has_parent_relay_count();
  void clear_has_parent_relay_count();
  void set_has_tv_secret_code();
  void clear_has_tv_secret_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_key_;
  ::google::protobuf::uint32 server_public_ip_addr_;
  ::google::protobuf::uint32 server_private_ip_addr_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 server_tv_port_;
  bool server_hibernation_;
  int server_type_;
  ::google::protobuf::uint32 server_region_;
  float server_loadavg_;
  float server_tv_broadcast_time_;
  float server_game_time_;
  ::google::protobuf::uint64 server_relay_connected_steam_id_;
  ::google::protobuf::uint32 relay_slots_max_;
  ::google::protobuf::int32 relays_connected_;
  ::google::protobuf::uint64 relayed_game_server_steam_id_;
  ::google::protobuf::int32 relay_clients_connected_;
  ::google::protobuf::uint32 parent_relay_count_;
  ::google::protobuf::uint64 tv_secret_code_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameServerInfoImpl();
};
// -------------------------------------------------------------------

class CMsgLeaverDetected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverDetected) */ {
 public:
  CMsgLeaverDetected();
  virtual ~CMsgLeaverDetected();

  CMsgLeaverDetected(const CMsgLeaverDetected& from);

  inline CMsgLeaverDetected& operator=(const CMsgLeaverDetected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeaverDetected(CMsgLeaverDetected&& from) noexcept
    : CMsgLeaverDetected() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverDetected& operator=(CMsgLeaverDetected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverDetected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeaverDetected* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverDetected*>(
               &_CMsgLeaverDetected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(CMsgLeaverDetected* other);
  friend void swap(CMsgLeaverDetected& a, CMsgLeaverDetected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeaverDetected* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgLeaverDetected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgLeaverDetected& from);
  void MergeFrom(const CMsgLeaverDetected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgLeaverDetected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 leaver_status = 2;
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 2;
  ::google::protobuf::uint32 leaver_status() const;
  void set_leaver_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgLeaverDetected)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_leaver_status();
  void clear_has_leaver_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 leaver_status_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgLeaverDetectedImpl();
};
// -------------------------------------------------------------------

class CMsgLeaverDetectedResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverDetectedResponse) */ {
 public:
  CMsgLeaverDetectedResponse();
  virtual ~CMsgLeaverDetectedResponse();

  CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from);

  inline CMsgLeaverDetectedResponse& operator=(const CMsgLeaverDetectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeaverDetectedResponse(CMsgLeaverDetectedResponse&& from) noexcept
    : CMsgLeaverDetectedResponse() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverDetectedResponse& operator=(CMsgLeaverDetectedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverDetectedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeaverDetectedResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverDetectedResponse*>(
               &_CMsgLeaverDetectedResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(CMsgLeaverDetectedResponse* other);
  friend void swap(CMsgLeaverDetectedResponse& a, CMsgLeaverDetectedResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeaverDetectedResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgLeaverDetectedResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgLeaverDetectedResponse& from);
  void MergeFrom(const CMsgLeaverDetectedResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgLeaverDetectedResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgLeaverDetectedResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgLeaverDetectedResponseImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbySetDetails) */ {
 public:
  CMsgPracticeLobbySetDetails();
  virtual ~CMsgPracticeLobbySetDetails();

  CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from);

  inline CMsgPracticeLobbySetDetails& operator=(const CMsgPracticeLobbySetDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbySetDetails(CMsgPracticeLobbySetDetails&& from) noexcept
    : CMsgPracticeLobbySetDetails() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbySetDetails& operator=(CMsgPracticeLobbySetDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbySetDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbySetDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbySetDetails*>(
               &_CMsgPracticeLobbySetDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(CMsgPracticeLobbySetDetails* other);
  friend void swap(CMsgPracticeLobbySetDetails& a, CMsgPracticeLobbySetDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbySetDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbySetDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbySetDetails& from);
  void MergeFrom(const CMsgPracticeLobbySetDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbySetDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CLobbyTeamDetails team_details = 3;
  int team_details_size() const;
  void clear_team_details();
  static const int kTeamDetailsFieldNumber = 3;
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::CLobbyTeamDetails* add_team_details();
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // optional string game_name = 2;
  bool has_game_name() const;
  void clear_game_name();
  static const int kGameNameFieldNumber = 2;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // optional string pass_key = 15;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 15;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional string custom_game_mode = 26;
  bool has_custom_game_mode() const;
  void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 26;
  const ::std::string& custom_game_mode() const;
  void set_custom_game_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_game_mode(::std::string&& value);
  #endif
  void set_custom_game_mode(const char* value);
  void set_custom_game_mode(const char* value, size_t size);
  ::std::string* mutable_custom_game_mode();
  ::std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional string custom_map_name = 27;
  bool has_custom_map_name() const;
  void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 27;
  const ::std::string& custom_map_name() const;
  void set_custom_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_map_name(::std::string&& value);
  #endif
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  ::std::string* mutable_custom_map_name();
  ::std::string* release_custom_map_name();
  void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional string lan_host_ping_location = 48;
  bool has_lan_host_ping_location() const;
  void clear_lan_host_ping_location();
  static const int kLanHostPingLocationFieldNumber = 48;
  const ::std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const ::std::string& value);
  #if LANG_CXX11
  void set_lan_host_ping_location(::std::string&& value);
  #endif
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  ::std::string* mutable_lan_host_ping_location();
  ::std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(::std::string* lan_host_ping_location);

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 server_region = 4;
  bool has_server_region() const;
  void clear_server_region();
  static const int kServerRegionFieldNumber = 4;
  ::google::protobuf::uint32 server_region() const;
  void set_server_region(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 5;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 5;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  void clear_cm_pick();
  static const int kCmPickFieldNumber = 6;
  ::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::DOTA_CM_PICK value);

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_radiant() const;
  void clear_bot_difficulty_radiant();
  static const int kBotDifficultyRadiantFieldNumber = 9;
  ::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::DOTABotDifficulty value);

  // optional bool allow_cheats = 10;
  bool has_allow_cheats() const;
  void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 10;
  bool allow_cheats() const;
  void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 11;
  bool has_fill_with_bots() const;
  void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 11;
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);

  // optional bool intro_mode = 12;
  bool has_intro_mode() const;
  void clear_intro_mode();
  static const int kIntroModeFieldNumber = 12;
  bool intro_mode() const;
  void set_intro_mode(bool value);

  // optional bool allow_spectating = 13;
  bool has_allow_spectating() const;
  void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 13;
  bool allow_spectating() const;
  void set_allow_spectating(bool value);

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  bool has_game_version() const;
  void clear_game_version();
  static const int kGameVersionFieldNumber = 14;
  ::DOTAGameVersion game_version() const;
  void set_game_version(::DOTAGameVersion value);

  // optional uint32 leagueid = 16;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 16;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 17;
  bool has_penalty_level_radiant() const;
  void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 17;
  ::google::protobuf::uint32 penalty_level_radiant() const;
  void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 18;
  bool has_penalty_level_dire() const;
  void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 18;
  ::google::protobuf::uint32 penalty_level_dire() const;
  void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 19;
  bool has_load_game_id() const;
  void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 19;
  ::google::protobuf::uint32 load_game_id() const;
  void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 20;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 20;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 radiant_series_wins = 21;
  bool has_radiant_series_wins() const;
  void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 21;
  ::google::protobuf::uint32 radiant_series_wins() const;
  void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 22;
  bool has_dire_series_wins() const;
  void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 22;
  ::google::protobuf::uint32 dire_series_wins() const;
  void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional uint32 custom_difficulty = 28;
  bool has_custom_difficulty() const;
  void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 28;
  ::google::protobuf::uint32 custom_difficulty() const;
  void set_custom_difficulty(::google::protobuf::uint32 value);

  // optional uint64 custom_game_id = 29;
  bool has_custom_game_id() const;
  void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 29;
  ::google::protobuf::uint64 custom_game_id() const;
  void set_custom_game_id(::google::protobuf::uint64 value);

  // optional uint32 custom_min_players = 30;
  bool has_custom_min_players() const;
  void clear_custom_min_players();
  static const int kCustomMinPlayersFieldNumber = 30;
  ::google::protobuf::uint32 custom_min_players() const;
  void set_custom_min_players(::google::protobuf::uint32 value);

  // optional uint32 custom_max_players = 31;
  bool has_custom_max_players() const;
  void clear_custom_max_players();
  static const int kCustomMaxPlayersFieldNumber = 31;
  ::google::protobuf::uint32 custom_max_players() const;
  void set_custom_max_players(::google::protobuf::uint32 value);

  // optional bool allchat = 23 [default = false];
  bool has_allchat() const;
  void clear_allchat();
  static const int kAllchatFieldNumber = 23;
  bool allchat() const;
  void set_allchat(bool value);

  // optional bool lan = 25;
  bool has_lan() const;
  void clear_lan();
  static const int kLanFieldNumber = 25;
  bool lan() const;
  void set_lan(bool value);

  // optional bool custom_game_penalties = 47;
  bool has_custom_game_penalties() const;
  void clear_custom_game_penalties();
  static const int kCustomGamePenaltiesFieldNumber = 47;
  bool custom_game_penalties() const;
  void set_custom_game_penalties(bool value);

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 33;
  ::DOTALobbyVisibility visibility() const;
  void set_visibility(::DOTALobbyVisibility value);

  // optional fixed64 custom_game_crc = 34;
  bool has_custom_game_crc() const;
  void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 34;
  ::google::protobuf::uint64 custom_game_crc() const;
  void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional uint64 previous_match_override = 38;
  bool has_previous_match_override() const;
  void clear_previous_match_override();
  static const int kPreviousMatchOverrideFieldNumber = 38;
  ::google::protobuf::uint64 previous_match_override() const;
  void set_previous_match_override(::google::protobuf::uint64 value);

  // optional fixed32 custom_game_timestamp = 37;
  bool has_custom_game_timestamp() const;
  void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 37;
  ::google::protobuf::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  bool has_pause_setting() const;
  void clear_pause_setting();
  static const int kPauseSettingFieldNumber = 42;
  ::LobbyDotaPauseSetting pause_setting() const;
  void set_pause_setting(::LobbyDotaPauseSetting value);

  // optional uint32 league_node_id = 49;
  bool has_league_node_id() const;
  void clear_league_node_id();
  static const int kLeagueNodeIdFieldNumber = 49;
  ::google::protobuf::uint32 league_node_id() const;
  void set_league_node_id(::google::protobuf::uint32 value);

  // optional uint64 bot_radiant = 44;
  bool has_bot_radiant() const;
  void clear_bot_radiant();
  static const int kBotRadiantFieldNumber = 44;
  ::google::protobuf::uint64 bot_radiant() const;
  void set_bot_radiant(::google::protobuf::uint64 value);

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_dire() const;
  void clear_bot_difficulty_dire();
  static const int kBotDifficultyDireFieldNumber = 43;
  ::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::DOTABotDifficulty value);

  // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  bool has_selection_priority_rules() const;
  void clear_selection_priority_rules();
  static const int kSelectionPriorityRulesFieldNumber = 46;
  ::DOTASelectionPriorityRules selection_priority_rules() const;
  void set_selection_priority_rules(::DOTASelectionPriorityRules value);

  // optional uint64 bot_dire = 45;
  bool has_bot_dire() const;
  void clear_bot_dire();
  static const int kBotDireFieldNumber = 45;
  ::google::protobuf::uint64 bot_dire() const;
  void set_bot_dire(::google::protobuf::uint64 value);

  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  bool has_dota_tv_delay() const;
  void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 24;
  ::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::LobbyDotaTVDelay value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetDetails)
 private:
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_game_name();
  void clear_has_game_name();
  void set_has_server_region();
  void clear_has_server_region();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_cm_pick();
  void clear_has_cm_pick();
  void set_has_bot_difficulty_radiant();
  void clear_has_bot_difficulty_radiant();
  void set_has_allow_cheats();
  void clear_has_allow_cheats();
  void set_has_fill_with_bots();
  void clear_has_fill_with_bots();
  void set_has_intro_mode();
  void clear_has_intro_mode();
  void set_has_allow_spectating();
  void clear_has_allow_spectating();
  void set_has_game_version();
  void clear_has_game_version();
  void set_has_pass_key();
  void clear_has_pass_key();
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_penalty_level_radiant();
  void clear_has_penalty_level_radiant();
  void set_has_penalty_level_dire();
  void clear_has_penalty_level_dire();
  void set_has_load_game_id();
  void clear_has_load_game_id();
  void set_has_series_type();
  void clear_has_series_type();
  void set_has_radiant_series_wins();
  void clear_has_radiant_series_wins();
  void set_has_dire_series_wins();
  void clear_has_dire_series_wins();
  void set_has_allchat();
  void clear_has_allchat();
  void set_has_dota_tv_delay();
  void clear_has_dota_tv_delay();
  void set_has_lan();
  void clear_has_lan();
  void set_has_custom_game_mode();
  void clear_has_custom_game_mode();
  void set_has_custom_map_name();
  void clear_has_custom_map_name();
  void set_has_custom_difficulty();
  void clear_has_custom_difficulty();
  void set_has_custom_game_id();
  void clear_has_custom_game_id();
  void set_has_custom_min_players();
  void clear_has_custom_min_players();
  void set_has_custom_max_players();
  void clear_has_custom_max_players();
  void set_has_visibility();
  void clear_has_visibility();
  void set_has_custom_game_crc();
  void clear_has_custom_game_crc();
  void set_has_custom_game_timestamp();
  void clear_has_custom_game_timestamp();
  void set_has_previous_match_override();
  void clear_has_previous_match_override();
  void set_has_pause_setting();
  void clear_has_pause_setting();
  void set_has_bot_difficulty_dire();
  void clear_has_bot_difficulty_dire();
  void set_has_bot_radiant();
  void clear_has_bot_radiant();
  void set_has_bot_dire();
  void clear_has_bot_dire();
  void set_has_selection_priority_rules();
  void clear_has_selection_priority_rules();
  void set_has_custom_game_penalties();
  void clear_has_custom_game_penalties();
  void set_has_lan_host_ping_location();
  void clear_has_lan_host_ping_location();
  void set_has_league_node_id();
  void clear_has_league_node_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  ::google::protobuf::internal::ArenaStringPtr custom_game_mode_;
  ::google::protobuf::internal::ArenaStringPtr custom_map_name_;
  ::google::protobuf::internal::ArenaStringPtr lan_host_ping_location_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 server_region_;
  ::google::protobuf::uint32 game_mode_;
  int cm_pick_;
  int bot_difficulty_radiant_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  int game_version_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 custom_difficulty_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint32 custom_min_players_;
  ::google::protobuf::uint32 custom_max_players_;
  bool allchat_;
  bool lan_;
  bool custom_game_penalties_;
  int visibility_;
  ::google::protobuf::uint64 custom_game_crc_;
  ::google::protobuf::uint64 previous_match_override_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  int pause_setting_;
  ::google::protobuf::uint32 league_node_id_;
  ::google::protobuf::uint64 bot_radiant_;
  int bot_difficulty_dire_;
  int selection_priority_rules_;
  ::google::protobuf::uint64 bot_dire_;
  int dota_tv_delay_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbySetDetailsImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate_SaveGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyCreate.SaveGame) */ {
 public:
  CMsgPracticeLobbyCreate_SaveGame();
  virtual ~CMsgPracticeLobbyCreate_SaveGame();

  CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from);

  inline CMsgPracticeLobbyCreate_SaveGame& operator=(const CMsgPracticeLobbyCreate_SaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyCreate_SaveGame(CMsgPracticeLobbyCreate_SaveGame&& from) noexcept
    : CMsgPracticeLobbyCreate_SaveGame() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyCreate_SaveGame& operator=(CMsgPracticeLobbyCreate_SaveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyCreate_SaveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyCreate_SaveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyCreate_SaveGame*>(
               &_CMsgPracticeLobbyCreate_SaveGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(CMsgPracticeLobbyCreate_SaveGame* other);
  friend void swap(CMsgPracticeLobbyCreate_SaveGame& a, CMsgPracticeLobbyCreate_SaveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyCreate_SaveGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyCreate_SaveGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  void MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional fixed64 steam_id = 3;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  ::google::protobuf::uint64 signature() const;
  void set_signature(::google::protobuf::uint64 value);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate.SaveGame)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_version();
  void clear_has_version();
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 signature_;
  ::google::protobuf::int32 version_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyCreate_SaveGameImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyCreate) */ {
 public:
  CMsgPracticeLobbyCreate();
  virtual ~CMsgPracticeLobbyCreate();

  CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from);

  inline CMsgPracticeLobbyCreate& operator=(const CMsgPracticeLobbyCreate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyCreate(CMsgPracticeLobbyCreate&& from) noexcept
    : CMsgPracticeLobbyCreate() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyCreate& operator=(CMsgPracticeLobbyCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyCreate*>(
               &_CMsgPracticeLobbyCreate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(CMsgPracticeLobbyCreate* other);
  friend void swap(CMsgPracticeLobbyCreate& a, CMsgPracticeLobbyCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyCreate* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyCreate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyCreate& from);
  void MergeFrom(const CMsgPracticeLobbyCreate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyCreate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyCreate_SaveGame SaveGame;

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional string pass_key = 5;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 5;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  bool has_lobby_details() const;
  void clear_lobby_details();
  static const int kLobbyDetailsFieldNumber = 7;
  const ::CMsgPracticeLobbySetDetails& lobby_details() const;
  ::CMsgPracticeLobbySetDetails* release_lobby_details();
  ::CMsgPracticeLobbySetDetails* mutable_lobby_details();
  void set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details);

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  bool has_save_game() const;
  void clear_save_game();
  static const int kSaveGameFieldNumber = 8;
  const ::CMsgPracticeLobbyCreate_SaveGame& save_game() const;
  ::CMsgPracticeLobbyCreate_SaveGame* release_save_game();
  ::CMsgPracticeLobbyCreate_SaveGame* mutable_save_game();
  void set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game);

  // optional uint32 client_version = 6;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 6;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_pass_key();
  void clear_has_pass_key();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_lobby_details();
  void clear_has_lobby_details();
  void set_has_save_game();
  void clear_has_save_game();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  ::CMsgPracticeLobbySetDetails* lobby_details_;
  ::CMsgPracticeLobbyCreate_SaveGame* save_game_;
  ::google::protobuf::uint32 client_version_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyCreateImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetTeamSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbySetTeamSlot) */ {
 public:
  CMsgPracticeLobbySetTeamSlot();
  virtual ~CMsgPracticeLobbySetTeamSlot();

  CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from);

  inline CMsgPracticeLobbySetTeamSlot& operator=(const CMsgPracticeLobbySetTeamSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbySetTeamSlot(CMsgPracticeLobbySetTeamSlot&& from) noexcept
    : CMsgPracticeLobbySetTeamSlot() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbySetTeamSlot& operator=(CMsgPracticeLobbySetTeamSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbySetTeamSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbySetTeamSlot* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbySetTeamSlot*>(
               &_CMsgPracticeLobbySetTeamSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(CMsgPracticeLobbySetTeamSlot* other);
  friend void swap(CMsgPracticeLobbySetTeamSlot& a, CMsgPracticeLobbySetTeamSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbySetTeamSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbySetTeamSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbySetTeamSlot& from);
  void MergeFrom(const CMsgPracticeLobbySetTeamSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbySetTeamSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);

  // optional uint32 slot = 2;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 2;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_INVALID];
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 3;
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetTeamSlot)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_slot();
  void clear_has_slot();
  void set_has_bot_difficulty();
  void clear_has_bot_difficulty();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int team_;
  ::google::protobuf::uint32 slot_;
  int bot_difficulty_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbySetTeamSlotImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinBroadcastChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoinBroadcastChannel) */ {
 public:
  CMsgPracticeLobbyJoinBroadcastChannel();
  virtual ~CMsgPracticeLobbyJoinBroadcastChannel();

  CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from);

  inline CMsgPracticeLobbyJoinBroadcastChannel& operator=(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyJoinBroadcastChannel(CMsgPracticeLobbyJoinBroadcastChannel&& from) noexcept
    : CMsgPracticeLobbyJoinBroadcastChannel() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoinBroadcastChannel& operator=(CMsgPracticeLobbyJoinBroadcastChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoinBroadcastChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyJoinBroadcastChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoinBroadcastChannel*>(
               &_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(CMsgPracticeLobbyJoinBroadcastChannel* other);
  friend void swap(CMsgPracticeLobbyJoinBroadcastChannel& a, CMsgPracticeLobbyJoinBroadcastChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoinBroadcastChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyJoinBroadcastChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  void MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinBroadcastChannel)
 private:
  void set_has_channel();
  void clear_has_channel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 channel_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyJoinBroadcastChannelImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyKick) */ {
 public:
  CMsgPracticeLobbyKick();
  virtual ~CMsgPracticeLobbyKick();

  CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from);

  inline CMsgPracticeLobbyKick& operator=(const CMsgPracticeLobbyKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyKick(CMsgPracticeLobbyKick&& from) noexcept
    : CMsgPracticeLobbyKick() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyKick& operator=(CMsgPracticeLobbyKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyKick* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyKick*>(
               &_CMsgPracticeLobbyKick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(CMsgPracticeLobbyKick* other);
  friend void swap(CMsgPracticeLobbyKick& a, CMsgPracticeLobbyKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyKick* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyKick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyKick& from);
  void MergeFrom(const CMsgPracticeLobbyKick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 3;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyKick)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyKickImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyLeave) */ {
 public:
  CMsgPracticeLobbyLeave();
  virtual ~CMsgPracticeLobbyLeave();

  CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from);

  inline CMsgPracticeLobbyLeave& operator=(const CMsgPracticeLobbyLeave& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyLeave(CMsgPracticeLobbyLeave&& from) noexcept
    : CMsgPracticeLobbyLeave() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyLeave& operator=(CMsgPracticeLobbyLeave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyLeave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyLeave* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyLeave*>(
               &_CMsgPracticeLobbyLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(CMsgPracticeLobbyLeave* other);
  friend void swap(CMsgPracticeLobbyLeave& a, CMsgPracticeLobbyLeave& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyLeave& from);
  void MergeFrom(const CMsgPracticeLobbyLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyLeaveImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLaunch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyLaunch) */ {
 public:
  CMsgPracticeLobbyLaunch();
  virtual ~CMsgPracticeLobbyLaunch();

  CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from);

  inline CMsgPracticeLobbyLaunch& operator=(const CMsgPracticeLobbyLaunch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyLaunch(CMsgPracticeLobbyLaunch&& from) noexcept
    : CMsgPracticeLobbyLaunch() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyLaunch& operator=(CMsgPracticeLobbyLaunch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyLaunch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyLaunch* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyLaunch*>(
               &_CMsgPracticeLobbyLaunch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(CMsgPracticeLobbyLaunch* other);
  friend void swap(CMsgPracticeLobbyLaunch& a, CMsgPracticeLobbyLaunch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyLaunch* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyLaunch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyLaunch& from);
  void MergeFrom(const CMsgPracticeLobbyLaunch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyLaunch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 client_version = 5;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLaunch)
 private:
  void set_has_client_version();
  void clear_has_client_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 client_version_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyLaunchImpl();
};
// -------------------------------------------------------------------

class CMsgApplyTeamToPracticeLobby : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgApplyTeamToPracticeLobby) */ {
 public:
  CMsgApplyTeamToPracticeLobby();
  virtual ~CMsgApplyTeamToPracticeLobby();

  CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from);

  inline CMsgApplyTeamToPracticeLobby& operator=(const CMsgApplyTeamToPracticeLobby& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgApplyTeamToPracticeLobby(CMsgApplyTeamToPracticeLobby&& from) noexcept
    : CMsgApplyTeamToPracticeLobby() {
    *this = ::std::move(from);
  }

  inline CMsgApplyTeamToPracticeLobby& operator=(CMsgApplyTeamToPracticeLobby&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgApplyTeamToPracticeLobby& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgApplyTeamToPracticeLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgApplyTeamToPracticeLobby*>(
               &_CMsgApplyTeamToPracticeLobby_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(CMsgApplyTeamToPracticeLobby* other);
  friend void swap(CMsgApplyTeamToPracticeLobby& a, CMsgApplyTeamToPracticeLobby& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgApplyTeamToPracticeLobby* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgApplyTeamToPracticeLobby* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgApplyTeamToPracticeLobby& from);
  void MergeFrom(const CMsgApplyTeamToPracticeLobby& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgApplyTeamToPracticeLobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgApplyTeamToPracticeLobby)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgApplyTeamToPracticeLobbyImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyList) */ {
 public:
  CMsgPracticeLobbyList();
  virtual ~CMsgPracticeLobbyList();

  CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from);

  inline CMsgPracticeLobbyList& operator=(const CMsgPracticeLobbyList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyList(CMsgPracticeLobbyList&& from) noexcept
    : CMsgPracticeLobbyList() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyList& operator=(CMsgPracticeLobbyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyList* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyList*>(
               &_CMsgPracticeLobbyList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(CMsgPracticeLobbyList* other);
  friend void swap(CMsgPracticeLobbyList& a, CMsgPracticeLobbyList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyList* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyList& from);
  void MergeFrom(const CMsgPracticeLobbyList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pass_key = 2;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 2;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional bool tournament_games = 1;
  bool has_tournament_games() const;
  void clear_tournament_games();
  static const int kTournamentGamesFieldNumber = 1;
  bool tournament_games() const;
  void set_tournament_games(bool value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyList)
 private:
  void set_has_tournament_games();
  void clear_has_tournament_games();
  void set_has_pass_key();
  void clear_has_pass_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  bool tournament_games_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyListImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry_CLobbyMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponseEntry.CLobbyMember) */ {
 public:
  CMsgPracticeLobbyListResponseEntry_CLobbyMember();
  virtual ~CMsgPracticeLobbyListResponseEntry_CLobbyMember();

  CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember& operator=(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyListResponseEntry_CLobbyMember(CMsgPracticeLobbyListResponseEntry_CLobbyMember&& from) noexcept
    : CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember& operator=(CMsgPracticeLobbyListResponseEntry_CLobbyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponseEntry_CLobbyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyListResponseEntry_CLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponseEntry_CLobbyMember*>(
               &_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other);
  friend void swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember& a, CMsgPracticeLobbyListResponseEntry_CLobbyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyListResponseEntry_CLobbyMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string player_name = 2;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_player_name();
  void clear_has_player_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyListResponseEntry_CLobbyMemberImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponseEntry) */ {
 public:
  CMsgPracticeLobbyListResponseEntry();
  virtual ~CMsgPracticeLobbyListResponseEntry();

  CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from);

  inline CMsgPracticeLobbyListResponseEntry& operator=(const CMsgPracticeLobbyListResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyListResponseEntry(CMsgPracticeLobbyListResponseEntry&& from) noexcept
    : CMsgPracticeLobbyListResponseEntry() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponseEntry& operator=(CMsgPracticeLobbyListResponseEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponseEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyListResponseEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponseEntry*>(
               &_CMsgPracticeLobbyListResponseEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(CMsgPracticeLobbyListResponseEntry* other);
  friend void swap(CMsgPracticeLobbyListResponseEntry& a, CMsgPracticeLobbyListResponseEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponseEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyListResponseEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyListResponseEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyListResponseEntry_CLobbyMember CLobbyMember;

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 5;
  const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& members(int index) const;
  ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* mutable_members(int index);
  ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
      members() const;

  // optional uint64 id = 1 [(.key_field) = true];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 tournament_id = 3;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 3;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 4;
  bool has_tournament_game_id() const;
  void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 4;
  ::google::protobuf::uint32 tournament_game_id() const;
  void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional bool requires_pass_key = 6;
  bool has_requires_pass_key() const;
  void clear_requires_pass_key();
  static const int kRequiresPassKeyFieldNumber = 6;
  bool requires_pass_key() const;
  void set_requires_pass_key(bool value);

  // optional uint32 leader_account_id = 7;
  bool has_leader_account_id() const;
  void clear_leader_account_id();
  static const int kLeaderAccountIdFieldNumber = 7;
  ::google::protobuf::uint32 leader_account_id() const;
  void set_leader_account_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 9;
  bool has_guild_logo() const;
  void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 9;
  ::google::protobuf::uint64 guild_logo() const;
  void set_guild_logo(::google::protobuf::uint64 value);

  // optional uint32 guild_id = 8;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 8;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_tournament_game_id();
  void clear_has_tournament_game_id();
  void set_has_requires_pass_key();
  void clear_has_requires_pass_key();
  void set_has_leader_account_id();
  void clear_has_leader_account_id();
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_guild_logo();
  void clear_has_guild_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember > members_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  bool requires_pass_key_;
  ::google::protobuf::uint32 leader_account_id_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyListResponseEntryImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponse) */ {
 public:
  CMsgPracticeLobbyListResponse();
  virtual ~CMsgPracticeLobbyListResponse();

  CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from);

  inline CMsgPracticeLobbyListResponse& operator=(const CMsgPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyListResponse(CMsgPracticeLobbyListResponse&& from) noexcept
    : CMsgPracticeLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponse& operator=(CMsgPracticeLobbyListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponse*>(
               &_CMsgPracticeLobbyListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(CMsgPracticeLobbyListResponse* other);
  friend void swap(CMsgPracticeLobbyListResponse& a, CMsgPracticeLobbyListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgPracticeLobbyListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  int lobbies_size() const;
  void clear_lobbies();
  static const int kLobbiesFieldNumber = 2;
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // optional bool tournament_games = 1;
  bool has_tournament_games() const;
  void clear_tournament_games();
  static const int kTournamentGamesFieldNumber = 1;
  bool tournament_games() const;
  void set_tournament_games(bool value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponse)
 private:
  void set_has_tournament_games();
  void clear_has_tournament_games();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  bool tournament_games_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoin) */ {
 public:
  CMsgPracticeLobbyJoin();
  virtual ~CMsgPracticeLobbyJoin();

  CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from);

  inline CMsgPracticeLobbyJoin& operator=(const CMsgPracticeLobbyJoin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyJoin(CMsgPracticeLobbyJoin&& from) noexcept
    : CMsgPracticeLobbyJoin() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoin& operator=(CMsgPracticeLobbyJoin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyJoin* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoin*>(
               &_CMsgPracticeLobbyJoin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(CMsgPracticeLobbyJoin* other);
  friend void swap(CMsgPracticeLobbyJoin& a, CMsgPracticeLobbyJoin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoin* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyJoin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyJoin& from);
  void MergeFrom(const CMsgPracticeLobbyJoin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyJoin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pass_key = 3;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 3;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // optional fixed32 custom_game_timestamp = 5;
  bool has_custom_game_timestamp() const;
  void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 5;
  ::google::protobuf::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // optional fixed64 custom_game_crc = 4;
  bool has_custom_game_crc() const;
  void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 4;
  ::google::protobuf::uint64 custom_game_crc() const;
  void set_custom_game_crc(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoin)
 private:
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_pass_key();
  void clear_has_pass_key();
  void set_has_custom_game_crc();
  void clear_has_custom_game_crc();
  void set_has_custom_game_timestamp();
  void clear_has_custom_game_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 client_version_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  ::google::protobuf::uint64 custom_game_crc_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyJoinImpl();
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoinResponse) */ {
 public:
  CMsgPracticeLobbyJoinResponse();
  virtual ~CMsgPracticeLobbyJoinResponse();

  CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from);

  inline CMsgPracticeLobbyJoinResponse& operator=(const CMsgPracticeLobbyJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPracticeLobbyJoinResponse(CMsgPracticeLobbyJoinResponse&& from) noexcept
    : CMsgPracticeLobbyJoinResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoinResponse& operator=(CMsgPracticeLobbyJoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPracticeLobbyJoinResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoinResponse*>(
               &_CMsgPracticeLobbyJoinResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(CMsgPracticeLobbyJoinResponse* other);
  friend void swap(CMsgPracticeLobbyJoinResponse& a, CMsgPracticeLobbyJoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoinResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPracticeLobbyJoinResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPracticeLobbyJoinResponse& from);
  void MergeFrom(const CMsgPracticeLobbyJoinResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPracticeLobbyJoinResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::DOTAJoinLobbyResult result() const;
  void set_result(::DOTAJoinLobbyResult value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPracticeLobbyJoinResponseImpl();
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgFriendPracticeLobbyListRequest) */ {
 public:
  CMsgFriendPracticeLobbyListRequest();
  virtual ~CMsgFriendPracticeLobbyListRequest();

  CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from);

  inline CMsgFriendPracticeLobbyListRequest& operator=(const CMsgFriendPracticeLobbyListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgFriendPracticeLobbyListRequest(CMsgFriendPracticeLobbyListRequest&& from) noexcept
    : CMsgFriendPracticeLobbyListRequest() {
    *this = ::std::move(from);
  }

  inline CMsgFriendPracticeLobbyListRequest& operator=(CMsgFriendPracticeLobbyListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFriendPracticeLobbyListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgFriendPracticeLobbyListRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgFriendPracticeLobbyListRequest*>(
               &_CMsgFriendPracticeLobbyListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(CMsgFriendPracticeLobbyListRequest* other);
  friend void swap(CMsgFriendPracticeLobbyListRequest& a, CMsgFriendPracticeLobbyListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgFriendPracticeLobbyListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgFriendPracticeLobbyListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgFriendPracticeLobbyListRequest& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgFriendPracticeLobbyListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 friends = 1;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 1;
  ::google::protobuf::uint32 friends(int index) const;
  void set_friends(int index, ::google::protobuf::uint32 value);
  void add_friends(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      friends() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > friends_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgFriendPracticeLobbyListRequestImpl();
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgFriendPracticeLobbyListResponse) */ {
 public:
  CMsgFriendPracticeLobbyListResponse();
  virtual ~CMsgFriendPracticeLobbyListResponse();

  CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from);

  inline CMsgFriendPracticeLobbyListResponse& operator=(const CMsgFriendPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgFriendPracticeLobbyListResponse(CMsgFriendPracticeLobbyListResponse&& from) noexcept
    : CMsgFriendPracticeLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgFriendPracticeLobbyListResponse& operator=(CMsgFriendPracticeLobbyListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFriendPracticeLobbyListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgFriendPracticeLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgFriendPracticeLobbyListResponse*>(
               &_CMsgFriendPracticeLobbyListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(CMsgFriendPracticeLobbyListResponse* other);
  friend void swap(CMsgFriendPracticeLobbyListResponse& a, CMsgFriendPracticeLobbyListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgFriendPracticeLobbyListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgFriendPracticeLobbyListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgFriendPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgFriendPracticeLobbyListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  int lobbies_size() const;
  void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgFriendPracticeLobbyListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGuildmatePracticeLobbyListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGuildmatePracticeLobbyListRequest) */ {
 public:
  CMsgGuildmatePracticeLobbyListRequest();
  virtual ~CMsgGuildmatePracticeLobbyListRequest();

  CMsgGuildmatePracticeLobbyListRequest(const CMsgGuildmatePracticeLobbyListRequest& from);

  inline CMsgGuildmatePracticeLobbyListRequest& operator=(const CMsgGuildmatePracticeLobbyListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGuildmatePracticeLobbyListRequest(CMsgGuildmatePracticeLobbyListRequest&& from) noexcept
    : CMsgGuildmatePracticeLobbyListRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGuildmatePracticeLobbyListRequest& operator=(CMsgGuildmatePracticeLobbyListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGuildmatePracticeLobbyListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGuildmatePracticeLobbyListRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGuildmatePracticeLobbyListRequest*>(
               &_CMsgGuildmatePracticeLobbyListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(CMsgGuildmatePracticeLobbyListRequest* other);
  friend void swap(CMsgGuildmatePracticeLobbyListRequest& a, CMsgGuildmatePracticeLobbyListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGuildmatePracticeLobbyListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGuildmatePracticeLobbyListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGuildmatePracticeLobbyListRequest& from);
  void MergeFrom(const CMsgGuildmatePracticeLobbyListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGuildmatePracticeLobbyListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 guilds = 1;
  int guilds_size() const;
  void clear_guilds();
  static const int kGuildsFieldNumber = 1;
  ::google::protobuf::uint32 guilds(int index) const;
  void set_guilds(int index, ::google::protobuf::uint32 value);
  void add_guilds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      guilds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_guilds();

  // @@protoc_insertion_point(class_scope:CMsgGuildmatePracticeLobbyListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > guilds_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGuildmatePracticeLobbyListRequestImpl();
};
// -------------------------------------------------------------------

class CMsgGuildmatePracticeLobbyListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGuildmatePracticeLobbyListResponse) */ {
 public:
  CMsgGuildmatePracticeLobbyListResponse();
  virtual ~CMsgGuildmatePracticeLobbyListResponse();

  CMsgGuildmatePracticeLobbyListResponse(const CMsgGuildmatePracticeLobbyListResponse& from);

  inline CMsgGuildmatePracticeLobbyListResponse& operator=(const CMsgGuildmatePracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGuildmatePracticeLobbyListResponse(CMsgGuildmatePracticeLobbyListResponse&& from) noexcept
    : CMsgGuildmatePracticeLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGuildmatePracticeLobbyListResponse& operator=(CMsgGuildmatePracticeLobbyListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGuildmatePracticeLobbyListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGuildmatePracticeLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGuildmatePracticeLobbyListResponse*>(
               &_CMsgGuildmatePracticeLobbyListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(CMsgGuildmatePracticeLobbyListResponse* other);
  friend void swap(CMsgGuildmatePracticeLobbyListResponse& a, CMsgGuildmatePracticeLobbyListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGuildmatePracticeLobbyListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGuildmatePracticeLobbyListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGuildmatePracticeLobbyListResponse& from);
  void MergeFrom(const CMsgGuildmatePracticeLobbyListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGuildmatePracticeLobbyListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  int lobbies_size() const;
  void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgGuildmatePracticeLobbyListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGuildmatePracticeLobbyListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgBotGameCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgBotGameCreate) */ {
 public:
  CMsgBotGameCreate();
  virtual ~CMsgBotGameCreate();

  CMsgBotGameCreate(const CMsgBotGameCreate& from);

  inline CMsgBotGameCreate& operator=(const CMsgBotGameCreate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgBotGameCreate(CMsgBotGameCreate&& from) noexcept
    : CMsgBotGameCreate() {
    *this = ::std::move(from);
  }

  inline CMsgBotGameCreate& operator=(CMsgBotGameCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotGameCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgBotGameCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgBotGameCreate*>(
               &_CMsgBotGameCreate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(CMsgBotGameCreate* other);
  friend void swap(CMsgBotGameCreate& a, CMsgBotGameCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgBotGameCreate* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotGameCreate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotGameCreate& from);
  void MergeFrom(const CMsgBotGameCreate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotGameCreate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_difficulty() const;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  ::DOTABotDifficulty difficulty() const;
  void set_difficulty(::DOTABotDifficulty value);

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 4;
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);

  // optional uint32 game_mode = 5;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 5;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBotGameCreate)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_difficulty();
  void clear_has_difficulty();
  void set_has_team();
  void clear_has_team();
  void set_has_game_mode();
  void clear_has_game_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 client_version_;
  int difficulty_;
  int team_;
  ::google::protobuf::uint32 game_mode_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgBotGameCreateImpl();
};
// -------------------------------------------------------------------

class CMsgRequestInternationalTicket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRequestInternationalTicket) */ {
 public:
  CMsgRequestInternationalTicket();
  virtual ~CMsgRequestInternationalTicket();

  CMsgRequestInternationalTicket(const CMsgRequestInternationalTicket& from);

  inline CMsgRequestInternationalTicket& operator=(const CMsgRequestInternationalTicket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRequestInternationalTicket(CMsgRequestInternationalTicket&& from) noexcept
    : CMsgRequestInternationalTicket() {
    *this = ::std::move(from);
  }

  inline CMsgRequestInternationalTicket& operator=(CMsgRequestInternationalTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestInternationalTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRequestInternationalTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestInternationalTicket*>(
               &_CMsgRequestInternationalTicket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(CMsgRequestInternationalTicket* other);
  friend void swap(CMsgRequestInternationalTicket& a, CMsgRequestInternationalTicket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRequestInternationalTicket* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRequestInternationalTicket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRequestInternationalTicket& from);
  void MergeFrom(const CMsgRequestInternationalTicket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRequestInternationalTicket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRequestInternationalTicket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRequestInternationalTicketImpl();
};
// -------------------------------------------------------------------

class CMsgBalancedShuffleLobby : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgBalancedShuffleLobby) */ {
 public:
  CMsgBalancedShuffleLobby();
  virtual ~CMsgBalancedShuffleLobby();

  CMsgBalancedShuffleLobby(const CMsgBalancedShuffleLobby& from);

  inline CMsgBalancedShuffleLobby& operator=(const CMsgBalancedShuffleLobby& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgBalancedShuffleLobby(CMsgBalancedShuffleLobby&& from) noexcept
    : CMsgBalancedShuffleLobby() {
    *this = ::std::move(from);
  }

  inline CMsgBalancedShuffleLobby& operator=(CMsgBalancedShuffleLobby&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBalancedShuffleLobby& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgBalancedShuffleLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgBalancedShuffleLobby*>(
               &_CMsgBalancedShuffleLobby_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(CMsgBalancedShuffleLobby* other);
  friend void swap(CMsgBalancedShuffleLobby& a, CMsgBalancedShuffleLobby& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgBalancedShuffleLobby* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBalancedShuffleLobby* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBalancedShuffleLobby& from);
  void MergeFrom(const CMsgBalancedShuffleLobby& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBalancedShuffleLobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgBalancedShuffleLobby)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgBalancedShuffleLobbyImpl();
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMatchHeroSelectEvent) */ {
 public:
  CMatchHeroSelectEvent();
  virtual ~CMatchHeroSelectEvent();

  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);

  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchHeroSelectEvent(CMatchHeroSelectEvent&& from) noexcept
    : CMatchHeroSelectEvent() {
    *this = ::std::move(from);
  }

  inline CMatchHeroSelectEvent& operator=(CMatchHeroSelectEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchHeroSelectEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchHeroSelectEvent* internal_default_instance() {
    return reinterpret_cast<const CMatchHeroSelectEvent*>(
               &_CMatchHeroSelectEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(CMatchHeroSelectEvent* other);
  friend void swap(CMatchHeroSelectEvent& a, CMatchHeroSelectEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchHeroSelectEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  CMatchHeroSelectEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMatchHeroSelectEvent& from);
  void MergeFrom(const CMatchHeroSelectEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMatchHeroSelectEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pick = 1;
  bool has_is_pick() const;
  void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  bool is_pick() const;
  void set_is_pick(bool value);

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchHeroSelectEvent)
 private:
  void set_has_is_pick();
  void clear_has_is_pick();
  void set_has_team();
  void clear_has_team();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMatchHeroSelectEventImpl();
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMatchPlayerAbilityUpgrade) */ {
 public:
  CMatchPlayerAbilityUpgrade();
  virtual ~CMatchPlayerAbilityUpgrade();

  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);

  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchPlayerAbilityUpgrade(CMatchPlayerAbilityUpgrade&& from) noexcept
    : CMatchPlayerAbilityUpgrade() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerAbilityUpgrade& operator=(CMatchPlayerAbilityUpgrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchPlayerAbilityUpgrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchPlayerAbilityUpgrade* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerAbilityUpgrade*>(
               &_CMatchPlayerAbilityUpgrade_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(CMatchPlayerAbilityUpgrade* other);
  friend void swap(CMatchPlayerAbilityUpgrade& a, CMatchPlayerAbilityUpgrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchPlayerAbilityUpgrade* New() const PROTOBUF_FINAL { return New(NULL); }

  CMatchPlayerAbilityUpgrade* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  void MergeFrom(const CMatchPlayerAbilityUpgrade& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMatchPlayerAbilityUpgrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ability = 1;
  bool has_ability() const;
  void clear_ability();
  static const int kAbilityFieldNumber = 1;
  ::google::protobuf::uint32 ability() const;
  void set_ability(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMatchPlayerAbilityUpgrade)
 private:
  void set_has_ability();
  void clear_has_ability();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::uint32 time_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMatchPlayerAbilityUpgradeImpl();
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMatchAdditionalUnitInventory) */ {
 public:
  CMatchAdditionalUnitInventory();
  virtual ~CMatchAdditionalUnitInventory();

  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);

  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMatchAdditionalUnitInventory(CMatchAdditionalUnitInventory&& from) noexcept
    : CMatchAdditionalUnitInventory() {
    *this = ::std::move(from);
  }

  inline CMatchAdditionalUnitInventory& operator=(CMatchAdditionalUnitInventory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchAdditionalUnitInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMatchAdditionalUnitInventory* internal_default_instance() {
    return reinterpret_cast<const CMatchAdditionalUnitInventory*>(
               &_CMatchAdditionalUnitInventory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(CMatchAdditionalUnitInventory* other);
  friend void swap(CMatchAdditionalUnitInventory& a, CMatchAdditionalUnitInventory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMatchAdditionalUnitInventory* New() const PROTOBUF_FINAL { return New(NULL); }

  CMatchAdditionalUnitInventory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  void MergeFrom(const CMatchAdditionalUnitInventory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMatchAdditionalUnitInventory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::google::protobuf::uint32 items(int index) const;
  void set_items(int index, ::google::protobuf::uint32 value);
  void add_items(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // optional string unit_name = 1;
  bool has_unit_name() const;
  void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  const ::std::string& unit_name() const;
  void set_unit_name(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_name(::std::string&& value);
  #endif
  void set_unit_name(const char* value);
  void set_unit_name(const char* value, size_t size);
  ::std::string* mutable_unit_name();
  ::std::string* release_unit_name();
  void set_allocated_unit_name(::std::string* unit_name);

  // @@protoc_insertion_point(class_scope:CMatchAdditionalUnitInventory)
 private:
  void set_has_unit_name();
  void clear_has_unit_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::internal::ArenaStringPtr unit_name_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMatchAdditionalUnitInventoryImpl();
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam_CPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam.CPlayer) */ {
 public:
  CMsgGameMatchSignOut_CTeam_CPlayer();
  virtual ~CMsgGameMatchSignOut_CTeam_CPlayer();

  CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from);

  inline CMsgGameMatchSignOut_CTeam_CPlayer& operator=(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameMatchSignOut_CTeam_CPlayer(CMsgGameMatchSignOut_CTeam_CPlayer&& from) noexcept
    : CMsgGameMatchSignOut_CTeam_CPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam_CPlayer& operator=(CMsgGameMatchSignOut_CTeam_CPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut_CTeam_CPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameMatchSignOut_CTeam_CPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam_CPlayer*>(
               &_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other);
  friend void swap(CMsgGameMatchSignOut_CTeam_CPlayer& a, CMsgGameMatchSignOut_CTeam_CPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameMatchSignOut_CTeam_CPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameMatchSignOut_CTeam_CPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  void MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 4;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 4;
  ::google::protobuf::uint32 items(int index) const;
  void set_items(int index, ::google::protobuf::uint32 value);
  void add_items(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  int ability_upgrades_size() const;
  void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 32;
  const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  int additional_units_inventory_size() const;
  void clear_additional_units_inventory();
  static const int kAdditionalUnitsInventoryFieldNumber = 33;
  const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;

  // optional fixed64 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint64 account_id() const;
  void set_account_id(::google::protobuf::uint64 value);

  // optional uint32 fake_client_id = 2;
  bool has_fake_client_id() const;
  void clear_fake_client_id();
  static const int kFakeClientIdFieldNumber = 2;
  ::google::protobuf::uint32 fake_client_id() const;
  void set_fake_client_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 gold = 5;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 5;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional uint32 kills = 6;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 6;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 7;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 7;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 8;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 8;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 leaver_status = 9;
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 9;
  ::google::protobuf::uint32 leaver_status() const;
  void set_leaver_status(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 10;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 10;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 11;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 11;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 12;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 12;
  ::google::protobuf::uint32 gold_per_min() const;
  void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 xp_per_minute = 13;
  bool has_xp_per_minute() const;
  void clear_xp_per_minute();
  static const int kXpPerMinuteFieldNumber = 13;
  ::google::protobuf::uint32 xp_per_minute() const;
  void set_xp_per_minute(::google::protobuf::uint32 value);

  // optional uint32 gold_spent = 14;
  bool has_gold_spent() const;
  void clear_gold_spent();
  static const int kGoldSpentFieldNumber = 14;
  ::google::protobuf::uint32 gold_spent() const;
  void set_gold_spent(::google::protobuf::uint32 value);

  // optional uint32 level = 15;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 15;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 16;
  bool has_hero_damage() const;
  void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 16;
  ::google::protobuf::uint32 hero_damage() const;
  void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 17;
  bool has_tower_damage() const;
  void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 17;
  ::google::protobuf::uint32 tower_damage() const;
  void set_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 18;
  bool has_hero_healing() const;
  void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 18;
  ::google::protobuf::uint32 hero_healing() const;
  void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 time_last_seen = 19;
  bool has_time_last_seen() const;
  void clear_time_last_seen();
  static const int kTimeLastSeenFieldNumber = 19;
  ::google::protobuf::uint32 time_last_seen() const;
  void set_time_last_seen(::google::protobuf::uint32 value);

  // optional uint32 support_ability_value = 20;
  bool has_support_ability_value() const;
  void clear_support_ability_value();
  static const int kSupportAbilityValueFieldNumber = 20;
  ::google::protobuf::uint32 support_ability_value() const;
  void set_support_ability_value(::google::protobuf::uint32 value);

  // optional uint64 party_id = 21;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 21;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional float scaled_kills = 24;
  bool has_scaled_kills() const;
  void clear_scaled_kills();
  static const int kScaledKillsFieldNumber = 24;
  float scaled_kills() const;
  void set_scaled_kills(float value);

  // optional float scaled_deaths = 25;
  bool has_scaled_deaths() const;
  void clear_scaled_deaths();
  static const int kScaledDeathsFieldNumber = 25;
  float scaled_deaths() const;
  void set_scaled_deaths(float value);

  // optional float scaled_assists = 26;
  bool has_scaled_assists() const;
  void clear_scaled_assists();
  static const int kScaledAssistsFieldNumber = 26;
  float scaled_assists() const;
  void set_scaled_assists(float value);

  // optional uint32 claimed_farm_gold = 27;
  bool has_claimed_farm_gold() const;
  void clear_claimed_farm_gold();
  static const int kClaimedFarmGoldFieldNumber = 27;
  ::google::protobuf::uint32 claimed_farm_gold() const;
  void set_claimed_farm_gold(::google::protobuf::uint32 value);

  // optional uint32 support_gold = 28;
  bool has_support_gold() const;
  void clear_support_gold();
  static const int kSupportGoldFieldNumber = 28;
  ::google::protobuf::uint32 support_gold() const;
  void set_support_gold(::google::protobuf::uint32 value);

  // optional uint32 claimed_denies = 29;
  bool has_claimed_denies() const;
  void clear_claimed_denies();
  static const int kClaimedDeniesFieldNumber = 29;
  ::google::protobuf::uint32 claimed_denies() const;
  void set_claimed_denies(::google::protobuf::uint32 value);

  // optional uint32 claimed_misses = 30;
  bool has_claimed_misses() const;
  void clear_claimed_misses();
  static const int kClaimedMissesFieldNumber = 30;
  ::google::protobuf::uint32 claimed_misses() const;
  void set_claimed_misses(::google::protobuf::uint32 value);

  // optional uint32 misses = 31;
  bool has_misses() const;
  void clear_misses();
  static const int kMissesFieldNumber = 31;
  ::google::protobuf::uint32 misses() const;
  void set_misses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam.CPlayer)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_fake_client_id();
  void clear_has_fake_client_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_gold();
  void clear_has_gold();
  void set_has_kills();
  void clear_has_kills();
  void set_has_deaths();
  void clear_has_deaths();
  void set_has_assists();
  void clear_has_assists();
  void set_has_leaver_status();
  void clear_has_leaver_status();
  void set_has_last_hits();
  void clear_has_last_hits();
  void set_has_denies();
  void clear_has_denies();
  void set_has_gold_per_min();
  void clear_has_gold_per_min();
  void set_has_xp_per_minute();
  void clear_has_xp_per_minute();
  void set_has_gold_spent();
  void clear_has_gold_spent();
  void set_has_level();
  void clear_has_level();
  void set_has_hero_damage();
  void clear_has_hero_damage();
  void set_has_tower_damage();
  void clear_has_tower_damage();
  void set_has_hero_healing();
  void clear_has_hero_healing();
  void set_has_time_last_seen();
  void clear_has_time_last_seen();
  void set_has_support_ability_value();
  void clear_has_support_ability_value();
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_scaled_kills();
  void clear_has_scaled_kills();
  void set_has_scaled_deaths();
  void clear_has_scaled_deaths();
  void set_has_scaled_assists();
  void clear_has_scaled_assists();
  void set_has_claimed_farm_gold();
  void clear_has_claimed_farm_gold();
  void set_has_support_gold();
  void clear_has_support_gold();
  void set_has_claimed_denies();
  void clear_has_claimed_denies();
  void set_has_claimed_misses();
  void clear_has_claimed_misses();
  void set_has_misses();
  void clear_has_misses();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
  ::google::protobuf::uint64 account_id_;
  ::google::protobuf::uint32 fake_client_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 leaver_status_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_minute_;
  ::google::protobuf::uint32 gold_spent_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 time_last_seen_;
  ::google::protobuf::uint32 support_ability_value_;
  ::google::protobuf::uint64 party_id_;
  float scaled_kills_;
  float scaled_deaths_;
  float scaled_assists_;
  ::google::protobuf::uint32 claimed_farm_gold_;
  ::google::protobuf::uint32 support_gold_;
  ::google::protobuf::uint32 claimed_denies_;
  ::google::protobuf::uint32 claimed_misses_;
  ::google::protobuf::uint32 misses_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameMatchSignOut_CTeam_CPlayerImpl();
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam) */ {
 public:
  CMsgGameMatchSignOut_CTeam();
  virtual ~CMsgGameMatchSignOut_CTeam();

  CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from);

  inline CMsgGameMatchSignOut_CTeam& operator=(const CMsgGameMatchSignOut_CTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameMatchSignOut_CTeam(CMsgGameMatchSignOut_CTeam&& from) noexcept
    : CMsgGameMatchSignOut_CTeam() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam& operator=(CMsgGameMatchSignOut_CTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut_CTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameMatchSignOut_CTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam*>(
               &_CMsgGameMatchSignOut_CTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(CMsgGameMatchSignOut_CTeam* other);
  friend void swap(CMsgGameMatchSignOut_CTeam& a, CMsgGameMatchSignOut_CTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameMatchSignOut_CTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameMatchSignOut_CTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam& from);
  void MergeFrom(const CMsgGameMatchSignOut_CTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameMatchSignOut_CTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignOut_CTeam_CPlayer CPlayer;

  // accessors -------------------------------------------------------

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::CMsgGameMatchSignOut_CTeam_CPlayer& players(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer* mutable_players(int index);
  ::CMsgGameMatchSignOut_CTeam_CPlayer* add_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer > players_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameMatchSignOut_CTeamImpl();
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut) */ {
 public:
  CMsgGameMatchSignOut();
  virtual ~CMsgGameMatchSignOut();

  CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from);

  inline CMsgGameMatchSignOut& operator=(const CMsgGameMatchSignOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameMatchSignOut(CMsgGameMatchSignOut&& from) noexcept
    : CMsgGameMatchSignOut() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut& operator=(CMsgGameMatchSignOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameMatchSignOut* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut*>(
               &_CMsgGameMatchSignOut_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(CMsgGameMatchSignOut* other);
  friend void swap(CMsgGameMatchSignOut& a, CMsgGameMatchSignOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameMatchSignOut* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameMatchSignOut* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameMatchSignOut& from);
  void MergeFrom(const CMsgGameMatchSignOut& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameMatchSignOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignOut_CTeam CTeam;

  // accessors -------------------------------------------------------

  // repeated uint32 num_players = 5;
  int num_players_size() const;
  void clear_num_players();
  static const int kNumPlayersFieldNumber = 5;
  ::google::protobuf::uint32 num_players(int index) const;
  void set_num_players(int index, ::google::protobuf::uint32 value);
  void add_num_players(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num_players() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num_players();

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 6;
  const ::CMsgGameMatchSignOut_CTeam& teams(int index) const;
  ::CMsgGameMatchSignOut_CTeam* mutable_teams(int index);
  ::CMsgGameMatchSignOut_CTeam* add_teams();
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
      teams() const;

  // repeated uint32 tower_status = 8;
  int tower_status_size() const;
  void clear_tower_status();
  static const int kTowerStatusFieldNumber = 8;
  ::google::protobuf::uint32 tower_status(int index) const;
  void set_tower_status(int index, ::google::protobuf::uint32 value);
  void add_tower_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tower_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  int barracks_status_size() const;
  void clear_barracks_status();
  static const int kBarracksStatusFieldNumber = 9;
  ::google::protobuf::uint32 barracks_status(int index) const;
  void set_barracks_status(int index, ::google::protobuf::uint32 value);
  void add_barracks_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      barracks_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_barracks_status();

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  int picks_bans_size() const;
  void clear_picks_bans();
  static const int kPicksBansFieldNumber = 15;
  const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::CMatchHeroSelectEvent* add_picks_bans();
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;

  // optional string computer_name = 7;
  bool has_computer_name() const;
  void clear_computer_name();
  static const int kComputerNameFieldNumber = 7;
  const ::std::string& computer_name() const;
  void set_computer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_computer_name(::std::string&& value);
  #endif
  void set_computer_name(const char* value);
  void set_computer_name(const char* value, size_t size);
  ::std::string* mutable_computer_name();
  ::std::string* release_computer_name();
  void set_allocated_computer_name(::std::string* computer_name);

  // optional string server_addr = 11;
  bool has_server_addr() const;
  void clear_server_addr();
  static const int kServerAddrFieldNumber = 11;
  const ::std::string& server_addr() const;
  void set_server_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_server_addr(::std::string&& value);
  #endif
  void set_server_addr(const char* value);
  void set_server_addr(const char* value, size_t size);
  ::std::string* mutable_server_addr();
  ::std::string* release_server_addr();
  void set_allocated_server_addr(::std::string* server_addr);

  // optional uint32 match_id = 1 [(.key_field) = true];
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional bool good_guys_win = 3;
  bool has_good_guys_win() const;
  void clear_good_guys_win();
  static const int kGoodGuysWinFieldNumber = 3;
  bool good_guys_win() const;
  void set_good_guys_win(bool value);

  // optional fixed32 date = 4;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  ::google::protobuf::uint32 date() const;
  void set_date(::google::protobuf::uint32 value);

  // optional uint32 cluster = 10;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 10;
  ::google::protobuf::uint32 cluster() const;
  void set_cluster(::google::protobuf::uint32 value);

  // optional uint32 first_blood_time = 12;
  bool has_first_blood_time() const;
  void clear_first_blood_time();
  static const int kFirstBloodTimeFieldNumber = 12;
  ::google::protobuf::uint32 first_blood_time() const;
  void set_first_blood_time(::google::protobuf::uint32 value);

  // optional float game_balance = 13;
  bool has_game_balance() const;
  void clear_game_balance();
  static const int kGameBalanceFieldNumber = 13;
  float game_balance() const;
  void set_game_balance(float value);

  // optional uint32 event_score = 14;
  bool has_event_score() const;
  void clear_event_score();
  static const int kEventScoreFieldNumber = 14;
  ::google::protobuf::uint32 event_score() const;
  void set_event_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_duration();
  void clear_has_duration();
  void set_has_good_guys_win();
  void clear_has_good_guys_win();
  void set_has_date();
  void clear_has_date();
  void set_has_computer_name();
  void clear_has_computer_name();
  void set_has_cluster();
  void clear_has_cluster();
  void set_has_server_addr();
  void clear_has_server_addr();
  void set_has_first_blood_time();
  void clear_has_first_blood_time();
  void set_has_game_balance();
  void clear_has_game_balance();
  void set_has_event_score();
  void clear_has_event_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_players_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam > teams_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tower_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > barracks_status_;
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
  ::google::protobuf::internal::ArenaStringPtr computer_name_;
  ::google::protobuf::internal::ArenaStringPtr server_addr_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 duration_;
  bool good_guys_win_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 cluster_;
  ::google::protobuf::uint32 first_blood_time_;
  float game_balance_;
  ::google::protobuf::uint32 event_score_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameMatchSignOutImpl();
};
// -------------------------------------------------------------------

class CMsgGameMatchSignoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignoutResponse) */ {
 public:
  CMsgGameMatchSignoutResponse();
  virtual ~CMsgGameMatchSignoutResponse();

  CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from);

  inline CMsgGameMatchSignoutResponse& operator=(const CMsgGameMatchSignoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameMatchSignoutResponse(CMsgGameMatchSignoutResponse&& from) noexcept
    : CMsgGameMatchSignoutResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignoutResponse& operator=(CMsgGameMatchSignoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameMatchSignoutResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignoutResponse*>(
               &_CMsgGameMatchSignoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(CMsgGameMatchSignoutResponse* other);
  friend void swap(CMsgGameMatchSignoutResponse& a, CMsgGameMatchSignoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameMatchSignoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameMatchSignoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameMatchSignoutResponse& from);
  void MergeFrom(const CMsgGameMatchSignoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameMatchSignoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  int timed_reward_details_size() const;
  void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 3;
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .CDOTALobbyMember xp_reward_details = 4;
  int xp_reward_details_size() const;
  void clear_xp_reward_details();
  static const int kXpRewardDetailsFieldNumber = 4;
  const ::CDOTALobbyMember& xp_reward_details(int index) const;
  ::CDOTALobbyMember* mutable_xp_reward_details(int index);
  ::CDOTALobbyMember* add_xp_reward_details();
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_xp_reward_details();
  const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      xp_reward_details() const;

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional fixed32 replay_salt = 2;
  bool has_replay_salt() const;
  void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 2;
  ::google::protobuf::uint32 replay_salt() const;
  void set_replay_salt(::google::protobuf::uint32 value);

  // optional uint32 leagueid = 5;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 5;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignoutResponse)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_replay_salt();
  void clear_has_replay_salt();
  void set_has_leagueid();
  void clear_has_leagueid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > xp_reward_details_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 replay_salt_;
  ::google::protobuf::uint32 leagueid_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameMatchSignoutResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGameChatLog_CChatLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameChatLog.CChatLine) */ {
 public:
  CMsgGameChatLog_CChatLine();
  virtual ~CMsgGameChatLog_CChatLine();

  CMsgGameChatLog_CChatLine(const CMsgGameChatLog_CChatLine& from);

  inline CMsgGameChatLog_CChatLine& operator=(const CMsgGameChatLog_CChatLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameChatLog_CChatLine(CMsgGameChatLog_CChatLine&& from) noexcept
    : CMsgGameChatLog_CChatLine() {
    *this = ::std::move(from);
  }

  inline CMsgGameChatLog_CChatLine& operator=(CMsgGameChatLog_CChatLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameChatLog_CChatLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameChatLog_CChatLine* internal_default_instance() {
    return reinterpret_cast<const CMsgGameChatLog_CChatLine*>(
               &_CMsgGameChatLog_CChatLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(CMsgGameChatLog_CChatLine* other);
  friend void swap(CMsgGameChatLog_CChatLine& a, CMsgGameChatLog_CChatLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameChatLog_CChatLine* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameChatLog_CChatLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameChatLog_CChatLine& from);
  void MergeFrom(const CMsgGameChatLog_CChatLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameChatLog_CChatLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_only = 2;
  bool has_team_only() const;
  void clear_team_only();
  static const int kTeamOnlyFieldNumber = 2;
  ::google::protobuf::uint32 team_only() const;
  void set_team_only(::google::protobuf::uint32 value);

  // optional uint32 game_time = 4;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 4;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameChatLog.CChatLine)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_only();
  void clear_has_team_only();
  void set_has_text();
  void clear_has_text();
  void set_has_game_time();
  void clear_has_game_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_only_;
  ::google::protobuf::uint32 game_time_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameChatLog_CChatLineImpl();
};
// -------------------------------------------------------------------

class CMsgGameChatLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameChatLog) */ {
 public:
  CMsgGameChatLog();
  virtual ~CMsgGameChatLog();

  CMsgGameChatLog(const CMsgGameChatLog& from);

  inline CMsgGameChatLog& operator=(const CMsgGameChatLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameChatLog(CMsgGameChatLog&& from) noexcept
    : CMsgGameChatLog() {
    *this = ::std::move(from);
  }

  inline CMsgGameChatLog& operator=(CMsgGameChatLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameChatLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameChatLog* internal_default_instance() {
    return reinterpret_cast<const CMsgGameChatLog*>(
               &_CMsgGameChatLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(CMsgGameChatLog* other);
  friend void swap(CMsgGameChatLog& a, CMsgGameChatLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameChatLog* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameChatLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameChatLog& from);
  void MergeFrom(const CMsgGameChatLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameChatLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGameChatLog_CChatLine CChatLine;

  // accessors -------------------------------------------------------

  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  const ::CMsgGameChatLog_CChatLine& lines(int index) const;
  ::CMsgGameChatLog_CChatLine* mutable_lines(int index);
  ::CMsgGameChatLog_CChatLine* add_lines();
  ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >&
      lines() const;

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameChatLog)
 private:
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine > lines_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameChatLogImpl();
};
// -------------------------------------------------------------------

class CMsgInitialQuestionnaireResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgInitialQuestionnaireResponse) */ {
 public:
  CMsgInitialQuestionnaireResponse();
  virtual ~CMsgInitialQuestionnaireResponse();

  CMsgInitialQuestionnaireResponse(const CMsgInitialQuestionnaireResponse& from);

  inline CMsgInitialQuestionnaireResponse& operator=(const CMsgInitialQuestionnaireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgInitialQuestionnaireResponse(CMsgInitialQuestionnaireResponse&& from) noexcept
    : CMsgInitialQuestionnaireResponse() {
    *this = ::std::move(from);
  }

  inline CMsgInitialQuestionnaireResponse& operator=(CMsgInitialQuestionnaireResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgInitialQuestionnaireResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgInitialQuestionnaireResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgInitialQuestionnaireResponse*>(
               &_CMsgInitialQuestionnaireResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(CMsgInitialQuestionnaireResponse* other);
  friend void swap(CMsgInitialQuestionnaireResponse& a, CMsgInitialQuestionnaireResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgInitialQuestionnaireResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgInitialQuestionnaireResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgInitialQuestionnaireResponse& from);
  void MergeFrom(const CMsgInitialQuestionnaireResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgInitialQuestionnaireResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 initial_skill = 1;
  bool has_initial_skill() const;
  void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 1;
  ::google::protobuf::uint32 initial_skill() const;
  void set_initial_skill(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgInitialQuestionnaireResponse)
 private:
  void set_has_initial_skill();
  void clear_has_initial_skill();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 initial_skill_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgInitialQuestionnaireResponseImpl();
};
// -------------------------------------------------------------------

class CMsgInterGCSurgeTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgInterGCSurgeTest) */ {
 public:
  CMsgInterGCSurgeTest();
  virtual ~CMsgInterGCSurgeTest();

  CMsgInterGCSurgeTest(const CMsgInterGCSurgeTest& from);

  inline CMsgInterGCSurgeTest& operator=(const CMsgInterGCSurgeTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgInterGCSurgeTest(CMsgInterGCSurgeTest&& from) noexcept
    : CMsgInterGCSurgeTest() {
    *this = ::std::move(from);
  }

  inline CMsgInterGCSurgeTest& operator=(CMsgInterGCSurgeTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgInterGCSurgeTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgInterGCSurgeTest* internal_default_instance() {
    return reinterpret_cast<const CMsgInterGCSurgeTest*>(
               &_CMsgInterGCSurgeTest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(CMsgInterGCSurgeTest* other);
  friend void swap(CMsgInterGCSurgeTest& a, CMsgInterGCSurgeTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgInterGCSurgeTest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgInterGCSurgeTest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgInterGCSurgeTest& from);
  void MergeFrom(const CMsgInterGCSurgeTest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgInterGCSurgeTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgInterGCSurgeTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgInterGCSurgeTestImpl();
};
// -------------------------------------------------------------------

class CMsgInterGCProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgInterGCProfile) */ {
 public:
  CMsgInterGCProfile();
  virtual ~CMsgInterGCProfile();

  CMsgInterGCProfile(const CMsgInterGCProfile& from);

  inline CMsgInterGCProfile& operator=(const CMsgInterGCProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgInterGCProfile(CMsgInterGCProfile&& from) noexcept
    : CMsgInterGCProfile() {
    *this = ::std::move(from);
  }

  inline CMsgInterGCProfile& operator=(CMsgInterGCProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgInterGCProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgInterGCProfile* internal_default_instance() {
    return reinterpret_cast<const CMsgInterGCProfile*>(
               &_CMsgInterGCProfile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(CMsgInterGCProfile* other);
  friend void swap(CMsgInterGCProfile& a, CMsgInterGCProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgInterGCProfile* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgInterGCProfile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgInterGCProfile& from);
  void MergeFrom(const CMsgInterGCProfile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgInterGCProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  bool start() const;
  void set_start(bool value);

  // @@protoc_insertion_point(class_scope:CMsgInterGCProfile)
 private:
  void set_has_start();
  void clear_has_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool start_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgInterGCProfileImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Team : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Team) */ {
 public:
  CMsgDOTATournament_Team();
  virtual ~CMsgDOTATournament_Team();

  CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from);

  inline CMsgDOTATournament_Team& operator=(const CMsgDOTATournament_Team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournament_Team(CMsgDOTATournament_Team&& from) noexcept
    : CMsgDOTATournament_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Team& operator=(CMsgDOTATournament_Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournament_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Team*>(
               &_CMsgDOTATournament_Team_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(CMsgDOTATournament_Team* other);
  friend void swap(CMsgDOTATournament_Team& a, CMsgDOTATournament_Team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournament_Team* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournament_Team* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournament_Team& from);
  void MergeFrom(const CMsgDOTATournament_Team& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournament_Team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 players = 4;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 4;
  ::google::protobuf::uint32 players(int index) const;
  void set_players(int index, ::google::protobuf::uint32 value);
  void add_players(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      players() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_players();

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_abbrev = 3;
  bool has_team_abbrev() const;
  void clear_team_abbrev();
  static const int kTeamAbbrevFieldNumber = 3;
  const ::std::string& team_abbrev() const;
  void set_team_abbrev(const ::std::string& value);
  #if LANG_CXX11
  void set_team_abbrev(::std::string&& value);
  #endif
  void set_team_abbrev(const char* value);
  void set_team_abbrev(const char* value, size_t size);
  ::std::string* mutable_team_abbrev();
  ::std::string* release_team_abbrev();
  void set_allocated_team_abbrev(::std::string* team_abbrev);

  // optional string country_code = 7;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 seed = 5;
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 5;
  ::google::protobuf::uint32 seed() const;
  void set_seed(::google::protobuf::uint32 value);

  // optional uint64 team_logo = 6;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 6;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Team)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_abbrev();
  void clear_has_team_abbrev();
  void set_has_seed();
  void clear_has_seed();
  void set_has_team_logo();
  void clear_has_team_logo();
  void set_has_country_code();
  void clear_has_country_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > players_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_abbrev_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 seed_;
  ::google::protobuf::uint64 team_logo_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournament_TeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Game_ReplayURL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Game.ReplayURL) */ {
 public:
  CMsgDOTATournament_Game_ReplayURL();
  virtual ~CMsgDOTATournament_Game_ReplayURL();

  CMsgDOTATournament_Game_ReplayURL(const CMsgDOTATournament_Game_ReplayURL& from);

  inline CMsgDOTATournament_Game_ReplayURL& operator=(const CMsgDOTATournament_Game_ReplayURL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournament_Game_ReplayURL(CMsgDOTATournament_Game_ReplayURL&& from) noexcept
    : CMsgDOTATournament_Game_ReplayURL() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Game_ReplayURL& operator=(CMsgDOTATournament_Game_ReplayURL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Game_ReplayURL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournament_Game_ReplayURL* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Game_ReplayURL*>(
               &_CMsgDOTATournament_Game_ReplayURL_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(CMsgDOTATournament_Game_ReplayURL* other);
  friend void swap(CMsgDOTATournament_Game_ReplayURL& a, CMsgDOTATournament_Game_ReplayURL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournament_Game_ReplayURL* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournament_Game_ReplayURL* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournament_Game_ReplayURL& from);
  void MergeFrom(const CMsgDOTATournament_Game_ReplayURL& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournament_Game_ReplayURL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 provider_id = 1;
  bool has_provider_id() const;
  void clear_provider_id();
  static const int kProviderIdFieldNumber = 1;
  ::google::protobuf::uint32 provider_id() const;
  void set_provider_id(::google::protobuf::uint32 value);

  // optional uint32 stream_id = 2;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  ::google::protobuf::uint32 stream_id() const;
  void set_stream_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Game.ReplayURL)
 private:
  void set_has_provider_id();
  void clear_has_provider_id();
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_url();
  void clear_has_url();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 provider_id_;
  ::google::protobuf::uint32 stream_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournament_Game_ReplayURLImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Game : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Game) */ {
 public:
  CMsgDOTATournament_Game();
  virtual ~CMsgDOTATournament_Game();

  CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from);

  inline CMsgDOTATournament_Game& operator=(const CMsgDOTATournament_Game& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournament_Game(CMsgDOTATournament_Game&& from) noexcept
    : CMsgDOTATournament_Game() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Game& operator=(CMsgDOTATournament_Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournament_Game* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Game*>(
               &_CMsgDOTATournament_Game_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(CMsgDOTATournament_Game* other);
  friend void swap(CMsgDOTATournament_Game& a, CMsgDOTATournament_Game& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournament_Game* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournament_Game* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournament_Game& from);
  void MergeFrom(const CMsgDOTATournament_Game& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournament_Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournament_Game_ReplayURL ReplayURL;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTATournament.Game.ReplayURL replay_urls = 11;
  int replay_urls_size() const;
  void clear_replay_urls();
  static const int kReplayUrlsFieldNumber = 11;
  const ::CMsgDOTATournament_Game_ReplayURL& replay_urls(int index) const;
  ::CMsgDOTATournament_Game_ReplayURL* mutable_replay_urls(int index);
  ::CMsgDOTATournament_Game_ReplayURL* add_replay_urls();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game_ReplayURL >*
      mutable_replay_urls();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game_ReplayURL >&
      replay_urls() const;

  // optional string game_name = 6;
  bool has_game_name() const;
  void clear_game_name();
  static const int kGameNameFieldNumber = 6;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // optional string message = 9;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 9;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint32 game_id = 1;
  bool has_game_id() const;
  void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 good_team_id = 2;
  bool has_good_team_id() const;
  void clear_good_team_id();
  static const int kGoodTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 good_team_id() const;
  void set_good_team_id(::google::protobuf::uint32 value);

  // optional fixed64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 bad_team_id = 3;
  bool has_bad_team_id() const;
  void clear_bad_team_id();
  static const int kBadTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 bad_team_id() const;
  void set_bad_team_id(::google::protobuf::uint32 value);

  // optional uint32 match_id = 5;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional bool live_stream = 7;
  bool has_live_stream() const;
  void clear_live_stream();
  static const int kLiveStreamFieldNumber = 7;
  bool live_stream() const;
  void set_live_stream(bool value);

  // optional bool results_final = 10;
  bool has_results_final() const;
  void clear_results_final();
  static const int kResultsFinalFieldNumber = 10;
  bool results_final() const;
  void set_results_final(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Game)
 private:
  void set_has_game_id();
  void clear_has_game_id();
  void set_has_good_team_id();
  void clear_has_good_team_id();
  void set_has_bad_team_id();
  void clear_has_bad_team_id();
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_game_name();
  void clear_has_game_name();
  void set_has_live_stream();
  void clear_has_live_stream();
  void set_has_message();
  void clear_has_message();
  void set_has_results_final();
  void clear_has_results_final();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game_ReplayURL > replay_urls_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 good_team_id_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 bad_team_id_;
  ::google::protobuf::uint32 match_id_;
  bool live_stream_;
  bool results_final_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournament_GameImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournament : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament) */ {
 public:
  CMsgDOTATournament();
  virtual ~CMsgDOTATournament();

  CMsgDOTATournament(const CMsgDOTATournament& from);

  inline CMsgDOTATournament& operator=(const CMsgDOTATournament& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournament(CMsgDOTATournament&& from) noexcept
    : CMsgDOTATournament() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament& operator=(CMsgDOTATournament&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournament* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament*>(
               &_CMsgDOTATournament_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(CMsgDOTATournament* other);
  friend void swap(CMsgDOTATournament& a, CMsgDOTATournament& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournament* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournament* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournament& from);
  void MergeFrom(const CMsgDOTATournament& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournament* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournament_Team Team;
  typedef CMsgDOTATournament_Game Game;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTATournament.Team teams = 1;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 1;
  const ::CMsgDOTATournament_Team& teams(int index) const;
  ::CMsgDOTATournament_Team* mutable_teams(int index);
  ::CMsgDOTATournament_Team* add_teams();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >&
      teams() const;

  // repeated .CMsgDOTATournament.Game games = 2;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 2;
  const ::CMsgDOTATournament_Game& games(int index) const;
  ::CMsgDOTATournament_Game* mutable_games(int index);
  ::CMsgDOTATournament_Game* add_games();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >*
      mutable_games();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >&
      games() const;

  // optional uint64 gid = 3;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 3;
  ::google::protobuf::uint64 gid() const;
  void set_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament)
 private:
  void set_has_gid();
  void clear_has_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game > games_;
  ::google::protobuf::uint64 gid_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournamentImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournamentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournamentRequest) */ {
 public:
  CMsgDOTATournamentRequest();
  virtual ~CMsgDOTATournamentRequest();

  CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from);

  inline CMsgDOTATournamentRequest& operator=(const CMsgDOTATournamentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournamentRequest(CMsgDOTATournamentRequest&& from) noexcept
    : CMsgDOTATournamentRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournamentRequest& operator=(CMsgDOTATournamentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournamentRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournamentRequest*>(
               &_CMsgDOTATournamentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(CMsgDOTATournamentRequest* other);
  friend void swap(CMsgDOTATournamentRequest& a, CMsgDOTATournamentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournamentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournamentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournamentRequest& from);
  void MergeFrom(const CMsgDOTATournamentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournamentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 client_tournament_gid = 2;
  bool has_client_tournament_gid() const;
  void clear_client_tournament_gid();
  static const int kClientTournamentGidFieldNumber = 2;
  ::google::protobuf::uint64 client_tournament_gid() const;
  void set_client_tournament_gid(::google::protobuf::uint64 value);

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentRequest)
 private:
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_client_tournament_gid();
  void clear_has_client_tournament_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 client_tournament_gid_;
  ::google::protobuf::uint32 tournament_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournamentRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATournamentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournamentResponse) */ {
 public:
  CMsgDOTATournamentResponse();
  virtual ~CMsgDOTATournamentResponse();

  CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from);

  inline CMsgDOTATournamentResponse& operator=(const CMsgDOTATournamentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATournamentResponse(CMsgDOTATournamentResponse&& from) noexcept
    : CMsgDOTATournamentResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournamentResponse& operator=(CMsgDOTATournamentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATournamentResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournamentResponse*>(
               &_CMsgDOTATournamentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(CMsgDOTATournamentResponse* other);
  friend void swap(CMsgDOTATournamentResponse& a, CMsgDOTATournamentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATournamentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATournamentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATournamentResponse& from);
  void MergeFrom(const CMsgDOTATournamentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATournamentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTATournament tournament = 2;
  bool has_tournament() const;
  void clear_tournament();
  static const int kTournamentFieldNumber = 2;
  const ::CMsgDOTATournament& tournament() const;
  ::CMsgDOTATournament* release_tournament();
  ::CMsgDOTATournament* mutable_tournament();
  void set_allocated_tournament(::CMsgDOTATournament* tournament);

  // optional uint32 result = 1 [default = 2];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tournament();
  void clear_has_tournament();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTATournament* tournament_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATournamentResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAClearTournamentGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAClearTournamentGame) */ {
 public:
  CMsgDOTAClearTournamentGame();
  virtual ~CMsgDOTAClearTournamentGame();

  CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from);

  inline CMsgDOTAClearTournamentGame& operator=(const CMsgDOTAClearTournamentGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAClearTournamentGame(CMsgDOTAClearTournamentGame&& from) noexcept
    : CMsgDOTAClearTournamentGame() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAClearTournamentGame& operator=(CMsgDOTAClearTournamentGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAClearTournamentGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAClearTournamentGame* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAClearTournamentGame*>(
               &_CMsgDOTAClearTournamentGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(CMsgDOTAClearTournamentGame* other);
  friend void swap(CMsgDOTAClearTournamentGame& a, CMsgDOTAClearTournamentGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAClearTournamentGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAClearTournamentGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAClearTournamentGame& from);
  void MergeFrom(const CMsgDOTAClearTournamentGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAClearTournamentGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 game_id = 2;
  bool has_game_id() const;
  void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAClearTournamentGame)
 private:
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_game_id();
  void clear_has_game_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 game_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAClearTournamentGameImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.Player) */ {
 public:
  CMsgDOTAMatch_Player();
  virtual ~CMsgDOTAMatch_Player();

  CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from);

  inline CMsgDOTAMatch_Player& operator=(const CMsgDOTAMatch_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch_Player(CMsgDOTAMatch_Player&& from) noexcept
    : CMsgDOTAMatch_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player& operator=(CMsgDOTAMatch_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player*>(
               &_CMsgDOTAMatch_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(CMsgDOTAMatch_Player* other);
  friend void swap(CMsgDOTAMatch_Player& a, CMsgDOTAMatch_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatch_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatch_Player& from);
  void MergeFrom(const CMsgDOTAMatch_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatch_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  int ability_upgrades_size() const;
  void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 47;
  const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  int additional_units_inventory_size() const;
  void clear_additional_units_inventory();
  static const int kAdditionalUnitsInventoryFieldNumber = 48;
  const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;

  // optional string player_name = 29;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 29;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 2;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 item_0 = 4;
  bool has_item_0() const;
  void clear_item_0();
  static const int kItem0FieldNumber = 4;
  ::google::protobuf::uint32 item_0() const;
  void set_item_0(::google::protobuf::uint32 value);

  // optional uint32 item_1 = 5;
  bool has_item_1() const;
  void clear_item_1();
  static const int kItem1FieldNumber = 5;
  ::google::protobuf::uint32 item_1() const;
  void set_item_1(::google::protobuf::uint32 value);

  // optional uint32 item_2 = 6;
  bool has_item_2() const;
  void clear_item_2();
  static const int kItem2FieldNumber = 6;
  ::google::protobuf::uint32 item_2() const;
  void set_item_2(::google::protobuf::uint32 value);

  // optional uint32 item_3 = 7;
  bool has_item_3() const;
  void clear_item_3();
  static const int kItem3FieldNumber = 7;
  ::google::protobuf::uint32 item_3() const;
  void set_item_3(::google::protobuf::uint32 value);

  // optional uint32 item_4 = 8;
  bool has_item_4() const;
  void clear_item_4();
  static const int kItem4FieldNumber = 8;
  ::google::protobuf::uint32 item_4() const;
  void set_item_4(::google::protobuf::uint32 value);

  // optional uint32 item_5 = 9;
  bool has_item_5() const;
  void clear_item_5();
  static const int kItem5FieldNumber = 9;
  ::google::protobuf::uint32 item_5() const;
  void set_item_5(::google::protobuf::uint32 value);

  // optional float expected_team_contribution = 10;
  bool has_expected_team_contribution() const;
  void clear_expected_team_contribution();
  static const int kExpectedTeamContributionFieldNumber = 10;
  float expected_team_contribution() const;
  void set_expected_team_contribution(float value);

  // optional float scaled_metric = 11;
  bool has_scaled_metric() const;
  void clear_scaled_metric();
  static const int kScaledMetricFieldNumber = 11;
  float scaled_metric() const;
  void set_scaled_metric(float value);

  // optional uint32 previous_rank = 12;
  bool has_previous_rank() const;
  void clear_previous_rank();
  static const int kPreviousRankFieldNumber = 12;
  ::google::protobuf::uint32 previous_rank() const;
  void set_previous_rank(::google::protobuf::uint32 value);

  // optional uint32 rank_change = 13;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 13;
  ::google::protobuf::uint32 rank_change() const;
  void set_rank_change(::google::protobuf::uint32 value);

  // optional uint32 kills = 14;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 14;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 15;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 15;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 16;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 16;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 leaver_status = 17;
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 17;
  ::google::protobuf::uint32 leaver_status() const;
  void set_leaver_status(::google::protobuf::uint32 value);

  // optional uint32 gold = 18;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 18;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 19;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 19;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 20;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 20;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 21;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 21;
  ::google::protobuf::uint32 gold_per_min() const;
  void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 XP_per_min = 22;
  bool has_xp_per_min() const;
  void clear_xp_per_min();
  static const int kXPPerMinFieldNumber = 22;
  ::google::protobuf::uint32 xp_per_min() const;
  void set_xp_per_min(::google::protobuf::uint32 value);

  // optional uint32 gold_spent = 23;
  bool has_gold_spent() const;
  void clear_gold_spent();
  static const int kGoldSpentFieldNumber = 23;
  ::google::protobuf::uint32 gold_spent() const;
  void set_gold_spent(::google::protobuf::uint32 value);

  // optional uint32 hero_damage = 24;
  bool has_hero_damage() const;
  void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 24;
  ::google::protobuf::uint32 hero_damage() const;
  void set_hero_damage(::google::protobuf::uint32 value);

  // optional uint32 tower_damage = 25;
  bool has_tower_damage() const;
  void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 25;
  ::google::protobuf::uint32 tower_damage() const;
  void set_tower_damage(::google::protobuf::uint32 value);

  // optional uint32 hero_healing = 26;
  bool has_hero_healing() const;
  void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 26;
  ::google::protobuf::uint32 hero_healing() const;
  void set_hero_healing(::google::protobuf::uint32 value);

  // optional uint32 level = 27;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 27;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 time_last_seen = 28;
  bool has_time_last_seen() const;
  void clear_time_last_seen();
  static const int kTimeLastSeenFieldNumber = 28;
  ::google::protobuf::uint32 time_last_seen() const;
  void set_time_last_seen(::google::protobuf::uint32 value);

  // optional uint32 support_ability_value = 30;
  bool has_support_ability_value() const;
  void clear_support_ability_value();
  static const int kSupportAbilityValueFieldNumber = 30;
  ::google::protobuf::uint32 support_ability_value() const;
  void set_support_ability_value(::google::protobuf::uint32 value);

  // optional bool feeding_detected = 32;
  bool has_feeding_detected() const;
  void clear_feeding_detected();
  static const int kFeedingDetectedFieldNumber = 32;
  bool feeding_detected() const;
  void set_feeding_detected(bool value);

  // optional uint32 search_rank = 34;
  bool has_search_rank() const;
  void clear_search_rank();
  static const int kSearchRankFieldNumber = 34;
  ::google::protobuf::uint32 search_rank() const;
  void set_search_rank(::google::protobuf::uint32 value);

  // optional uint32 search_rank_uncertainty = 35;
  bool has_search_rank_uncertainty() const;
  void clear_search_rank_uncertainty();
  static const int kSearchRankUncertaintyFieldNumber = 35;
  ::google::protobuf::uint32 search_rank_uncertainty() const;
  void set_search_rank_uncertainty(::google::protobuf::uint32 value);

  // optional uint32 rank_uncertainty_change = 36;
  bool has_rank_uncertainty_change() const;
  void clear_rank_uncertainty_change();
  static const int kRankUncertaintyChangeFieldNumber = 36;
  ::google::protobuf::uint32 rank_uncertainty_change() const;
  void set_rank_uncertainty_change(::google::protobuf::uint32 value);

  // optional uint32 hero_play_count = 37;
  bool has_hero_play_count() const;
  void clear_hero_play_count();
  static const int kHeroPlayCountFieldNumber = 37;
  ::google::protobuf::uint32 hero_play_count() const;
  void set_hero_play_count(::google::protobuf::uint32 value);

  // optional fixed64 party_id = 38;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 38;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional float scaled_kills = 39;
  bool has_scaled_kills() const;
  void clear_scaled_kills();
  static const int kScaledKillsFieldNumber = 39;
  float scaled_kills() const;
  void set_scaled_kills(float value);

  // optional float scaled_deaths = 40;
  bool has_scaled_deaths() const;
  void clear_scaled_deaths();
  static const int kScaledDeathsFieldNumber = 40;
  float scaled_deaths() const;
  void set_scaled_deaths(float value);

  // optional float scaled_assists = 41;
  bool has_scaled_assists() const;
  void clear_scaled_assists();
  static const int kScaledAssistsFieldNumber = 41;
  float scaled_assists() const;
  void set_scaled_assists(float value);

  // optional uint32 claimed_farm_gold = 42;
  bool has_claimed_farm_gold() const;
  void clear_claimed_farm_gold();
  static const int kClaimedFarmGoldFieldNumber = 42;
  ::google::protobuf::uint32 claimed_farm_gold() const;
  void set_claimed_farm_gold(::google::protobuf::uint32 value);

  // optional uint32 support_gold = 43;
  bool has_support_gold() const;
  void clear_support_gold();
  static const int kSupportGoldFieldNumber = 43;
  ::google::protobuf::uint32 support_gold() const;
  void set_support_gold(::google::protobuf::uint32 value);

  // optional uint32 claimed_denies = 44;
  bool has_claimed_denies() const;
  void clear_claimed_denies();
  static const int kClaimedDeniesFieldNumber = 44;
  ::google::protobuf::uint32 claimed_denies() const;
  void set_claimed_denies(::google::protobuf::uint32 value);

  // optional uint32 claimed_misses = 45;
  bool has_claimed_misses() const;
  void clear_claimed_misses();
  static const int kClaimedMissesFieldNumber = 45;
  ::google::protobuf::uint32 claimed_misses() const;
  void set_claimed_misses(::google::protobuf::uint32 value);

  // optional uint32 misses = 46;
  bool has_misses() const;
  void clear_misses();
  static const int kMissesFieldNumber = 46;
  ::google::protobuf::uint32 misses() const;
  void set_misses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_player_slot();
  void clear_has_player_slot();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_item_0();
  void clear_has_item_0();
  void set_has_item_1();
  void clear_has_item_1();
  void set_has_item_2();
  void clear_has_item_2();
  void set_has_item_3();
  void clear_has_item_3();
  void set_has_item_4();
  void clear_has_item_4();
  void set_has_item_5();
  void clear_has_item_5();
  void set_has_expected_team_contribution();
  void clear_has_expected_team_contribution();
  void set_has_scaled_metric();
  void clear_has_scaled_metric();
  void set_has_previous_rank();
  void clear_has_previous_rank();
  void set_has_rank_change();
  void clear_has_rank_change();
  void set_has_kills();
  void clear_has_kills();
  void set_has_deaths();
  void clear_has_deaths();
  void set_has_assists();
  void clear_has_assists();
  void set_has_leaver_status();
  void clear_has_leaver_status();
  void set_has_gold();
  void clear_has_gold();
  void set_has_last_hits();
  void clear_has_last_hits();
  void set_has_denies();
  void clear_has_denies();
  void set_has_gold_per_min();
  void clear_has_gold_per_min();
  void set_has_xp_per_min();
  void clear_has_xp_per_min();
  void set_has_gold_spent();
  void clear_has_gold_spent();
  void set_has_hero_damage();
  void clear_has_hero_damage();
  void set_has_tower_damage();
  void clear_has_tower_damage();
  void set_has_hero_healing();
  void clear_has_hero_healing();
  void set_has_level();
  void clear_has_level();
  void set_has_time_last_seen();
  void clear_has_time_last_seen();
  void set_has_player_name();
  void clear_has_player_name();
  void set_has_support_ability_value();
  void clear_has_support_ability_value();
  void set_has_feeding_detected();
  void clear_has_feeding_detected();
  void set_has_search_rank();
  void clear_has_search_rank();
  void set_has_search_rank_uncertainty();
  void clear_has_search_rank_uncertainty();
  void set_has_rank_uncertainty_change();
  void clear_has_rank_uncertainty_change();
  void set_has_hero_play_count();
  void clear_has_hero_play_count();
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_scaled_kills();
  void clear_has_scaled_kills();
  void set_has_scaled_deaths();
  void clear_has_scaled_deaths();
  void set_has_scaled_assists();
  void clear_has_scaled_assists();
  void set_has_claimed_farm_gold();
  void clear_has_claimed_farm_gold();
  void set_has_support_gold();
  void clear_has_support_gold();
  void set_has_claimed_denies();
  void clear_has_claimed_denies();
  void set_has_claimed_misses();
  void clear_has_claimed_misses();
  void set_has_misses();
  void clear_has_misses();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 item_0_;
  ::google::protobuf::uint32 item_1_;
  ::google::protobuf::uint32 item_2_;
  ::google::protobuf::uint32 item_3_;
  ::google::protobuf::uint32 item_4_;
  ::google::protobuf::uint32 item_5_;
  float expected_team_contribution_;
  float scaled_metric_;
  ::google::protobuf::uint32 previous_rank_;
  ::google::protobuf::uint32 rank_change_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 leaver_status_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_min_;
  ::google::protobuf::uint32 gold_spent_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 time_last_seen_;
  ::google::protobuf::uint32 support_ability_value_;
  bool feeding_detected_;
  ::google::protobuf::uint32 search_rank_;
  ::google::protobuf::uint32 search_rank_uncertainty_;
  ::google::protobuf::uint32 rank_uncertainty_change_;
  ::google::protobuf::uint32 hero_play_count_;
  ::google::protobuf::uint64 party_id_;
  float scaled_kills_;
  float scaled_deaths_;
  float scaled_assists_;
  ::google::protobuf::uint32 claimed_farm_gold_;
  ::google::protobuf::uint32 support_gold_;
  ::google::protobuf::uint32 claimed_denies_;
  ::google::protobuf::uint32 claimed_misses_;
  ::google::protobuf::uint32 misses_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatch_PlayerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch) */ {
 public:
  CMsgDOTAMatch();
  virtual ~CMsgDOTAMatch();

  CMsgDOTAMatch(const CMsgDOTAMatch& from);

  inline CMsgDOTAMatch& operator=(const CMsgDOTAMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatch(CMsgDOTAMatch&& from) noexcept
    : CMsgDOTAMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch& operator=(CMsgDOTAMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch*>(
               &_CMsgDOTAMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(CMsgDOTAMatch* other);
  friend void swap(CMsgDOTAMatch& a, CMsgDOTAMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatch& from);
  void MergeFrom(const CMsgDOTAMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player Player;

  typedef CMsgDOTAMatch_ReplayState ReplayState;
  static const ReplayState REPLAY_AVAILABLE =
    CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
  static const ReplayState REPLAY_NOT_RECORDED =
    CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED;
  static const ReplayState REPLAY_EXPIRED =
    CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
  static inline bool ReplayState_IsValid(int value) {
    return CMsgDOTAMatch_ReplayState_IsValid(value);
  }
  static const ReplayState ReplayState_MIN =
    CMsgDOTAMatch_ReplayState_ReplayState_MIN;
  static const ReplayState ReplayState_MAX =
    CMsgDOTAMatch_ReplayState_ReplayState_MAX;
  static const int ReplayState_ARRAYSIZE =
    CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplayState_descriptor() {
    return CMsgDOTAMatch_ReplayState_descriptor();
  }
  static inline const ::std::string& ReplayState_Name(ReplayState value) {
    return CMsgDOTAMatch_ReplayState_Name(value);
  }
  static inline bool ReplayState_Parse(const ::std::string& name,
      ReplayState* value) {
    return CMsgDOTAMatch_ReplayState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatch.Player players = 5;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 5;
  const ::CMsgDOTAMatch_Player& players(int index) const;
  ::CMsgDOTAMatch_Player* mutable_players(int index);
  ::CMsgDOTAMatch_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
      players() const;

  // repeated uint32 tower_status = 8;
  int tower_status_size() const;
  void clear_tower_status();
  static const int kTowerStatusFieldNumber = 8;
  ::google::protobuf::uint32 tower_status(int index) const;
  void set_tower_status(int index, ::google::protobuf::uint32 value);
  void add_tower_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tower_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  int barracks_status_size() const;
  void clear_barracks_status();
  static const int kBarracksStatusFieldNumber = 9;
  ::google::protobuf::uint32 barracks_status(int index) const;
  void set_barracks_status(int index, ::google::protobuf::uint32 value);
  void add_barracks_status(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      barracks_status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_barracks_status();

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  int picks_bans_size() const;
  void clear_picks_bans();
  static const int kPicksBansFieldNumber = 32;
  const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::CMatchHeroSelectEvent* add_picks_bans();
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;

  // optional string radiant_team_name = 23;
  bool has_radiant_team_name() const;
  void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 23;
  const ::std::string& radiant_team_name() const;
  void set_radiant_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_name(::std::string&& value);
  #endif
  void set_radiant_team_name(const char* value);
  void set_radiant_team_name(const char* value, size_t size);
  ::std::string* mutable_radiant_team_name();
  ::std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 24;
  bool has_dire_team_name() const;
  void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 24;
  const ::std::string& dire_team_name() const;
  void set_dire_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_name(::std::string&& value);
  #endif
  void set_dire_team_name(const char* value);
  void set_dire_team_name(const char* value, size_t size);
  ::std::string* mutable_dire_team_name();
  ::std::string* release_dire_team_name();
  void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional string radiant_team_tag = 37;
  bool has_radiant_team_tag() const;
  void clear_radiant_team_tag();
  static const int kRadiantTeamTagFieldNumber = 37;
  const ::std::string& radiant_team_tag() const;
  void set_radiant_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_tag(::std::string&& value);
  #endif
  void set_radiant_team_tag(const char* value);
  void set_radiant_team_tag(const char* value, size_t size);
  ::std::string* mutable_radiant_team_tag();
  ::std::string* release_radiant_team_tag();
  void set_allocated_radiant_team_tag(::std::string* radiant_team_tag);

  // optional string dire_team_tag = 38;
  bool has_dire_team_tag() const;
  void clear_dire_team_tag();
  static const int kDireTeamTagFieldNumber = 38;
  const ::std::string& dire_team_tag() const;
  void set_dire_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_tag(::std::string&& value);
  #endif
  void set_dire_team_tag(const char* value);
  void set_dire_team_tag(const char* value, size_t size);
  ::std::string* mutable_dire_team_tag();
  ::std::string* release_dire_team_tag();
  void set_allocated_dire_team_tag(::std::string* dire_team_tag);

  // optional bool good_guys_win = 2;
  bool has_good_guys_win() const;
  void clear_good_guys_win();
  static const int kGoodGuysWinFieldNumber = 2;
  bool good_guys_win() const;
  void set_good_guys_win(bool value);

  // optional uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional fixed32 startTime = 4;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint32 starttime() const;
  void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 match_id = 6;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 6;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 cluster = 10;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 10;
  ::google::protobuf::uint32 cluster() const;
  void set_cluster(::google::protobuf::uint32 value);

  // optional uint32 first_blood_time = 12;
  bool has_first_blood_time() const;
  void clear_first_blood_time();
  static const int kFirstBloodTimeFieldNumber = 12;
  ::google::protobuf::uint32 first_blood_time() const;
  void set_first_blood_time(::google::protobuf::uint32 value);

  // optional fixed32 replay_salt = 13;
  bool has_replay_salt() const;
  void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 13;
  ::google::protobuf::uint32 replay_salt() const;
  void set_replay_salt(::google::protobuf::uint32 value);

  // optional fixed32 server_ip = 14;
  bool has_server_ip() const;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 14;
  ::google::protobuf::uint32 server_ip() const;
  void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 server_port = 15;
  bool has_server_port() const;
  void clear_server_port();
  static const int kServerPortFieldNumber = 15;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 16;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 16;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 human_players = 17;
  bool has_human_players() const;
  void clear_human_players();
  static const int kHumanPlayersFieldNumber = 17;
  ::google::protobuf::uint32 human_players() const;
  void set_human_players(::google::protobuf::uint32 value);

  // optional uint32 average_skill = 18;
  bool has_average_skill() const;
  void clear_average_skill();
  static const int kAverageSkillFieldNumber = 18;
  ::google::protobuf::uint32 average_skill() const;
  void set_average_skill(::google::protobuf::uint32 value);

  // optional float game_balance = 19;
  bool has_game_balance() const;
  void clear_game_balance();
  static const int kGameBalanceFieldNumber = 19;
  float game_balance() const;
  void set_game_balance(float value);

  // optional uint32 radiant_team_id = 20;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 20;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional uint32 dire_team_id = 21;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 21;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 leagueid = 22;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 22;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint64 radiant_team_logo = 25;
  bool has_radiant_team_logo() const;
  void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 25;
  ::google::protobuf::uint64 radiant_team_logo() const;
  void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint64 dire_team_logo = 26;
  bool has_dire_team_logo() const;
  void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 26;
  ::google::protobuf::uint64 dire_team_logo() const;
  void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional uint32 radiant_team_complete = 27;
  bool has_radiant_team_complete() const;
  void clear_radiant_team_complete();
  static const int kRadiantTeamCompleteFieldNumber = 27;
  ::google::protobuf::uint32 radiant_team_complete() const;
  void set_radiant_team_complete(::google::protobuf::uint32 value);

  // optional uint32 dire_team_complete = 28;
  bool has_dire_team_complete() const;
  void clear_dire_team_complete();
  static const int kDireTeamCompleteFieldNumber = 28;
  ::google::protobuf::uint32 dire_team_complete() const;
  void set_dire_team_complete(::google::protobuf::uint32 value);

  // optional uint32 positive_votes = 29;
  bool has_positive_votes() const;
  void clear_positive_votes();
  static const int kPositiveVotesFieldNumber = 29;
  ::google::protobuf::uint32 positive_votes() const;
  void set_positive_votes(::google::protobuf::uint32 value);

  // optional uint32 negative_votes = 30;
  bool has_negative_votes() const;
  void clear_negative_votes();
  static const int kNegativeVotesFieldNumber = 30;
  ::google::protobuf::uint32 negative_votes() const;
  void set_negative_votes(::google::protobuf::uint32 value);

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 31;
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  bool has_replay_state() const;
  void clear_replay_state();
  static const int kReplayStateFieldNumber = 34;
  ::CMsgDOTAMatch_ReplayState replay_state() const;
  void set_replay_state(::CMsgDOTAMatch_ReplayState value);

  // optional uint64 match_seq_num = 33;
  bool has_match_seq_num() const;
  void clear_match_seq_num();
  static const int kMatchSeqNumFieldNumber = 33;
  ::google::protobuf::uint64 match_seq_num() const;
  void set_match_seq_num(::google::protobuf::uint64 value);

  // optional uint32 radiant_guild_id = 35;
  bool has_radiant_guild_id() const;
  void clear_radiant_guild_id();
  static const int kRadiantGuildIdFieldNumber = 35;
  ::google::protobuf::uint32 radiant_guild_id() const;
  void set_radiant_guild_id(::google::protobuf::uint32 value);

  // optional uint32 dire_guild_id = 36;
  bool has_dire_guild_id() const;
  void clear_dire_guild_id();
  static const int kDireGuildIdFieldNumber = 36;
  ::google::protobuf::uint32 dire_guild_id() const;
  void set_dire_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch)
 private:
  void set_has_good_guys_win();
  void clear_has_good_guys_win();
  void set_has_duration();
  void clear_has_duration();
  void set_has_starttime();
  void clear_has_starttime();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_cluster();
  void clear_has_cluster();
  void set_has_first_blood_time();
  void clear_has_first_blood_time();
  void set_has_replay_salt();
  void clear_has_replay_salt();
  void set_has_server_ip();
  void clear_has_server_ip();
  void set_has_server_port();
  void clear_has_server_port();
  void set_has_lobby_type();
  void clear_has_lobby_type();
  void set_has_human_players();
  void clear_has_human_players();
  void set_has_average_skill();
  void clear_has_average_skill();
  void set_has_game_balance();
  void clear_has_game_balance();
  void set_has_radiant_team_id();
  void clear_has_radiant_team_id();
  void set_has_dire_team_id();
  void clear_has_dire_team_id();
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_radiant_team_name();
  void clear_has_radiant_team_name();
  void set_has_dire_team_name();
  void clear_has_dire_team_name();
  void set_has_radiant_team_logo();
  void clear_has_radiant_team_logo();
  void set_has_dire_team_logo();
  void clear_has_dire_team_logo();
  void set_has_radiant_team_complete();
  void clear_has_radiant_team_complete();
  void set_has_dire_team_complete();
  void clear_has_dire_team_complete();
  void set_has_positive_votes();
  void clear_has_positive_votes();
  void set_has_negative_votes();
  void clear_has_negative_votes();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_match_seq_num();
  void clear_has_match_seq_num();
  void set_has_replay_state();
  void clear_has_replay_state();
  void set_has_radiant_guild_id();
  void clear_has_radiant_guild_id();
  void set_has_dire_guild_id();
  void clear_has_dire_guild_id();
  void set_has_radiant_team_tag();
  void clear_has_radiant_team_tag();
  void set_has_dire_team_tag();
  void clear_has_dire_team_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player > players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tower_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > barracks_status_;
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_name_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_name_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_tag_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_tag_;
  bool good_guys_win_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 cluster_;
  ::google::protobuf::uint32 first_blood_time_;
  ::google::protobuf::uint32 replay_salt_;
  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 human_players_;
  ::google::protobuf::uint32 average_skill_;
  float game_balance_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 radiant_team_complete_;
  ::google::protobuf::uint32 dire_team_complete_;
  ::google::protobuf::uint32 positive_votes_;
  ::google::protobuf::uint32 negative_votes_;
  int game_mode_;
  int replay_state_;
  ::google::protobuf::uint64 match_seq_num_;
  ::google::protobuf::uint32 radiant_guild_id_;
  ::google::protobuf::uint32 dire_guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerMatchHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerMatchHistory) */ {
 public:
  CMsgDOTAPlayerMatchHistory();
  virtual ~CMsgDOTAPlayerMatchHistory();

  CMsgDOTAPlayerMatchHistory(const CMsgDOTAPlayerMatchHistory& from);

  inline CMsgDOTAPlayerMatchHistory& operator=(const CMsgDOTAPlayerMatchHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPlayerMatchHistory(CMsgDOTAPlayerMatchHistory&& from) noexcept
    : CMsgDOTAPlayerMatchHistory() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerMatchHistory& operator=(CMsgDOTAPlayerMatchHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPlayerMatchHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPlayerMatchHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerMatchHistory*>(
               &_CMsgDOTAPlayerMatchHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(CMsgDOTAPlayerMatchHistory* other);
  friend void swap(CMsgDOTAPlayerMatchHistory& a, CMsgDOTAPlayerMatchHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerMatchHistory* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPlayerMatchHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPlayerMatchHistory& from);
  void MergeFrom(const CMsgDOTAPlayerMatchHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPlayerMatchHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 match_ids = 1;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  ::google::protobuf::uint32 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint32 value);
  void add_match_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_match_ids();

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerMatchHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > match_ids_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPlayerMatchHistoryImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatchHistoryFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchHistoryFilter) */ {
 public:
  CMsgDOTAMatchHistoryFilter();
  virtual ~CMsgDOTAMatchHistoryFilter();

  CMsgDOTAMatchHistoryFilter(const CMsgDOTAMatchHistoryFilter& from);

  inline CMsgDOTAMatchHistoryFilter& operator=(const CMsgDOTAMatchHistoryFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchHistoryFilter(CMsgDOTAMatchHistoryFilter&& from) noexcept
    : CMsgDOTAMatchHistoryFilter() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchHistoryFilter& operator=(CMsgDOTAMatchHistoryFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchHistoryFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchHistoryFilter* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchHistoryFilter*>(
               &_CMsgDOTAMatchHistoryFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(CMsgDOTAMatchHistoryFilter* other);
  friend void swap(CMsgDOTAMatchHistoryFilter& a, CMsgDOTAMatchHistoryFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchHistoryFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchHistoryFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchHistoryFilter& from);
  void MergeFrom(const CMsgDOTAMatchHistoryFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchHistoryFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 match_ids = 1;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  ::google::protobuf::uint32 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint32 value);
  void add_match_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_match_ids();

  // optional uint32 newest_match_id_at_last_query = 2;
  bool has_newest_match_id_at_last_query() const;
  void clear_newest_match_id_at_last_query();
  static const int kNewestMatchIdAtLastQueryFieldNumber = 2;
  ::google::protobuf::uint32 newest_match_id_at_last_query() const;
  void set_newest_match_id_at_last_query(::google::protobuf::uint32 value);

  // optional uint32 time_last_query = 3;
  bool has_time_last_query() const;
  void clear_time_last_query();
  static const int kTimeLastQueryFieldNumber = 3;
  ::google::protobuf::uint32 time_last_query() const;
  void set_time_last_query(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchHistoryFilter)
 private:
  void set_has_newest_match_id_at_last_query();
  void clear_has_newest_match_id_at_last_query();
  void set_has_time_last_query();
  void clear_has_time_last_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > match_ids_;
  ::google::protobuf::uint32 newest_match_id_at_last_query_;
  ::google::protobuf::uint32 time_last_query_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchHistoryFilterImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestMatches : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestMatches) */ {
 public:
  CMsgDOTARequestMatches();
  virtual ~CMsgDOTARequestMatches();

  CMsgDOTARequestMatches(const CMsgDOTARequestMatches& from);

  inline CMsgDOTARequestMatches& operator=(const CMsgDOTARequestMatches& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestMatches(CMsgDOTARequestMatches&& from) noexcept
    : CMsgDOTARequestMatches() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestMatches& operator=(CMsgDOTARequestMatches&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestMatches& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestMatches* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestMatches*>(
               &_CMsgDOTARequestMatches_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(CMsgDOTARequestMatches* other);
  friend void swap(CMsgDOTARequestMatches& a, CMsgDOTARequestMatches& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestMatches* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestMatches* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestMatches& from);
  void MergeFrom(const CMsgDOTARequestMatches& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestMatches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestMatches_SkillLevel SkillLevel;
  static const SkillLevel Any =
    CMsgDOTARequestMatches_SkillLevel_Any;
  static const SkillLevel Normal =
    CMsgDOTARequestMatches_SkillLevel_Normal;
  static const SkillLevel High =
    CMsgDOTARequestMatches_SkillLevel_High;
  static const SkillLevel VeryHigh =
    CMsgDOTARequestMatches_SkillLevel_VeryHigh;
  static inline bool SkillLevel_IsValid(int value) {
    return CMsgDOTARequestMatches_SkillLevel_IsValid(value);
  }
  static const SkillLevel SkillLevel_MIN =
    CMsgDOTARequestMatches_SkillLevel_SkillLevel_MIN;
  static const SkillLevel SkillLevel_MAX =
    CMsgDOTARequestMatches_SkillLevel_SkillLevel_MAX;
  static const int SkillLevel_ARRAYSIZE =
    CMsgDOTARequestMatches_SkillLevel_SkillLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SkillLevel_descriptor() {
    return CMsgDOTARequestMatches_SkillLevel_descriptor();
  }
  static inline const ::std::string& SkillLevel_Name(SkillLevel value) {
    return CMsgDOTARequestMatches_SkillLevel_Name(value);
  }
  static inline bool SkillLevel_Parse(const ::std::string& name,
      SkillLevel* value) {
    return CMsgDOTARequestMatches_SkillLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string player_name = 1;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 1;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 3;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional fixed32 date_min = 6;
  bool has_date_min() const;
  void clear_date_min();
  static const int kDateMinFieldNumber = 6;
  ::google::protobuf::uint32 date_min() const;
  void set_date_min(::google::protobuf::uint32 value);

  // optional fixed32 date_max = 7;
  bool has_date_max() const;
  void clear_date_max();
  static const int kDateMaxFieldNumber = 7;
  ::google::protobuf::uint32 date_max() const;
  void set_date_max(::google::protobuf::uint32 value);

  // optional uint32 matches_requested = 10;
  bool has_matches_requested() const;
  void clear_matches_requested();
  static const int kMatchesRequestedFieldNumber = 10;
  ::google::protobuf::uint32 matches_requested() const;
  void set_matches_requested(::google::protobuf::uint32 value);

  // optional bool friends_only = 8;
  bool has_friends_only() const;
  void clear_friends_only();
  static const int kFriendsOnlyFieldNumber = 8;
  bool friends_only() const;
  void set_friends_only(bool value);

  // optional bool recently_played_only = 9;
  bool has_recently_played_only() const;
  void clear_recently_played_only();
  static const int kRecentlyPlayedOnlyFieldNumber = 9;
  bool recently_played_only() const;
  void set_recently_played_only(bool value);

  // optional bool tournament_games_only = 14;
  bool has_tournament_games_only() const;
  void clear_tournament_games_only();
  static const int kTournamentGamesOnlyFieldNumber = 14;
  bool tournament_games_only() const;
  void set_tournament_games_only(bool value);

  // optional uint32 start_at_match_id = 11;
  bool has_start_at_match_id() const;
  void clear_start_at_match_id();
  static const int kStartAtMatchIdFieldNumber = 11;
  ::google::protobuf::uint32 start_at_match_id() const;
  void set_start_at_match_id(::google::protobuf::uint32 value);

  // optional fixed32 min_players = 12;
  bool has_min_players() const;
  void clear_min_players();
  static const int kMinPlayersFieldNumber = 12;
  ::google::protobuf::uint32 min_players() const;
  void set_min_players(::google::protobuf::uint32 value);

  // optional uint32 request_id = 13;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 13;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // optional uint32 account_id = 15;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 15;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 16;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 16;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional .CMsgDOTARequestMatches.SkillLevel skill = 17 [default = Any];
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 17;
  ::CMsgDOTARequestMatches_SkillLevel skill() const;
  void set_skill(::CMsgDOTARequestMatches_SkillLevel value);

  // optional uint32 team_id = 18;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 18;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestMatches)
 private:
  void set_has_player_name();
  void clear_has_player_name();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_date_min();
  void clear_has_date_min();
  void set_has_date_max();
  void clear_has_date_max();
  void set_has_friends_only();
  void clear_has_friends_only();
  void set_has_recently_played_only();
  void clear_has_recently_played_only();
  void set_has_matches_requested();
  void clear_has_matches_requested();
  void set_has_start_at_match_id();
  void clear_has_start_at_match_id();
  void set_has_min_players();
  void clear_has_min_players();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_tournament_games_only();
  void clear_has_tournament_games_only();
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_skill();
  void clear_has_skill();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 date_min_;
  ::google::protobuf::uint32 date_max_;
  ::google::protobuf::uint32 matches_requested_;
  bool friends_only_;
  bool recently_played_only_;
  bool tournament_games_only_;
  ::google::protobuf::uint32 start_at_match_id_;
  ::google::protobuf::uint32 min_players_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 league_id_;
  int skill_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestMatchesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestMatchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestMatchesResponse) */ {
 public:
  CMsgDOTARequestMatchesResponse();
  virtual ~CMsgDOTARequestMatchesResponse();

  CMsgDOTARequestMatchesResponse(const CMsgDOTARequestMatchesResponse& from);

  inline CMsgDOTARequestMatchesResponse& operator=(const CMsgDOTARequestMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestMatchesResponse(CMsgDOTARequestMatchesResponse&& from) noexcept
    : CMsgDOTARequestMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestMatchesResponse& operator=(CMsgDOTARequestMatchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestMatchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestMatchesResponse*>(
               &_CMsgDOTARequestMatchesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(CMsgDOTARequestMatchesResponse* other);
  friend void swap(CMsgDOTARequestMatchesResponse& a, CMsgDOTARequestMatchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestMatchesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestMatchesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestMatchesResponse& from);
  void MergeFrom(const CMsgDOTARequestMatchesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatch matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::CMsgDOTAMatch& matches(int index) const;
  ::CMsgDOTAMatch* mutable_matches(int index);
  ::CMsgDOTAMatch* add_matches();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
      matches() const;

  // optional uint32 request_id = 2;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // optional uint32 total_results = 3;
  bool has_total_results() const;
  void clear_total_results();
  static const int kTotalResultsFieldNumber = 3;
  ::google::protobuf::uint32 total_results() const;
  void set_total_results(::google::protobuf::uint32 value);

  // optional uint32 results_remaining = 4;
  bool has_results_remaining() const;
  void clear_results_remaining();
  static const int kResultsRemainingFieldNumber = 4;
  ::google::protobuf::uint32 results_remaining() const;
  void set_results_remaining(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestMatchesResponse)
 private:
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_total_results();
  void clear_has_total_results();
  void set_has_results_remaining();
  void clear_has_results_remaining();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch > matches_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 total_results_;
  ::google::protobuf::uint32 results_remaining_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestMatchesResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPopup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPopup) */ {
 public:
  CMsgDOTAPopup();
  virtual ~CMsgDOTAPopup();

  CMsgDOTAPopup(const CMsgDOTAPopup& from);

  inline CMsgDOTAPopup& operator=(const CMsgDOTAPopup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPopup(CMsgDOTAPopup&& from) noexcept
    : CMsgDOTAPopup() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPopup& operator=(CMsgDOTAPopup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPopup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPopup* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPopup*>(
               &_CMsgDOTAPopup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(CMsgDOTAPopup* other);
  friend void swap(CMsgDOTAPopup& a, CMsgDOTAPopup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPopup* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPopup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPopup& from);
  void MergeFrom(const CMsgDOTAPopup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPopup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAPopup_PopupID PopupID;
  static const PopupID KICKED_FROM_LOBBY =
    CMsgDOTAPopup_PopupID_KICKED_FROM_LOBBY;
  static const PopupID KICKED_FROM_PARTY =
    CMsgDOTAPopup_PopupID_KICKED_FROM_PARTY;
  static const PopupID KICKED_FROM_TEAM =
    CMsgDOTAPopup_PopupID_KICKED_FROM_TEAM;
  static const PopupID TEAM_WAS_DISBANDED =
    CMsgDOTAPopup_PopupID_TEAM_WAS_DISBANDED;
  static const PopupID TEAM_MATCHMAKE_ALREADY_MATCH =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_MATCH;
  static const PopupID TEAM_MATCHMAKE_ALREADY_FINDING =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_FINDING;
  static const PopupID TEAM_MATCHMAKE_FULL =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FULL;
  static const PopupID TEAM_MATCHMAKE_FAIL_ADD =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_ADD;
  static const PopupID TEAM_MATCHMAKE_FAIL_ADD_CURRENT =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_ADD_CURRENT;
  static const PopupID TEAM_MATCHMAKE_FAILED_TEAM_MEMBER =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAILED_TEAM_MEMBER;
  static const PopupID TEAM_MATCHMAKE_ALREADY_GAME =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_ALREADY_GAME;
  static const PopupID TEAM_MATCHMAKE_FAIL_GET_PARTY =
    CMsgDOTAPopup_PopupID_TEAM_MATCHMAKE_FAIL_GET_PARTY;
  static const PopupID MATCHMAKING_DISABLED =
    CMsgDOTAPopup_PopupID_MATCHMAKING_DISABLED;
  static const PopupID INVITE_DENIED =
    CMsgDOTAPopup_PopupID_INVITE_DENIED;
  static const PopupID PARTY_FULL =
    CMsgDOTAPopup_PopupID_PARTY_FULL;
  static const PopupID MADE_ADMIN =
    CMsgDOTAPopup_PopupID_MADE_ADMIN;
  static const PopupID NEED_TO_PURCHASE =
    CMsgDOTAPopup_PopupID_NEED_TO_PURCHASE;
  static const PopupID SIGNON_MESSAGE =
    CMsgDOTAPopup_PopupID_SIGNON_MESSAGE;
  static const PopupID GUILD_KICKED =
    CMsgDOTAPopup_PopupID_GUILD_KICKED;
  static const PopupID MATCHMAKING_REGION_OFFLINE =
    CMsgDOTAPopup_PopupID_MATCHMAKING_REGION_OFFLINE;
  static inline bool PopupID_IsValid(int value) {
    return CMsgDOTAPopup_PopupID_IsValid(value);
  }
  static const PopupID PopupID_MIN =
    CMsgDOTAPopup_PopupID_PopupID_MIN;
  static const PopupID PopupID_MAX =
    CMsgDOTAPopup_PopupID_PopupID_MAX;
  static const int PopupID_ARRAYSIZE =
    CMsgDOTAPopup_PopupID_PopupID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PopupID_descriptor() {
    return CMsgDOTAPopup_PopupID_descriptor();
  }
  static inline const ::std::string& PopupID_Name(PopupID value) {
    return CMsgDOTAPopup_PopupID_Name(value);
  }
  static inline bool PopupID_Parse(const ::std::string& name,
      PopupID* value) {
    return CMsgDOTAPopup_PopupID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string custom_text = 2;
  bool has_custom_text() const;
  void clear_custom_text();
  static const int kCustomTextFieldNumber = 2;
  const ::std::string& custom_text() const;
  void set_custom_text(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_text(::std::string&& value);
  #endif
  void set_custom_text(const char* value);
  void set_custom_text(const char* value, size_t size);
  ::std::string* mutable_custom_text();
  ::std::string* release_custom_text();
  void set_allocated_custom_text(::std::string* custom_text);

  // optional .CMsgDOTAPopup.PopupID id = 1 [default = KICKED_FROM_LOBBY];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::CMsgDOTAPopup_PopupID id() const;
  void set_id(::CMsgDOTAPopup_PopupID value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPopup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_custom_text();
  void clear_has_custom_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr custom_text_;
  int id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPopupImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamMemberSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamMemberSDO) */ {
 public:
  CMsgDOTATeamMemberSDO();
  virtual ~CMsgDOTATeamMemberSDO();

  CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from);

  inline CMsgDOTATeamMemberSDO& operator=(const CMsgDOTATeamMemberSDO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamMemberSDO(CMsgDOTATeamMemberSDO&& from) noexcept
    : CMsgDOTATeamMemberSDO() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamMemberSDO& operator=(CMsgDOTATeamMemberSDO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamMemberSDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamMemberSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamMemberSDO*>(
               &_CMsgDOTATeamMemberSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(CMsgDOTATeamMemberSDO* other);
  friend void swap(CMsgDOTATeamMemberSDO& a, CMsgDOTATeamMemberSDO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamMemberSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamMemberSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamMemberSDO& from);
  void MergeFrom(const CMsgDOTATeamMemberSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamMemberSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 team_ids = 2;
  int team_ids_size() const;
  void clear_team_ids();
  static const int kTeamIdsFieldNumber = 2;
  ::google::protobuf::uint32 team_ids(int index) const;
  void set_team_ids(int index, ::google::protobuf::uint32 value);
  void add_team_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      team_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_team_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 profile_team_id = 3;
  bool has_profile_team_id() const;
  void clear_profile_team_id();
  static const int kProfileTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 profile_team_id() const;
  void set_profile_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamMemberSDO)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_profile_team_id();
  void clear_has_profile_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > team_ids_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 profile_team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamMemberSDOImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamAdminSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamAdminSDO) */ {
 public:
  CMsgDOTATeamAdminSDO();
  virtual ~CMsgDOTATeamAdminSDO();

  CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from);

  inline CMsgDOTATeamAdminSDO& operator=(const CMsgDOTATeamAdminSDO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamAdminSDO(CMsgDOTATeamAdminSDO&& from) noexcept
    : CMsgDOTATeamAdminSDO() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamAdminSDO& operator=(CMsgDOTATeamAdminSDO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamAdminSDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamAdminSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamAdminSDO*>(
               &_CMsgDOTATeamAdminSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(CMsgDOTATeamAdminSDO* other);
  friend void swap(CMsgDOTATeamAdminSDO& a, CMsgDOTATeamAdminSDO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamAdminSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamAdminSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamAdminSDO& from);
  void MergeFrom(const CMsgDOTATeamAdminSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamAdminSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 team_ids = 2;
  int team_ids_size() const;
  void clear_team_ids();
  static const int kTeamIdsFieldNumber = 2;
  ::google::protobuf::uint32 team_ids(int index) const;
  void set_team_ids(int index, ::google::protobuf::uint32 value);
  void add_team_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      team_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_team_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamAdminSDO)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > team_ids_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamAdminSDOImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamMember) */ {
 public:
  CMsgDOTATeamMember();
  virtual ~CMsgDOTATeamMember();

  CMsgDOTATeamMember(const CMsgDOTATeamMember& from);

  inline CMsgDOTATeamMember& operator=(const CMsgDOTATeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamMember(CMsgDOTATeamMember&& from) noexcept
    : CMsgDOTATeamMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamMember& operator=(CMsgDOTATeamMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamMember*>(
               &_CMsgDOTATeamMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(CMsgDOTATeamMember* other);
  friend void swap(CMsgDOTATeamMember& a, CMsgDOTATeamMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamMember& from);
  void MergeFrom(const CMsgDOTATeamMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 time_joined = 4;
  bool has_time_joined() const;
  void clear_time_joined();
  static const int kTimeJoinedFieldNumber = 4;
  ::google::protobuf::uint32 time_joined() const;
  void set_time_joined(::google::protobuf::uint32 value);

  // optional bool is_rank_factored_into_team = 5;
  bool has_is_rank_factored_into_team() const;
  void clear_is_rank_factored_into_team();
  static const int kIsRankFactoredIntoTeamFieldNumber = 5;
  bool is_rank_factored_into_team() const;
  void set_is_rank_factored_into_team(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamMember)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_time_joined();
  void clear_has_time_joined();
  void set_has_is_rank_factored_into_team();
  void clear_has_is_rank_factored_into_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 time_joined_;
  bool is_rank_factored_into_team_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamMemberImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeam) */ {
 public:
  CMsgDOTATeam();
  virtual ~CMsgDOTATeam();

  CMsgDOTATeam(const CMsgDOTATeam& from);

  inline CMsgDOTATeam& operator=(const CMsgDOTATeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeam(CMsgDOTATeam&& from) noexcept
    : CMsgDOTATeam() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeam& operator=(CMsgDOTATeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeam*>(
               &_CMsgDOTATeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(CMsgDOTATeam* other);
  friend void swap(CMsgDOTATeam& a, CMsgDOTATeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeam& from);
  void MergeFrom(const CMsgDOTATeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTATeamMember members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  const ::CMsgDOTATeamMember& members(int index) const;
  ::CMsgDOTATeamMember* mutable_members(int index);
  ::CMsgDOTATeamMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamMember >&
      members() const;

  // repeated uint32 leagues = 18;
  int leagues_size() const;
  void clear_leagues();
  static const int kLeaguesFieldNumber = 18;
  ::google::protobuf::uint32 leagues(int index) const;
  void set_leagues(int index, ::google::protobuf::uint32 value);
  void add_leagues(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      leagues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_leagues();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 4;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 15;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 15;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 16;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 16;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 admin_id = 5;
  bool has_admin_id() const;
  void clear_admin_id();
  static const int kAdminIdFieldNumber = 5;
  ::google::protobuf::uint32 admin_id() const;
  void set_admin_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 6;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 6;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional bool disbanded = 7;
  bool has_disbanded() const;
  void clear_disbanded();
  static const int kDisbandedFieldNumber = 7;
  bool disbanded() const;
  void set_disbanded(bool value);

  // optional uint32 wins = 8;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 8;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 9;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 9;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // optional uint64 logo = 11;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 11;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 12;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 12;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 13;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 13;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 rank = 10;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 10;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 fullgamesplayed = 17;
  bool has_fullgamesplayed() const;
  void clear_fullgamesplayed();
  static const int kFullgamesplayedFieldNumber = 17;
  ::google::protobuf::uint32 fullgamesplayed() const;
  void set_fullgamesplayed(::google::protobuf::uint32 value);

  // optional uint64 sponsor_logo = 14;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 14;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // optional uint32 gamesplayed = 19;
  bool has_gamesplayed() const;
  void clear_gamesplayed();
  static const int kGamesplayedFieldNumber = 19;
  ::google::protobuf::uint32 gamesplayed() const;
  void set_gamesplayed(::google::protobuf::uint32 value);

  // optional uint32 gamesplayedwithcurrentroster = 20;
  bool has_gamesplayedwithcurrentroster() const;
  void clear_gamesplayedwithcurrentroster();
  static const int kGamesplayedwithcurrentrosterFieldNumber = 20;
  ::google::protobuf::uint32 gamesplayedwithcurrentroster() const;
  void set_gamesplayedwithcurrentroster(::google::protobuf::uint32 value);

  // optional uint32 teammatchmakinggamesplayed = 21;
  bool has_teammatchmakinggamesplayed() const;
  void clear_teammatchmakinggamesplayed();
  static const int kTeammatchmakinggamesplayedFieldNumber = 21;
  ::google::protobuf::uint32 teammatchmakinggamesplayed() const;
  void set_teammatchmakinggamesplayed(::google::protobuf::uint32 value);

  // optional uint32 lastplayedgametime = 22;
  bool has_lastplayedgametime() const;
  void clear_lastplayedgametime();
  static const int kLastplayedgametimeFieldNumber = 22;
  ::google::protobuf::uint32 lastplayedgametime() const;
  void set_lastplayedgametime(::google::protobuf::uint32 value);

  // optional uint32 lastrenametime = 23;
  bool has_lastrenametime() const;
  void clear_lastrenametime();
  static const int kLastrenametimeFieldNumber = 23;
  ::google::protobuf::uint32 lastrenametime() const;
  void set_lastrenametime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeam)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_admin_id();
  void clear_has_admin_id();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_disbanded();
  void clear_has_disbanded();
  void set_has_wins();
  void clear_has_wins();
  void set_has_losses();
  void clear_has_losses();
  void set_has_rank();
  void clear_has_rank();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_fullgamesplayed();
  void clear_has_fullgamesplayed();
  void set_has_gamesplayed();
  void clear_has_gamesplayed();
  void set_has_gamesplayedwithcurrentroster();
  void clear_has_gamesplayedwithcurrentroster();
  void set_has_teammatchmakinggamesplayed();
  void clear_has_teammatchmakinggamesplayed();
  void set_has_lastplayedgametime();
  void clear_has_lastplayedgametime();
  void set_has_lastrenametime();
  void clear_has_lastrenametime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > leagues_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 admin_id_;
  ::google::protobuf::uint32 time_created_;
  bool disbanded_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 fullgamesplayed_;
  ::google::protobuf::uint64 sponsor_logo_;
  ::google::protobuf::uint32 gamesplayed_;
  ::google::protobuf::uint32 gamesplayedwithcurrentroster_;
  ::google::protobuf::uint32 teammatchmakinggamesplayed_;
  ::google::protobuf::uint32 lastplayedgametime_;
  ::google::protobuf::uint32 lastrenametime_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTACreateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTACreateTeam) */ {
 public:
  CMsgDOTACreateTeam();
  virtual ~CMsgDOTACreateTeam();

  CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from);

  inline CMsgDOTACreateTeam& operator=(const CMsgDOTACreateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTACreateTeam(CMsgDOTACreateTeam&& from) noexcept
    : CMsgDOTACreateTeam() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACreateTeam& operator=(CMsgDOTACreateTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACreateTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTACreateTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateTeam*>(
               &_CMsgDOTACreateTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(CMsgDOTACreateTeam* other);
  friend void swap(CMsgDOTACreateTeam& a, CMsgDOTACreateTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTACreateTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTACreateTeam& from);
  void MergeFrom(const CMsgDOTACreateTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTACreateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 7;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 8;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 logo = 3;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 3;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 4;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 4;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 5;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 5;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 6;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 6;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTACreateTeam)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTACreateTeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTACreateTeamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTACreateTeamResponse) */ {
 public:
  CMsgDOTACreateTeamResponse();
  virtual ~CMsgDOTACreateTeamResponse();

  CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from);

  inline CMsgDOTACreateTeamResponse& operator=(const CMsgDOTACreateTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTACreateTeamResponse(CMsgDOTACreateTeamResponse&& from) noexcept
    : CMsgDOTACreateTeamResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACreateTeamResponse& operator=(CMsgDOTACreateTeamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACreateTeamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTACreateTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateTeamResponse*>(
               &_CMsgDOTACreateTeamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(CMsgDOTACreateTeamResponse* other);
  friend void swap(CMsgDOTACreateTeamResponse& a, CMsgDOTACreateTeamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateTeamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTACreateTeamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTACreateTeamResponse& from);
  void MergeFrom(const CMsgDOTACreateTeamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTACreateTeamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTACreateTeamResponse_Result Result;
  static const Result INVALID =
    CMsgDOTACreateTeamResponse_Result_INVALID;
  static const Result SUCCESS =
    CMsgDOTACreateTeamResponse_Result_SUCCESS;
  static const Result NAME_EMPTY =
    CMsgDOTACreateTeamResponse_Result_NAME_EMPTY;
  static const Result NAME_BAD_CHARACTERS =
    CMsgDOTACreateTeamResponse_Result_NAME_BAD_CHARACTERS;
  static const Result NAME_TAKEN =
    CMsgDOTACreateTeamResponse_Result_NAME_TAKEN;
  static const Result NAME_TOO_LONG =
    CMsgDOTACreateTeamResponse_Result_NAME_TOO_LONG;
  static const Result TAG_EMPTY =
    CMsgDOTACreateTeamResponse_Result_TAG_EMPTY;
  static const Result TAG_BAD_CHARACTERS =
    CMsgDOTACreateTeamResponse_Result_TAG_BAD_CHARACTERS;
  static const Result TAG_TAKEN =
    CMsgDOTACreateTeamResponse_Result_TAG_TAKEN;
  static const Result TAG_TOO_LONG =
    CMsgDOTACreateTeamResponse_Result_TAG_TOO_LONG;
  static const Result CREATOR_BUSY =
    CMsgDOTACreateTeamResponse_Result_CREATOR_BUSY;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTACreateTeamResponse_Result_UNSPECIFIED_ERROR;
  static const Result CREATOR_TEAM_LIMIT_REACHED =
    CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_LIMIT_REACHED;
  static const Result NO_LOGO =
    CMsgDOTACreateTeamResponse_Result_NO_LOGO;
  static const Result CREATOR_TEAM_CREATION_COOLDOWN =
    CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_CREATION_COOLDOWN;
  static const Result LOGO_UPLOAD_FAILED =
    CMsgDOTACreateTeamResponse_Result_LOGO_UPLOAD_FAILED;
  static const Result NAME_CHANGED_TOO_RECENTLY =
    CMsgDOTACreateTeamResponse_Result_NAME_CHANGED_TOO_RECENTLY;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTACreateTeamResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTACreateTeamResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTACreateTeamResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTACreateTeamResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTACreateTeamResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTACreateTeamResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTACreateTeamResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTACreateTeamResponse.Result results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::CMsgDOTACreateTeamResponse_Result results(int index) const;
  void set_results(int index, ::CMsgDOTACreateTeamResponse_Result value);
  void add_results(::CMsgDOTACreateTeamResponse_Result value);
  const ::google::protobuf::RepeatedField<int>& results() const;
  ::google::protobuf::RepeatedField<int>* mutable_results();

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 seconds_remaining = 3;
  bool has_seconds_remaining() const;
  void clear_seconds_remaining();
  static const int kSecondsRemainingFieldNumber = 3;
  ::google::protobuf::uint32 seconds_remaining() const;
  void set_seconds_remaining(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTACreateTeamResponse)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_seconds_remaining();
  void clear_has_seconds_remaining();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> results_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 seconds_remaining_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTACreateTeamResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditTeam) */ {
 public:
  CMsgDOTAEditTeam();
  virtual ~CMsgDOTAEditTeam();

  CMsgDOTAEditTeam(const CMsgDOTAEditTeam& from);

  inline CMsgDOTAEditTeam& operator=(const CMsgDOTAEditTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAEditTeam(CMsgDOTAEditTeam&& from) noexcept
    : CMsgDOTAEditTeam() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditTeam& operator=(CMsgDOTAEditTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAEditTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeam*>(
               &_CMsgDOTAEditTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(CMsgDOTAEditTeam* other);
  friend void swap(CMsgDOTAEditTeam& a, CMsgDOTAEditTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeam& from);
  void MergeFrom(const CMsgDOTAEditTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 7;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 8;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 logo = 3;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 3;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 4;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 4;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 5;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 5;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 6;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 6;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 9;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 9;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditTeam)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAEditTeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamLogo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditTeamLogo) */ {
 public:
  CMsgDOTAEditTeamLogo();
  virtual ~CMsgDOTAEditTeamLogo();

  CMsgDOTAEditTeamLogo(const CMsgDOTAEditTeamLogo& from);

  inline CMsgDOTAEditTeamLogo& operator=(const CMsgDOTAEditTeamLogo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAEditTeamLogo(CMsgDOTAEditTeamLogo&& from) noexcept
    : CMsgDOTAEditTeamLogo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditTeamLogo& operator=(CMsgDOTAEditTeamLogo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamLogo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAEditTeamLogo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamLogo*>(
               &_CMsgDOTAEditTeamLogo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(CMsgDOTAEditTeamLogo* other);
  friend void swap(CMsgDOTAEditTeamLogo& a, CMsgDOTAEditTeamLogo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamLogo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamLogo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamLogo& from);
  void MergeFrom(const CMsgDOTAEditTeamLogo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamLogo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 logo = 1;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 1;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 2;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 2;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 3;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 3;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 4;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 4;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditTeamLogo)
 private:
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAEditTeamLogoImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamLogoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditTeamLogoResponse) */ {
 public:
  CMsgDOTAEditTeamLogoResponse();
  virtual ~CMsgDOTAEditTeamLogoResponse();

  CMsgDOTAEditTeamLogoResponse(const CMsgDOTAEditTeamLogoResponse& from);

  inline CMsgDOTAEditTeamLogoResponse& operator=(const CMsgDOTAEditTeamLogoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAEditTeamLogoResponse(CMsgDOTAEditTeamLogoResponse&& from) noexcept
    : CMsgDOTAEditTeamLogoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditTeamLogoResponse& operator=(CMsgDOTAEditTeamLogoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamLogoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAEditTeamLogoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamLogoResponse*>(
               &_CMsgDOTAEditTeamLogoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(CMsgDOTAEditTeamLogoResponse* other);
  friend void swap(CMsgDOTAEditTeamLogoResponse& a, CMsgDOTAEditTeamLogoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamLogoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamLogoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamLogoResponse& from);
  void MergeFrom(const CMsgDOTAEditTeamLogoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamLogoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAEditTeamLogoResponse_Result Result;
  static const Result INVALID =
    CMsgDOTAEditTeamLogoResponse_Result_INVALID;
  static const Result SUCCESS =
    CMsgDOTAEditTeamLogoResponse_Result_SUCCESS;
  static const Result CREATOR_BUSY =
    CMsgDOTAEditTeamLogoResponse_Result_CREATOR_BUSY;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTAEditTeamLogoResponse_Result_UNSPECIFIED_ERROR;
  static const Result NO_LOGO =
    CMsgDOTAEditTeamLogoResponse_Result_NO_LOGO;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAEditTeamLogoResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAEditTeamLogoResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAEditTeamLogoResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAEditTeamLogoResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAEditTeamLogoResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAEditTeamLogoResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAEditTeamLogoResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAEditTeamLogoResponse.Result results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::CMsgDOTAEditTeamLogoResponse_Result results(int index) const;
  void set_results(int index, ::CMsgDOTAEditTeamLogoResponse_Result value);
  void add_results(::CMsgDOTAEditTeamLogoResponse_Result value);
  const ::google::protobuf::RepeatedField<int>& results() const;
  ::google::protobuf::RepeatedField<int>* mutable_results();

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditTeamLogoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> results_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAEditTeamLogoResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditTeamDetails) */ {
 public:
  CMsgDOTAEditTeamDetails();
  virtual ~CMsgDOTAEditTeamDetails();

  CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from);

  inline CMsgDOTAEditTeamDetails& operator=(const CMsgDOTAEditTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAEditTeamDetails(CMsgDOTAEditTeamDetails&& from) noexcept
    : CMsgDOTAEditTeamDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditTeamDetails& operator=(CMsgDOTAEditTeamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAEditTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamDetails*>(
               &_CMsgDOTAEditTeamDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(CMsgDOTAEditTeamDetails* other);
  friend void swap(CMsgDOTAEditTeamDetails& a, CMsgDOTAEditTeamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamDetails& from);
  void MergeFrom(const CMsgDOTAEditTeamDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country_code = 1;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditTeamDetails)
 private:
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAEditTeamDetailsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamDetailsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditTeamDetailsResponse) */ {
 public:
  CMsgDOTAEditTeamDetailsResponse();
  virtual ~CMsgDOTAEditTeamDetailsResponse();

  CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from);

  inline CMsgDOTAEditTeamDetailsResponse& operator=(const CMsgDOTAEditTeamDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAEditTeamDetailsResponse(CMsgDOTAEditTeamDetailsResponse&& from) noexcept
    : CMsgDOTAEditTeamDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditTeamDetailsResponse& operator=(CMsgDOTAEditTeamDetailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAEditTeamDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamDetailsResponse*>(
               &_CMsgDOTAEditTeamDetailsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(CMsgDOTAEditTeamDetailsResponse* other);
  friend void swap(CMsgDOTAEditTeamDetailsResponse& a, CMsgDOTAEditTeamDetailsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamDetailsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamDetailsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from);
  void MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamDetailsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAEditTeamDetailsResponse_Result Result;
  static const Result INVALID =
    CMsgDOTAEditTeamDetailsResponse_Result_INVALID;
  static const Result SUCCESS =
    CMsgDOTAEditTeamDetailsResponse_Result_SUCCESS;
  static const Result CREATOR_BUSY =
    CMsgDOTAEditTeamDetailsResponse_Result_CREATOR_BUSY;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTAEditTeamDetailsResponse_Result_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAEditTeamDetailsResponse.Result results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::CMsgDOTAEditTeamDetailsResponse_Result results(int index) const;
  void set_results(int index, ::CMsgDOTAEditTeamDetailsResponse_Result value);
  void add_results(::CMsgDOTAEditTeamDetailsResponse_Result value);
  const ::google::protobuf::RepeatedField<int>& results() const;
  ::google::protobuf::RepeatedField<int>* mutable_results();

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditTeamDetailsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> results_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAEditTeamDetailsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTADisbandTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADisbandTeam) */ {
 public:
  CMsgDOTADisbandTeam();
  virtual ~CMsgDOTADisbandTeam();

  CMsgDOTADisbandTeam(const CMsgDOTADisbandTeam& from);

  inline CMsgDOTADisbandTeam& operator=(const CMsgDOTADisbandTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADisbandTeam(CMsgDOTADisbandTeam&& from) noexcept
    : CMsgDOTADisbandTeam() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADisbandTeam& operator=(CMsgDOTADisbandTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADisbandTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADisbandTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADisbandTeam*>(
               &_CMsgDOTADisbandTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(CMsgDOTADisbandTeam* other);
  friend void swap(CMsgDOTADisbandTeam& a, CMsgDOTADisbandTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADisbandTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTADisbandTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTADisbandTeam& from);
  void MergeFrom(const CMsgDOTADisbandTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTADisbandTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTADisbandTeam)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTADisbandTeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTADisbandTeamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADisbandTeamResponse) */ {
 public:
  CMsgDOTADisbandTeamResponse();
  virtual ~CMsgDOTADisbandTeamResponse();

  CMsgDOTADisbandTeamResponse(const CMsgDOTADisbandTeamResponse& from);

  inline CMsgDOTADisbandTeamResponse& operator=(const CMsgDOTADisbandTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADisbandTeamResponse(CMsgDOTADisbandTeamResponse&& from) noexcept
    : CMsgDOTADisbandTeamResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADisbandTeamResponse& operator=(CMsgDOTADisbandTeamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADisbandTeamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADisbandTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADisbandTeamResponse*>(
               &_CMsgDOTADisbandTeamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(CMsgDOTADisbandTeamResponse* other);
  friend void swap(CMsgDOTADisbandTeamResponse& a, CMsgDOTADisbandTeamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADisbandTeamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTADisbandTeamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTADisbandTeamResponse& from);
  void MergeFrom(const CMsgDOTADisbandTeamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTADisbandTeamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTADisbandTeamResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTADisbandTeamResponse_Result_SUCCESS;
  static const Result FAILURE =
    CMsgDOTADisbandTeamResponse_Result_FAILURE;
  static const Result FAILURE_NOT_EMPTY =
    CMsgDOTADisbandTeamResponse_Result_FAILURE_NOT_EMPTY;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTADisbandTeamResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTADisbandTeamResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTADisbandTeamResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTADisbandTeamResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTADisbandTeamResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTADisbandTeamResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTADisbandTeamResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .CMsgDOTADisbandTeamResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTADisbandTeamResponse_Result result() const;
  void set_result(::CMsgDOTADisbandTeamResponse_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTADisbandTeamResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_team_name();
  void clear_has_team_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTADisbandTeamResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestTeamData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestTeamData) */ {
 public:
  CMsgDOTARequestTeamData();
  virtual ~CMsgDOTARequestTeamData();

  CMsgDOTARequestTeamData(const CMsgDOTARequestTeamData& from);

  inline CMsgDOTARequestTeamData& operator=(const CMsgDOTARequestTeamData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestTeamData(CMsgDOTARequestTeamData&& from) noexcept
    : CMsgDOTARequestTeamData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestTeamData& operator=(CMsgDOTARequestTeamData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestTeamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestTeamData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestTeamData*>(
               &_CMsgDOTARequestTeamData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(CMsgDOTARequestTeamData* other);
  friend void swap(CMsgDOTARequestTeamData& a, CMsgDOTARequestTeamData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestTeamData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestTeamData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestTeamData& from);
  void MergeFrom(const CMsgDOTARequestTeamData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestTeamData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestTeamData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestTeamDataImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestTeamDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestTeamDataResponse) */ {
 public:
  CMsgDOTARequestTeamDataResponse();
  virtual ~CMsgDOTARequestTeamDataResponse();

  CMsgDOTARequestTeamDataResponse(const CMsgDOTARequestTeamDataResponse& from);

  inline CMsgDOTARequestTeamDataResponse& operator=(const CMsgDOTARequestTeamDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestTeamDataResponse(CMsgDOTARequestTeamDataResponse&& from) noexcept
    : CMsgDOTARequestTeamDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestTeamDataResponse& operator=(CMsgDOTARequestTeamDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestTeamDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestTeamDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestTeamDataResponse*>(
               &_CMsgDOTARequestTeamDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(CMsgDOTARequestTeamDataResponse* other);
  friend void swap(CMsgDOTARequestTeamDataResponse& a, CMsgDOTARequestTeamDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestTeamDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestTeamDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestTeamDataResponse& from);
  void MergeFrom(const CMsgDOTARequestTeamDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestTeamDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestTeamDataResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTARequestTeamDataResponse_Result_SUCCESS;
  static const Result FAILURE =
    CMsgDOTARequestTeamDataResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTARequestTeamDataResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTARequestTeamDataResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTARequestTeamDataResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTARequestTeamDataResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTARequestTeamDataResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTARequestTeamDataResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTARequestTeamDataResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTATeamData data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::CMsgDOTATeamData& data(int index) const;
  ::CMsgDOTATeamData* mutable_data(int index);
  ::CMsgDOTATeamData* add_data();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamData >&
      data() const;

  // optional .CMsgDOTARequestTeamDataResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTARequestTeamDataResponse_Result result() const;
  void set_result(::CMsgDOTARequestTeamDataResponse_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestTeamDataResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamData > data_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestTeamDataResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamData) */ {
 public:
  CMsgDOTATeamData();
  virtual ~CMsgDOTATeamData();

  CMsgDOTATeamData(const CMsgDOTATeamData& from);

  inline CMsgDOTATeamData& operator=(const CMsgDOTATeamData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamData(CMsgDOTATeamData&& from) noexcept
    : CMsgDOTATeamData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamData& operator=(CMsgDOTATeamData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamData*>(
               &_CMsgDOTATeamData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(CMsgDOTATeamData* other);
  friend void swap(CMsgDOTATeamData& a, CMsgDOTATeamData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamData& from);
  void MergeFrom(const CMsgDOTATeamData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTATeam team = 3;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 3;
  const ::CMsgDOTATeam& team() const;
  ::CMsgDOTATeam* release_team();
  ::CMsgDOTATeam* mutable_team();
  void set_allocated_team(::CMsgDOTATeam* team);

  // optional bool on_team = 1;
  bool has_on_team() const;
  void clear_on_team();
  static const int kOnTeamFieldNumber = 1;
  bool on_team() const;
  void set_on_team(bool value);

  // optional bool profile_team = 2;
  bool has_profile_team() const;
  void clear_profile_team();
  static const int kProfileTeamFieldNumber = 2;
  bool profile_team() const;
  void set_profile_team(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamData)
 private:
  void set_has_on_team();
  void clear_has_on_team();
  void set_has_profile_team();
  void clear_has_profile_team();
  void set_has_team();
  void clear_has_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTATeam* team_;
  bool on_team_;
  bool profile_team_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamDataImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamProfileRequest) */ {
 public:
  CMsgDOTATeamProfileRequest();
  virtual ~CMsgDOTATeamProfileRequest();

  CMsgDOTATeamProfileRequest(const CMsgDOTATeamProfileRequest& from);

  inline CMsgDOTATeamProfileRequest& operator=(const CMsgDOTATeamProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamProfileRequest(CMsgDOTATeamProfileRequest&& from) noexcept
    : CMsgDOTATeamProfileRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamProfileRequest& operator=(CMsgDOTATeamProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamProfileRequest*>(
               &_CMsgDOTATeamProfileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(CMsgDOTATeamProfileRequest* other);
  friend void swap(CMsgDOTATeamProfileRequest& a, CMsgDOTATeamProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamProfileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamProfileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamProfileRequest& from);
  void MergeFrom(const CMsgDOTATeamProfileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamProfileRequest)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamProfileRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamMemberProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamMemberProfileRequest) */ {
 public:
  CMsgDOTATeamMemberProfileRequest();
  virtual ~CMsgDOTATeamMemberProfileRequest();

  CMsgDOTATeamMemberProfileRequest(const CMsgDOTATeamMemberProfileRequest& from);

  inline CMsgDOTATeamMemberProfileRequest& operator=(const CMsgDOTATeamMemberProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamMemberProfileRequest(CMsgDOTATeamMemberProfileRequest&& from) noexcept
    : CMsgDOTATeamMemberProfileRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamMemberProfileRequest& operator=(CMsgDOTATeamMemberProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamMemberProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamMemberProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamMemberProfileRequest*>(
               &_CMsgDOTATeamMemberProfileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(CMsgDOTATeamMemberProfileRequest* other);
  friend void swap(CMsgDOTATeamMemberProfileRequest& a, CMsgDOTATeamMemberProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamMemberProfileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamMemberProfileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamMemberProfileRequest& from);
  void MergeFrom(const CMsgDOTATeamMemberProfileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamMemberProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamMemberProfileRequest)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamMemberProfileRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamIDByNameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamIDByNameRequest) */ {
 public:
  CMsgDOTATeamIDByNameRequest();
  virtual ~CMsgDOTATeamIDByNameRequest();

  CMsgDOTATeamIDByNameRequest(const CMsgDOTATeamIDByNameRequest& from);

  inline CMsgDOTATeamIDByNameRequest& operator=(const CMsgDOTATeamIDByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamIDByNameRequest(CMsgDOTATeamIDByNameRequest&& from) noexcept
    : CMsgDOTATeamIDByNameRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamIDByNameRequest& operator=(CMsgDOTATeamIDByNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamIDByNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamIDByNameRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamIDByNameRequest*>(
               &_CMsgDOTATeamIDByNameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(CMsgDOTATeamIDByNameRequest* other);
  friend void swap(CMsgDOTATeamIDByNameRequest& a, CMsgDOTATeamIDByNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamIDByNameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamIDByNameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamIDByNameRequest& from);
  void MergeFrom(const CMsgDOTATeamIDByNameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamIDByNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamIDByNameRequest)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamIDByNameRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamIDByNameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamIDByNameResponse) */ {
 public:
  CMsgDOTATeamIDByNameResponse();
  virtual ~CMsgDOTATeamIDByNameResponse();

  CMsgDOTATeamIDByNameResponse(const CMsgDOTATeamIDByNameResponse& from);

  inline CMsgDOTATeamIDByNameResponse& operator=(const CMsgDOTATeamIDByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamIDByNameResponse(CMsgDOTATeamIDByNameResponse&& from) noexcept
    : CMsgDOTATeamIDByNameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamIDByNameResponse& operator=(CMsgDOTATeamIDByNameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamIDByNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamIDByNameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamIDByNameResponse*>(
               &_CMsgDOTATeamIDByNameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(CMsgDOTATeamIDByNameResponse* other);
  friend void swap(CMsgDOTATeamIDByNameResponse& a, CMsgDOTATeamIDByNameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamIDByNameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamIDByNameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamIDByNameResponse& from);
  void MergeFrom(const CMsgDOTATeamIDByNameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamIDByNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamIDByNameResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamIDByNameResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamProfileResponse) */ {
 public:
  CMsgDOTATeamProfileResponse();
  virtual ~CMsgDOTATeamProfileResponse();

  CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from);

  inline CMsgDOTATeamProfileResponse& operator=(const CMsgDOTATeamProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamProfileResponse(CMsgDOTATeamProfileResponse&& from) noexcept
    : CMsgDOTATeamProfileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamProfileResponse& operator=(CMsgDOTATeamProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamProfileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamProfileResponse*>(
               &_CMsgDOTATeamProfileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(CMsgDOTATeamProfileResponse* other);
  friend void swap(CMsgDOTATeamProfileResponse& a, CMsgDOTATeamProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamProfileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamProfileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamProfileResponse& from);
  void MergeFrom(const CMsgDOTATeamProfileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTATeam team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  const ::CMsgDOTATeam& team() const;
  ::CMsgDOTATeam* release_team();
  ::CMsgDOTATeam* mutable_team();
  void set_allocated_team(::CMsgDOTATeam* team);

  // optional uint32 eresult = 1;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamProfileResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_team();
  void clear_has_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTATeam* team_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamProfileResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProTeamListRequest) */ {
 public:
  CMsgDOTAProTeamListRequest();
  virtual ~CMsgDOTAProTeamListRequest();

  CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from);

  inline CMsgDOTAProTeamListRequest& operator=(const CMsgDOTAProTeamListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProTeamListRequest(CMsgDOTAProTeamListRequest&& from) noexcept
    : CMsgDOTAProTeamListRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProTeamListRequest& operator=(CMsgDOTAProTeamListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProTeamListRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListRequest*>(
               &_CMsgDOTAProTeamListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(CMsgDOTAProTeamListRequest* other);
  friend void swap(CMsgDOTAProTeamListRequest& a, CMsgDOTAProTeamListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListRequest& from);
  void MergeFrom(const CMsgDOTAProTeamListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTAProTeamListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProTeamListRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListResponse_TeamEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProTeamListResponse.TeamEntry) */ {
 public:
  CMsgDOTAProTeamListResponse_TeamEntry();
  virtual ~CMsgDOTAProTeamListResponse_TeamEntry();

  CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from);

  inline CMsgDOTAProTeamListResponse_TeamEntry& operator=(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProTeamListResponse_TeamEntry(CMsgDOTAProTeamListResponse_TeamEntry&& from) noexcept
    : CMsgDOTAProTeamListResponse_TeamEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProTeamListResponse_TeamEntry& operator=(CMsgDOTAProTeamListResponse_TeamEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListResponse_TeamEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProTeamListResponse_TeamEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListResponse_TeamEntry*>(
               &_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(CMsgDOTAProTeamListResponse_TeamEntry* other);
  friend void swap(CMsgDOTAProTeamListResponse_TeamEntry& a, CMsgDOTAProTeamListResponse_TeamEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListResponse_TeamEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListResponse_TeamEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from);
  void MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListResponse_TeamEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 5;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 5;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 3;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 3;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 member_count = 6;
  bool has_member_count() const;
  void clear_member_count();
  static const int kMemberCountFieldNumber = 6;
  ::google::protobuf::uint32 member_count() const;
  void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProTeamListResponse.TeamEntry)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_tag();
  void clear_has_tag();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_logo();
  void clear_has_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_member_count();
  void clear_has_member_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 member_count_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProTeamListResponse_TeamEntryImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProTeamListResponse) */ {
 public:
  CMsgDOTAProTeamListResponse();
  virtual ~CMsgDOTAProTeamListResponse();

  CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from);

  inline CMsgDOTAProTeamListResponse& operator=(const CMsgDOTAProTeamListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProTeamListResponse(CMsgDOTAProTeamListResponse&& from) noexcept
    : CMsgDOTAProTeamListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProTeamListResponse& operator=(CMsgDOTAProTeamListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProTeamListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListResponse*>(
               &_CMsgDOTAProTeamListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(CMsgDOTAProTeamListResponse* other);
  friend void swap(CMsgDOTAProTeamListResponse& a, CMsgDOTAProTeamListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListResponse& from);
  void MergeFrom(const CMsgDOTAProTeamListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProTeamListResponse_TeamEntry TeamEntry;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 1;
  const ::CMsgDOTAProTeamListResponse_TeamEntry& teams(int index) const;
  ::CMsgDOTAProTeamListResponse_TeamEntry* mutable_teams(int index);
  ::CMsgDOTAProTeamListResponse_TeamEntry* add_teams();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProTeamListResponse_TeamEntry >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProTeamListResponse_TeamEntry >&
      teams() const;

  // optional uint32 eresult = 2;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProTeamListResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProTeamListResponse_TeamEntry > teams_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProTeamListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_InviterToGC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_InviterToGC) */ {
 public:
  CMsgDOTATeamInvite_InviterToGC();
  virtual ~CMsgDOTATeamInvite_InviterToGC();

  CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from);

  inline CMsgDOTATeamInvite_InviterToGC& operator=(const CMsgDOTATeamInvite_InviterToGC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_InviterToGC(CMsgDOTATeamInvite_InviterToGC&& from) noexcept
    : CMsgDOTATeamInvite_InviterToGC() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_InviterToGC& operator=(CMsgDOTATeamInvite_InviterToGC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_InviterToGC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_InviterToGC* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_InviterToGC*>(
               &_CMsgDOTATeamInvite_InviterToGC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(CMsgDOTATeamInvite_InviterToGC* other);
  friend void swap(CMsgDOTATeamInvite_InviterToGC& a, CMsgDOTATeamInvite_InviterToGC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_InviterToGC* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_InviterToGC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from);
  void MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_InviterToGC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_InviterToGC)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_InviterToGCImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCImmediateResponseToInviter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_GCImmediateResponseToInviter) */ {
 public:
  CMsgDOTATeamInvite_GCImmediateResponseToInviter();
  virtual ~CMsgDOTATeamInvite_GCImmediateResponseToInviter();

  CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);

  inline CMsgDOTATeamInvite_GCImmediateResponseToInviter& operator=(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_GCImmediateResponseToInviter(CMsgDOTATeamInvite_GCImmediateResponseToInviter&& from) noexcept
    : CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_GCImmediateResponseToInviter& operator=(CMsgDOTATeamInvite_GCImmediateResponseToInviter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCImmediateResponseToInviter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_GCImmediateResponseToInviter* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(
               &_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void Swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other);
  friend void swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter& a, CMsgDOTATeamInvite_GCImmediateResponseToInviter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCImmediateResponseToInviter* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCImmediateResponseToInviter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result Result;
  static const Result SUCCESS =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_SUCCESS;
  static const Result MEMBER_LIMIT =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_MEMBER_LIMIT;
  static const Result INVITEE_NOT_AVAILABLE =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_NOT_AVAILABLE;
  static const Result INVITEE_BUSY =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_BUSY;
  static const Result INVITEE_ALREADY_ON_THE_TEAM =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_ALREADY_ON_THE_TEAM;
  static const Result INVITEE_ALREADY_ON_TOO_MANY_TEAMS =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_INVITEE_ALREADY_ON_TOO_MANY_TEAMS;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string invitee_name = 2;
  bool has_invitee_name() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 2;
  const ::std::string& invitee_name() const;
  void set_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(::std::string&& value);
  #endif
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  ::std::string* mutable_invitee_name();
  ::std::string* release_invitee_name();
  void set_allocated_invitee_name(::std::string* invitee_name);

  // optional .CMsgDOTATeamInvite_GCImmediateResponseToInviter.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result result() const;
  void set_result(::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_invitee_name();
  void clear_has_invitee_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invitee_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_GCImmediateResponseToInviterImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCRequestToInvitee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_GCRequestToInvitee) */ {
 public:
  CMsgDOTATeamInvite_GCRequestToInvitee();
  virtual ~CMsgDOTATeamInvite_GCRequestToInvitee();

  CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from);

  inline CMsgDOTATeamInvite_GCRequestToInvitee& operator=(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_GCRequestToInvitee(CMsgDOTATeamInvite_GCRequestToInvitee&& from) noexcept
    : CMsgDOTATeamInvite_GCRequestToInvitee() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_GCRequestToInvitee& operator=(CMsgDOTATeamInvite_GCRequestToInvitee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCRequestToInvitee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_GCRequestToInvitee* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCRequestToInvitee*>(
               &_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void Swap(CMsgDOTATeamInvite_GCRequestToInvitee* other);
  friend void swap(CMsgDOTATeamInvite_GCRequestToInvitee& a, CMsgDOTATeamInvite_GCRequestToInvitee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCRequestToInvitee* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCRequestToInvitee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 inviter_account_id = 1;
  bool has_inviter_account_id() const;
  void clear_inviter_account_id();
  static const int kInviterAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 inviter_account_id() const;
  void set_inviter_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_GCRequestToInvitee)
 private:
  void set_has_inviter_account_id();
  void clear_has_inviter_account_id();
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_tag();
  void clear_has_team_tag();
  void set_has_logo();
  void clear_has_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 inviter_account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_GCRequestToInviteeImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_InviteeResponseToGC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_InviteeResponseToGC) */ {
 public:
  CMsgDOTATeamInvite_InviteeResponseToGC();
  virtual ~CMsgDOTATeamInvite_InviteeResponseToGC();

  CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from);

  inline CMsgDOTATeamInvite_InviteeResponseToGC& operator=(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_InviteeResponseToGC(CMsgDOTATeamInvite_InviteeResponseToGC&& from) noexcept
    : CMsgDOTATeamInvite_InviteeResponseToGC() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_InviteeResponseToGC& operator=(CMsgDOTATeamInvite_InviteeResponseToGC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_InviteeResponseToGC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_InviteeResponseToGC* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_InviteeResponseToGC*>(
               &_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void Swap(CMsgDOTATeamInvite_InviteeResponseToGC* other);
  friend void swap(CMsgDOTATeamInvite_InviteeResponseToGC& a, CMsgDOTATeamInvite_InviteeResponseToGC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_InviteeResponseToGC* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_InviteeResponseToGC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from);
  void MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATeamInvite_InviteeResponseToGC_Result Result;
  static const Result JOIN =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_JOIN;
  static const Result REJECT =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_REJECT;
  static const Result TIMEOUT =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATeamInvite_InviteeResponseToGC_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATeamInvite_InviteeResponseToGC_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATeamInvite_InviteeResponseToGC_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATeamInvite_InviteeResponseToGC_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATeamInvite_InviteeResponseToGC_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTATeamInvite_InviteeResponseToGC.Result result = 1 [default = JOIN];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTATeamInvite_InviteeResponseToGC_Result result() const;
  void set_result(::CMsgDOTATeamInvite_InviteeResponseToGC_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_InviteeResponseToGC)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_InviteeResponseToGCImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCResponseToInviter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_GCResponseToInviter) */ {
 public:
  CMsgDOTATeamInvite_GCResponseToInviter();
  virtual ~CMsgDOTATeamInvite_GCResponseToInviter();

  CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from);

  inline CMsgDOTATeamInvite_GCResponseToInviter& operator=(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_GCResponseToInviter(CMsgDOTATeamInvite_GCResponseToInviter&& from) noexcept
    : CMsgDOTATeamInvite_GCResponseToInviter() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_GCResponseToInviter& operator=(CMsgDOTATeamInvite_GCResponseToInviter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCResponseToInviter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_GCResponseToInviter* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCResponseToInviter*>(
               &_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void Swap(CMsgDOTATeamInvite_GCResponseToInviter* other);
  friend void swap(CMsgDOTATeamInvite_GCResponseToInviter& a, CMsgDOTATeamInvite_GCResponseToInviter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCResponseToInviter* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCResponseToInviter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATeamInvite_GCResponseToInviter_Result Result;
  static const Result JOINED =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_JOINED;
  static const Result REJECTION =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_REJECTION;
  static const Result TIMEOUT =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_TIMEOUT;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATeamInvite_GCResponseToInviter_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATeamInvite_GCResponseToInviter_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATeamInvite_GCResponseToInviter_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATeamInvite_GCResponseToInviter_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATeamInvite_GCResponseToInviter_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string invitee_name = 2;
  bool has_invitee_name() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 2;
  const ::std::string& invitee_name() const;
  void set_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(::std::string&& value);
  #endif
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  ::std::string* mutable_invitee_name();
  ::std::string* release_invitee_name();
  void set_allocated_invitee_name(::std::string* invitee_name);

  // optional .CMsgDOTATeamInvite_GCResponseToInviter.Result result = 1 [default = JOINED];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTATeamInvite_GCResponseToInviter_Result result() const;
  void set_result(::CMsgDOTATeamInvite_GCResponseToInviter_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_GCResponseToInviter)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_invitee_name();
  void clear_has_invitee_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invitee_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_GCResponseToInviterImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCResponseToInvitee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamInvite_GCResponseToInvitee) */ {
 public:
  CMsgDOTATeamInvite_GCResponseToInvitee();
  virtual ~CMsgDOTATeamInvite_GCResponseToInvitee();

  CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from);

  inline CMsgDOTATeamInvite_GCResponseToInvitee& operator=(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamInvite_GCResponseToInvitee(CMsgDOTATeamInvite_GCResponseToInvitee&& from) noexcept
    : CMsgDOTATeamInvite_GCResponseToInvitee() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamInvite_GCResponseToInvitee& operator=(CMsgDOTATeamInvite_GCResponseToInvitee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCResponseToInvitee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamInvite_GCResponseToInvitee* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCResponseToInvitee*>(
               &_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void Swap(CMsgDOTATeamInvite_GCResponseToInvitee* other);
  friend void swap(CMsgDOTATeamInvite_GCResponseToInvitee& a, CMsgDOTATeamInvite_GCResponseToInvitee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCResponseToInvitee* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCResponseToInvitee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATeamInvite_GCResponseToInvitee_Result Result;
  static const Result SUCCESS =
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_SUCCESS;
  static const Result FAILURE =
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATeamInvite_GCResponseToInvitee_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATeamInvite_GCResponseToInvitee_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATeamInvite_GCResponseToInvitee_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATeamInvite_GCResponseToInvitee_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATeamInvite_GCResponseToInvitee_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .CMsgDOTATeamInvite_GCResponseToInvitee.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTATeamInvite_GCResponseToInvitee_Result result() const;
  void set_result(::CMsgDOTATeamInvite_GCResponseToInvitee_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamInvite_GCResponseToInvitee)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_team_name();
  void clear_has_team_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamInvite_GCResponseToInviteeImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATeamOnProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamOnProfile) */ {
 public:
  CMsgDOTATeamOnProfile();
  virtual ~CMsgDOTATeamOnProfile();

  CMsgDOTATeamOnProfile(const CMsgDOTATeamOnProfile& from);

  inline CMsgDOTATeamOnProfile& operator=(const CMsgDOTATeamOnProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATeamOnProfile(CMsgDOTATeamOnProfile&& from) noexcept
    : CMsgDOTATeamOnProfile() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamOnProfile& operator=(CMsgDOTATeamOnProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamOnProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATeamOnProfile* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamOnProfile*>(
               &_CMsgDOTATeamOnProfile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void Swap(CMsgDOTATeamOnProfile* other);
  friend void swap(CMsgDOTATeamOnProfile& a, CMsgDOTATeamOnProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamOnProfile* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamOnProfile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamOnProfile& from);
  void MergeFrom(const CMsgDOTATeamOnProfile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamOnProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional bool enabled = 2;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamOnProfile)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_enabled();
  void clear_has_enabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  bool enabled_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATeamOnProfileImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAKickTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAKickTeamMember) */ {
 public:
  CMsgDOTAKickTeamMember();
  virtual ~CMsgDOTAKickTeamMember();

  CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from);

  inline CMsgDOTAKickTeamMember& operator=(const CMsgDOTAKickTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAKickTeamMember(CMsgDOTAKickTeamMember&& from) noexcept
    : CMsgDOTAKickTeamMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAKickTeamMember& operator=(CMsgDOTAKickTeamMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAKickTeamMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAKickTeamMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAKickTeamMember*>(
               &_CMsgDOTAKickTeamMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void Swap(CMsgDOTAKickTeamMember* other);
  friend void swap(CMsgDOTAKickTeamMember& a, CMsgDOTAKickTeamMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAKickTeamMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAKickTeamMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAKickTeamMember& from);
  void MergeFrom(const CMsgDOTAKickTeamMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAKickTeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAKickTeamMember)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAKickTeamMemberImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAKickTeamMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAKickTeamMemberResponse) */ {
 public:
  CMsgDOTAKickTeamMemberResponse();
  virtual ~CMsgDOTAKickTeamMemberResponse();

  CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from);

  inline CMsgDOTAKickTeamMemberResponse& operator=(const CMsgDOTAKickTeamMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAKickTeamMemberResponse(CMsgDOTAKickTeamMemberResponse&& from) noexcept
    : CMsgDOTAKickTeamMemberResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAKickTeamMemberResponse& operator=(CMsgDOTAKickTeamMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAKickTeamMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAKickTeamMemberResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAKickTeamMemberResponse*>(
               &_CMsgDOTAKickTeamMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void Swap(CMsgDOTAKickTeamMemberResponse* other);
  friend void swap(CMsgDOTAKickTeamMemberResponse& a, CMsgDOTAKickTeamMemberResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAKickTeamMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAKickTeamMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAKickTeamMemberResponse& from);
  void MergeFrom(const CMsgDOTAKickTeamMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAKickTeamMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAKickTeamMemberResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTAKickTeamMemberResponse_Result_SUCCESS;
  static const Result FAILURE =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAKickTeamMemberResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAKickTeamMemberResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAKickTeamMemberResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAKickTeamMemberResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAKickTeamMemberResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAKickTeamMemberResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAKickTeamMemberResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAKickTeamMemberResponse_Result result() const;
  void set_result(::CMsgDOTAKickTeamMemberResponse_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAKickTeamMemberResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAKickTeamMemberResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATransferTeamAdmin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATransferTeamAdmin) */ {
 public:
  CMsgDOTATransferTeamAdmin();
  virtual ~CMsgDOTATransferTeamAdmin();

  CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from);

  inline CMsgDOTATransferTeamAdmin& operator=(const CMsgDOTATransferTeamAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATransferTeamAdmin(CMsgDOTATransferTeamAdmin&& from) noexcept
    : CMsgDOTATransferTeamAdmin() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATransferTeamAdmin& operator=(CMsgDOTATransferTeamAdmin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATransferTeamAdmin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATransferTeamAdmin* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATransferTeamAdmin*>(
               &_CMsgDOTATransferTeamAdmin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void Swap(CMsgDOTATransferTeamAdmin* other);
  friend void swap(CMsgDOTATransferTeamAdmin& a, CMsgDOTATransferTeamAdmin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATransferTeamAdmin* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATransferTeamAdmin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATransferTeamAdmin& from);
  void MergeFrom(const CMsgDOTATransferTeamAdmin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATransferTeamAdmin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 new_admin_account_id = 1;
  bool has_new_admin_account_id() const;
  void clear_new_admin_account_id();
  static const int kNewAdminAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 new_admin_account_id() const;
  void set_new_admin_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATransferTeamAdmin)
 private:
  void set_has_new_admin_account_id();
  void clear_has_new_admin_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 new_admin_account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATransferTeamAdminImpl();
};
// -------------------------------------------------------------------

class CMsgDOTATransferTeamAdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATransferTeamAdminResponse) */ {
 public:
  CMsgDOTATransferTeamAdminResponse();
  virtual ~CMsgDOTATransferTeamAdminResponse();

  CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from);

  inline CMsgDOTATransferTeamAdminResponse& operator=(const CMsgDOTATransferTeamAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTATransferTeamAdminResponse(CMsgDOTATransferTeamAdminResponse&& from) noexcept
    : CMsgDOTATransferTeamAdminResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATransferTeamAdminResponse& operator=(CMsgDOTATransferTeamAdminResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATransferTeamAdminResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTATransferTeamAdminResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATransferTeamAdminResponse*>(
               &_CMsgDOTATransferTeamAdminResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void Swap(CMsgDOTATransferTeamAdminResponse* other);
  friend void swap(CMsgDOTATransferTeamAdminResponse& a, CMsgDOTATransferTeamAdminResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTATransferTeamAdminResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATransferTeamAdminResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATransferTeamAdminResponse& from);
  void MergeFrom(const CMsgDOTATransferTeamAdminResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATransferTeamAdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATransferTeamAdminResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTATransferTeamAdminResponse_Result_SUCCESS;
  static const Result NOT_ADMIN =
    CMsgDOTATransferTeamAdminResponse_Result_NOT_ADMIN;
  static const Result ON_OTHER_TEAM =
    CMsgDOTATransferTeamAdminResponse_Result_ON_OTHER_TEAM;
  static const Result ADMIN_OF_OTHER_TEAM =
    CMsgDOTATransferTeamAdminResponse_Result_ADMIN_OF_OTHER_TEAM;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTATransferTeamAdminResponse_Result_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATransferTeamAdminResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATransferTeamAdminResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATransferTeamAdminResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATransferTeamAdminResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATransferTeamAdminResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATransferTeamAdminResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATransferTeamAdminResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string invitee_name = 2;
  bool has_invitee_name() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 2;
  const ::std::string& invitee_name() const;
  void set_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(::std::string&& value);
  #endif
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  ::std::string* mutable_invitee_name();
  ::std::string* release_invitee_name();
  void set_allocated_invitee_name(::std::string* invitee_name);

  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTATransferTeamAdminResponse_Result result() const;
  void set_result(::CMsgDOTATransferTeamAdminResponse_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATransferTeamAdminResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_invitee_name();
  void clear_has_invitee_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invitee_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTATransferTeamAdminResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaveTeam) */ {
 public:
  CMsgDOTALeaveTeam();
  virtual ~CMsgDOTALeaveTeam();

  CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from);

  inline CMsgDOTALeaveTeam& operator=(const CMsgDOTALeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaveTeam(CMsgDOTALeaveTeam&& from) noexcept
    : CMsgDOTALeaveTeam() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaveTeam& operator=(CMsgDOTALeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaveTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveTeam*>(
               &_CMsgDOTALeaveTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void Swap(CMsgDOTALeaveTeam* other);
  friend void swap(CMsgDOTALeaveTeam& a, CMsgDOTALeaveTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaveTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaveTeam& from);
  void MergeFrom(const CMsgDOTALeaveTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaveTeam)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeaveTeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeaveTeamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaveTeamResponse) */ {
 public:
  CMsgDOTALeaveTeamResponse();
  virtual ~CMsgDOTALeaveTeamResponse();

  CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from);

  inline CMsgDOTALeaveTeamResponse& operator=(const CMsgDOTALeaveTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaveTeamResponse(CMsgDOTALeaveTeamResponse&& from) noexcept
    : CMsgDOTALeaveTeamResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaveTeamResponse& operator=(CMsgDOTALeaveTeamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveTeamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaveTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveTeamResponse*>(
               &_CMsgDOTALeaveTeamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void Swap(CMsgDOTALeaveTeamResponse* other);
  friend void swap(CMsgDOTALeaveTeamResponse& a, CMsgDOTALeaveTeamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveTeamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaveTeamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaveTeamResponse& from);
  void MergeFrom(const CMsgDOTALeaveTeamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaveTeamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALeaveTeamResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTALeaveTeamResponse_Result_SUCCESS;
  static const Result FAILURE =
    CMsgDOTALeaveTeamResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTALeaveTeamResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTALeaveTeamResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTALeaveTeamResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTALeaveTeamResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTALeaveTeamResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTALeaveTeamResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTALeaveTeamResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTALeaveTeamResponse_Result result() const;
  void set_result(::CMsgDOTALeaveTeamResponse_Result value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaveTeamResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_team_name();
  void clear_has_team_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeaveTeamResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTABetaParticipationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABetaParticipationRequest) */ {
 public:
  CMsgDOTABetaParticipationRequest();
  virtual ~CMsgDOTABetaParticipationRequest();

  CMsgDOTABetaParticipationRequest(const CMsgDOTABetaParticipationRequest& from);

  inline CMsgDOTABetaParticipationRequest& operator=(const CMsgDOTABetaParticipationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABetaParticipationRequest(CMsgDOTABetaParticipationRequest&& from) noexcept
    : CMsgDOTABetaParticipationRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABetaParticipationRequest& operator=(CMsgDOTABetaParticipationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABetaParticipationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABetaParticipationRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABetaParticipationRequest*>(
               &_CMsgDOTABetaParticipationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void Swap(CMsgDOTABetaParticipationRequest* other);
  friend void swap(CMsgDOTABetaParticipationRequest& a, CMsgDOTABetaParticipationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABetaParticipationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTABetaParticipationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTABetaParticipationRequest& from);
  void MergeFrom(const CMsgDOTABetaParticipationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTABetaParticipationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTABetaParticipationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTABetaParticipationRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTABetaParticipation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABetaParticipation) */ {
 public:
  CMsgDOTABetaParticipation();
  virtual ~CMsgDOTABetaParticipation();

  CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from);

  inline CMsgDOTABetaParticipation& operator=(const CMsgDOTABetaParticipation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABetaParticipation(CMsgDOTABetaParticipation&& from) noexcept
    : CMsgDOTABetaParticipation() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABetaParticipation& operator=(CMsgDOTABetaParticipation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABetaParticipation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABetaParticipation* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABetaParticipation*>(
               &_CMsgDOTABetaParticipation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void Swap(CMsgDOTABetaParticipation* other);
  friend void swap(CMsgDOTABetaParticipation& a, CMsgDOTABetaParticipation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABetaParticipation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTABetaParticipation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTABetaParticipation& from);
  void MergeFrom(const CMsgDOTABetaParticipation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTABetaParticipation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 access_rights = 1;
  bool has_access_rights() const;
  void clear_access_rights();
  static const int kAccessRightsFieldNumber = 1;
  ::google::protobuf::uint32 access_rights() const;
  void set_access_rights(::google::protobuf::uint32 value);

  // optional fixed32 beta_join_time = 2;
  bool has_beta_join_time() const;
  void clear_beta_join_time();
  static const int kBetaJoinTimeFieldNumber = 2;
  ::google::protobuf::uint32 beta_join_time() const;
  void set_beta_join_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTABetaParticipation)
 private:
  void set_has_access_rights();
  void clear_has_access_rights();
  void set_has_beta_join_time();
  void clear_has_beta_join_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 access_rights_;
  ::google::protobuf::uint32 beta_join_time_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTABetaParticipationImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGenericResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGenericResult) */ {
 public:
  CMsgDOTAGenericResult();
  virtual ~CMsgDOTAGenericResult();

  CMsgDOTAGenericResult(const CMsgDOTAGenericResult& from);

  inline CMsgDOTAGenericResult& operator=(const CMsgDOTAGenericResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGenericResult(CMsgDOTAGenericResult&& from) noexcept
    : CMsgDOTAGenericResult() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGenericResult& operator=(CMsgDOTAGenericResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenericResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGenericResult* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGenericResult*>(
               &_CMsgDOTAGenericResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void Swap(CMsgDOTAGenericResult* other);
  friend void swap(CMsgDOTAGenericResult& a, CMsgDOTAGenericResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGenericResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGenericResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGenericResult& from);
  void MergeFrom(const CMsgDOTAGenericResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGenericResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGenericResult)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGenericResultImpl();
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABroadcastNotification) */ {
 public:
  CMsgDOTABroadcastNotification();
  virtual ~CMsgDOTABroadcastNotification();

  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);

  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTABroadcastNotification(CMsgDOTABroadcastNotification&& from) noexcept
    : CMsgDOTABroadcastNotification() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABroadcastNotification& operator=(CMsgDOTABroadcastNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABroadcastNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTABroadcastNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABroadcastNotification*>(
               &_CMsgDOTABroadcastNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void Swap(CMsgDOTABroadcastNotification* other);
  friend void swap(CMsgDOTABroadcastNotification& a, CMsgDOTABroadcastNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTABroadcastNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTABroadcastNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  void MergeFrom(const CMsgDOTABroadcastNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTABroadcastNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastNotification)
 private:
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTABroadcastNotificationImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate.Team.Player) */ {
 public:
  CMsgDOTALiveScoreboardUpdate_Team_Player();
  virtual ~CMsgDOTALiveScoreboardUpdate_Team_Player();

  CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);

  inline CMsgDOTALiveScoreboardUpdate_Team_Player& operator=(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALiveScoreboardUpdate_Team_Player(CMsgDOTALiveScoreboardUpdate_Team_Player&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate_Team_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate_Team_Player& operator=(CMsgDOTALiveScoreboardUpdate_Team_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate_Team_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALiveScoreboardUpdate_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate_Team_Player*>(
               &_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other);
  friend void swap(CMsgDOTALiveScoreboardUpdate_Team_Player& a, CMsgDOTALiveScoreboardUpdate_Team_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALiveScoreboardUpdate_Team_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALiveScoreboardUpdate_Team_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState DOTAUltimateState;
  static const DOTAUltimateState k_EDOTAUltimateStateNotLearned =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
  static const DOTAUltimateState k_EDOTAUltimateStateCooldown =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown;
  static const DOTAUltimateState k_EDOTAUltimateStateNeedsMana =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana;
  static const DOTAUltimateState k_EDOTAUltimateStateReady =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
  static inline bool DOTAUltimateState_IsValid(int value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value);
  }
  static const DOTAUltimateState DOTAUltimateState_MIN =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN;
  static const DOTAUltimateState DOTAUltimateState_MAX =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX;
  static const int DOTAUltimateState_ARRAYSIZE =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DOTAUltimateState_descriptor() {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
  }
  static inline const ::std::string& DOTAUltimateState_Name(DOTAUltimateState value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(value);
  }
  static inline bool DOTAUltimateState_Parse(const ::std::string& name,
      DOTAUltimateState* value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string player_name = 2;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional string hero_name = 3;
  bool has_hero_name() const;
  void clear_hero_name();
  static const int kHeroNameFieldNumber = 3;
  const ::std::string& hero_name() const;
  void set_hero_name(const ::std::string& value);
  #if LANG_CXX11
  void set_hero_name(::std::string&& value);
  #endif
  void set_hero_name(const char* value);
  void set_hero_name(const char* value, size_t size);
  ::std::string* mutable_hero_name();
  ::std::string* release_hero_name();
  void set_allocated_hero_name(::std::string* hero_name);

  // optional uint32 player_slot = 1;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 1;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 kills = 5;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 5;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 6;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 6;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 7;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 7;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 8;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 8;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 9;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 9;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // optional uint32 gold = 10;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 10;
  ::google::protobuf::uint32 gold() const;
  void set_gold(::google::protobuf::uint32 value);

  // optional uint32 level = 11;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 11;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional float gold_per_min = 12;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 12;
  float gold_per_min() const;
  void set_gold_per_min(float value);

  // optional float xp_per_min = 13;
  bool has_xp_per_min() const;
  void clear_xp_per_min();
  static const int kXpPerMinFieldNumber = 13;
  float xp_per_min() const;
  void set_xp_per_min(float value);

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  bool has_ultimate_state() const;
  void clear_ultimate_state();
  static const int kUltimateStateFieldNumber = 14;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState ultimate_state() const;
  void set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value);

  // optional float ultimate_cooldown = 15;
  bool has_ultimate_cooldown() const;
  void clear_ultimate_cooldown();
  static const int kUltimateCooldownFieldNumber = 15;
  float ultimate_cooldown() const;
  void set_ultimate_cooldown(float value);

  // optional uint32 item0 = 16;
  bool has_item0() const;
  void clear_item0();
  static const int kItem0FieldNumber = 16;
  ::google::protobuf::uint32 item0() const;
  void set_item0(::google::protobuf::uint32 value);

  // optional uint32 item1 = 17;
  bool has_item1() const;
  void clear_item1();
  static const int kItem1FieldNumber = 17;
  ::google::protobuf::uint32 item1() const;
  void set_item1(::google::protobuf::uint32 value);

  // optional uint32 item2 = 18;
  bool has_item2() const;
  void clear_item2();
  static const int kItem2FieldNumber = 18;
  ::google::protobuf::uint32 item2() const;
  void set_item2(::google::protobuf::uint32 value);

  // optional uint32 item3 = 19;
  bool has_item3() const;
  void clear_item3();
  static const int kItem3FieldNumber = 19;
  ::google::protobuf::uint32 item3() const;
  void set_item3(::google::protobuf::uint32 value);

  // optional uint32 item4 = 20;
  bool has_item4() const;
  void clear_item4();
  static const int kItem4FieldNumber = 20;
  ::google::protobuf::uint32 item4() const;
  void set_item4(::google::protobuf::uint32 value);

  // optional uint32 item5 = 21;
  bool has_item5() const;
  void clear_item5();
  static const int kItem5FieldNumber = 21;
  ::google::protobuf::uint32 item5() const;
  void set_item5(::google::protobuf::uint32 value);

  // optional uint32 respawn_timer = 22;
  bool has_respawn_timer() const;
  void clear_respawn_timer();
  static const int kRespawnTimerFieldNumber = 22;
  ::google::protobuf::uint32 respawn_timer() const;
  void set_respawn_timer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team.Player)
 private:
  void set_has_player_slot();
  void clear_has_player_slot();
  void set_has_player_name();
  void clear_has_player_name();
  void set_has_hero_name();
  void clear_has_hero_name();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_kills();
  void clear_has_kills();
  void set_has_deaths();
  void clear_has_deaths();
  void set_has_assists();
  void clear_has_assists();
  void set_has_last_hits();
  void clear_has_last_hits();
  void set_has_denies();
  void clear_has_denies();
  void set_has_gold();
  void clear_has_gold();
  void set_has_level();
  void clear_has_level();
  void set_has_gold_per_min();
  void clear_has_gold_per_min();
  void set_has_xp_per_min();
  void clear_has_xp_per_min();
  void set_has_ultimate_state();
  void clear_has_ultimate_state();
  void set_has_ultimate_cooldown();
  void clear_has_ultimate_cooldown();
  void set_has_item0();
  void clear_has_item0();
  void set_has_item1();
  void clear_has_item1();
  void set_has_item2();
  void clear_has_item2();
  void set_has_item3();
  void clear_has_item3();
  void set_has_item4();
  void clear_has_item4();
  void set_has_item5();
  void clear_has_item5();
  void set_has_respawn_timer();
  void clear_has_respawn_timer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::internal::ArenaStringPtr hero_name_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 level_;
  float gold_per_min_;
  float xp_per_min_;
  int ultimate_state_;
  float ultimate_cooldown_;
  ::google::protobuf::uint32 item0_;
  ::google::protobuf::uint32 item1_;
  ::google::protobuf::uint32 item2_;
  ::google::protobuf::uint32 item3_;
  ::google::protobuf::uint32 item4_;
  ::google::protobuf::uint32 item5_;
  ::google::protobuf::uint32 respawn_timer_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALiveScoreboardUpdate_Team_PlayerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate.Team) */ {
 public:
  CMsgDOTALiveScoreboardUpdate_Team();
  virtual ~CMsgDOTALiveScoreboardUpdate_Team();

  CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from);

  inline CMsgDOTALiveScoreboardUpdate_Team& operator=(const CMsgDOTALiveScoreboardUpdate_Team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALiveScoreboardUpdate_Team(CMsgDOTALiveScoreboardUpdate_Team&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate_Team& operator=(CMsgDOTALiveScoreboardUpdate_Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate_Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALiveScoreboardUpdate_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate_Team*>(
               &_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void Swap(CMsgDOTALiveScoreboardUpdate_Team* other);
  friend void swap(CMsgDOTALiveScoreboardUpdate_Team& a, CMsgDOTALiveScoreboardUpdate_Team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALiveScoreboardUpdate_Team* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALiveScoreboardUpdate_Team* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team_Player Player;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::CMsgDOTALiveScoreboardUpdate_Team_Player& players(int index) const;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* mutable_players(int index);
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
      players() const;

  // optional uint32 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team)
 private:
  void set_has_score();
  void clear_has_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player > players_;
  ::google::protobuf::uint32 score_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALiveScoreboardUpdate_TeamImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate) */ {
 public:
  CMsgDOTALiveScoreboardUpdate();
  virtual ~CMsgDOTALiveScoreboardUpdate();

  CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from);

  inline CMsgDOTALiveScoreboardUpdate& operator=(const CMsgDOTALiveScoreboardUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALiveScoreboardUpdate(CMsgDOTALiveScoreboardUpdate&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate& operator=(CMsgDOTALiveScoreboardUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALiveScoreboardUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate*>(
               &_CMsgDOTALiveScoreboardUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void Swap(CMsgDOTALiveScoreboardUpdate* other);
  friend void swap(CMsgDOTALiveScoreboardUpdate& a, CMsgDOTALiveScoreboardUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALiveScoreboardUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALiveScoreboardUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team Team;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  bool has_team_good() const;
  void clear_team_good();
  static const int kTeamGoodFieldNumber = 5;
  const ::CMsgDOTALiveScoreboardUpdate_Team& team_good() const;
  ::CMsgDOTALiveScoreboardUpdate_Team* release_team_good();
  ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_good();
  void set_allocated_team_good(::CMsgDOTALiveScoreboardUpdate_Team* team_good);

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  bool has_team_bad() const;
  void clear_team_bad();
  static const int kTeamBadFieldNumber = 6;
  const ::CMsgDOTALiveScoreboardUpdate_Team& team_bad() const;
  ::CMsgDOTALiveScoreboardUpdate_Team* release_team_bad();
  ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_bad();
  void set_allocated_team_bad(::CMsgDOTALiveScoreboardUpdate_Team* team_bad);

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 2;
  bool has_tournament_game_id() const;
  void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 2;
  ::google::protobuf::uint32 tournament_game_id() const;
  void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional float duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  float duration() const;
  void set_duration(float value);

  // optional int32 hltv_delay = 4;
  bool has_hltv_delay() const;
  void clear_hltv_delay();
  static const int kHltvDelayFieldNumber = 4;
  ::google::protobuf::int32 hltv_delay() const;
  void set_hltv_delay(::google::protobuf::int32 value);

  // optional uint32 roshan_respawn_timer = 7;
  bool has_roshan_respawn_timer() const;
  void clear_roshan_respawn_timer();
  static const int kRoshanRespawnTimerFieldNumber = 7;
  ::google::protobuf::uint32 roshan_respawn_timer() const;
  void set_roshan_respawn_timer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate)
 private:
  void set_has_tournament_id();
  void clear_has_tournament_id();
  void set_has_tournament_game_id();
  void clear_has_tournament_game_id();
  void set_has_duration();
  void clear_has_duration();
  void set_has_hltv_delay();
  void clear_has_hltv_delay();
  void set_has_team_good();
  void clear_has_team_good();
  void set_has_team_bad();
  void clear_has_team_bad();
  void set_has_roshan_respawn_timer();
  void clear_has_roshan_respawn_timer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTALiveScoreboardUpdate_Team* team_good_;
  ::CMsgDOTALiveScoreboardUpdate_Team* team_bad_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  float duration_;
  ::google::protobuf::int32 hltv_delay_;
  ::google::protobuf::uint32 roshan_respawn_timer_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALiveScoreboardUpdateImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinChatChannel) */ {
 public:
  CMsgDOTAJoinChatChannel();
  virtual ~CMsgDOTAJoinChatChannel();

  CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from);

  inline CMsgDOTAJoinChatChannel& operator=(const CMsgDOTAJoinChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinChatChannel(CMsgDOTAJoinChatChannel&& from) noexcept
    : CMsgDOTAJoinChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannel& operator=(CMsgDOTAJoinChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannel*>(
               &_CMsgDOTAJoinChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void Swap(CMsgDOTAJoinChatChannel* other);
  friend void swap(CMsgDOTAJoinChatChannel& a, CMsgDOTAJoinChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAJoinChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAJoinChatChannel& from);
  void MergeFrom(const CMsgDOTAJoinChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAJoinChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 2;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 4;
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannel)
 private:
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_channel_type();
  void clear_has_channel_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  int channel_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAJoinChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeaveChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaveChatChannel) */ {
 public:
  CMsgDOTALeaveChatChannel();
  virtual ~CMsgDOTALeaveChatChannel();

  CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from);

  inline CMsgDOTALeaveChatChannel& operator=(const CMsgDOTALeaveChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaveChatChannel(CMsgDOTALeaveChatChannel&& from) noexcept
    : CMsgDOTALeaveChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaveChatChannel& operator=(CMsgDOTALeaveChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaveChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveChatChannel*>(
               &_CMsgDOTALeaveChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void Swap(CMsgDOTALeaveChatChannel* other);
  friend void swap(CMsgDOTALeaveChatChannel& a, CMsgDOTALeaveChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaveChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaveChatChannel& from);
  void MergeFrom(const CMsgDOTALeaveChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaveChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaveChatChannel)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeaveChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage) */ {
 public:
  CMsgDOTAChatMessage();
  virtual ~CMsgDOTAChatMessage();

  CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from);

  inline CMsgDOTAChatMessage& operator=(const CMsgDOTAChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMessage(CMsgDOTAChatMessage&& from) noexcept
    : CMsgDOTAChatMessage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage& operator=(CMsgDOTAChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage*>(
               &_CMsgDOTAChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void Swap(CMsgDOTAChatMessage* other);
  friend void swap(CMsgDOTAChatMessage& a, CMsgDOTAChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAChatMessage& from);
  void MergeFrom(const CMsgDOTAChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 3;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 3;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string suggest_invite_name = 7;
  bool has_suggest_invite_name() const;
  void clear_suggest_invite_name();
  static const int kSuggestInviteNameFieldNumber = 7;
  const ::std::string& suggest_invite_name() const;
  void set_suggest_invite_name(const ::std::string& value);
  #if LANG_CXX11
  void set_suggest_invite_name(::std::string&& value);
  #endif
  void set_suggest_invite_name(const char* value);
  void set_suggest_invite_name(const char* value, size_t size);
  ::std::string* mutable_suggest_invite_name();
  ::std::string* release_suggest_invite_name();
  void set_allocated_suggest_invite_name(::std::string* suggest_invite_name);

  // optional uint64 channel_id = 2;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 suggest_invite_account_id = 6;
  bool has_suggest_invite_account_id() const;
  void clear_suggest_invite_account_id();
  static const int kSuggestInviteAccountIdFieldNumber = 6;
  ::google::protobuf::uint32 suggest_invite_account_id() const;
  void set_suggest_invite_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_persona_name();
  void clear_has_persona_name();
  void set_has_text();
  void clear_has_text();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_suggest_invite_account_id();
  void clear_has_suggest_invite_account_id();
  void set_has_suggest_invite_name();
  void clear_has_suggest_invite_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr suggest_invite_name_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 suggest_invite_account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAChatMessageImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASetChatChannelVerbosity_ChannelVerbosity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity) */ {
 public:
  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity();
  virtual ~CMsgDOTASetChatChannelVerbosity_ChannelVerbosity();

  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity(const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& from);

  inline CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& operator=(const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity&& from) noexcept
    : CMsgDOTASetChatChannelVerbosity_ChannelVerbosity() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& operator=(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*>(
               &_CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void Swap(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* other);
  friend void swap(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& a, CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& from);
  void MergeFrom(const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 suppression_flags = 2 [default = 0];
  bool has_suppression_flags() const;
  void clear_suppression_flags();
  static const int kSuppressionFlagsFieldNumber = 2;
  ::google::protobuf::uint32 suppression_flags() const;
  void set_suppression_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_suppression_flags();
  void clear_has_suppression_flags();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint32 suppression_flags_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASetChatChannelVerbosity_ChannelVerbosityImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASetChatChannelVerbosity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetChatChannelVerbosity) */ {
 public:
  CMsgDOTASetChatChannelVerbosity();
  virtual ~CMsgDOTASetChatChannelVerbosity();

  CMsgDOTASetChatChannelVerbosity(const CMsgDOTASetChatChannelVerbosity& from);

  inline CMsgDOTASetChatChannelVerbosity& operator=(const CMsgDOTASetChatChannelVerbosity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASetChatChannelVerbosity(CMsgDOTASetChatChannelVerbosity&& from) noexcept
    : CMsgDOTASetChatChannelVerbosity() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetChatChannelVerbosity& operator=(CMsgDOTASetChatChannelVerbosity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetChatChannelVerbosity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASetChatChannelVerbosity* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetChatChannelVerbosity*>(
               &_CMsgDOTASetChatChannelVerbosity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void Swap(CMsgDOTASetChatChannelVerbosity* other);
  friend void swap(CMsgDOTASetChatChannelVerbosity& a, CMsgDOTASetChatChannelVerbosity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetChatChannelVerbosity* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASetChatChannelVerbosity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASetChatChannelVerbosity& from);
  void MergeFrom(const CMsgDOTASetChatChannelVerbosity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASetChatChannelVerbosity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASetChatChannelVerbosity_ChannelVerbosity ChannelVerbosity;

  typedef CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t DOTAChatChannelSuppressNotificationsFlags_t;
  static const DOTAChatChannelSuppressNotificationsFlags_t DOTAChannel_AllVerbose =
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannel_AllVerbose;
  static const DOTAChatChannelSuppressNotificationsFlags_t DOTAChannelIgnore_OthersJoined =
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChannelIgnore_OthersJoined;
  static inline bool DOTAChatChannelSuppressNotificationsFlags_t_IsValid(int value) {
    return CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_IsValid(value);
  }
  static const DOTAChatChannelSuppressNotificationsFlags_t DOTAChatChannelSuppressNotificationsFlags_t_MIN =
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_MIN;
  static const DOTAChatChannelSuppressNotificationsFlags_t DOTAChatChannelSuppressNotificationsFlags_t_MAX =
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_MAX;
  static const int DOTAChatChannelSuppressNotificationsFlags_t_ARRAYSIZE =
    CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_DOTAChatChannelSuppressNotificationsFlags_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DOTAChatChannelSuppressNotificationsFlags_t_descriptor() {
    return CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_descriptor();
  }
  static inline const ::std::string& DOTAChatChannelSuppressNotificationsFlags_t_Name(DOTAChatChannelSuppressNotificationsFlags_t value) {
    return CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_Name(value);
  }
  static inline bool DOTAChatChannelSuppressNotificationsFlags_t_Parse(const ::std::string& name,
      DOTAChatChannelSuppressNotificationsFlags_t* value) {
    return CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTASetChatChannelVerbosity.ChannelVerbosity verbosities = 1;
  int verbosities_size() const;
  void clear_verbosities();
  static const int kVerbositiesFieldNumber = 1;
  const ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& verbosities(int index) const;
  ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* mutable_verbosities(int index);
  ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* add_verbosities();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity >*
      mutable_verbosities();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity >&
      verbosities() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTASetChatChannelVerbosity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity > verbosities_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASetChatChannelVerbosityImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAChatMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMember) */ {
 public:
  CMsgDOTAChatMember();
  virtual ~CMsgDOTAChatMember();

  CMsgDOTAChatMember(const CMsgDOTAChatMember& from);

  inline CMsgDOTAChatMember& operator=(const CMsgDOTAChatMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatMember(CMsgDOTAChatMember&& from) noexcept
    : CMsgDOTAChatMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMember& operator=(CMsgDOTAChatMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMember*>(
               &_CMsgDOTAChatMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    132;

  void Swap(CMsgDOTAChatMember* other);
  friend void swap(CMsgDOTAChatMember& a, CMsgDOTAChatMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAChatMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAChatMember& from);
  void MergeFrom(const CMsgDOTAChatMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAChatMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMember)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_persona_name();
  void clear_has_persona_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAChatMemberImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinChatChannelResponse) */ {
 public:
  CMsgDOTAJoinChatChannelResponse();
  virtual ~CMsgDOTAJoinChatChannelResponse();

  CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from);

  inline CMsgDOTAJoinChatChannelResponse& operator=(const CMsgDOTAJoinChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinChatChannelResponse(CMsgDOTAJoinChatChannelResponse&& from) noexcept
    : CMsgDOTAJoinChatChannelResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannelResponse& operator=(CMsgDOTAJoinChatChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinChatChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinChatChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannelResponse*>(
               &_CMsgDOTAJoinChatChannelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    133;

  void Swap(CMsgDOTAJoinChatChannelResponse* other);
  friend void swap(CMsgDOTAJoinChatChannelResponse& a, CMsgDOTAJoinChatChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinChatChannelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAJoinChatChannelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAJoinChatChannelResponse& from);
  void MergeFrom(const CMsgDOTAJoinChatChannelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAJoinChatChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAChatMember members = 5;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 5;
  const ::CMsgDOTAChatMember& members(int index) const;
  ::CMsgDOTAChatMember* mutable_members(int index);
  ::CMsgDOTAChatMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
      members() const;

  // optional string channel_name = 2;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional uint32 response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::google::protobuf::uint32 response() const;
  void set_response(::google::protobuf::uint32 value);

  // optional uint32 max_members = 4;
  bool has_max_members() const;
  void clear_max_members();
  static const int kMaxMembersFieldNumber = 4;
  ::google::protobuf::uint32 max_members() const;
  void set_max_members(::google::protobuf::uint32 value);

  // optional fixed64 channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannelResponse)
 private:
  void set_has_response();
  void clear_has_response();
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_max_members();
  void clear_has_max_members();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember > members_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::uint32 response_;
  ::google::protobuf::uint32 max_members_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAJoinChatChannelResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelFullUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatChannelFullUpdate) */ {
 public:
  CMsgDOTAChatChannelFullUpdate();
  virtual ~CMsgDOTAChatChannelFullUpdate();

  CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from);

  inline CMsgDOTAChatChannelFullUpdate& operator=(const CMsgDOTAChatChannelFullUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAChatChannelFullUpdate(CMsgDOTAChatChannelFullUpdate&& from) noexcept
    : CMsgDOTAChatChannelFullUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatChannelFullUpdate& operator=(CMsgDOTAChatChannelFullUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatChannelFullUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAChatChannelFullUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatChannelFullUpdate*>(
               &_CMsgDOTAChatChannelFullUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    134;

  void Swap(CMsgDOTAChatChannelFullUpdate* other);
  friend void swap(CMsgDOTAChatChannelFullUpdate& a, CMsgDOTAChatChannelFullUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAChatChannelFullUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAChatChannelFullUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAChatChannelFullUpdate& from);
  void MergeFrom(const CMsgDOTAChatChannelFullUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAChatChannelFullUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAChatMember members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::CMsgDOTAChatMember& members(int index) const;
  ::CMsgDOTAChatMember* mutable_members(int index);
  ::CMsgDOTAChatMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
      members() const;

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatChannelFullUpdate)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember > members_;
  ::google::protobuf::uint64 channel_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAChatChannelFullUpdateImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAOtherJoinedChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAOtherJoinedChatChannel) */ {
 public:
  CMsgDOTAOtherJoinedChatChannel();
  virtual ~CMsgDOTAOtherJoinedChatChannel();

  CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from);

  inline CMsgDOTAOtherJoinedChatChannel& operator=(const CMsgDOTAOtherJoinedChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAOtherJoinedChatChannel(CMsgDOTAOtherJoinedChatChannel&& from) noexcept
    : CMsgDOTAOtherJoinedChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherJoinedChatChannel& operator=(CMsgDOTAOtherJoinedChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAOtherJoinedChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAOtherJoinedChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherJoinedChatChannel*>(
               &_CMsgDOTAOtherJoinedChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    135;

  void Swap(CMsgDOTAOtherJoinedChatChannel* other);
  friend void swap(CMsgDOTAOtherJoinedChatChannel& a, CMsgDOTAOtherJoinedChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAOtherJoinedChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAOtherJoinedChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAOtherJoinedChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string persona_name = 2;
  bool has_persona_name() const;
  void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  const ::std::string& persona_name() const;
  void set_persona_name(const ::std::string& value);
  #if LANG_CXX11
  void set_persona_name(::std::string&& value);
  #endif
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  ::std::string* mutable_persona_name();
  ::std::string* release_persona_name();
  void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional fixed64 steam_id = 3;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherJoinedChatChannel)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_persona_name();
  void clear_has_persona_name();
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr persona_name_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAOtherJoinedChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAOtherLeftChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAOtherLeftChatChannel) */ {
 public:
  CMsgDOTAOtherLeftChatChannel();
  virtual ~CMsgDOTAOtherLeftChatChannel();

  CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from);

  inline CMsgDOTAOtherLeftChatChannel& operator=(const CMsgDOTAOtherLeftChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAOtherLeftChatChannel(CMsgDOTAOtherLeftChatChannel&& from) noexcept
    : CMsgDOTAOtherLeftChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherLeftChatChannel& operator=(CMsgDOTAOtherLeftChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAOtherLeftChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAOtherLeftChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherLeftChatChannel*>(
               &_CMsgDOTAOtherLeftChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    136;

  void Swap(CMsgDOTAOtherLeftChatChannel* other);
  friend void swap(CMsgDOTAOtherLeftChatChannel& a, CMsgDOTAOtherLeftChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAOtherLeftChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAOtherLeftChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAOtherLeftChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherLeftChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAOtherLeftChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherLeftChatChannel)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAOtherLeftChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestDefaultChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestDefaultChatChannel) */ {
 public:
  CMsgDOTARequestDefaultChatChannel();
  virtual ~CMsgDOTARequestDefaultChatChannel();

  CMsgDOTARequestDefaultChatChannel(const CMsgDOTARequestDefaultChatChannel& from);

  inline CMsgDOTARequestDefaultChatChannel& operator=(const CMsgDOTARequestDefaultChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestDefaultChatChannel(CMsgDOTARequestDefaultChatChannel&& from) noexcept
    : CMsgDOTARequestDefaultChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestDefaultChatChannel& operator=(CMsgDOTARequestDefaultChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestDefaultChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestDefaultChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestDefaultChatChannel*>(
               &_CMsgDOTARequestDefaultChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    137;

  void Swap(CMsgDOTARequestDefaultChatChannel* other);
  friend void swap(CMsgDOTARequestDefaultChatChannel& a, CMsgDOTARequestDefaultChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestDefaultChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestDefaultChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestDefaultChatChannel& from);
  void MergeFrom(const CMsgDOTARequestDefaultChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestDefaultChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestDefaultChatChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestDefaultChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestDefaultChatChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestDefaultChatChannelResponse) */ {
 public:
  CMsgDOTARequestDefaultChatChannelResponse();
  virtual ~CMsgDOTARequestDefaultChatChannelResponse();

  CMsgDOTARequestDefaultChatChannelResponse(const CMsgDOTARequestDefaultChatChannelResponse& from);

  inline CMsgDOTARequestDefaultChatChannelResponse& operator=(const CMsgDOTARequestDefaultChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestDefaultChatChannelResponse(CMsgDOTARequestDefaultChatChannelResponse&& from) noexcept
    : CMsgDOTARequestDefaultChatChannelResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestDefaultChatChannelResponse& operator=(CMsgDOTARequestDefaultChatChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestDefaultChatChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestDefaultChatChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestDefaultChatChannelResponse*>(
               &_CMsgDOTARequestDefaultChatChannelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    138;

  void Swap(CMsgDOTARequestDefaultChatChannelResponse* other);
  friend void swap(CMsgDOTARequestDefaultChatChannelResponse& a, CMsgDOTARequestDefaultChatChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestDefaultChatChannelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestDefaultChatChannelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestDefaultChatChannelResponse& from);
  void MergeFrom(const CMsgDOTARequestDefaultChatChannelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestDefaultChatChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestDefaultChatChannelResponse)
 private:
  void set_has_channel_name();
  void clear_has_channel_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestDefaultChatChannelResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelList) */ {
 public:
  CMsgDOTARequestChatChannelList();
  virtual ~CMsgDOTARequestChatChannelList();

  CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from);

  inline CMsgDOTARequestChatChannelList& operator=(const CMsgDOTARequestChatChannelList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelList(CMsgDOTARequestChatChannelList&& from) noexcept
    : CMsgDOTARequestChatChannelList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelList& operator=(CMsgDOTARequestChatChannelList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelList*>(
               &_CMsgDOTARequestChatChannelList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    139;

  void Swap(CMsgDOTARequestChatChannelList* other);
  friend void swap(CMsgDOTARequestChatChannelList& a, CMsgDOTARequestChatChannelList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelList* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestChatChannelList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestChatChannelList& from);
  void MergeFrom(const CMsgDOTARequestChatChannelList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestChatChannelList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestChatChannelListImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse_ChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelListResponse.ChatChannel) */ {
 public:
  CMsgDOTARequestChatChannelListResponse_ChatChannel();
  virtual ~CMsgDOTARequestChatChannelListResponse_ChatChannel();

  CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelListResponse_ChatChannel(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse_ChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelListResponse_ChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelListResponse_ChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse_ChatChannel*>(
               &_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    140;

  void Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);
  friend void swap(CMsgDOTARequestChatChannelListResponse_ChatChannel& a, CMsgDOTARequestChatChannelListResponse_ChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestChatChannelListResponse_ChatChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional uint32 num_members = 2;
  bool has_num_members() const;
  void clear_num_members();
  static const int kNumMembersFieldNumber = 2;
  ::google::protobuf::uint32 num_members() const;
  void set_num_members(::google::protobuf::uint32 value);

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 3;
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse.ChatChannel)
 private:
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_num_members();
  void clear_has_num_members();
  void set_has_channel_type();
  void clear_has_channel_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::uint32 num_members_;
  int channel_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannelImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelListResponse) */ {
 public:
  CMsgDOTARequestChatChannelListResponse();
  virtual ~CMsgDOTARequestChatChannelListResponse();

  CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from);

  inline CMsgDOTARequestChatChannelListResponse& operator=(const CMsgDOTARequestChatChannelListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestChatChannelListResponse(CMsgDOTARequestChatChannelListResponse&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse& operator=(CMsgDOTARequestChatChannelListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestChatChannelListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse*>(
               &_CMsgDOTARequestChatChannelListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    141;

  void Swap(CMsgDOTARequestChatChannelListResponse* other);
  friend void swap(CMsgDOTARequestChatChannelListResponse& a, CMsgDOTARequestChatChannelListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestChatChannelListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestChatChannelListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestChatChannelListResponse_ChatChannel ChatChannel;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& channels(int index) const;
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* mutable_channels(int index);
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* add_channels();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
      mutable_channels();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel > channels_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestChatChannelListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildSDO_Member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildSDO.Member) */ {
 public:
  CMsgDOTAGuildSDO_Member();
  virtual ~CMsgDOTAGuildSDO_Member();

  CMsgDOTAGuildSDO_Member(const CMsgDOTAGuildSDO_Member& from);

  inline CMsgDOTAGuildSDO_Member& operator=(const CMsgDOTAGuildSDO_Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildSDO_Member(CMsgDOTAGuildSDO_Member&& from) noexcept
    : CMsgDOTAGuildSDO_Member() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildSDO_Member& operator=(CMsgDOTAGuildSDO_Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildSDO_Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildSDO_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildSDO_Member*>(
               &_CMsgDOTAGuildSDO_Member_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    142;

  void Swap(CMsgDOTAGuildSDO_Member* other);
  friend void swap(CMsgDOTAGuildSDO_Member& a, CMsgDOTAGuildSDO_Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildSDO_Member* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildSDO_Member* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildSDO_Member& from);
  void MergeFrom(const CMsgDOTAGuildSDO_Member& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildSDO_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_joined = 2;
  bool has_time_joined() const;
  void clear_time_joined();
  static const int kTimeJoinedFieldNumber = 2;
  ::google::protobuf::uint32 time_joined() const;
  void set_time_joined(::google::protobuf::uint32 value);

  // optional uint32 role = 3;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  ::google::protobuf::uint32 role() const;
  void set_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildSDO.Member)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_joined();
  void clear_has_time_joined();
  void set_has_role();
  void clear_has_role();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_joined_;
  ::google::protobuf::uint32 role_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildSDO_MemberImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildSDO_Invitation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildSDO.Invitation) */ {
 public:
  CMsgDOTAGuildSDO_Invitation();
  virtual ~CMsgDOTAGuildSDO_Invitation();

  CMsgDOTAGuildSDO_Invitation(const CMsgDOTAGuildSDO_Invitation& from);

  inline CMsgDOTAGuildSDO_Invitation& operator=(const CMsgDOTAGuildSDO_Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildSDO_Invitation(CMsgDOTAGuildSDO_Invitation&& from) noexcept
    : CMsgDOTAGuildSDO_Invitation() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildSDO_Invitation& operator=(CMsgDOTAGuildSDO_Invitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildSDO_Invitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildSDO_Invitation* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildSDO_Invitation*>(
               &_CMsgDOTAGuildSDO_Invitation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    143;

  void Swap(CMsgDOTAGuildSDO_Invitation* other);
  friend void swap(CMsgDOTAGuildSDO_Invitation& a, CMsgDOTAGuildSDO_Invitation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildSDO_Invitation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildSDO_Invitation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildSDO_Invitation& from);
  void MergeFrom(const CMsgDOTAGuildSDO_Invitation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildSDO_Invitation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_sent = 2;
  bool has_time_sent() const;
  void clear_time_sent();
  static const int kTimeSentFieldNumber = 2;
  ::google::protobuf::uint32 time_sent() const;
  void set_time_sent(::google::protobuf::uint32 value);

  // optional uint32 account_id_sender = 3;
  bool has_account_id_sender() const;
  void clear_account_id_sender();
  static const int kAccountIdSenderFieldNumber = 3;
  ::google::protobuf::uint32 account_id_sender() const;
  void set_account_id_sender(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildSDO.Invitation)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_sent();
  void clear_has_time_sent();
  void set_has_account_id_sender();
  void clear_has_account_id_sender();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_sent_;
  ::google::protobuf::uint32 account_id_sender_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildSDO_InvitationImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildSDO) */ {
 public:
  CMsgDOTAGuildSDO();
  virtual ~CMsgDOTAGuildSDO();

  CMsgDOTAGuildSDO(const CMsgDOTAGuildSDO& from);

  inline CMsgDOTAGuildSDO& operator=(const CMsgDOTAGuildSDO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildSDO(CMsgDOTAGuildSDO&& from) noexcept
    : CMsgDOTAGuildSDO() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildSDO& operator=(CMsgDOTAGuildSDO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildSDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildSDO*>(
               &_CMsgDOTAGuildSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    144;

  void Swap(CMsgDOTAGuildSDO* other);
  friend void swap(CMsgDOTAGuildSDO& a, CMsgDOTAGuildSDO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildSDO& from);
  void MergeFrom(const CMsgDOTAGuildSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildSDO_Member Member;
  typedef CMsgDOTAGuildSDO_Invitation Invitation;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAGuildSDO.Member members = 9;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 9;
  const ::CMsgDOTAGuildSDO_Member& members(int index) const;
  ::CMsgDOTAGuildSDO_Member* mutable_members(int index);
  ::CMsgDOTAGuildSDO_Member* add_members();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Member >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Member >&
      members() const;

  // repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
  int invitations_size() const;
  void clear_invitations();
  static const int kInvitationsFieldNumber = 10;
  const ::CMsgDOTAGuildSDO_Invitation& invitations(int index) const;
  ::CMsgDOTAGuildSDO_Invitation* mutable_invitations(int index);
  ::CMsgDOTAGuildSDO_Invitation* add_invitations();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Invitation >*
      mutable_invitations();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Invitation >&
      invitations() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string message = 11;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 11;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 4;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 4;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint64 logo = 6;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 6;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 7;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 7;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 8;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 8;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 time_disbanded = 5;
  bool has_time_disbanded() const;
  void clear_time_disbanded();
  static const int kTimeDisbandedFieldNumber = 5;
  ::google::protobuf::uint32 time_disbanded() const;
  void set_time_disbanded(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildSDO)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_time_disbanded();
  void clear_has_time_disbanded();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Member > members_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Invitation > invitations_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint32 time_disbanded_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildSDOImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildAuditSDO_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildAuditSDO.Entry) */ {
 public:
  CMsgDOTAGuildAuditSDO_Entry();
  virtual ~CMsgDOTAGuildAuditSDO_Entry();

  CMsgDOTAGuildAuditSDO_Entry(const CMsgDOTAGuildAuditSDO_Entry& from);

  inline CMsgDOTAGuildAuditSDO_Entry& operator=(const CMsgDOTAGuildAuditSDO_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildAuditSDO_Entry(CMsgDOTAGuildAuditSDO_Entry&& from) noexcept
    : CMsgDOTAGuildAuditSDO_Entry() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildAuditSDO_Entry& operator=(CMsgDOTAGuildAuditSDO_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildAuditSDO_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildAuditSDO_Entry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildAuditSDO_Entry*>(
               &_CMsgDOTAGuildAuditSDO_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    145;

  void Swap(CMsgDOTAGuildAuditSDO_Entry* other);
  friend void swap(CMsgDOTAGuildAuditSDO_Entry& a, CMsgDOTAGuildAuditSDO_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildAuditSDO_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildAuditSDO_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildAuditSDO_Entry& from);
  void MergeFrom(const CMsgDOTAGuildAuditSDO_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildAuditSDO_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_index = 1;
  bool has_event_index() const;
  void clear_event_index();
  static const int kEventIndexFieldNumber = 1;
  ::google::protobuf::uint32 event_index() const;
  void set_event_index(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::google::protobuf::uint32 action() const;
  void set_action(::google::protobuf::uint32 value);

  // optional uint32 account_id_requestor = 4;
  bool has_account_id_requestor() const;
  void clear_account_id_requestor();
  static const int kAccountIdRequestorFieldNumber = 4;
  ::google::protobuf::uint32 account_id_requestor() const;
  void set_account_id_requestor(::google::protobuf::uint32 value);

  // optional uint32 account_id_target = 5;
  bool has_account_id_target() const;
  void clear_account_id_target();
  static const int kAccountIdTargetFieldNumber = 5;
  ::google::protobuf::uint32 account_id_target() const;
  void set_account_id_target(::google::protobuf::uint32 value);

  // optional uint32 reference_data_a = 6;
  bool has_reference_data_a() const;
  void clear_reference_data_a();
  static const int kReferenceDataAFieldNumber = 6;
  ::google::protobuf::uint32 reference_data_a() const;
  void set_reference_data_a(::google::protobuf::uint32 value);

  // optional uint32 reference_data_b = 7;
  bool has_reference_data_b() const;
  void clear_reference_data_b();
  static const int kReferenceDataBFieldNumber = 7;
  ::google::protobuf::uint32 reference_data_b() const;
  void set_reference_data_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildAuditSDO.Entry)
 private:
  void set_has_event_index();
  void clear_has_event_index();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_action();
  void clear_has_action();
  void set_has_account_id_requestor();
  void clear_has_account_id_requestor();
  void set_has_account_id_target();
  void clear_has_account_id_target();
  void set_has_reference_data_a();
  void clear_has_reference_data_a();
  void set_has_reference_data_b();
  void clear_has_reference_data_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_index_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 action_;
  ::google::protobuf::uint32 account_id_requestor_;
  ::google::protobuf::uint32 account_id_target_;
  ::google::protobuf::uint32 reference_data_a_;
  ::google::protobuf::uint32 reference_data_b_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildAuditSDO_EntryImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildAuditSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildAuditSDO) */ {
 public:
  CMsgDOTAGuildAuditSDO();
  virtual ~CMsgDOTAGuildAuditSDO();

  CMsgDOTAGuildAuditSDO(const CMsgDOTAGuildAuditSDO& from);

  inline CMsgDOTAGuildAuditSDO& operator=(const CMsgDOTAGuildAuditSDO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildAuditSDO(CMsgDOTAGuildAuditSDO&& from) noexcept
    : CMsgDOTAGuildAuditSDO() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildAuditSDO& operator=(CMsgDOTAGuildAuditSDO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildAuditSDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildAuditSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildAuditSDO*>(
               &_CMsgDOTAGuildAuditSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    146;

  void Swap(CMsgDOTAGuildAuditSDO* other);
  friend void swap(CMsgDOTAGuildAuditSDO& a, CMsgDOTAGuildAuditSDO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildAuditSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildAuditSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildAuditSDO& from);
  void MergeFrom(const CMsgDOTAGuildAuditSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildAuditSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildAuditSDO_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::CMsgDOTAGuildAuditSDO_Entry& entries(int index) const;
  ::CMsgDOTAGuildAuditSDO_Entry* mutable_entries(int index);
  ::CMsgDOTAGuildAuditSDO_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildAuditSDO_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildAuditSDO_Entry >&
      entries() const;

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildAuditSDO)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildAuditSDO_Entry > entries_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildAuditSDOImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAAccountGuildMembershipsSDO_Membership : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAAccountGuildMembershipsSDO.Membership) */ {
 public:
  CMsgDOTAAccountGuildMembershipsSDO_Membership();
  virtual ~CMsgDOTAAccountGuildMembershipsSDO_Membership();

  CMsgDOTAAccountGuildMembershipsSDO_Membership(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from);

  inline CMsgDOTAAccountGuildMembershipsSDO_Membership& operator=(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAAccountGuildMembershipsSDO_Membership(CMsgDOTAAccountGuildMembershipsSDO_Membership&& from) noexcept
    : CMsgDOTAAccountGuildMembershipsSDO_Membership() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAAccountGuildMembershipsSDO_Membership& operator=(CMsgDOTAAccountGuildMembershipsSDO_Membership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAAccountGuildMembershipsSDO_Membership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAAccountGuildMembershipsSDO_Membership* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAAccountGuildMembershipsSDO_Membership*>(
               &_CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    147;

  void Swap(CMsgDOTAAccountGuildMembershipsSDO_Membership* other);
  friend void swap(CMsgDOTAAccountGuildMembershipsSDO_Membership& a, CMsgDOTAAccountGuildMembershipsSDO_Membership& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAAccountGuildMembershipsSDO_Membership* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAAccountGuildMembershipsSDO_Membership* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from);
  void MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAAccountGuildMembershipsSDO_Membership* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 role = 2;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  ::google::protobuf::uint32 role() const;
  void set_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAAccountGuildMembershipsSDO.Membership)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_role();
  void clear_has_role();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 role_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_MembershipImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAAccountGuildMembershipsSDO_Invitation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAAccountGuildMembershipsSDO.Invitation) */ {
 public:
  CMsgDOTAAccountGuildMembershipsSDO_Invitation();
  virtual ~CMsgDOTAAccountGuildMembershipsSDO_Invitation();

  CMsgDOTAAccountGuildMembershipsSDO_Invitation(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from);

  inline CMsgDOTAAccountGuildMembershipsSDO_Invitation& operator=(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAAccountGuildMembershipsSDO_Invitation(CMsgDOTAAccountGuildMembershipsSDO_Invitation&& from) noexcept
    : CMsgDOTAAccountGuildMembershipsSDO_Invitation() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAAccountGuildMembershipsSDO_Invitation& operator=(CMsgDOTAAccountGuildMembershipsSDO_Invitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAAccountGuildMembershipsSDO_Invitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAAccountGuildMembershipsSDO_Invitation* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAAccountGuildMembershipsSDO_Invitation*>(
               &_CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    148;

  void Swap(CMsgDOTAAccountGuildMembershipsSDO_Invitation* other);
  friend void swap(CMsgDOTAAccountGuildMembershipsSDO_Invitation& a, CMsgDOTAAccountGuildMembershipsSDO_Invitation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAAccountGuildMembershipsSDO_Invitation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAAccountGuildMembershipsSDO_Invitation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from);
  void MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAAccountGuildMembershipsSDO_Invitation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 time_sent = 2;
  bool has_time_sent() const;
  void clear_time_sent();
  static const int kTimeSentFieldNumber = 2;
  ::google::protobuf::uint32 time_sent() const;
  void set_time_sent(::google::protobuf::uint32 value);

  // optional uint32 account_id_sender = 3;
  bool has_account_id_sender() const;
  void clear_account_id_sender();
  static const int kAccountIdSenderFieldNumber = 3;
  ::google::protobuf::uint32 account_id_sender() const;
  void set_account_id_sender(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_time_sent();
  void clear_has_time_sent();
  void set_has_account_id_sender();
  void clear_has_account_id_sender();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 time_sent_;
  ::google::protobuf::uint32 account_id_sender_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAAccountGuildMembershipsSDO_InvitationImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAAccountGuildMembershipsSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAAccountGuildMembershipsSDO) */ {
 public:
  CMsgDOTAAccountGuildMembershipsSDO();
  virtual ~CMsgDOTAAccountGuildMembershipsSDO();

  CMsgDOTAAccountGuildMembershipsSDO(const CMsgDOTAAccountGuildMembershipsSDO& from);

  inline CMsgDOTAAccountGuildMembershipsSDO& operator=(const CMsgDOTAAccountGuildMembershipsSDO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAAccountGuildMembershipsSDO(CMsgDOTAAccountGuildMembershipsSDO&& from) noexcept
    : CMsgDOTAAccountGuildMembershipsSDO() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAAccountGuildMembershipsSDO& operator=(CMsgDOTAAccountGuildMembershipsSDO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAAccountGuildMembershipsSDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAAccountGuildMembershipsSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAAccountGuildMembershipsSDO*>(
               &_CMsgDOTAAccountGuildMembershipsSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    149;

  void Swap(CMsgDOTAAccountGuildMembershipsSDO* other);
  friend void swap(CMsgDOTAAccountGuildMembershipsSDO& a, CMsgDOTAAccountGuildMembershipsSDO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAAccountGuildMembershipsSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAAccountGuildMembershipsSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO& from);
  void MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAAccountGuildMembershipsSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAAccountGuildMembershipsSDO_Membership Membership;
  typedef CMsgDOTAAccountGuildMembershipsSDO_Invitation Invitation;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  int memberships_size() const;
  void clear_memberships();
  static const int kMembershipsFieldNumber = 2;
  const ::CMsgDOTAAccountGuildMembershipsSDO_Membership& memberships(int index) const;
  ::CMsgDOTAAccountGuildMembershipsSDO_Membership* mutable_memberships(int index);
  ::CMsgDOTAAccountGuildMembershipsSDO_Membership* add_memberships();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Membership >*
      mutable_memberships();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Membership >&
      memberships() const;

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  int invitations_size() const;
  void clear_invitations();
  static const int kInvitationsFieldNumber = 3;
  const ::CMsgDOTAAccountGuildMembershipsSDO_Invitation& invitations(int index) const;
  ::CMsgDOTAAccountGuildMembershipsSDO_Invitation* mutable_invitations(int index);
  ::CMsgDOTAAccountGuildMembershipsSDO_Invitation* add_invitations();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Invitation >*
      mutable_invitations();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Invitation >&
      invitations() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAAccountGuildMembershipsSDO)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Membership > memberships_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Invitation > invitations_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAAccountGuildMembershipsSDOImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildCreateRequest) */ {
 public:
  CMsgDOTAGuildCreateRequest();
  virtual ~CMsgDOTAGuildCreateRequest();

  CMsgDOTAGuildCreateRequest(const CMsgDOTAGuildCreateRequest& from);

  inline CMsgDOTAGuildCreateRequest& operator=(const CMsgDOTAGuildCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildCreateRequest(CMsgDOTAGuildCreateRequest&& from) noexcept
    : CMsgDOTAGuildCreateRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildCreateRequest& operator=(CMsgDOTAGuildCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildCreateRequest*>(
               &_CMsgDOTAGuildCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    150;

  void Swap(CMsgDOTAGuildCreateRequest* other);
  friend void swap(CMsgDOTAGuildCreateRequest& a, CMsgDOTAGuildCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildCreateRequest& from);
  void MergeFrom(const CMsgDOTAGuildCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional uint64 logo = 3;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 3;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 4;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 4;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 5;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 5;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildCreateRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildCreateRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildCreateResponse) */ {
 public:
  CMsgDOTAGuildCreateResponse();
  virtual ~CMsgDOTAGuildCreateResponse();

  CMsgDOTAGuildCreateResponse(const CMsgDOTAGuildCreateResponse& from);

  inline CMsgDOTAGuildCreateResponse& operator=(const CMsgDOTAGuildCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildCreateResponse(CMsgDOTAGuildCreateResponse&& from) noexcept
    : CMsgDOTAGuildCreateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildCreateResponse& operator=(CMsgDOTAGuildCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildCreateResponse*>(
               &_CMsgDOTAGuildCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    151;

  void Swap(CMsgDOTAGuildCreateResponse* other);
  friend void swap(CMsgDOTAGuildCreateResponse& a, CMsgDOTAGuildCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildCreateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildCreateResponse& from);
  void MergeFrom(const CMsgDOTAGuildCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildCreateResponse_EError EError;
  static const EError UNSPECIFIED =
    CMsgDOTAGuildCreateResponse_EError_UNSPECIFIED;
  static const EError NAME_EMPTY =
    CMsgDOTAGuildCreateResponse_EError_NAME_EMPTY;
  static const EError NAME_BAD_CHARACTERS =
    CMsgDOTAGuildCreateResponse_EError_NAME_BAD_CHARACTERS;
  static const EError NAME_TOO_LONG =
    CMsgDOTAGuildCreateResponse_EError_NAME_TOO_LONG;
  static const EError NAME_TAKEN =
    CMsgDOTAGuildCreateResponse_EError_NAME_TAKEN;
  static const EError TAG_EMPTY =
    CMsgDOTAGuildCreateResponse_EError_TAG_EMPTY;
  static const EError TAG_BAD_CHARACTERS =
    CMsgDOTAGuildCreateResponse_EError_TAG_BAD_CHARACTERS;
  static const EError TAG_TOO_LONG =
    CMsgDOTAGuildCreateResponse_EError_TAG_TOO_LONG;
  static const EError ACCOUNT_TOO_MANY_GUILDS =
    CMsgDOTAGuildCreateResponse_EError_ACCOUNT_TOO_MANY_GUILDS;
  static const EError LOGO_UPLOAD_FAILED =
    CMsgDOTAGuildCreateResponse_EError_LOGO_UPLOAD_FAILED;
  static inline bool EError_IsValid(int value) {
    return CMsgDOTAGuildCreateResponse_EError_IsValid(value);
  }
  static const EError EError_MIN =
    CMsgDOTAGuildCreateResponse_EError_EError_MIN;
  static const EError EError_MAX =
    CMsgDOTAGuildCreateResponse_EError_EError_MAX;
  static const int EError_ARRAYSIZE =
    CMsgDOTAGuildCreateResponse_EError_EError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EError_descriptor() {
    return CMsgDOTAGuildCreateResponse_EError_descriptor();
  }
  static inline const ::std::string& EError_Name(EError value) {
    return CMsgDOTAGuildCreateResponse_EError_Name(value);
  }
  static inline bool EError_Parse(const ::std::string& name,
      EError* value) {
    return CMsgDOTAGuildCreateResponse_EError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  ::CMsgDOTAGuildCreateResponse_EError errors(int index) const;
  void set_errors(int index, ::CMsgDOTAGuildCreateResponse_EError value);
  void add_errors(::CMsgDOTAGuildCreateResponse_EError value);
  const ::google::protobuf::RepeatedField<int>& errors() const;
  ::google::protobuf::RepeatedField<int>* mutable_errors();

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildCreateResponse)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> errors_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildCreateResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildSetAccountRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildSetAccountRoleRequest) */ {
 public:
  CMsgDOTAGuildSetAccountRoleRequest();
  virtual ~CMsgDOTAGuildSetAccountRoleRequest();

  CMsgDOTAGuildSetAccountRoleRequest(const CMsgDOTAGuildSetAccountRoleRequest& from);

  inline CMsgDOTAGuildSetAccountRoleRequest& operator=(const CMsgDOTAGuildSetAccountRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildSetAccountRoleRequest(CMsgDOTAGuildSetAccountRoleRequest&& from) noexcept
    : CMsgDOTAGuildSetAccountRoleRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildSetAccountRoleRequest& operator=(CMsgDOTAGuildSetAccountRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildSetAccountRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildSetAccountRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildSetAccountRoleRequest*>(
               &_CMsgDOTAGuildSetAccountRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    152;

  void Swap(CMsgDOTAGuildSetAccountRoleRequest* other);
  friend void swap(CMsgDOTAGuildSetAccountRoleRequest& a, CMsgDOTAGuildSetAccountRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildSetAccountRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildSetAccountRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildSetAccountRoleRequest& from);
  void MergeFrom(const CMsgDOTAGuildSetAccountRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildSetAccountRoleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 target_role = 3;
  bool has_target_role() const;
  void clear_target_role();
  static const int kTargetRoleFieldNumber = 3;
  ::google::protobuf::uint32 target_role() const;
  void set_target_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildSetAccountRoleRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_target_account_id();
  void clear_has_target_account_id();
  void set_has_target_role();
  void clear_has_target_role();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 target_role_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildSetAccountRoleRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildSetAccountRoleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildSetAccountRoleResponse) */ {
 public:
  CMsgDOTAGuildSetAccountRoleResponse();
  virtual ~CMsgDOTAGuildSetAccountRoleResponse();

  CMsgDOTAGuildSetAccountRoleResponse(const CMsgDOTAGuildSetAccountRoleResponse& from);

  inline CMsgDOTAGuildSetAccountRoleResponse& operator=(const CMsgDOTAGuildSetAccountRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildSetAccountRoleResponse(CMsgDOTAGuildSetAccountRoleResponse&& from) noexcept
    : CMsgDOTAGuildSetAccountRoleResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildSetAccountRoleResponse& operator=(CMsgDOTAGuildSetAccountRoleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildSetAccountRoleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildSetAccountRoleResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildSetAccountRoleResponse*>(
               &_CMsgDOTAGuildSetAccountRoleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    153;

  void Swap(CMsgDOTAGuildSetAccountRoleResponse* other);
  friend void swap(CMsgDOTAGuildSetAccountRoleResponse& a, CMsgDOTAGuildSetAccountRoleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildSetAccountRoleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildSetAccountRoleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildSetAccountRoleResponse& from);
  void MergeFrom(const CMsgDOTAGuildSetAccountRoleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildSetAccountRoleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildSetAccountRoleResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_UNSPECIFIED;
  static const EResult ERROR_NO_PERMISSION =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_NO_PERMISSION;
  static const EResult ERROR_NO_OTHER_LEADER =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_NO_OTHER_LEADER;
  static const EResult ERROR_ACCOUNT_TOO_MANY_GUILDS =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_ACCOUNT_TOO_MANY_GUILDS;
  static const EResult ERROR_GUILD_TOO_MANY_MEMBERS =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_ERROR_GUILD_TOO_MANY_MEMBERS;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAGuildSetAccountRoleResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAGuildSetAccountRoleResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAGuildSetAccountRoleResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAGuildSetAccountRoleResponse_EResult result() const;
  void set_result(::CMsgDOTAGuildSetAccountRoleResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildSetAccountRoleResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildSetAccountRoleResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildInviteAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildInviteAccountRequest) */ {
 public:
  CMsgDOTAGuildInviteAccountRequest();
  virtual ~CMsgDOTAGuildInviteAccountRequest();

  CMsgDOTAGuildInviteAccountRequest(const CMsgDOTAGuildInviteAccountRequest& from);

  inline CMsgDOTAGuildInviteAccountRequest& operator=(const CMsgDOTAGuildInviteAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildInviteAccountRequest(CMsgDOTAGuildInviteAccountRequest&& from) noexcept
    : CMsgDOTAGuildInviteAccountRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildInviteAccountRequest& operator=(CMsgDOTAGuildInviteAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildInviteAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildInviteAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildInviteAccountRequest*>(
               &_CMsgDOTAGuildInviteAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    154;

  void Swap(CMsgDOTAGuildInviteAccountRequest* other);
  friend void swap(CMsgDOTAGuildInviteAccountRequest& a, CMsgDOTAGuildInviteAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildInviteAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildInviteAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildInviteAccountRequest& from);
  void MergeFrom(const CMsgDOTAGuildInviteAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildInviteAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildInviteAccountRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_target_account_id();
  void clear_has_target_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 target_account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildInviteAccountRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildInviteAccountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildInviteAccountResponse) */ {
 public:
  CMsgDOTAGuildInviteAccountResponse();
  virtual ~CMsgDOTAGuildInviteAccountResponse();

  CMsgDOTAGuildInviteAccountResponse(const CMsgDOTAGuildInviteAccountResponse& from);

  inline CMsgDOTAGuildInviteAccountResponse& operator=(const CMsgDOTAGuildInviteAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildInviteAccountResponse(CMsgDOTAGuildInviteAccountResponse&& from) noexcept
    : CMsgDOTAGuildInviteAccountResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildInviteAccountResponse& operator=(CMsgDOTAGuildInviteAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildInviteAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildInviteAccountResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildInviteAccountResponse*>(
               &_CMsgDOTAGuildInviteAccountResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    155;

  void Swap(CMsgDOTAGuildInviteAccountResponse* other);
  friend void swap(CMsgDOTAGuildInviteAccountResponse& a, CMsgDOTAGuildInviteAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildInviteAccountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildInviteAccountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildInviteAccountResponse& from);
  void MergeFrom(const CMsgDOTAGuildInviteAccountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildInviteAccountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildInviteAccountResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAGuildInviteAccountResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_UNSPECIFIED;
  static const EResult ERROR_NO_PERMISSION =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_NO_PERMISSION;
  static const EResult ERROR_ACCOUNT_ALREADY_INVITED =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_ALREADY_INVITED;
  static const EResult ERROR_ACCOUNT_ALREADY_IN_GUILD =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_ALREADY_IN_GUILD;
  static const EResult ERROR_ACCOUNT_TOO_MANY_INVITES =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_TOO_MANY_INVITES;
  static const EResult ERROR_GUILD_TOO_MANY_INVITES =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_GUILD_TOO_MANY_INVITES;
  static const EResult ERROR_ACCOUNT_TOO_MANY_GUILDS =
    CMsgDOTAGuildInviteAccountResponse_EResult_ERROR_ACCOUNT_TOO_MANY_GUILDS;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAGuildInviteAccountResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAGuildInviteAccountResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAGuildInviteAccountResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAGuildInviteAccountResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAGuildInviteAccountResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAGuildInviteAccountResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAGuildInviteAccountResponse_EResult result() const;
  void set_result(::CMsgDOTAGuildInviteAccountResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildInviteAccountResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildInviteAccountResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildCancelInviteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildCancelInviteRequest) */ {
 public:
  CMsgDOTAGuildCancelInviteRequest();
  virtual ~CMsgDOTAGuildCancelInviteRequest();

  CMsgDOTAGuildCancelInviteRequest(const CMsgDOTAGuildCancelInviteRequest& from);

  inline CMsgDOTAGuildCancelInviteRequest& operator=(const CMsgDOTAGuildCancelInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildCancelInviteRequest(CMsgDOTAGuildCancelInviteRequest&& from) noexcept
    : CMsgDOTAGuildCancelInviteRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildCancelInviteRequest& operator=(CMsgDOTAGuildCancelInviteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildCancelInviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildCancelInviteRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildCancelInviteRequest*>(
               &_CMsgDOTAGuildCancelInviteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    156;

  void Swap(CMsgDOTAGuildCancelInviteRequest* other);
  friend void swap(CMsgDOTAGuildCancelInviteRequest& a, CMsgDOTAGuildCancelInviteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildCancelInviteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildCancelInviteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildCancelInviteRequest& from);
  void MergeFrom(const CMsgDOTAGuildCancelInviteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildCancelInviteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildCancelInviteRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_target_account_id();
  void clear_has_target_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 target_account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildCancelInviteRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildCancelInviteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildCancelInviteResponse) */ {
 public:
  CMsgDOTAGuildCancelInviteResponse();
  virtual ~CMsgDOTAGuildCancelInviteResponse();

  CMsgDOTAGuildCancelInviteResponse(const CMsgDOTAGuildCancelInviteResponse& from);

  inline CMsgDOTAGuildCancelInviteResponse& operator=(const CMsgDOTAGuildCancelInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildCancelInviteResponse(CMsgDOTAGuildCancelInviteResponse&& from) noexcept
    : CMsgDOTAGuildCancelInviteResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildCancelInviteResponse& operator=(CMsgDOTAGuildCancelInviteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildCancelInviteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildCancelInviteResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildCancelInviteResponse*>(
               &_CMsgDOTAGuildCancelInviteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    157;

  void Swap(CMsgDOTAGuildCancelInviteResponse* other);
  friend void swap(CMsgDOTAGuildCancelInviteResponse& a, CMsgDOTAGuildCancelInviteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildCancelInviteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildCancelInviteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildCancelInviteResponse& from);
  void MergeFrom(const CMsgDOTAGuildCancelInviteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildCancelInviteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildCancelInviteResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAGuildCancelInviteResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAGuildCancelInviteResponse_EResult_ERROR_UNSPECIFIED;
  static const EResult ERROR_NO_PERMISSION =
    CMsgDOTAGuildCancelInviteResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAGuildCancelInviteResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAGuildCancelInviteResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAGuildCancelInviteResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAGuildCancelInviteResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAGuildCancelInviteResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAGuildCancelInviteResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAGuildCancelInviteResponse_EResult result() const;
  void set_result(::CMsgDOTAGuildCancelInviteResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildCancelInviteResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildCancelInviteResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildUpdateDetailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildUpdateDetailsRequest) */ {
 public:
  CMsgDOTAGuildUpdateDetailsRequest();
  virtual ~CMsgDOTAGuildUpdateDetailsRequest();

  CMsgDOTAGuildUpdateDetailsRequest(const CMsgDOTAGuildUpdateDetailsRequest& from);

  inline CMsgDOTAGuildUpdateDetailsRequest& operator=(const CMsgDOTAGuildUpdateDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildUpdateDetailsRequest(CMsgDOTAGuildUpdateDetailsRequest&& from) noexcept
    : CMsgDOTAGuildUpdateDetailsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildUpdateDetailsRequest& operator=(CMsgDOTAGuildUpdateDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildUpdateDetailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildUpdateDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildUpdateDetailsRequest*>(
               &_CMsgDOTAGuildUpdateDetailsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    158;

  void Swap(CMsgDOTAGuildUpdateDetailsRequest* other);
  friend void swap(CMsgDOTAGuildUpdateDetailsRequest& a, CMsgDOTAGuildUpdateDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildUpdateDetailsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildUpdateDetailsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildUpdateDetailsRequest& from);
  void MergeFrom(const CMsgDOTAGuildUpdateDetailsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildUpdateDetailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 logo = 2;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 2;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 3;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 3;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 4;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 4;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildUpdateDetailsRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildUpdateDetailsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildUpdateDetailsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildUpdateDetailsResponse) */ {
 public:
  CMsgDOTAGuildUpdateDetailsResponse();
  virtual ~CMsgDOTAGuildUpdateDetailsResponse();

  CMsgDOTAGuildUpdateDetailsResponse(const CMsgDOTAGuildUpdateDetailsResponse& from);

  inline CMsgDOTAGuildUpdateDetailsResponse& operator=(const CMsgDOTAGuildUpdateDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildUpdateDetailsResponse(CMsgDOTAGuildUpdateDetailsResponse&& from) noexcept
    : CMsgDOTAGuildUpdateDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildUpdateDetailsResponse& operator=(CMsgDOTAGuildUpdateDetailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildUpdateDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildUpdateDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildUpdateDetailsResponse*>(
               &_CMsgDOTAGuildUpdateDetailsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    159;

  void Swap(CMsgDOTAGuildUpdateDetailsResponse* other);
  friend void swap(CMsgDOTAGuildUpdateDetailsResponse& a, CMsgDOTAGuildUpdateDetailsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildUpdateDetailsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildUpdateDetailsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildUpdateDetailsResponse& from);
  void MergeFrom(const CMsgDOTAGuildUpdateDetailsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildUpdateDetailsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildUpdateDetailsResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_ERROR_UNSPECIFIED;
  static const EResult ERROR_NO_PERMISSION =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAGuildUpdateDetailsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAGuildUpdateDetailsResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAGuildUpdateDetailsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAGuildUpdateDetailsResponse_EResult result() const;
  void set_result(::CMsgDOTAGuildUpdateDetailsResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildUpdateDetailsResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildUpdateDetailsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGCToGCUpdateOpenGuildPartyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest) */ {
 public:
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest();
  virtual ~CMsgDOTAGCToGCUpdateOpenGuildPartyRequest();

  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from);

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& operator=(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest&& from) noexcept
    : CMsgDOTAGCToGCUpdateOpenGuildPartyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& operator=(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest*>(
               &_CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    160;

  void Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* other);
  friend void swap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& a, CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from);
  void MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 member_account_ids = 3;
  int member_account_ids_size() const;
  void clear_member_account_ids();
  static const int kMemberAccountIdsFieldNumber = 3;
  ::google::protobuf::uint32 member_account_ids(int index) const;
  void set_member_account_ids(int index, ::google::protobuf::uint32 value);
  void add_member_account_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_account_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_account_ids();

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint64 party_id = 1;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
 private:
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_account_ids_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGCToGCUpdateOpenGuildPartyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse) */ {
 public:
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse();
  virtual ~CMsgDOTAGCToGCUpdateOpenGuildPartyResponse();

  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from);

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& operator=(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse&& from) noexcept
    : CMsgDOTAGCToGCUpdateOpenGuildPartyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& operator=(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse*>(
               &_CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    161;

  void Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* other);
  friend void swap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& a, CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from);
  void MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool maintain_association = 1;
  bool has_maintain_association() const;
  void clear_maintain_association();
  static const int kMaintainAssociationFieldNumber = 1;
  bool maintain_association() const;
  void set_maintain_association(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
 private:
  void set_has_maintain_association();
  void clear_has_maintain_association();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool maintain_association_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGCToGCUpdateOpenGuildPartyResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGCToGCDestroyOpenGuildPartyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest) */ {
 public:
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest();
  virtual ~CMsgDOTAGCToGCDestroyOpenGuildPartyRequest();

  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from);

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& operator=(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest&& from) noexcept
    : CMsgDOTAGCToGCDestroyOpenGuildPartyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& operator=(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest*>(
               &_CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    162;

  void Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* other);
  friend void swap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& a, CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from);
  void MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 party_id = 1;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
 private:
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_guild_id();
  void clear_has_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGCToGCDestroyOpenGuildPartyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse) */ {
 public:
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse();
  virtual ~CMsgDOTAGCToGCDestroyOpenGuildPartyResponse();

  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from);

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& operator=(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse&& from) noexcept
    : CMsgDOTAGCToGCDestroyOpenGuildPartyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& operator=(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse*>(
               &_CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    163;

  void Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* other);
  friend void swap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& a, CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from);
  void MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGCToGCDestroyOpenGuildPartyResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPartySetOpenGuildRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPartySetOpenGuildRequest) */ {
 public:
  CMsgDOTAPartySetOpenGuildRequest();
  virtual ~CMsgDOTAPartySetOpenGuildRequest();

  CMsgDOTAPartySetOpenGuildRequest(const CMsgDOTAPartySetOpenGuildRequest& from);

  inline CMsgDOTAPartySetOpenGuildRequest& operator=(const CMsgDOTAPartySetOpenGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPartySetOpenGuildRequest(CMsgDOTAPartySetOpenGuildRequest&& from) noexcept
    : CMsgDOTAPartySetOpenGuildRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPartySetOpenGuildRequest& operator=(CMsgDOTAPartySetOpenGuildRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPartySetOpenGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPartySetOpenGuildRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPartySetOpenGuildRequest*>(
               &_CMsgDOTAPartySetOpenGuildRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    164;

  void Swap(CMsgDOTAPartySetOpenGuildRequest* other);
  friend void swap(CMsgDOTAPartySetOpenGuildRequest& a, CMsgDOTAPartySetOpenGuildRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPartySetOpenGuildRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPartySetOpenGuildRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPartySetOpenGuildRequest& from);
  void MergeFrom(const CMsgDOTAPartySetOpenGuildRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPartySetOpenGuildRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPartySetOpenGuildRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPartySetOpenGuildRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPartySetOpenGuildResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPartySetOpenGuildResponse) */ {
 public:
  CMsgDOTAPartySetOpenGuildResponse();
  virtual ~CMsgDOTAPartySetOpenGuildResponse();

  CMsgDOTAPartySetOpenGuildResponse(const CMsgDOTAPartySetOpenGuildResponse& from);

  inline CMsgDOTAPartySetOpenGuildResponse& operator=(const CMsgDOTAPartySetOpenGuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPartySetOpenGuildResponse(CMsgDOTAPartySetOpenGuildResponse&& from) noexcept
    : CMsgDOTAPartySetOpenGuildResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPartySetOpenGuildResponse& operator=(CMsgDOTAPartySetOpenGuildResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPartySetOpenGuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPartySetOpenGuildResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPartySetOpenGuildResponse*>(
               &_CMsgDOTAPartySetOpenGuildResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    165;

  void Swap(CMsgDOTAPartySetOpenGuildResponse* other);
  friend void swap(CMsgDOTAPartySetOpenGuildResponse& a, CMsgDOTAPartySetOpenGuildResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPartySetOpenGuildResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPartySetOpenGuildResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPartySetOpenGuildResponse& from);
  void MergeFrom(const CMsgDOTAPartySetOpenGuildResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPartySetOpenGuildResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAPartySetOpenGuildResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAPartySetOpenGuildResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAPartySetOpenGuildResponse_EResult_ERROR_UNSPECIFIED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAPartySetOpenGuildResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAPartySetOpenGuildResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAPartySetOpenGuildResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAPartySetOpenGuildResponse_EResult result() const;
  void set_result(::CMsgDOTAPartySetOpenGuildResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPartySetOpenGuildResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPartySetOpenGuildResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAJoinOpenGuildPartyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinOpenGuildPartyRequest) */ {
 public:
  CMsgDOTAJoinOpenGuildPartyRequest();
  virtual ~CMsgDOTAJoinOpenGuildPartyRequest();

  CMsgDOTAJoinOpenGuildPartyRequest(const CMsgDOTAJoinOpenGuildPartyRequest& from);

  inline CMsgDOTAJoinOpenGuildPartyRequest& operator=(const CMsgDOTAJoinOpenGuildPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinOpenGuildPartyRequest(CMsgDOTAJoinOpenGuildPartyRequest&& from) noexcept
    : CMsgDOTAJoinOpenGuildPartyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinOpenGuildPartyRequest& operator=(CMsgDOTAJoinOpenGuildPartyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinOpenGuildPartyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinOpenGuildPartyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinOpenGuildPartyRequest*>(
               &_CMsgDOTAJoinOpenGuildPartyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    166;

  void Swap(CMsgDOTAJoinOpenGuildPartyRequest* other);
  friend void swap(CMsgDOTAJoinOpenGuildPartyRequest& a, CMsgDOTAJoinOpenGuildPartyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinOpenGuildPartyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAJoinOpenGuildPartyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from);
  void MergeFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAJoinOpenGuildPartyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 party_id = 1;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinOpenGuildPartyRequest)
 private:
  void set_has_party_id();
  void clear_has_party_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 party_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAJoinOpenGuildPartyRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAJoinOpenGuildPartyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinOpenGuildPartyResponse) */ {
 public:
  CMsgDOTAJoinOpenGuildPartyResponse();
  virtual ~CMsgDOTAJoinOpenGuildPartyResponse();

  CMsgDOTAJoinOpenGuildPartyResponse(const CMsgDOTAJoinOpenGuildPartyResponse& from);

  inline CMsgDOTAJoinOpenGuildPartyResponse& operator=(const CMsgDOTAJoinOpenGuildPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAJoinOpenGuildPartyResponse(CMsgDOTAJoinOpenGuildPartyResponse&& from) noexcept
    : CMsgDOTAJoinOpenGuildPartyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinOpenGuildPartyResponse& operator=(CMsgDOTAJoinOpenGuildPartyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinOpenGuildPartyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAJoinOpenGuildPartyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinOpenGuildPartyResponse*>(
               &_CMsgDOTAJoinOpenGuildPartyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    167;

  void Swap(CMsgDOTAJoinOpenGuildPartyResponse* other);
  friend void swap(CMsgDOTAJoinOpenGuildPartyResponse& a, CMsgDOTAJoinOpenGuildPartyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAJoinOpenGuildPartyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAJoinOpenGuildPartyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from);
  void MergeFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAJoinOpenGuildPartyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAJoinOpenGuildPartyResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_SUCCESS;
  static const EResult ERROR_UNSPECIFIED =
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_ERROR_UNSPECIFIED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAJoinOpenGuildPartyResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAJoinOpenGuildPartyResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAJoinOpenGuildPartyResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgDOTAJoinOpenGuildPartyResponse_EResult result() const;
  void set_result(::CMsgDOTAJoinOpenGuildPartyResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinOpenGuildPartyResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAJoinOpenGuildPartyResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildOpenPartyRefresh_OpenParty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildOpenPartyRefresh.OpenParty) */ {
 public:
  CMsgDOTAGuildOpenPartyRefresh_OpenParty();
  virtual ~CMsgDOTAGuildOpenPartyRefresh_OpenParty();

  CMsgDOTAGuildOpenPartyRefresh_OpenParty(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from);

  inline CMsgDOTAGuildOpenPartyRefresh_OpenParty& operator=(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildOpenPartyRefresh_OpenParty(CMsgDOTAGuildOpenPartyRefresh_OpenParty&& from) noexcept
    : CMsgDOTAGuildOpenPartyRefresh_OpenParty() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildOpenPartyRefresh_OpenParty& operator=(CMsgDOTAGuildOpenPartyRefresh_OpenParty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildOpenPartyRefresh_OpenParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildOpenPartyRefresh_OpenParty* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildOpenPartyRefresh_OpenParty*>(
               &_CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    168;

  void Swap(CMsgDOTAGuildOpenPartyRefresh_OpenParty* other);
  friend void swap(CMsgDOTAGuildOpenPartyRefresh_OpenParty& a, CMsgDOTAGuildOpenPartyRefresh_OpenParty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildOpenPartyRefresh_OpenParty* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildOpenPartyRefresh_OpenParty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from);
  void MergeFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildOpenPartyRefresh_OpenParty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 member_account_ids = 2;
  int member_account_ids_size() const;
  void clear_member_account_ids();
  static const int kMemberAccountIdsFieldNumber = 2;
  ::google::protobuf::uint32 member_account_ids(int index) const;
  void set_member_account_ids(int index, ::google::protobuf::uint32 value);
  void add_member_account_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_account_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_account_ids();

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint64 party_id = 1;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 time_created = 3;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 3;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
 private:
  void set_has_party_id();
  void clear_has_party_id();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_account_ids_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 time_created_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildOpenPartyRefresh_OpenPartyImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildOpenPartyRefresh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildOpenPartyRefresh) */ {
 public:
  CMsgDOTAGuildOpenPartyRefresh();
  virtual ~CMsgDOTAGuildOpenPartyRefresh();

  CMsgDOTAGuildOpenPartyRefresh(const CMsgDOTAGuildOpenPartyRefresh& from);

  inline CMsgDOTAGuildOpenPartyRefresh& operator=(const CMsgDOTAGuildOpenPartyRefresh& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildOpenPartyRefresh(CMsgDOTAGuildOpenPartyRefresh&& from) noexcept
    : CMsgDOTAGuildOpenPartyRefresh() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildOpenPartyRefresh& operator=(CMsgDOTAGuildOpenPartyRefresh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildOpenPartyRefresh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildOpenPartyRefresh* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildOpenPartyRefresh*>(
               &_CMsgDOTAGuildOpenPartyRefresh_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    169;

  void Swap(CMsgDOTAGuildOpenPartyRefresh* other);
  friend void swap(CMsgDOTAGuildOpenPartyRefresh& a, CMsgDOTAGuildOpenPartyRefresh& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildOpenPartyRefresh* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildOpenPartyRefresh* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildOpenPartyRefresh& from);
  void MergeFrom(const CMsgDOTAGuildOpenPartyRefresh& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildOpenPartyRefresh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildOpenPartyRefresh_OpenParty OpenParty;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  int open_parties_size() const;
  void clear_open_parties();
  static const int kOpenPartiesFieldNumber = 2;
  const ::CMsgDOTAGuildOpenPartyRefresh_OpenParty& open_parties(int index) const;
  ::CMsgDOTAGuildOpenPartyRefresh_OpenParty* mutable_open_parties(int index);
  ::CMsgDOTAGuildOpenPartyRefresh_OpenParty* add_open_parties();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildOpenPartyRefresh_OpenParty >*
      mutable_open_parties();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildOpenPartyRefresh_OpenParty >&
      open_parties() const;

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildOpenPartyRefresh)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildOpenPartyRefresh_OpenParty > open_parties_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildOpenPartyRefreshImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestGuildData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestGuildData) */ {
 public:
  CMsgDOTARequestGuildData();
  virtual ~CMsgDOTARequestGuildData();

  CMsgDOTARequestGuildData(const CMsgDOTARequestGuildData& from);

  inline CMsgDOTARequestGuildData& operator=(const CMsgDOTARequestGuildData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestGuildData(CMsgDOTARequestGuildData&& from) noexcept
    : CMsgDOTARequestGuildData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestGuildData& operator=(CMsgDOTARequestGuildData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestGuildData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestGuildData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestGuildData*>(
               &_CMsgDOTARequestGuildData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    170;

  void Swap(CMsgDOTARequestGuildData* other);
  friend void swap(CMsgDOTARequestGuildData& a, CMsgDOTARequestGuildData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestGuildData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestGuildData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestGuildData& from);
  void MergeFrom(const CMsgDOTARequestGuildData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestGuildData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestGuildData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestGuildDataImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildData) */ {
 public:
  CMsgDOTAGuildData();
  virtual ~CMsgDOTAGuildData();

  CMsgDOTAGuildData(const CMsgDOTAGuildData& from);

  inline CMsgDOTAGuildData& operator=(const CMsgDOTAGuildData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildData(CMsgDOTAGuildData&& from) noexcept
    : CMsgDOTAGuildData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildData& operator=(CMsgDOTAGuildData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildData*>(
               &_CMsgDOTAGuildData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    171;

  void Swap(CMsgDOTAGuildData* other);
  friend void swap(CMsgDOTAGuildData& a, CMsgDOTAGuildData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildData& from);
  void MergeFrom(const CMsgDOTAGuildData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAGuildSDO guild_data = 3;
  bool has_guild_data() const;
  void clear_guild_data();
  static const int kGuildDataFieldNumber = 3;
  const ::CMsgDOTAGuildSDO& guild_data() const;
  ::CMsgDOTAGuildSDO* release_guild_data();
  ::CMsgDOTAGuildSDO* mutable_guild_data();
  void set_allocated_guild_data(::CMsgDOTAGuildSDO* guild_data);

  // optional bool in_guild = 1;
  bool has_in_guild() const;
  void clear_in_guild();
  static const int kInGuildFieldNumber = 1;
  bool in_guild() const;
  void set_in_guild(bool value);

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildData)
 private:
  void set_has_in_guild();
  void clear_has_in_guild();
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_guild_data();
  void clear_has_guild_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTAGuildSDO* guild_data_;
  bool in_guild_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildDataImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildInviteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildInviteData) */ {
 public:
  CMsgDOTAGuildInviteData();
  virtual ~CMsgDOTAGuildInviteData();

  CMsgDOTAGuildInviteData(const CMsgDOTAGuildInviteData& from);

  inline CMsgDOTAGuildInviteData& operator=(const CMsgDOTAGuildInviteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildInviteData(CMsgDOTAGuildInviteData&& from) noexcept
    : CMsgDOTAGuildInviteData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildInviteData& operator=(CMsgDOTAGuildInviteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildInviteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildInviteData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildInviteData*>(
               &_CMsgDOTAGuildInviteData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    172;

  void Swap(CMsgDOTAGuildInviteData* other);
  friend void swap(CMsgDOTAGuildInviteData& a, CMsgDOTAGuildInviteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildInviteData* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildInviteData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildInviteData& from);
  void MergeFrom(const CMsgDOTAGuildInviteData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildInviteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guild_name = 3;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 3;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_tag = 4;
  bool has_guild_tag() const;
  void clear_guild_tag();
  static const int kGuildTagFieldNumber = 4;
  const ::std::string& guild_tag() const;
  void set_guild_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_tag(::std::string&& value);
  #endif
  void set_guild_tag(const char* value);
  void set_guild_tag(const char* value, size_t size);
  ::std::string* mutable_guild_tag();
  ::std::string* release_guild_tag();
  void set_allocated_guild_tag(::std::string* guild_tag);

  // optional bool invited_to_guild = 1;
  bool has_invited_to_guild() const;
  void clear_invited_to_guild();
  static const int kInvitedToGuildFieldNumber = 1;
  bool invited_to_guild() const;
  void set_invited_to_guild(bool value);

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 logo = 5;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 5;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 inviter = 6;
  bool has_inviter() const;
  void clear_inviter();
  static const int kInviterFieldNumber = 6;
  ::google::protobuf::uint32 inviter() const;
  void set_inviter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildInviteData)
 private:
  void set_has_invited_to_guild();
  void clear_has_invited_to_guild();
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_guild_name();
  void clear_has_guild_name();
  void set_has_guild_tag();
  void clear_has_guild_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_inviter();
  void clear_has_inviter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_tag_;
  bool invited_to_guild_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 inviter_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildInviteDataImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildUpdateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildUpdateMessage) */ {
 public:
  CMsgDOTAGuildUpdateMessage();
  virtual ~CMsgDOTAGuildUpdateMessage();

  CMsgDOTAGuildUpdateMessage(const CMsgDOTAGuildUpdateMessage& from);

  inline CMsgDOTAGuildUpdateMessage& operator=(const CMsgDOTAGuildUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildUpdateMessage(CMsgDOTAGuildUpdateMessage&& from) noexcept
    : CMsgDOTAGuildUpdateMessage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildUpdateMessage& operator=(CMsgDOTAGuildUpdateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildUpdateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildUpdateMessage*>(
               &_CMsgDOTAGuildUpdateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    173;

  void Swap(CMsgDOTAGuildUpdateMessage* other);
  friend void swap(CMsgDOTAGuildUpdateMessage& a, CMsgDOTAGuildUpdateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildUpdateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildUpdateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildUpdateMessage& from);
  void MergeFrom(const CMsgDOTAGuildUpdateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildUpdateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildUpdateMessage)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_guild_id();
  void clear_has_guild_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildUpdateMessageImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildEditLogoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildEditLogoRequest) */ {
 public:
  CMsgDOTAGuildEditLogoRequest();
  virtual ~CMsgDOTAGuildEditLogoRequest();

  CMsgDOTAGuildEditLogoRequest(const CMsgDOTAGuildEditLogoRequest& from);

  inline CMsgDOTAGuildEditLogoRequest& operator=(const CMsgDOTAGuildEditLogoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildEditLogoRequest(CMsgDOTAGuildEditLogoRequest&& from) noexcept
    : CMsgDOTAGuildEditLogoRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildEditLogoRequest& operator=(CMsgDOTAGuildEditLogoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildEditLogoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildEditLogoRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildEditLogoRequest*>(
               &_CMsgDOTAGuildEditLogoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    174;

  void Swap(CMsgDOTAGuildEditLogoRequest* other);
  friend void swap(CMsgDOTAGuildEditLogoRequest& a, CMsgDOTAGuildEditLogoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildEditLogoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildEditLogoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildEditLogoRequest& from);
  void MergeFrom(const CMsgDOTAGuildEditLogoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildEditLogoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 logo = 2;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 2;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildEditLogoRequest)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_logo();
  void clear_has_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 guild_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildEditLogoRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGuildEditLogoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGuildEditLogoResponse) */ {
 public:
  CMsgDOTAGuildEditLogoResponse();
  virtual ~CMsgDOTAGuildEditLogoResponse();

  CMsgDOTAGuildEditLogoResponse(const CMsgDOTAGuildEditLogoResponse& from);

  inline CMsgDOTAGuildEditLogoResponse& operator=(const CMsgDOTAGuildEditLogoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGuildEditLogoResponse(CMsgDOTAGuildEditLogoResponse&& from) noexcept
    : CMsgDOTAGuildEditLogoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGuildEditLogoResponse& operator=(CMsgDOTAGuildEditLogoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGuildEditLogoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGuildEditLogoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGuildEditLogoResponse*>(
               &_CMsgDOTAGuildEditLogoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    175;

  void Swap(CMsgDOTAGuildEditLogoResponse* other);
  friend void swap(CMsgDOTAGuildEditLogoResponse& a, CMsgDOTAGuildEditLogoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGuildEditLogoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGuildEditLogoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGuildEditLogoResponse& from);
  void MergeFrom(const CMsgDOTAGuildEditLogoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGuildEditLogoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAGuildEditLogoResponse_EResult EResult;
  static const EResult SUCCESS =
    CMsgDOTAGuildEditLogoResponse_EResult_SUCCESS;
  static const EResult NO_PERMISSION =
    CMsgDOTAGuildEditLogoResponse_EResult_NO_PERMISSION;
  static const EResult LOGO_UPLOAD_FAILED =
    CMsgDOTAGuildEditLogoResponse_EResult_LOGO_UPLOAD_FAILED;
  static const EResult UNSPECIFIED_ERROR =
    CMsgDOTAGuildEditLogoResponse_EResult_UNSPECIFIED_ERROR;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAGuildEditLogoResponse_EResult_IsValid(value);
  }
  static const EResult EResult_MIN =
    CMsgDOTAGuildEditLogoResponse_EResult_EResult_MIN;
  static const EResult EResult_MAX =
    CMsgDOTAGuildEditLogoResponse_EResult_EResult_MAX;
  static const int EResult_ARRAYSIZE =
    CMsgDOTAGuildEditLogoResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAGuildEditLogoResponse_EResult_descriptor();
  }
  static inline const ::std::string& EResult_Name(EResult value) {
    return CMsgDOTAGuildEditLogoResponse_EResult_Name(value);
  }
  static inline bool EResult_Parse(const ::std::string& name,
      EResult* value) {
    return CMsgDOTAGuildEditLogoResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::CMsgDOTAGuildEditLogoResponse_EResult result() const;
  void set_result(::CMsgDOTAGuildEditLogoResponse_EResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGuildEditLogoResponse)
 private:
  void set_has_guild_id();
  void clear_has_guild_id();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 guild_id_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGuildEditLogoResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerReports_PlayerReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerReports.PlayerReport) */ {
 public:
  CMsgDOTAPlayerReports_PlayerReport();
  virtual ~CMsgDOTAPlayerReports_PlayerReport();

  CMsgDOTAPlayerReports_PlayerReport(const CMsgDOTAPlayerReports_PlayerReport& from);

  inline CMsgDOTAPlayerReports_PlayerReport& operator=(const CMsgDOTAPlayerReports_PlayerReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPlayerReports_PlayerReport(CMsgDOTAPlayerReports_PlayerReport&& from) noexcept
    : CMsgDOTAPlayerReports_PlayerReport() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerReports_PlayerReport& operator=(CMsgDOTAPlayerReports_PlayerReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPlayerReports_PlayerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPlayerReports_PlayerReport* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerReports_PlayerReport*>(
               &_CMsgDOTAPlayerReports_PlayerReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    176;

  void Swap(CMsgDOTAPlayerReports_PlayerReport* other);
  friend void swap(CMsgDOTAPlayerReports_PlayerReport& a, CMsgDOTAPlayerReports_PlayerReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerReports_PlayerReport* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPlayerReports_PlayerReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPlayerReports_PlayerReport& from);
  void MergeFrom(const CMsgDOTAPlayerReports_PlayerReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPlayerReports_PlayerReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 report_id = 1;
  bool has_report_id() const;
  void clear_report_id();
  static const int kReportIdFieldNumber = 1;
  ::google::protobuf::uint32 report_id() const;
  void set_report_id(::google::protobuf::uint32 value);

  // optional uint32 reporter_account_id = 2;
  bool has_reporter_account_id() const;
  void clear_reporter_account_id();
  static const int kReporterAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 reporter_account_id() const;
  void set_reporter_account_id(::google::protobuf::uint32 value);

  // optional uint32 target_account_id = 3;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 3;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 report_flags = 4;
  bool has_report_flags() const;
  void clear_report_flags();
  static const int kReportFlagsFieldNumber = 4;
  ::google::protobuf::uint32 report_flags() const;
  void set_report_flags(::google::protobuf::uint32 value);

  // optional fixed32 date = 6;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 6;
  ::google::protobuf::uint32 date() const;
  void set_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerReports.PlayerReport)
 private:
  void set_has_report_id();
  void clear_has_report_id();
  void set_has_reporter_account_id();
  void clear_has_reporter_account_id();
  void set_has_target_account_id();
  void clear_has_target_account_id();
  void set_has_report_flags();
  void clear_has_report_flags();
  void set_has_date();
  void clear_has_date();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 report_id_;
  ::google::protobuf::uint32 reporter_account_id_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 report_flags_;
  ::google::protobuf::uint32 date_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPlayerReports_PlayerReportImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerReports : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerReports) */ {
 public:
  CMsgDOTAPlayerReports();
  virtual ~CMsgDOTAPlayerReports();

  CMsgDOTAPlayerReports(const CMsgDOTAPlayerReports& from);

  inline CMsgDOTAPlayerReports& operator=(const CMsgDOTAPlayerReports& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPlayerReports(CMsgDOTAPlayerReports&& from) noexcept
    : CMsgDOTAPlayerReports() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerReports& operator=(CMsgDOTAPlayerReports&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPlayerReports& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPlayerReports* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerReports*>(
               &_CMsgDOTAPlayerReports_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    177;

  void Swap(CMsgDOTAPlayerReports* other);
  friend void swap(CMsgDOTAPlayerReports& a, CMsgDOTAPlayerReports& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerReports* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPlayerReports* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPlayerReports& from);
  void MergeFrom(const CMsgDOTAPlayerReports& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPlayerReports* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAPlayerReports_PlayerReport PlayerReport;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAPlayerReports.PlayerReport reports = 1;
  int reports_size() const;
  void clear_reports();
  static const int kReportsFieldNumber = 1;
  const ::CMsgDOTAPlayerReports_PlayerReport& reports(int index) const;
  ::CMsgDOTAPlayerReports_PlayerReport* mutable_reports(int index);
  ::CMsgDOTAPlayerReports_PlayerReport* add_reports();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPlayerReports_PlayerReport >*
      mutable_reports();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPlayerReports_PlayerReport >&
      reports() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerReports)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPlayerReports_PlayerReport > reports_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPlayerReportsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAReportsRemainingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAReportsRemainingRequest) */ {
 public:
  CMsgDOTAReportsRemainingRequest();
  virtual ~CMsgDOTAReportsRemainingRequest();

  CMsgDOTAReportsRemainingRequest(const CMsgDOTAReportsRemainingRequest& from);

  inline CMsgDOTAReportsRemainingRequest& operator=(const CMsgDOTAReportsRemainingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAReportsRemainingRequest(CMsgDOTAReportsRemainingRequest&& from) noexcept
    : CMsgDOTAReportsRemainingRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAReportsRemainingRequest& operator=(CMsgDOTAReportsRemainingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAReportsRemainingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAReportsRemainingRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAReportsRemainingRequest*>(
               &_CMsgDOTAReportsRemainingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    178;

  void Swap(CMsgDOTAReportsRemainingRequest* other);
  friend void swap(CMsgDOTAReportsRemainingRequest& a, CMsgDOTAReportsRemainingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAReportsRemainingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAReportsRemainingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAReportsRemainingRequest& from);
  void MergeFrom(const CMsgDOTAReportsRemainingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAReportsRemainingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTAReportsRemainingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAReportsRemainingRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAReportsRemainingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAReportsRemainingResponse) */ {
 public:
  CMsgDOTAReportsRemainingResponse();
  virtual ~CMsgDOTAReportsRemainingResponse();

  CMsgDOTAReportsRemainingResponse(const CMsgDOTAReportsRemainingResponse& from);

  inline CMsgDOTAReportsRemainingResponse& operator=(const CMsgDOTAReportsRemainingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAReportsRemainingResponse(CMsgDOTAReportsRemainingResponse&& from) noexcept
    : CMsgDOTAReportsRemainingResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAReportsRemainingResponse& operator=(CMsgDOTAReportsRemainingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAReportsRemainingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAReportsRemainingResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAReportsRemainingResponse*>(
               &_CMsgDOTAReportsRemainingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    179;

  void Swap(CMsgDOTAReportsRemainingResponse* other);
  friend void swap(CMsgDOTAReportsRemainingResponse& a, CMsgDOTAReportsRemainingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAReportsRemainingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAReportsRemainingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAReportsRemainingResponse& from);
  void MergeFrom(const CMsgDOTAReportsRemainingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAReportsRemainingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_positive_reports_remaining = 1;
  bool has_num_positive_reports_remaining() const;
  void clear_num_positive_reports_remaining();
  static const int kNumPositiveReportsRemainingFieldNumber = 1;
  ::google::protobuf::uint32 num_positive_reports_remaining() const;
  void set_num_positive_reports_remaining(::google::protobuf::uint32 value);

  // optional uint32 num_negative_reports_remaining = 2;
  bool has_num_negative_reports_remaining() const;
  void clear_num_negative_reports_remaining();
  static const int kNumNegativeReportsRemainingFieldNumber = 2;
  ::google::protobuf::uint32 num_negative_reports_remaining() const;
  void set_num_negative_reports_remaining(::google::protobuf::uint32 value);

  // optional uint32 num_positive_reports_total = 3;
  bool has_num_positive_reports_total() const;
  void clear_num_positive_reports_total();
  static const int kNumPositiveReportsTotalFieldNumber = 3;
  ::google::protobuf::uint32 num_positive_reports_total() const;
  void set_num_positive_reports_total(::google::protobuf::uint32 value);

  // optional uint32 num_negative_reports_total = 4;
  bool has_num_negative_reports_total() const;
  void clear_num_negative_reports_total();
  static const int kNumNegativeReportsTotalFieldNumber = 4;
  ::google::protobuf::uint32 num_negative_reports_total() const;
  void set_num_negative_reports_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAReportsRemainingResponse)
 private:
  void set_has_num_positive_reports_remaining();
  void clear_has_num_positive_reports_remaining();
  void set_has_num_negative_reports_remaining();
  void clear_has_num_negative_reports_remaining();
  void set_has_num_positive_reports_total();
  void clear_has_num_positive_reports_total();
  void set_has_num_negative_reports_total();
  void clear_has_num_negative_reports_total();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_positive_reports_remaining_;
  ::google::protobuf::uint32 num_negative_reports_remaining_;
  ::google::protobuf::uint32 num_positive_reports_total_;
  ::google::protobuf::uint32 num_negative_reports_total_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAReportsRemainingResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASubmitPlayerReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASubmitPlayerReport) */ {
 public:
  CMsgDOTASubmitPlayerReport();
  virtual ~CMsgDOTASubmitPlayerReport();

  CMsgDOTASubmitPlayerReport(const CMsgDOTASubmitPlayerReport& from);

  inline CMsgDOTASubmitPlayerReport& operator=(const CMsgDOTASubmitPlayerReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASubmitPlayerReport(CMsgDOTASubmitPlayerReport&& from) noexcept
    : CMsgDOTASubmitPlayerReport() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASubmitPlayerReport& operator=(CMsgDOTASubmitPlayerReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASubmitPlayerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASubmitPlayerReport* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASubmitPlayerReport*>(
               &_CMsgDOTASubmitPlayerReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    180;

  void Swap(CMsgDOTASubmitPlayerReport* other);
  friend void swap(CMsgDOTASubmitPlayerReport& a, CMsgDOTASubmitPlayerReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASubmitPlayerReport* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASubmitPlayerReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASubmitPlayerReport& from);
  void MergeFrom(const CMsgDOTASubmitPlayerReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASubmitPlayerReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string comment = 5;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 report_flags = 2;
  bool has_report_flags() const;
  void clear_report_flags();
  static const int kReportFlagsFieldNumber = 2;
  ::google::protobuf::uint32 report_flags() const;
  void set_report_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASubmitPlayerReport)
 private:
  void set_has_target_account_id();
  void clear_has_target_account_id();
  void set_has_report_flags();
  void clear_has_report_flags();
  void set_has_comment();
  void clear_has_comment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 report_flags_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASubmitPlayerReportImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASubmitPlayerReportResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASubmitPlayerReportResponse) */ {
 public:
  CMsgDOTASubmitPlayerReportResponse();
  virtual ~CMsgDOTASubmitPlayerReportResponse();

  CMsgDOTASubmitPlayerReportResponse(const CMsgDOTASubmitPlayerReportResponse& from);

  inline CMsgDOTASubmitPlayerReportResponse& operator=(const CMsgDOTASubmitPlayerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASubmitPlayerReportResponse(CMsgDOTASubmitPlayerReportResponse&& from) noexcept
    : CMsgDOTASubmitPlayerReportResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASubmitPlayerReportResponse& operator=(CMsgDOTASubmitPlayerReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASubmitPlayerReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASubmitPlayerReportResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASubmitPlayerReportResponse*>(
               &_CMsgDOTASubmitPlayerReportResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    181;

  void Swap(CMsgDOTASubmitPlayerReportResponse* other);
  friend void swap(CMsgDOTASubmitPlayerReportResponse& a, CMsgDOTASubmitPlayerReportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASubmitPlayerReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASubmitPlayerReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASubmitPlayerReportResponse& from);
  void MergeFrom(const CMsgDOTASubmitPlayerReportResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASubmitPlayerReportResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 report_flags = 2;
  bool has_report_flags() const;
  void clear_report_flags();
  static const int kReportFlagsFieldNumber = 2;
  ::google::protobuf::uint32 report_flags() const;
  void set_report_flags(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASubmitPlayerReportResponse)
 private:
  void set_has_target_account_id();
  void clear_has_target_account_id();
  void set_has_report_flags();
  void clear_has_report_flags();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 report_flags_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASubmitPlayerReportResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAReportCountsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAReportCountsRequest) */ {
 public:
  CMsgDOTAReportCountsRequest();
  virtual ~CMsgDOTAReportCountsRequest();

  CMsgDOTAReportCountsRequest(const CMsgDOTAReportCountsRequest& from);

  inline CMsgDOTAReportCountsRequest& operator=(const CMsgDOTAReportCountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAReportCountsRequest(CMsgDOTAReportCountsRequest&& from) noexcept
    : CMsgDOTAReportCountsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAReportCountsRequest& operator=(CMsgDOTAReportCountsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAReportCountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAReportCountsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAReportCountsRequest*>(
               &_CMsgDOTAReportCountsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    182;

  void Swap(CMsgDOTAReportCountsRequest* other);
  friend void swap(CMsgDOTAReportCountsRequest& a, CMsgDOTAReportCountsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAReportCountsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAReportCountsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAReportCountsRequest& from);
  void MergeFrom(const CMsgDOTAReportCountsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAReportCountsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAReportCountsRequest)
 private:
  void set_has_target_account_id();
  void clear_has_target_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 target_account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAReportCountsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAReportCountsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAReportCountsResponse) */ {
 public:
  CMsgDOTAReportCountsResponse();
  virtual ~CMsgDOTAReportCountsResponse();

  CMsgDOTAReportCountsResponse(const CMsgDOTAReportCountsResponse& from);

  inline CMsgDOTAReportCountsResponse& operator=(const CMsgDOTAReportCountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAReportCountsResponse(CMsgDOTAReportCountsResponse&& from) noexcept
    : CMsgDOTAReportCountsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAReportCountsResponse& operator=(CMsgDOTAReportCountsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAReportCountsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAReportCountsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAReportCountsResponse*>(
               &_CMsgDOTAReportCountsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    183;

  void Swap(CMsgDOTAReportCountsResponse* other);
  friend void swap(CMsgDOTAReportCountsResponse& a, CMsgDOTAReportCountsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAReportCountsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAReportCountsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAReportCountsResponse& from);
  void MergeFrom(const CMsgDOTAReportCountsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAReportCountsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 target_account_id() const;
  void set_target_account_id(::google::protobuf::uint32 value);

  // optional uint32 leadership_count = 2;
  bool has_leadership_count() const;
  void clear_leadership_count();
  static const int kLeadershipCountFieldNumber = 2;
  ::google::protobuf::uint32 leadership_count() const;
  void set_leadership_count(::google::protobuf::uint32 value);

  // optional uint32 teaching_count = 3;
  bool has_teaching_count() const;
  void clear_teaching_count();
  static const int kTeachingCountFieldNumber = 3;
  ::google::protobuf::uint32 teaching_count() const;
  void set_teaching_count(::google::protobuf::uint32 value);

  // optional uint32 friendly_count = 4;
  bool has_friendly_count() const;
  void clear_friendly_count();
  static const int kFriendlyCountFieldNumber = 4;
  ::google::protobuf::uint32 friendly_count() const;
  void set_friendly_count(::google::protobuf::uint32 value);

  // optional uint32 forgiving_count = 5;
  bool has_forgiving_count() const;
  void clear_forgiving_count();
  static const int kForgivingCountFieldNumber = 5;
  ::google::protobuf::uint32 forgiving_count() const;
  void set_forgiving_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAReportCountsResponse)
 private:
  void set_has_target_account_id();
  void clear_has_target_account_id();
  void set_has_leadership_count();
  void clear_has_leadership_count();
  void set_has_teaching_count();
  void clear_has_teaching_count();
  void set_has_friendly_count();
  void clear_has_friendly_count();
  void set_has_forgiving_count();
  void clear_has_forgiving_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 target_account_id_;
  ::google::protobuf::uint32 leadership_count_;
  ::google::protobuf::uint32 teaching_count_;
  ::google::protobuf::uint32 friendly_count_;
  ::google::protobuf::uint32 forgiving_count_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAReportCountsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestPlayerResources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestPlayerResources) */ {
 public:
  CMsgDOTARequestPlayerResources();
  virtual ~CMsgDOTARequestPlayerResources();

  CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from);

  inline CMsgDOTARequestPlayerResources& operator=(const CMsgDOTARequestPlayerResources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestPlayerResources(CMsgDOTARequestPlayerResources&& from) noexcept
    : CMsgDOTARequestPlayerResources() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestPlayerResources& operator=(CMsgDOTARequestPlayerResources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestPlayerResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestPlayerResources* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestPlayerResources*>(
               &_CMsgDOTARequestPlayerResources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    184;

  void Swap(CMsgDOTARequestPlayerResources* other);
  friend void swap(CMsgDOTARequestPlayerResources& a, CMsgDOTARequestPlayerResources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestPlayerResources* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestPlayerResources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestPlayerResources& from);
  void MergeFrom(const CMsgDOTARequestPlayerResources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestPlayerResources* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 player_id = 2;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::uint32 player_id() const;
  void set_player_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestPlayerResources)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_player_id();
  void clear_has_player_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 player_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestPlayerResourcesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestPlayerResourcesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestPlayerResourcesResponse) */ {
 public:
  CMsgDOTARequestPlayerResourcesResponse();
  virtual ~CMsgDOTARequestPlayerResourcesResponse();

  CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from);

  inline CMsgDOTARequestPlayerResourcesResponse& operator=(const CMsgDOTARequestPlayerResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestPlayerResourcesResponse(CMsgDOTARequestPlayerResourcesResponse&& from) noexcept
    : CMsgDOTARequestPlayerResourcesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestPlayerResourcesResponse& operator=(CMsgDOTARequestPlayerResourcesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestPlayerResourcesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestPlayerResourcesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestPlayerResourcesResponse*>(
               &_CMsgDOTARequestPlayerResourcesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    185;

  void Swap(CMsgDOTARequestPlayerResourcesResponse* other);
  friend void swap(CMsgDOTARequestPlayerResourcesResponse& a, CMsgDOTARequestPlayerResourcesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestPlayerResourcesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestPlayerResourcesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from);
  void MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestPlayerResourcesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 player_id = 3;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  ::google::protobuf::uint32 player_id() const;
  void set_player_id(::google::protobuf::uint32 value);

  // optional bool prevent_text_chat = 4;
  bool has_prevent_text_chat() const;
  void clear_prevent_text_chat();
  static const int kPreventTextChatFieldNumber = 4;
  bool prevent_text_chat() const;
  void set_prevent_text_chat(bool value);

  // optional bool prevent_voice_chat = 5;
  bool has_prevent_voice_chat() const;
  void clear_prevent_voice_chat();
  static const int kPreventVoiceChatFieldNumber = 5;
  bool prevent_voice_chat() const;
  void set_prevent_voice_chat(bool value);

  // optional bool match_making_ban = 6;
  bool has_match_making_ban() const;
  void clear_match_making_ban();
  static const int kMatchMakingBanFieldNumber = 6;
  bool match_making_ban() const;
  void set_match_making_ban(bool value);

  // optional uint32 solo_rank = 7;
  bool has_solo_rank() const;
  void clear_solo_rank();
  static const int kSoloRankFieldNumber = 7;
  ::google::protobuf::uint32 solo_rank() const;
  void set_solo_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestPlayerResourcesResponse)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_rank();
  void clear_has_rank();
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_prevent_text_chat();
  void clear_has_prevent_text_chat();
  void set_has_prevent_voice_chat();
  void clear_has_prevent_voice_chat();
  void set_has_match_making_ban();
  void clear_has_match_making_ban();
  void set_has_solo_rank();
  void clear_has_solo_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 player_id_;
  bool prevent_text_chat_;
  bool prevent_voice_chat_;
  bool match_making_ban_;
  ::google::protobuf::uint32 solo_rank_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestPlayerResourcesResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAKickedFromMatchmakingQueue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAKickedFromMatchmakingQueue) */ {
 public:
  CMsgDOTAKickedFromMatchmakingQueue();
  virtual ~CMsgDOTAKickedFromMatchmakingQueue();

  CMsgDOTAKickedFromMatchmakingQueue(const CMsgDOTAKickedFromMatchmakingQueue& from);

  inline CMsgDOTAKickedFromMatchmakingQueue& operator=(const CMsgDOTAKickedFromMatchmakingQueue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAKickedFromMatchmakingQueue(CMsgDOTAKickedFromMatchmakingQueue&& from) noexcept
    : CMsgDOTAKickedFromMatchmakingQueue() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAKickedFromMatchmakingQueue& operator=(CMsgDOTAKickedFromMatchmakingQueue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAKickedFromMatchmakingQueue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAKickedFromMatchmakingQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAKickedFromMatchmakingQueue*>(
               &_CMsgDOTAKickedFromMatchmakingQueue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    186;

  void Swap(CMsgDOTAKickedFromMatchmakingQueue* other);
  friend void swap(CMsgDOTAKickedFromMatchmakingQueue& a, CMsgDOTAKickedFromMatchmakingQueue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAKickedFromMatchmakingQueue* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAKickedFromMatchmakingQueue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAKickedFromMatchmakingQueue& from);
  void MergeFrom(const CMsgDOTAKickedFromMatchmakingQueue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAKickedFromMatchmakingQueue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MatchType match_type = 1 [default = MATCH_TYPE_RANKED];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 1;
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAKickedFromMatchmakingQueue)
 private:
  void set_has_match_type();
  void clear_has_match_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int match_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAKickedFromMatchmakingQueueImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGames) */ {
 public:
  CMsgDOTARequestSaveGames();
  virtual ~CMsgDOTARequestSaveGames();

  CMsgDOTARequestSaveGames(const CMsgDOTARequestSaveGames& from);

  inline CMsgDOTARequestSaveGames& operator=(const CMsgDOTARequestSaveGames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGames(CMsgDOTARequestSaveGames&& from) noexcept
    : CMsgDOTARequestSaveGames() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGames& operator=(CMsgDOTARequestSaveGames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGames* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGames*>(
               &_CMsgDOTARequestSaveGames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    187;

  void Swap(CMsgDOTARequestSaveGames* other);
  friend void swap(CMsgDOTARequestSaveGames& a, CMsgDOTARequestSaveGames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGames* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGames& from);
  void MergeFrom(const CMsgDOTARequestSaveGames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_region = 1;
  bool has_server_region() const;
  void clear_server_region();
  static const int kServerRegionFieldNumber = 1;
  ::google::protobuf::uint32 server_region() const;
  void set_server_region(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGames)
 private:
  void set_has_server_region();
  void clear_has_server_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_region_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGamesResponse_SaveGame_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGamesResponse.SaveGame.Player) */ {
 public:
  CMsgDOTARequestSaveGamesResponse_SaveGame_Player();
  virtual ~CMsgDOTARequestSaveGamesResponse_SaveGame_Player();

  CMsgDOTARequestSaveGamesResponse_SaveGame_Player(const CMsgDOTARequestSaveGamesResponse_SaveGame_Player& from);

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_Player& operator=(const CMsgDOTARequestSaveGamesResponse_SaveGame_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGamesResponse_SaveGame_Player(CMsgDOTARequestSaveGamesResponse_SaveGame_Player&& from) noexcept
    : CMsgDOTARequestSaveGamesResponse_SaveGame_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_Player& operator=(CMsgDOTARequestSaveGamesResponse_SaveGame_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGamesResponse_SaveGame_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGamesResponse_SaveGame_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGamesResponse_SaveGame_Player*>(
               &_CMsgDOTARequestSaveGamesResponse_SaveGame_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    188;

  void Swap(CMsgDOTARequestSaveGamesResponse_SaveGame_Player* other);
  friend void swap(CMsgDOTARequestSaveGamesResponse_SaveGame_Player& a, CMsgDOTARequestSaveGamesResponse_SaveGame_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGamesResponse_SaveGame_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_Player& from);
  void MergeFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGamesResponse_SaveGame_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string hero = 3;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 3;
  const ::std::string& hero() const;
  void set_hero(const ::std::string& value);
  #if LANG_CXX11
  void set_hero(::std::string&& value);
  #endif
  void set_hero(const char* value);
  void set_hero(const char* value, size_t size);
  ::std::string* mutable_hero();
  ::std::string* release_hero();
  void set_allocated_hero(::std::string* hero);

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGamesResponse.SaveGame.Player)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_name();
  void clear_has_name();
  void set_has_hero();
  void clear_has_hero();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hero_;
  int team_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions) */ {
 public:
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions();
  virtual ~CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions();

  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& from);

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& operator=(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions&& from) noexcept
    : CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& operator=(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*>(
               &_CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    189;

  void Swap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* other);
  friend void swap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& a, CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& from);
  void MergeFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance) */ {
 public:
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance();
  virtual ~CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance();

  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& from);

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& operator=(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance&& from) noexcept
    : CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& operator=(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*>(
               &_CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    190;

  void Swap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* other);
  friend void swap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& a, CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& from);
  void MergeFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions PlayerPositions;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions player_positions = 5;
  int player_positions_size() const;
  void clear_player_positions();
  static const int kPlayerPositionsFieldNumber = 5;
  const ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& player_positions(int index) const;
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* mutable_player_positions(int index);
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* add_player_positions();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions >*
      mutable_player_positions();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions >&
      player_positions() const;

  // optional uint32 save_number = 1;
  bool has_save_number() const;
  void clear_save_number();
  static const int kSaveNumberFieldNumber = 1;
  ::google::protobuf::uint32 save_number() const;
  void set_save_number(::google::protobuf::uint32 value);

  // optional uint32 game_time = 2;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 team1_score = 3;
  bool has_team1_score() const;
  void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 3;
  ::google::protobuf::uint32 team1_score() const;
  void set_team1_score(::google::protobuf::uint32 value);

  // optional uint32 team2_score = 4;
  bool has_team2_score() const;
  void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 4;
  ::google::protobuf::uint32 team2_score() const;
  void set_team2_score(::google::protobuf::uint32 value);

  // optional uint32 save_id = 6;
  bool has_save_id() const;
  void clear_save_id();
  static const int kSaveIdFieldNumber = 6;
  ::google::protobuf::uint32 save_id() const;
  void set_save_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance)
 private:
  void set_has_save_number();
  void clear_has_save_number();
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_team1_score();
  void clear_has_team1_score();
  void set_has_team2_score();
  void clear_has_team2_score();
  void set_has_save_id();
  void clear_has_save_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions > player_positions_;
  ::google::protobuf::uint32 save_number_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 save_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGamesResponse_SaveGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGamesResponse.SaveGame) */ {
 public:
  CMsgDOTARequestSaveGamesResponse_SaveGame();
  virtual ~CMsgDOTARequestSaveGamesResponse_SaveGame();

  CMsgDOTARequestSaveGamesResponse_SaveGame(const CMsgDOTARequestSaveGamesResponse_SaveGame& from);

  inline CMsgDOTARequestSaveGamesResponse_SaveGame& operator=(const CMsgDOTARequestSaveGamesResponse_SaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGamesResponse_SaveGame(CMsgDOTARequestSaveGamesResponse_SaveGame&& from) noexcept
    : CMsgDOTARequestSaveGamesResponse_SaveGame() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGamesResponse_SaveGame& operator=(CMsgDOTARequestSaveGamesResponse_SaveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGamesResponse_SaveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGamesResponse_SaveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGamesResponse_SaveGame*>(
               &_CMsgDOTARequestSaveGamesResponse_SaveGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    191;

  void Swap(CMsgDOTARequestSaveGamesResponse_SaveGame* other);
  friend void swap(CMsgDOTARequestSaveGamesResponse_SaveGame& a, CMsgDOTARequestSaveGamesResponse_SaveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGamesResponse_SaveGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGamesResponse_SaveGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame& from);
  void MergeFrom(const CMsgDOTARequestSaveGamesResponse_SaveGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGamesResponse_SaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestSaveGamesResponse_SaveGame_Player Player;
  typedef CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance SaveInstance;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.Player players = 3;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 3;
  const ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player& players(int index) const;
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player* mutable_players(int index);
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player >&
      players() const;

  // repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance save_instances = 4;
  int save_instances_size() const;
  void clear_save_instances();
  static const int kSaveInstancesFieldNumber = 4;
  const ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& save_instances(int index) const;
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* mutable_save_instances(int index);
  ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* add_save_instances();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance >*
      mutable_save_instances();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance >&
      save_instances() const;

  // optional fixed64 lobby_id = 1;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 save_time = 2;
  bool has_save_time() const;
  void clear_save_time();
  static const int kSaveTimeFieldNumber = 2;
  ::google::protobuf::uint32 save_time() const;
  void set_save_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGamesResponse.SaveGame)
 private:
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_save_time();
  void clear_has_save_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance > save_instances_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 save_time_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesResponse_SaveGameImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestSaveGamesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestSaveGamesResponse) */ {
 public:
  CMsgDOTARequestSaveGamesResponse();
  virtual ~CMsgDOTARequestSaveGamesResponse();

  CMsgDOTARequestSaveGamesResponse(const CMsgDOTARequestSaveGamesResponse& from);

  inline CMsgDOTARequestSaveGamesResponse& operator=(const CMsgDOTARequestSaveGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestSaveGamesResponse(CMsgDOTARequestSaveGamesResponse&& from) noexcept
    : CMsgDOTARequestSaveGamesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestSaveGamesResponse& operator=(CMsgDOTARequestSaveGamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestSaveGamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestSaveGamesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestSaveGamesResponse*>(
               &_CMsgDOTARequestSaveGamesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    192;

  void Swap(CMsgDOTARequestSaveGamesResponse* other);
  friend void swap(CMsgDOTARequestSaveGamesResponse& a, CMsgDOTARequestSaveGamesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestSaveGamesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestSaveGamesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestSaveGamesResponse& from);
  void MergeFrom(const CMsgDOTARequestSaveGamesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestSaveGamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestSaveGamesResponse_SaveGame SaveGame;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARequestSaveGamesResponse.SaveGame save_games = 2;
  int save_games_size() const;
  void clear_save_games();
  static const int kSaveGamesFieldNumber = 2;
  const ::CMsgDOTARequestSaveGamesResponse_SaveGame& save_games(int index) const;
  ::CMsgDOTARequestSaveGamesResponse_SaveGame* mutable_save_games(int index);
  ::CMsgDOTARequestSaveGamesResponse_SaveGame* add_save_games();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame >*
      mutable_save_games();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame >&
      save_games() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestSaveGamesResponse)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame > save_games_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestSaveGamesResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerFailedToConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerFailedToConnect) */ {
 public:
  CMsgDOTAPlayerFailedToConnect();
  virtual ~CMsgDOTAPlayerFailedToConnect();

  CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from);

  inline CMsgDOTAPlayerFailedToConnect& operator=(const CMsgDOTAPlayerFailedToConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPlayerFailedToConnect(CMsgDOTAPlayerFailedToConnect&& from) noexcept
    : CMsgDOTAPlayerFailedToConnect() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerFailedToConnect& operator=(CMsgDOTAPlayerFailedToConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPlayerFailedToConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPlayerFailedToConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerFailedToConnect*>(
               &_CMsgDOTAPlayerFailedToConnect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    193;

  void Swap(CMsgDOTAPlayerFailedToConnect* other);
  friend void swap(CMsgDOTAPlayerFailedToConnect& a, CMsgDOTAPlayerFailedToConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerFailedToConnect* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPlayerFailedToConnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPlayerFailedToConnect& from);
  void MergeFrom(const CMsgDOTAPlayerFailedToConnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPlayerFailedToConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 failed_loaders = 1;
  int failed_loaders_size() const;
  void clear_failed_loaders();
  static const int kFailedLoadersFieldNumber = 1;
  ::google::protobuf::uint64 failed_loaders(int index) const;
  void set_failed_loaders(int index, ::google::protobuf::uint64 value);
  void add_failed_loaders(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      failed_loaders() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_failed_loaders();

  // repeated fixed64 abandoned_loaders = 2;
  int abandoned_loaders_size() const;
  void clear_abandoned_loaders();
  static const int kAbandonedLoadersFieldNumber = 2;
  ::google::protobuf::uint64 abandoned_loaders(int index) const;
  void set_abandoned_loaders(int index, ::google::protobuf::uint64 value);
  void add_abandoned_loaders(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      abandoned_loaders() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_abandoned_loaders();

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerFailedToConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > failed_loaders_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > abandoned_loaders_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPlayerFailedToConnectImpl();
};
// -------------------------------------------------------------------

class CMsgGCToRelayConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToRelayConnect) */ {
 public:
  CMsgGCToRelayConnect();
  virtual ~CMsgGCToRelayConnect();

  CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from);

  inline CMsgGCToRelayConnect& operator=(const CMsgGCToRelayConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToRelayConnect(CMsgGCToRelayConnect&& from) noexcept
    : CMsgGCToRelayConnect() {
    *this = ::std::move(from);
  }

  inline CMsgGCToRelayConnect& operator=(CMsgGCToRelayConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToRelayConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToRelayConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToRelayConnect*>(
               &_CMsgGCToRelayConnect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    194;

  void Swap(CMsgGCToRelayConnect* other);
  friend void swap(CMsgGCToRelayConnect& a, CMsgGCToRelayConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToRelayConnect* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToRelayConnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToRelayConnect& from);
  void MergeFrom(const CMsgGCToRelayConnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToRelayConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 source_tv_public_addr = 1;
  bool has_source_tv_public_addr() const;
  void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 1;
  ::google::protobuf::uint32 source_tv_public_addr() const;
  void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 2;
  bool has_source_tv_private_addr() const;
  void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 2;
  ::google::protobuf::uint32 source_tv_private_addr() const;
  void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint64 game_server_steam_id = 4;
  bool has_game_server_steam_id() const;
  void clear_game_server_steam_id();
  static const int kGameServerSteamIdFieldNumber = 4;
  ::google::protobuf::uint64 game_server_steam_id() const;
  void set_game_server_steam_id(::google::protobuf::uint64 value);

  // optional uint32 source_tv_port = 3;
  bool has_source_tv_port() const;
  void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 3;
  ::google::protobuf::uint32 source_tv_port() const;
  void set_source_tv_port(::google::protobuf::uint32 value);

  // optional uint32 parent_count = 5;
  bool has_parent_count() const;
  void clear_parent_count();
  static const int kParentCountFieldNumber = 5;
  ::google::protobuf::uint32 parent_count() const;
  void set_parent_count(::google::protobuf::uint32 value);

  // optional fixed64 tv_unique_secret_code = 6;
  bool has_tv_unique_secret_code() const;
  void clear_tv_unique_secret_code();
  static const int kTvUniqueSecretCodeFieldNumber = 6;
  ::google::protobuf::uint64 tv_unique_secret_code() const;
  void set_tv_unique_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToRelayConnect)
 private:
  void set_has_source_tv_public_addr();
  void clear_has_source_tv_public_addr();
  void set_has_source_tv_private_addr();
  void clear_has_source_tv_private_addr();
  void set_has_source_tv_port();
  void clear_has_source_tv_port();
  void set_has_game_server_steam_id();
  void clear_has_game_server_steam_id();
  void set_has_parent_count();
  void clear_has_parent_count();
  void set_has_tv_unique_secret_code();
  void clear_has_tv_unique_secret_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint64 game_server_steam_id_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint32 parent_count_;
  ::google::protobuf::uint64 tv_unique_secret_code_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToRelayConnectImpl();
};
// -------------------------------------------------------------------

class CMsgGCToRelayConnectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToRelayConnectResponse) */ {
 public:
  CMsgGCToRelayConnectResponse();
  virtual ~CMsgGCToRelayConnectResponse();

  CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from);

  inline CMsgGCToRelayConnectResponse& operator=(const CMsgGCToRelayConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToRelayConnectResponse(CMsgGCToRelayConnectResponse&& from) noexcept
    : CMsgGCToRelayConnectResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToRelayConnectResponse& operator=(CMsgGCToRelayConnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToRelayConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToRelayConnectResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToRelayConnectResponse*>(
               &_CMsgGCToRelayConnectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    195;

  void Swap(CMsgGCToRelayConnectResponse* other);
  friend void swap(CMsgGCToRelayConnectResponse& a, CMsgGCToRelayConnectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToRelayConnectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToRelayConnectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToRelayConnectResponse& from);
  void MergeFrom(const CMsgGCToRelayConnectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToRelayConnectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToRelayConnectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToRelayConnectResponseImpl();
};
// -------------------------------------------------------------------

class CMsgWatchGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgWatchGame) */ {
 public:
  CMsgWatchGame();
  virtual ~CMsgWatchGame();

  CMsgWatchGame(const CMsgWatchGame& from);

  inline CMsgWatchGame& operator=(const CMsgWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgWatchGame(CMsgWatchGame&& from) noexcept
    : CMsgWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGame& operator=(CMsgWatchGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGame*>(
               &_CMsgWatchGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    196;

  void Swap(CMsgWatchGame* other);
  friend void swap(CMsgWatchGame& a, CMsgWatchGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgWatchGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgWatchGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgWatchGame& from);
  void MergeFrom(const CMsgWatchGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steamid = 1;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 1;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 3;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 3;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgWatchGame)
 private:
  void set_has_server_steamid();
  void clear_has_server_steamid();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_watch_server_steamid();
  void clear_has_watch_server_steamid();
  void set_has_lobby_id();
  void clear_has_lobby_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 client_version_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgWatchGameImpl();
};
// -------------------------------------------------------------------

class CMsgCancelWatchGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgCancelWatchGame) */ {
 public:
  CMsgCancelWatchGame();
  virtual ~CMsgCancelWatchGame();

  CMsgCancelWatchGame(const CMsgCancelWatchGame& from);

  inline CMsgCancelWatchGame& operator=(const CMsgCancelWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgCancelWatchGame(CMsgCancelWatchGame&& from) noexcept
    : CMsgCancelWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgCancelWatchGame& operator=(CMsgCancelWatchGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCancelWatchGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgCancelWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgCancelWatchGame*>(
               &_CMsgCancelWatchGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    197;

  void Swap(CMsgCancelWatchGame* other);
  friend void swap(CMsgCancelWatchGame& a, CMsgCancelWatchGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgCancelWatchGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgCancelWatchGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgCancelWatchGame& from);
  void MergeFrom(const CMsgCancelWatchGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgCancelWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgCancelWatchGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgCancelWatchGameImpl();
};
// -------------------------------------------------------------------

class CMsgWatchGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgWatchGameResponse) */ {
 public:
  CMsgWatchGameResponse();
  virtual ~CMsgWatchGameResponse();

  CMsgWatchGameResponse(const CMsgWatchGameResponse& from);

  inline CMsgWatchGameResponse& operator=(const CMsgWatchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgWatchGameResponse(CMsgWatchGameResponse&& from) noexcept
    : CMsgWatchGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGameResponse& operator=(CMsgWatchGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgWatchGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGameResponse*>(
               &_CMsgWatchGameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    198;

  void Swap(CMsgWatchGameResponse* other);
  friend void swap(CMsgWatchGameResponse& a, CMsgWatchGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgWatchGameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgWatchGameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgWatchGameResponse& from);
  void MergeFrom(const CMsgWatchGameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgWatchGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgWatchGameResponse_WatchGameResult WatchGameResult;
  static const WatchGameResult PENDING =
    CMsgWatchGameResponse_WatchGameResult_PENDING;
  static const WatchGameResult READY =
    CMsgWatchGameResponse_WatchGameResult_READY;
  static const WatchGameResult GAMESERVERNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND;
  static const WatchGameResult UNAVAILABLE =
    CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE;
  static const WatchGameResult CANCELLED =
    CMsgWatchGameResponse_WatchGameResult_CANCELLED;
  static const WatchGameResult INCOMPATIBLEVERSION =
    CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION;
  static const WatchGameResult MISSINGLEAGUESUBSCRIPTION =
    CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION;
  static const WatchGameResult LOBBYNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
  static inline bool WatchGameResult_IsValid(int value) {
    return CMsgWatchGameResponse_WatchGameResult_IsValid(value);
  }
  static const WatchGameResult WatchGameResult_MIN =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN;
  static const WatchGameResult WatchGameResult_MAX =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX;
  static const int WatchGameResult_ARRAYSIZE =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WatchGameResult_descriptor() {
    return CMsgWatchGameResponse_WatchGameResult_descriptor();
  }
  static inline const ::std::string& WatchGameResult_Name(WatchGameResult value) {
    return CMsgWatchGameResponse_WatchGameResult_Name(value);
  }
  static inline bool WatchGameResult_Parse(const ::std::string& name,
      WatchGameResult* value) {
    return CMsgWatchGameResponse_WatchGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  bool has_watch_game_result() const;
  void clear_watch_game_result();
  static const int kWatchGameResultFieldNumber = 1;
  ::CMsgWatchGameResponse_WatchGameResult watch_game_result() const;
  void set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value);

  // optional uint32 source_tv_public_addr = 2;
  bool has_source_tv_public_addr() const;
  void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 2;
  ::google::protobuf::uint32 source_tv_public_addr() const;
  void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 3;
  bool has_source_tv_private_addr() const;
  void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 3;
  ::google::protobuf::uint32 source_tv_private_addr() const;
  void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_port = 4;
  bool has_source_tv_port() const;
  void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 4;
  ::google::protobuf::uint32 source_tv_port() const;
  void set_source_tv_port(::google::protobuf::uint32 value);

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  ::google::protobuf::uint64 game_server_steamid() const;
  void set_game_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 6;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 6;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_tv_unique_secret_code = 7;
  bool has_watch_tv_unique_secret_code() const;
  void clear_watch_tv_unique_secret_code();
  static const int kWatchTvUniqueSecretCodeFieldNumber = 7;
  ::google::protobuf::uint64 watch_tv_unique_secret_code() const;
  void set_watch_tv_unique_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgWatchGameResponse)
 private:
  void set_has_watch_game_result();
  void clear_has_watch_game_result();
  void set_has_source_tv_public_addr();
  void clear_has_source_tv_public_addr();
  void set_has_source_tv_private_addr();
  void clear_has_source_tv_private_addr();
  void set_has_source_tv_port();
  void clear_has_source_tv_port();
  void set_has_game_server_steamid();
  void clear_has_game_server_steamid();
  void set_has_watch_server_steamid();
  void clear_has_watch_server_steamid();
  void set_has_watch_tv_unique_secret_code();
  void clear_has_watch_tv_unique_secret_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int watch_game_result_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint64 game_server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 watch_tv_unique_secret_code_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgWatchGameResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCBanStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCBanStatusRequest) */ {
 public:
  CMsgGCBanStatusRequest();
  virtual ~CMsgGCBanStatusRequest();

  CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from);

  inline CMsgGCBanStatusRequest& operator=(const CMsgGCBanStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCBanStatusRequest(CMsgGCBanStatusRequest&& from) noexcept
    : CMsgGCBanStatusRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCBanStatusRequest& operator=(CMsgGCBanStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCBanStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCBanStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCBanStatusRequest*>(
               &_CMsgGCBanStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    199;

  void Swap(CMsgGCBanStatusRequest* other);
  friend void swap(CMsgGCBanStatusRequest& a, CMsgGCBanStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCBanStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCBanStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCBanStatusRequest& from);
  void MergeFrom(const CMsgGCBanStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCBanStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusRequest)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCBanStatusRequestImpl();
};
// -------------------------------------------------------------------

class CMsgGCBanStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCBanStatusResponse) */ {
 public:
  CMsgGCBanStatusResponse();
  virtual ~CMsgGCBanStatusResponse();

  CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from);

  inline CMsgGCBanStatusResponse& operator=(const CMsgGCBanStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCBanStatusResponse(CMsgGCBanStatusResponse&& from) noexcept
    : CMsgGCBanStatusResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCBanStatusResponse& operator=(CMsgGCBanStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCBanStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCBanStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCBanStatusResponse*>(
               &_CMsgGCBanStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    200;

  void Swap(CMsgGCBanStatusResponse* other);
  friend void swap(CMsgGCBanStatusResponse& a, CMsgGCBanStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCBanStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCBanStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCBanStatusResponse& from);
  void MergeFrom(const CMsgGCBanStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCBanStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional bool match_banned = 2;
  bool has_match_banned() const;
  void clear_match_banned();
  static const int kMatchBannedFieldNumber = 2;
  bool match_banned() const;
  void set_match_banned(bool value);

  // optional bool text_chat_banned = 3;
  bool has_text_chat_banned() const;
  void clear_text_chat_banned();
  static const int kTextChatBannedFieldNumber = 3;
  bool text_chat_banned() const;
  void set_text_chat_banned(bool value);

  // optional bool voice_chat_banned = 4;
  bool has_voice_chat_banned() const;
  void clear_voice_chat_banned();
  static const int kVoiceChatBannedFieldNumber = 4;
  bool voice_chat_banned() const;
  void set_voice_chat_banned(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_match_banned();
  void clear_has_match_banned();
  void set_has_text_chat_banned();
  void clear_has_text_chat_banned();
  void set_has_voice_chat_banned();
  void clear_has_voice_chat_banned();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  bool match_banned_;
  bool text_chat_banned_;
  bool voice_chat_banned_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCBanStatusResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTADailyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADailyStats) */ {
 public:
  CMsgDOTADailyStats();
  virtual ~CMsgDOTADailyStats();

  CMsgDOTADailyStats(const CMsgDOTADailyStats& from);

  inline CMsgDOTADailyStats& operator=(const CMsgDOTADailyStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADailyStats(CMsgDOTADailyStats&& from) noexcept
    : CMsgDOTADailyStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADailyStats& operator=(CMsgDOTADailyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADailyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADailyStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADailyStats*>(
               &_CMsgDOTADailyStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    201;

  void Swap(CMsgDOTADailyStats* other);
  friend void swap(CMsgDOTADailyStats& a, CMsgDOTADailyStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADailyStats* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTADailyStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTADailyStats& from);
  void MergeFrom(const CMsgDOTADailyStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTADailyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  ::google::protobuf::uint32 date() const;
  void set_date(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 popularity = 3;
  bool has_popularity() const;
  void clear_popularity();
  static const int kPopularityFieldNumber = 3;
  ::google::protobuf::uint32 popularity() const;
  void set_popularity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTADailyStats)
 private:
  void set_has_date();
  void clear_has_date();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_popularity();
  void clear_has_popularity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 popularity_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTADailyStatsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARequestDailyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestDailyStats) */ {
 public:
  CMsgDOTARequestDailyStats();
  virtual ~CMsgDOTARequestDailyStats();

  CMsgDOTARequestDailyStats(const CMsgDOTARequestDailyStats& from);

  inline CMsgDOTARequestDailyStats& operator=(const CMsgDOTARequestDailyStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARequestDailyStats(CMsgDOTARequestDailyStats&& from) noexcept
    : CMsgDOTARequestDailyStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestDailyStats& operator=(CMsgDOTARequestDailyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestDailyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARequestDailyStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestDailyStats*>(
               &_CMsgDOTARequestDailyStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    202;

  void Swap(CMsgDOTARequestDailyStats* other);
  friend void swap(CMsgDOTARequestDailyStats& a, CMsgDOTARequestDailyStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARequestDailyStats* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARequestDailyStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARequestDailyStats& from);
  void MergeFrom(const CMsgDOTARequestDailyStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARequestDailyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestDailyStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARequestDailyStatsImpl();
};
// -------------------------------------------------------------------

class CMsgGCMatchDetailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCMatchDetailsRequest) */ {
 public:
  CMsgGCMatchDetailsRequest();
  virtual ~CMsgGCMatchDetailsRequest();

  CMsgGCMatchDetailsRequest(const CMsgGCMatchDetailsRequest& from);

  inline CMsgGCMatchDetailsRequest& operator=(const CMsgGCMatchDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCMatchDetailsRequest(CMsgGCMatchDetailsRequest&& from) noexcept
    : CMsgGCMatchDetailsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCMatchDetailsRequest& operator=(CMsgGCMatchDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCMatchDetailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCMatchDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMatchDetailsRequest*>(
               &_CMsgGCMatchDetailsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    203;

  void Swap(CMsgGCMatchDetailsRequest* other);
  friend void swap(CMsgGCMatchDetailsRequest& a, CMsgGCMatchDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMatchDetailsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCMatchDetailsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCMatchDetailsRequest& from);
  void MergeFrom(const CMsgGCMatchDetailsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCMatchDetailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCMatchDetailsRequest)
 private:
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchDetailsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgGCMatchDetailsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCMatchDetailsResponse) */ {
 public:
  CMsgGCMatchDetailsResponse();
  virtual ~CMsgGCMatchDetailsResponse();

  CMsgGCMatchDetailsResponse(const CMsgGCMatchDetailsResponse& from);

  inline CMsgGCMatchDetailsResponse& operator=(const CMsgGCMatchDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCMatchDetailsResponse(CMsgGCMatchDetailsResponse&& from) noexcept
    : CMsgGCMatchDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCMatchDetailsResponse& operator=(CMsgGCMatchDetailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCMatchDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCMatchDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMatchDetailsResponse*>(
               &_CMsgGCMatchDetailsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    204;

  void Swap(CMsgGCMatchDetailsResponse* other);
  friend void swap(CMsgGCMatchDetailsResponse& a, CMsgGCMatchDetailsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMatchDetailsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCMatchDetailsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCMatchDetailsResponse& from);
  void MergeFrom(const CMsgGCMatchDetailsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCMatchDetailsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAMatch match = 2;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  const ::CMsgDOTAMatch& match() const;
  ::CMsgDOTAMatch* release_match();
  ::CMsgDOTAMatch* mutable_match();
  void set_allocated_match(::CMsgDOTAMatch* match);

  // optional uint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional .DOTAMatchVote vote = 3 [default = DOTAMatchVote_INVALID];
  bool has_vote() const;
  void clear_vote();
  static const int kVoteFieldNumber = 3;
  ::DOTAMatchVote vote() const;
  void set_vote(::DOTAMatchVote value);

  // @@protoc_insertion_point(class_scope:CMsgGCMatchDetailsResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_match();
  void clear_has_match();
  void set_has_vote();
  void clear_has_vote();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTAMatch* match_;
  ::google::protobuf::uint32 result_;
  int vote_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCMatchDetailsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileRequest) */ {
 public:
  CMsgDOTAProfileRequest();
  virtual ~CMsgDOTAProfileRequest();

  CMsgDOTAProfileRequest(const CMsgDOTAProfileRequest& from);

  inline CMsgDOTAProfileRequest& operator=(const CMsgDOTAProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileRequest(CMsgDOTAProfileRequest&& from) noexcept
    : CMsgDOTAProfileRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileRequest& operator=(CMsgDOTAProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileRequest*>(
               &_CMsgDOTAProfileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    205;

  void Swap(CMsgDOTAProfileRequest* other);
  friend void swap(CMsgDOTAProfileRequest& a, CMsgDOTAProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileRequest& from);
  void MergeFrom(const CMsgDOTAProfileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional bool request_name = 2;
  bool has_request_name() const;
  void clear_request_name();
  static const int kRequestNameFieldNumber = 2;
  bool request_name() const;
  void set_request_name(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileRequest)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_request_name();
  void clear_has_request_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  bool request_name_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileResponse_PlayedHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileResponse.PlayedHero) */ {
 public:
  CMsgDOTAProfileResponse_PlayedHero();
  virtual ~CMsgDOTAProfileResponse_PlayedHero();

  CMsgDOTAProfileResponse_PlayedHero(const CMsgDOTAProfileResponse_PlayedHero& from);

  inline CMsgDOTAProfileResponse_PlayedHero& operator=(const CMsgDOTAProfileResponse_PlayedHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileResponse_PlayedHero(CMsgDOTAProfileResponse_PlayedHero&& from) noexcept
    : CMsgDOTAProfileResponse_PlayedHero() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileResponse_PlayedHero& operator=(CMsgDOTAProfileResponse_PlayedHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileResponse_PlayedHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileResponse_PlayedHero* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileResponse_PlayedHero*>(
               &_CMsgDOTAProfileResponse_PlayedHero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    206;

  void Swap(CMsgDOTAProfileResponse_PlayedHero* other);
  friend void swap(CMsgDOTAProfileResponse_PlayedHero& a, CMsgDOTAProfileResponse_PlayedHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileResponse_PlayedHero* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileResponse_PlayedHero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileResponse_PlayedHero& from);
  void MergeFrom(const CMsgDOTAProfileResponse_PlayedHero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileResponse_PlayedHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 2;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 2;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileResponse.PlayedHero)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_wins();
  void clear_has_wins();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 wins_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileResponse_PlayedHeroImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileResponse_ShowcaseHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileResponse.ShowcaseHero) */ {
 public:
  CMsgDOTAProfileResponse_ShowcaseHero();
  virtual ~CMsgDOTAProfileResponse_ShowcaseHero();

  CMsgDOTAProfileResponse_ShowcaseHero(const CMsgDOTAProfileResponse_ShowcaseHero& from);

  inline CMsgDOTAProfileResponse_ShowcaseHero& operator=(const CMsgDOTAProfileResponse_ShowcaseHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileResponse_ShowcaseHero(CMsgDOTAProfileResponse_ShowcaseHero&& from) noexcept
    : CMsgDOTAProfileResponse_ShowcaseHero() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileResponse_ShowcaseHero& operator=(CMsgDOTAProfileResponse_ShowcaseHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileResponse_ShowcaseHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileResponse_ShowcaseHero* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileResponse_ShowcaseHero*>(
               &_CMsgDOTAProfileResponse_ShowcaseHero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    207;

  void Swap(CMsgDOTAProfileResponse_ShowcaseHero* other);
  friend void swap(CMsgDOTAProfileResponse_ShowcaseHero& a, CMsgDOTAProfileResponse_ShowcaseHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileResponse_ShowcaseHero* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileResponse_ShowcaseHero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileResponse_ShowcaseHero& from);
  void MergeFrom(const CMsgDOTAProfileResponse_ShowcaseHero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileResponse_ShowcaseHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes object_data = 2;
  int object_data_size() const;
  void clear_object_data();
  static const int kObjectDataFieldNumber = 2;
  const ::std::string& object_data(int index) const;
  ::std::string* mutable_object_data(int index);
  void set_object_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_object_data(int index, ::std::string&& value);
  #endif
  void set_object_data(int index, const char* value);
  void set_object_data(int index, const void* value, size_t size);
  ::std::string* add_object_data();
  void add_object_data(const ::std::string& value);
  #if LANG_CXX11
  void add_object_data(::std::string&& value);
  #endif
  void add_object_data(const char* value);
  void add_object_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& object_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_object_data();

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileResponse.ShowcaseHero)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> object_data_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileResponse_ShowcaseHeroImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileResponse_LeaguePass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileResponse.LeaguePass) */ {
 public:
  CMsgDOTAProfileResponse_LeaguePass();
  virtual ~CMsgDOTAProfileResponse_LeaguePass();

  CMsgDOTAProfileResponse_LeaguePass(const CMsgDOTAProfileResponse_LeaguePass& from);

  inline CMsgDOTAProfileResponse_LeaguePass& operator=(const CMsgDOTAProfileResponse_LeaguePass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileResponse_LeaguePass(CMsgDOTAProfileResponse_LeaguePass&& from) noexcept
    : CMsgDOTAProfileResponse_LeaguePass() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileResponse_LeaguePass& operator=(CMsgDOTAProfileResponse_LeaguePass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileResponse_LeaguePass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileResponse_LeaguePass* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileResponse_LeaguePass*>(
               &_CMsgDOTAProfileResponse_LeaguePass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    208;

  void Swap(CMsgDOTAProfileResponse_LeaguePass* other);
  friend void swap(CMsgDOTAProfileResponse_LeaguePass& a, CMsgDOTAProfileResponse_LeaguePass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileResponse_LeaguePass* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileResponse_LeaguePass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileResponse_LeaguePass& from);
  void MergeFrom(const CMsgDOTAProfileResponse_LeaguePass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileResponse_LeaguePass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 item_def = 2;
  bool has_item_def() const;
  void clear_item_def();
  static const int kItemDefFieldNumber = 2;
  ::google::protobuf::uint32 item_def() const;
  void set_item_def(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileResponse.LeaguePass)
 private:
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_item_def();
  void clear_has_item_def();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 item_def_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileResponse_LeaguePassImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileResponse_EventTicket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileResponse.EventTicket) */ {
 public:
  CMsgDOTAProfileResponse_EventTicket();
  virtual ~CMsgDOTAProfileResponse_EventTicket();

  CMsgDOTAProfileResponse_EventTicket(const CMsgDOTAProfileResponse_EventTicket& from);

  inline CMsgDOTAProfileResponse_EventTicket& operator=(const CMsgDOTAProfileResponse_EventTicket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileResponse_EventTicket(CMsgDOTAProfileResponse_EventTicket&& from) noexcept
    : CMsgDOTAProfileResponse_EventTicket() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileResponse_EventTicket& operator=(CMsgDOTAProfileResponse_EventTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileResponse_EventTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileResponse_EventTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileResponse_EventTicket*>(
               &_CMsgDOTAProfileResponse_EventTicket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    209;

  void Swap(CMsgDOTAProfileResponse_EventTicket* other);
  friend void swap(CMsgDOTAProfileResponse_EventTicket& a, CMsgDOTAProfileResponse_EventTicket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileResponse_EventTicket* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileResponse_EventTicket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileResponse_EventTicket& from);
  void MergeFrom(const CMsgDOTAProfileResponse_EventTicket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileResponse_EventTicket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::uint32 event_id() const;
  void set_event_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileResponse.EventTicket)
 private:
  void set_has_event_id();
  void clear_has_event_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 event_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileResponse_EventTicketImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileResponse) */ {
 public:
  CMsgDOTAProfileResponse();
  virtual ~CMsgDOTAProfileResponse();

  CMsgDOTAProfileResponse(const CMsgDOTAProfileResponse& from);

  inline CMsgDOTAProfileResponse& operator=(const CMsgDOTAProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAProfileResponse(CMsgDOTAProfileResponse&& from) noexcept
    : CMsgDOTAProfileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileResponse& operator=(CMsgDOTAProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAProfileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileResponse*>(
               &_CMsgDOTAProfileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    210;

  void Swap(CMsgDOTAProfileResponse* other);
  friend void swap(CMsgDOTAProfileResponse& a, CMsgDOTAProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAProfileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProfileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProfileResponse& from);
  void MergeFrom(const CMsgDOTAProfileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileResponse_PlayedHero PlayedHero;
  typedef CMsgDOTAProfileResponse_ShowcaseHero ShowcaseHero;
  typedef CMsgDOTAProfileResponse_LeaguePass LeaguePass;
  typedef CMsgDOTAProfileResponse_EventTicket EventTicket;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatch latest_matches = 3;
  int latest_matches_size() const;
  void clear_latest_matches();
  static const int kLatestMatchesFieldNumber = 3;
  const ::CMsgDOTAMatch& latest_matches(int index) const;
  ::CMsgDOTAMatch* mutable_latest_matches(int index);
  ::CMsgDOTAMatch* add_latest_matches();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
      mutable_latest_matches();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
      latest_matches() const;

  // repeated .CMsgDOTAProfileResponse.PlayedHero heroes = 4;
  int heroes_size() const;
  void clear_heroes();
  static const int kHeroesFieldNumber = 4;
  const ::CMsgDOTAProfileResponse_PlayedHero& heroes(int index) const;
  ::CMsgDOTAProfileResponse_PlayedHero* mutable_heroes(int index);
  ::CMsgDOTAProfileResponse_PlayedHero* add_heroes();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_PlayedHero >*
      mutable_heroes();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_PlayedHero >&
      heroes() const;

  // repeated .CMsgDOTAProfileResponse.LeaguePass league_passes = 10;
  int league_passes_size() const;
  void clear_league_passes();
  static const int kLeaguePassesFieldNumber = 10;
  const ::CMsgDOTAProfileResponse_LeaguePass& league_passes(int index) const;
  ::CMsgDOTAProfileResponse_LeaguePass* mutable_league_passes(int index);
  ::CMsgDOTAProfileResponse_LeaguePass* add_league_passes();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_LeaguePass >*
      mutable_league_passes();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_LeaguePass >&
      league_passes() const;

  // repeated .CMsgDOTAProfileResponse.EventTicket event_tickets = 11;
  int event_tickets_size() const;
  void clear_event_tickets();
  static const int kEventTicketsFieldNumber = 11;
  const ::CMsgDOTAProfileResponse_EventTicket& event_tickets(int index) const;
  ::CMsgDOTAProfileResponse_EventTicket* mutable_event_tickets(int index);
  ::CMsgDOTAProfileResponse_EventTicket* add_event_tickets();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_EventTicket >*
      mutable_event_tickets();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_EventTicket >&
      event_tickets() const;

  // optional string player_name = 5;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 5;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional string team_name = 6;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 6;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 7;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 7;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional .CSODOTAGameAccountClient game_account_client = 2;
  bool has_game_account_client() const;
  void clear_game_account_client();
  static const int kGameAccountClientFieldNumber = 2;
  const ::CSODOTAGameAccountClient& game_account_client() const;
  ::CSODOTAGameAccountClient* release_game_account_client();
  ::CSODOTAGameAccountClient* mutable_game_account_client();
  void set_allocated_game_account_client(::CSODOTAGameAccountClient* game_account_client);

  // optional .CMsgDOTAProfileResponse.ShowcaseHero showcase_hero = 9;
  bool has_showcase_hero() const;
  void clear_showcase_hero();
  static const int kShowcaseHeroFieldNumber = 9;
  const ::CMsgDOTAProfileResponse_ShowcaseHero& showcase_hero() const;
  ::CMsgDOTAProfileResponse_ShowcaseHero* release_showcase_hero();
  ::CMsgDOTAProfileResponse_ShowcaseHero* mutable_showcase_hero();
  void set_allocated_showcase_hero(::CMsgDOTAProfileResponse_ShowcaseHero* showcase_hero);

  // optional uint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint32 team_id = 12;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 12;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint64 team_logo = 8;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 8;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // optional bool has_passport = 13;
  bool has_has_passport() const;
  void clear_has_passport();
  static const int kHasPassportFieldNumber = 13;
  bool has_passport() const;
  void set_has_passport(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_game_account_client();
  void clear_has_game_account_client();
  void set_has_player_name();
  void clear_has_player_name();
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_tag();
  void clear_has_team_tag();
  void set_has_team_logo();
  void clear_has_team_logo();
  void set_has_showcase_hero();
  void clear_has_showcase_hero();
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_has_passport();
  void clear_has_has_passport();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch > latest_matches_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_PlayedHero > heroes_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_LeaguePass > league_passes_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_EventTicket > event_tickets_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::CSODOTAGameAccountClient* game_account_client_;
  ::CMsgDOTAProfileResponse_ShowcaseHero* showcase_hero_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint64 team_logo_;
  bool has_passport_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAProfileResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAClearNotifySuccessfulReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAClearNotifySuccessfulReport) */ {
 public:
  CMsgDOTAClearNotifySuccessfulReport();
  virtual ~CMsgDOTAClearNotifySuccessfulReport();

  CMsgDOTAClearNotifySuccessfulReport(const CMsgDOTAClearNotifySuccessfulReport& from);

  inline CMsgDOTAClearNotifySuccessfulReport& operator=(const CMsgDOTAClearNotifySuccessfulReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAClearNotifySuccessfulReport(CMsgDOTAClearNotifySuccessfulReport&& from) noexcept
    : CMsgDOTAClearNotifySuccessfulReport() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAClearNotifySuccessfulReport& operator=(CMsgDOTAClearNotifySuccessfulReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAClearNotifySuccessfulReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAClearNotifySuccessfulReport* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAClearNotifySuccessfulReport*>(
               &_CMsgDOTAClearNotifySuccessfulReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    211;

  void Swap(CMsgDOTAClearNotifySuccessfulReport* other);
  friend void swap(CMsgDOTAClearNotifySuccessfulReport& a, CMsgDOTAClearNotifySuccessfulReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAClearNotifySuccessfulReport* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAClearNotifySuccessfulReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAClearNotifySuccessfulReport& from);
  void MergeFrom(const CMsgDOTAClearNotifySuccessfulReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAClearNotifySuccessfulReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTAClearNotifySuccessfulReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAClearNotifySuccessfulReportImpl();
};
// -------------------------------------------------------------------

class CItemDropEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CItemDropEvent) */ {
 public:
  CItemDropEvent();
  virtual ~CItemDropEvent();

  CItemDropEvent(const CItemDropEvent& from);

  inline CItemDropEvent& operator=(const CItemDropEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CItemDropEvent(CItemDropEvent&& from) noexcept
    : CItemDropEvent() {
    *this = ::std::move(from);
  }

  inline CItemDropEvent& operator=(CItemDropEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CItemDropEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CItemDropEvent* internal_default_instance() {
    return reinterpret_cast<const CItemDropEvent*>(
               &_CItemDropEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    212;

  void Swap(CItemDropEvent* other);
  friend void swap(CItemDropEvent& a, CItemDropEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CItemDropEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  CItemDropEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CItemDropEvent& from);
  void MergeFrom(const CItemDropEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CItemDropEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_stamp = 2;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::uint32 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint64 item_id = 4;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 def_index = 3;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 3;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // optional uint32 games_played_since_last_drop = 5;
  bool has_games_played_since_last_drop() const;
  void clear_games_played_since_last_drop();
  static const int kGamesPlayedSinceLastDropFieldNumber = 5;
  ::google::protobuf::uint32 games_played_since_last_drop() const;
  void set_games_played_since_last_drop(::google::protobuf::uint32 value);

  // optional uint32 time_played_since_last_drop = 6;
  bool has_time_played_since_last_drop() const;
  void clear_time_played_since_last_drop();
  static const int kTimePlayedSinceLastDropFieldNumber = 6;
  ::google::protobuf::uint32 time_played_since_last_drop() const;
  void set_time_played_since_last_drop(::google::protobuf::uint32 value);

  // optional float drop_bonus = 7;
  bool has_drop_bonus() const;
  void clear_drop_bonus();
  static const int kDropBonusFieldNumber = 7;
  float drop_bonus() const;
  void set_drop_bonus(float value);

  // optional uint32 rarity = 8;
  bool has_rarity() const;
  void clear_rarity();
  static const int kRarityFieldNumber = 8;
  ::google::protobuf::uint32 rarity() const;
  void set_rarity(::google::protobuf::uint32 value);

  // optional uint32 current_score = 9;
  bool has_current_score() const;
  void clear_current_score();
  static const int kCurrentScoreFieldNumber = 9;
  ::google::protobuf::uint32 current_score() const;
  void set_current_score(::google::protobuf::uint32 value);

  // optional uint32 next_drop_at = 10;
  bool has_next_drop_at() const;
  void clear_next_drop_at();
  static const int kNextDropAtFieldNumber = 10;
  ::google::protobuf::uint32 next_drop_at() const;
  void set_next_drop_at(::google::protobuf::uint32 value);

  // optional bool is_crate = 11;
  bool has_is_crate() const;
  void clear_is_crate();
  static const int kIsCrateFieldNumber = 11;
  bool is_crate() const;
  void set_is_crate(bool value);

  // optional bool is_level_reward = 12;
  bool has_is_level_reward() const;
  void clear_is_level_reward();
  static const int kIsLevelRewardFieldNumber = 12;
  bool is_level_reward() const;
  void set_is_level_reward(bool value);

  // optional uint32 xp = 13;
  bool has_xp() const;
  void clear_xp();
  static const int kXpFieldNumber = 13;
  ::google::protobuf::uint32 xp() const;
  void set_xp(::google::protobuf::uint32 value);

  // optional uint32 level = 14;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 14;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 match_id = 15;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 15;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CItemDropEvent)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_stamp();
  void clear_has_time_stamp();
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_games_played_since_last_drop();
  void clear_has_games_played_since_last_drop();
  void set_has_time_played_since_last_drop();
  void clear_has_time_played_since_last_drop();
  void set_has_drop_bonus();
  void clear_has_drop_bonus();
  void set_has_rarity();
  void clear_has_rarity();
  void set_has_current_score();
  void clear_has_current_score();
  void set_has_next_drop_at();
  void clear_has_next_drop_at();
  void set_has_is_crate();
  void clear_has_is_crate();
  void set_has_is_level_reward();
  void clear_has_is_level_reward();
  void set_has_xp();
  void clear_has_xp();
  void set_has_level();
  void clear_has_level();
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 def_index_;
  ::google::protobuf::uint32 games_played_since_last_drop_;
  ::google::protobuf::uint32 time_played_since_last_drop_;
  float drop_bonus_;
  ::google::protobuf::uint32 rarity_;
  ::google::protobuf::uint32 current_score_;
  ::google::protobuf::uint32 next_drop_at_;
  bool is_crate_;
  bool is_level_reward_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCItemDropEventImpl();
};
// -------------------------------------------------------------------

class CXPGainEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CXPGainEvent) */ {
 public:
  CXPGainEvent();
  virtual ~CXPGainEvent();

  CXPGainEvent(const CXPGainEvent& from);

  inline CXPGainEvent& operator=(const CXPGainEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CXPGainEvent(CXPGainEvent&& from) noexcept
    : CXPGainEvent() {
    *this = ::std::move(from);
  }

  inline CXPGainEvent& operator=(CXPGainEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CXPGainEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CXPGainEvent* internal_default_instance() {
    return reinterpret_cast<const CXPGainEvent*>(
               &_CXPGainEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    213;

  void Swap(CXPGainEvent* other);
  friend void swap(CXPGainEvent& a, CXPGainEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CXPGainEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  CXPGainEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CXPGainEvent& from);
  void MergeFrom(const CXPGainEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CXPGainEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_stamp = 3;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::uint32 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint32 base_xp = 5;
  bool has_base_xp() const;
  void clear_base_xp();
  static const int kBaseXpFieldNumber = 5;
  ::google::protobuf::uint32 base_xp() const;
  void set_base_xp(::google::protobuf::uint32 value);

  // optional uint32 time_reward_xp = 6;
  bool has_time_reward_xp() const;
  void clear_time_reward_xp();
  static const int kTimeRewardXpFieldNumber = 6;
  ::google::protobuf::uint32 time_reward_xp() const;
  void set_time_reward_xp(::google::protobuf::uint32 value);

  // optional uint32 drop_rate_bonus_xp = 7;
  bool has_drop_rate_bonus_xp() const;
  void clear_drop_rate_bonus_xp();
  static const int kDropRateBonusXpFieldNumber = 7;
  ::google::protobuf::uint32 drop_rate_bonus_xp() const;
  void set_drop_rate_bonus_xp(::google::protobuf::uint32 value);

  // optional uint32 final_xp = 8;
  bool has_final_xp() const;
  void clear_final_xp();
  static const int kFinalXpFieldNumber = 8;
  ::google::protobuf::uint32 final_xp() const;
  void set_final_xp(::google::protobuf::uint32 value);

  // optional float drop_rate_bonus = 9;
  bool has_drop_rate_bonus() const;
  void clear_drop_rate_bonus();
  static const int kDropRateBonusFieldNumber = 9;
  float drop_rate_bonus() const;
  void set_drop_rate_bonus(float value);

  // optional bool leveled_up = 10;
  bool has_leveled_up() const;
  void clear_leveled_up();
  static const int kLeveledUpFieldNumber = 10;
  bool leveled_up() const;
  void set_leveled_up(bool value);

  // @@protoc_insertion_point(class_scope:CXPGainEvent)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_stamp();
  void clear_has_time_stamp();
  void set_has_duration();
  void clear_has_duration();
  void set_has_base_xp();
  void clear_has_base_xp();
  void set_has_time_reward_xp();
  void clear_has_time_reward_xp();
  void set_has_drop_rate_bonus_xp();
  void clear_has_drop_rate_bonus_xp();
  void set_has_final_xp();
  void clear_has_final_xp();
  void set_has_drop_rate_bonus();
  void clear_has_drop_rate_bonus();
  void set_has_leveled_up();
  void clear_has_leveled_up();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 base_xp_;
  ::google::protobuf::uint32 time_reward_xp_;
  ::google::protobuf::uint32 drop_rate_bonus_xp_;
  ::google::protobuf::uint32 final_xp_;
  float drop_rate_bonus_;
  bool leveled_up_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCXPGainEventImpl();
};
// -------------------------------------------------------------------

class CLowPriPenalty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLowPriPenalty) */ {
 public:
  CLowPriPenalty();
  virtual ~CLowPriPenalty();

  CLowPriPenalty(const CLowPriPenalty& from);

  inline CLowPriPenalty& operator=(const CLowPriPenalty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLowPriPenalty(CLowPriPenalty&& from) noexcept
    : CLowPriPenalty() {
    *this = ::std::move(from);
  }

  inline CLowPriPenalty& operator=(CLowPriPenalty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLowPriPenalty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLowPriPenalty* internal_default_instance() {
    return reinterpret_cast<const CLowPriPenalty*>(
               &_CLowPriPenalty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    214;

  void Swap(CLowPriPenalty* other);
  friend void swap(CLowPriPenalty& a, CLowPriPenalty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLowPriPenalty* New() const PROTOBUF_FINAL { return New(NULL); }

  CLowPriPenalty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLowPriPenalty& from);
  void MergeFrom(const CLowPriPenalty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLowPriPenalty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_stamp = 3;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::uint32 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint32 games_since_report_penalty = 4;
  bool has_games_since_report_penalty() const;
  void clear_games_since_report_penalty();
  static const int kGamesSinceReportPenaltyFieldNumber = 4;
  ::google::protobuf::uint32 games_since_report_penalty() const;
  void set_games_since_report_penalty(::google::protobuf::uint32 value);

  // optional uint32 pending_in_game_reports = 5;
  bool has_pending_in_game_reports() const;
  void clear_pending_in_game_reports();
  static const int kPendingInGameReportsFieldNumber = 5;
  ::google::protobuf::uint32 pending_in_game_reports() const;
  void set_pending_in_game_reports(::google::protobuf::uint32 value);

  // optional uint32 pending_out_of_game_reports = 6;
  bool has_pending_out_of_game_reports() const;
  void clear_pending_out_of_game_reports();
  static const int kPendingOutOfGameReportsFieldNumber = 6;
  ::google::protobuf::uint32 pending_out_of_game_reports() const;
  void set_pending_out_of_game_reports(::google::protobuf::uint32 value);

  // optional uint32 pending_detected_reports = 7;
  bool has_pending_detected_reports() const;
  void clear_pending_detected_reports();
  static const int kPendingDetectedReportsFieldNumber = 7;
  ::google::protobuf::uint32 pending_detected_reports() const;
  void set_pending_detected_reports(::google::protobuf::uint32 value);

  // optional uint32 report_penalty_count = 8;
  bool has_report_penalty_count() const;
  void clear_report_penalty_count();
  static const int kReportPenaltyCountFieldNumber = 8;
  ::google::protobuf::uint32 report_penalty_count() const;
  void set_report_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 last_penalty_date = 9;
  bool has_last_penalty_date() const;
  void clear_last_penalty_date();
  static const int kLastPenaltyDateFieldNumber = 9;
  ::google::protobuf::uint32 last_penalty_date() const;
  void set_last_penalty_date(::google::protobuf::uint32 value);

  // optional uint32 last_abandon_date = 10;
  bool has_last_abandon_date() const;
  void clear_last_abandon_date();
  static const int kLastAbandonDateFieldNumber = 10;
  ::google::protobuf::uint32 last_abandon_date() const;
  void set_last_abandon_date(::google::protobuf::uint32 value);

  // optional uint32 abandon_penalty_count = 11;
  bool has_abandon_penalty_count() const;
  void clear_abandon_penalty_count();
  static const int kAbandonPenaltyCountFieldNumber = 11;
  ::google::protobuf::uint32 abandon_penalty_count() const;
  void set_abandon_penalty_count(::google::protobuf::uint32 value);

  // optional uint32 completed_game_streak = 12;
  bool has_completed_game_streak() const;
  void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 12;
  ::google::protobuf::uint32 completed_game_streak() const;
  void set_completed_game_streak(::google::protobuf::uint32 value);

  // optional uint32 abandon_time_given = 13;
  bool has_abandon_time_given() const;
  void clear_abandon_time_given();
  static const int kAbandonTimeGivenFieldNumber = 13;
  ::google::protobuf::uint32 abandon_time_given() const;
  void set_abandon_time_given(::google::protobuf::uint32 value);

  // optional uint32 report_time_given = 14;
  bool has_report_time_given() const;
  void clear_report_time_given();
  static const int kReportTimeGivenFieldNumber = 14;
  ::google::protobuf::uint32 report_time_given() const;
  void set_report_time_given(::google::protobuf::uint32 value);

  // optional uint32 rank = 15;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 15;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLowPriPenalty)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_stamp();
  void clear_has_time_stamp();
  void set_has_games_since_report_penalty();
  void clear_has_games_since_report_penalty();
  void set_has_pending_in_game_reports();
  void clear_has_pending_in_game_reports();
  void set_has_pending_out_of_game_reports();
  void clear_has_pending_out_of_game_reports();
  void set_has_pending_detected_reports();
  void clear_has_pending_detected_reports();
  void set_has_report_penalty_count();
  void clear_has_report_penalty_count();
  void set_has_last_penalty_date();
  void clear_has_last_penalty_date();
  void set_has_last_abandon_date();
  void clear_has_last_abandon_date();
  void set_has_abandon_penalty_count();
  void clear_has_abandon_penalty_count();
  void set_has_completed_game_streak();
  void clear_has_completed_game_streak();
  void set_has_abandon_time_given();
  void clear_has_abandon_time_given();
  void set_has_report_time_given();
  void clear_has_report_time_given();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 games_since_report_penalty_;
  ::google::protobuf::uint32 pending_in_game_reports_;
  ::google::protobuf::uint32 pending_out_of_game_reports_;
  ::google::protobuf::uint32 pending_detected_reports_;
  ::google::protobuf::uint32 report_penalty_count_;
  ::google::protobuf::uint32 last_penalty_date_;
  ::google::protobuf::uint32 last_abandon_date_;
  ::google::protobuf::uint32 abandon_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 abandon_time_given_;
  ::google::protobuf::uint32 report_time_given_;
  ::google::protobuf::uint32 rank_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCLowPriPenaltyImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAWelcome : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWelcome) */ {
 public:
  CMsgDOTAWelcome();
  virtual ~CMsgDOTAWelcome();

  CMsgDOTAWelcome(const CMsgDOTAWelcome& from);

  inline CMsgDOTAWelcome& operator=(const CMsgDOTAWelcome& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAWelcome(CMsgDOTAWelcome&& from) noexcept
    : CMsgDOTAWelcome() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWelcome& operator=(CMsgDOTAWelcome&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWelcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAWelcome* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWelcome*>(
               &_CMsgDOTAWelcome_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    215;

  void Swap(CMsgDOTAWelcome* other);
  friend void swap(CMsgDOTAWelcome& a, CMsgDOTAWelcome& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAWelcome* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAWelcome* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAWelcome& from);
  void MergeFrom(const CMsgDOTAWelcome& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAWelcome* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool spectator_only = 1;
  bool has_spectator_only() const;
  void clear_spectator_only();
  static const int kSpectatorOnlyFieldNumber = 1;
  bool spectator_only() const;
  void set_spectator_only(bool value);

  // optional bool allow_team_creation = 2;
  bool has_allow_team_creation() const;
  void clear_allow_team_creation();
  static const int kAllowTeamCreationFieldNumber = 2;
  bool allow_team_creation() const;
  void set_allow_team_creation(bool value);

  // optional bool tournament_admin = 3;
  bool has_tournament_admin() const;
  void clear_tournament_admin();
  static const int kTournamentAdminFieldNumber = 3;
  bool tournament_admin() const;
  void set_tournament_admin(bool value);

  // optional bool tournament_broadcaster = 4;
  bool has_tournament_broadcaster() const;
  void clear_tournament_broadcaster();
  static const int kTournamentBroadcasterFieldNumber = 4;
  bool tournament_broadcaster() const;
  void set_tournament_broadcaster(bool value);

  // optional uint32 store_item_hash = 5;
  bool has_store_item_hash() const;
  void clear_store_item_hash();
  static const int kStoreItemHashFieldNumber = 5;
  ::google::protobuf::uint32 store_item_hash() const;
  void set_store_item_hash(::google::protobuf::uint32 value);

  // optional uint32 timeplayedconsecutively = 6;
  bool has_timeplayedconsecutively() const;
  void clear_timeplayedconsecutively();
  static const int kTimeplayedconsecutivelyFieldNumber = 6;
  ::google::protobuf::uint32 timeplayedconsecutively() const;
  void set_timeplayedconsecutively(::google::protobuf::uint32 value);

  // optional bool allow_3rd_party_match_history = 7;
  bool has_allow_3rd_party_match_history() const;
  void clear_allow_3rd_party_match_history();
  static const int kAllow3RdPartyMatchHistoryFieldNumber = 7;
  bool allow_3rd_party_match_history() const;
  void set_allow_3rd_party_match_history(bool value);

  // optional .DOTA_PartnerAccountType partner_account_type = 8 [default = DOTA_PARTNER_NONE];
  bool has_partner_account_type() const;
  void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 8;
  ::DOTA_PartnerAccountType partner_account_type() const;
  void set_partner_account_type(::DOTA_PartnerAccountType value);

  // optional uint32 banned_word_list_word_id = 9;
  bool has_banned_word_list_word_id() const;
  void clear_banned_word_list_word_id();
  static const int kBannedWordListWordIdFieldNumber = 9;
  ::google::protobuf::uint32 banned_word_list_word_id() const;
  void set_banned_word_list_word_id(::google::protobuf::uint32 value);

  // optional uint32 time_first_played = 10;
  bool has_time_first_played() const;
  void clear_time_first_played();
  static const int kTimeFirstPlayedFieldNumber = 10;
  ::google::protobuf::uint32 time_first_played() const;
  void set_time_first_played(::google::protobuf::uint32 value);

  // optional uint32 partner_account_state = 11;
  bool has_partner_account_state() const;
  void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 11;
  ::google::protobuf::uint32 partner_account_state() const;
  void set_partner_account_state(::google::protobuf::uint32 value);

  // optional uint32 last_time_played = 12;
  bool has_last_time_played() const;
  void clear_last_time_played();
  static const int kLastTimePlayedFieldNumber = 12;
  ::google::protobuf::uint32 last_time_played() const;
  void set_last_time_played(::google::protobuf::uint32 value);

  // optional uint32 last_ip_address = 13;
  bool has_last_ip_address() const;
  void clear_last_ip_address();
  static const int kLastIpAddressFieldNumber = 13;
  ::google::protobuf::uint32 last_ip_address() const;
  void set_last_ip_address(::google::protobuf::uint32 value);

  // optional uint32 notify_successful_report = 14;
  bool has_notify_successful_report() const;
  void clear_notify_successful_report();
  static const int kNotifySuccessfulReportFieldNumber = 14;
  ::google::protobuf::uint32 notify_successful_report() const;
  void set_notify_successful_report(::google::protobuf::uint32 value);

  // optional uint32 shutdownlawterminatetime = 15;
  bool has_shutdownlawterminatetime() const;
  void clear_shutdownlawterminatetime();
  static const int kShutdownlawterminatetimeFieldNumber = 15;
  ::google::protobuf::uint32 shutdownlawterminatetime() const;
  void set_shutdownlawterminatetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWelcome)
 private:
  void set_has_spectator_only();
  void clear_has_spectator_only();
  void set_has_allow_team_creation();
  void clear_has_allow_team_creation();
  void set_has_tournament_admin();
  void clear_has_tournament_admin();
  void set_has_tournament_broadcaster();
  void clear_has_tournament_broadcaster();
  void set_has_store_item_hash();
  void clear_has_store_item_hash();
  void set_has_timeplayedconsecutively();
  void clear_has_timeplayedconsecutively();
  void set_has_allow_3rd_party_match_history();
  void clear_has_allow_3rd_party_match_history();
  void set_has_partner_account_type();
  void clear_has_partner_account_type();
  void set_has_banned_word_list_word_id();
  void clear_has_banned_word_list_word_id();
  void set_has_time_first_played();
  void clear_has_time_first_played();
  void set_has_partner_account_state();
  void clear_has_partner_account_state();
  void set_has_last_time_played();
  void clear_has_last_time_played();
  void set_has_last_ip_address();
  void clear_has_last_ip_address();
  void set_has_notify_successful_report();
  void clear_has_notify_successful_report();
  void set_has_shutdownlawterminatetime();
  void clear_has_shutdownlawterminatetime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool spectator_only_;
  bool allow_team_creation_;
  bool tournament_admin_;
  bool tournament_broadcaster_;
  ::google::protobuf::uint32 store_item_hash_;
  ::google::protobuf::uint32 timeplayedconsecutively_;
  bool allow_3rd_party_match_history_;
  int partner_account_type_;
  ::google::protobuf::uint32 banned_word_list_word_id_;
  ::google::protobuf::uint32 time_first_played_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 last_time_played_;
  ::google::protobuf::uint32 last_ip_address_;
  ::google::protobuf::uint32 notify_successful_report_;
  ::google::protobuf::uint32 shutdownlawterminatetime_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAWelcomeImpl();
};
// -------------------------------------------------------------------

class CSODOTAGameHeroFavorites : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameHeroFavorites) */ {
 public:
  CSODOTAGameHeroFavorites();
  virtual ~CSODOTAGameHeroFavorites();

  CSODOTAGameHeroFavorites(const CSODOTAGameHeroFavorites& from);

  inline CSODOTAGameHeroFavorites& operator=(const CSODOTAGameHeroFavorites& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAGameHeroFavorites(CSODOTAGameHeroFavorites&& from) noexcept
    : CSODOTAGameHeroFavorites() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameHeroFavorites& operator=(CSODOTAGameHeroFavorites&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameHeroFavorites& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAGameHeroFavorites* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameHeroFavorites*>(
               &_CSODOTAGameHeroFavorites_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    216;

  void Swap(CSODOTAGameHeroFavorites* other);
  friend void swap(CSODOTAGameHeroFavorites& a, CSODOTAGameHeroFavorites& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAGameHeroFavorites* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAGameHeroFavorites* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAGameHeroFavorites& from);
  void MergeFrom(const CSODOTAGameHeroFavorites& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAGameHeroFavorites* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2 [(.key_field) = true];
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSODOTAGameHeroFavorites)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAGameHeroFavoritesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHeroFavoritesAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHeroFavoritesAdd) */ {
 public:
  CMsgDOTAHeroFavoritesAdd();
  virtual ~CMsgDOTAHeroFavoritesAdd();

  CMsgDOTAHeroFavoritesAdd(const CMsgDOTAHeroFavoritesAdd& from);

  inline CMsgDOTAHeroFavoritesAdd& operator=(const CMsgDOTAHeroFavoritesAdd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHeroFavoritesAdd(CMsgDOTAHeroFavoritesAdd&& from) noexcept
    : CMsgDOTAHeroFavoritesAdd() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHeroFavoritesAdd& operator=(CMsgDOTAHeroFavoritesAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHeroFavoritesAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHeroFavoritesAdd* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHeroFavoritesAdd*>(
               &_CMsgDOTAHeroFavoritesAdd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    217;

  void Swap(CMsgDOTAHeroFavoritesAdd* other);
  friend void swap(CMsgDOTAHeroFavoritesAdd& a, CMsgDOTAHeroFavoritesAdd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHeroFavoritesAdd* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHeroFavoritesAdd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHeroFavoritesAdd& from);
  void MergeFrom(const CMsgDOTAHeroFavoritesAdd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHeroFavoritesAdd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHeroFavoritesAdd)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHeroFavoritesAddImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHeroFavoritesRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHeroFavoritesRemove) */ {
 public:
  CMsgDOTAHeroFavoritesRemove();
  virtual ~CMsgDOTAHeroFavoritesRemove();

  CMsgDOTAHeroFavoritesRemove(const CMsgDOTAHeroFavoritesRemove& from);

  inline CMsgDOTAHeroFavoritesRemove& operator=(const CMsgDOTAHeroFavoritesRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHeroFavoritesRemove(CMsgDOTAHeroFavoritesRemove&& from) noexcept
    : CMsgDOTAHeroFavoritesRemove() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHeroFavoritesRemove& operator=(CMsgDOTAHeroFavoritesRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHeroFavoritesRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHeroFavoritesRemove* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHeroFavoritesRemove*>(
               &_CMsgDOTAHeroFavoritesRemove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    218;

  void Swap(CMsgDOTAHeroFavoritesRemove* other);
  friend void swap(CMsgDOTAHeroFavoritesRemove& a, CMsgDOTAHeroFavoritesRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHeroFavoritesRemove* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHeroFavoritesRemove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHeroFavoritesRemove& from);
  void MergeFrom(const CMsgDOTAHeroFavoritesRemove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHeroFavoritesRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHeroFavoritesRemove)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHeroFavoritesRemoveImpl();
};
// -------------------------------------------------------------------

class CDOTAOverview_PlayersByRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTAOverview.PlayersByRegion) */ {
 public:
  CDOTAOverview_PlayersByRegion();
  virtual ~CDOTAOverview_PlayersByRegion();

  CDOTAOverview_PlayersByRegion(const CDOTAOverview_PlayersByRegion& from);

  inline CDOTAOverview_PlayersByRegion& operator=(const CDOTAOverview_PlayersByRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAOverview_PlayersByRegion(CDOTAOverview_PlayersByRegion&& from) noexcept
    : CDOTAOverview_PlayersByRegion() {
    *this = ::std::move(from);
  }

  inline CDOTAOverview_PlayersByRegion& operator=(CDOTAOverview_PlayersByRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAOverview_PlayersByRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAOverview_PlayersByRegion* internal_default_instance() {
    return reinterpret_cast<const CDOTAOverview_PlayersByRegion*>(
               &_CDOTAOverview_PlayersByRegion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    219;

  void Swap(CDOTAOverview_PlayersByRegion* other);
  friend void swap(CDOTAOverview_PlayersByRegion& a, CDOTAOverview_PlayersByRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAOverview_PlayersByRegion* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAOverview_PlayersByRegion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAOverview_PlayersByRegion& from);
  void MergeFrom(const CDOTAOverview_PlayersByRegion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAOverview_PlayersByRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional int32 total = 2;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // optional int32 in_queue = 3;
  bool has_in_queue() const;
  void clear_in_queue();
  static const int kInQueueFieldNumber = 3;
  ::google::protobuf::int32 in_queue() const;
  void set_in_queue(::google::protobuf::int32 value);

  // optional int32 in_match = 4;
  bool has_in_match() const;
  void clear_in_match();
  static const int kInMatchFieldNumber = 4;
  ::google::protobuf::int32 in_match() const;
  void set_in_match(::google::protobuf::int32 value);

  // optional int32 in_practice = 5;
  bool has_in_practice() const;
  void clear_in_practice();
  static const int kInPracticeFieldNumber = 5;
  ::google::protobuf::int32 in_practice() const;
  void set_in_practice(::google::protobuf::int32 value);

  // optional int32 in_tournament = 6;
  bool has_in_tournament() const;
  void clear_in_tournament();
  static const int kInTournamentFieldNumber = 6;
  ::google::protobuf::int32 in_tournament() const;
  void set_in_tournament(::google::protobuf::int32 value);

  // optional int32 in_coop = 8;
  bool has_in_coop() const;
  void clear_in_coop();
  static const int kInCoopFieldNumber = 8;
  ::google::protobuf::int32 in_coop() const;
  void set_in_coop(::google::protobuf::int32 value);

  // optional int32 in_team_match = 9;
  bool has_in_team_match() const;
  void clear_in_team_match();
  static const int kInTeamMatchFieldNumber = 9;
  ::google::protobuf::int32 in_team_match() const;
  void set_in_team_match(::google::protobuf::int32 value);

  // optional int32 spectating = 10;
  bool has_spectating() const;
  void clear_spectating();
  static const int kSpectatingFieldNumber = 10;
  ::google::protobuf::int32 spectating() const;
  void set_spectating(::google::protobuf::int32 value);

  // optional int32 idle = 11;
  bool has_idle() const;
  void clear_idle();
  static const int kIdleFieldNumber = 11;
  ::google::protobuf::int32 idle() const;
  void set_idle(::google::protobuf::int32 value);

  // optional int32 in_solo_queue_match = 12;
  bool has_in_solo_queue_match() const;
  void clear_in_solo_queue_match();
  static const int kInSoloQueueMatchFieldNumber = 12;
  ::google::protobuf::int32 in_solo_queue_match() const;
  void set_in_solo_queue_match(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CDOTAOverview.PlayersByRegion)
 private:
  void set_has_region();
  void clear_has_region();
  void set_has_total();
  void clear_has_total();
  void set_has_in_queue();
  void clear_has_in_queue();
  void set_has_in_match();
  void clear_has_in_match();
  void set_has_in_practice();
  void clear_has_in_practice();
  void set_has_in_tournament();
  void clear_has_in_tournament();
  void set_has_in_coop();
  void clear_has_in_coop();
  void set_has_in_team_match();
  void clear_has_in_team_match();
  void set_has_spectating();
  void clear_has_spectating();
  void set_has_idle();
  void clear_has_idle();
  void set_has_in_solo_queue_match();
  void clear_has_in_solo_queue_match();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 in_queue_;
  ::google::protobuf::int32 in_match_;
  ::google::protobuf::int32 in_practice_;
  ::google::protobuf::int32 in_tournament_;
  ::google::protobuf::int32 in_coop_;
  ::google::protobuf::int32 in_team_match_;
  ::google::protobuf::int32 spectating_;
  ::google::protobuf::int32 idle_;
  ::google::protobuf::int32 in_solo_queue_match_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTAOverview_PlayersByRegionImpl();
};
// -------------------------------------------------------------------

class CDOTAOverview_ServersByRegion_Host_Server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTAOverview.ServersByRegion.Host.Server) */ {
 public:
  CDOTAOverview_ServersByRegion_Host_Server();
  virtual ~CDOTAOverview_ServersByRegion_Host_Server();

  CDOTAOverview_ServersByRegion_Host_Server(const CDOTAOverview_ServersByRegion_Host_Server& from);

  inline CDOTAOverview_ServersByRegion_Host_Server& operator=(const CDOTAOverview_ServersByRegion_Host_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAOverview_ServersByRegion_Host_Server(CDOTAOverview_ServersByRegion_Host_Server&& from) noexcept
    : CDOTAOverview_ServersByRegion_Host_Server() {
    *this = ::std::move(from);
  }

  inline CDOTAOverview_ServersByRegion_Host_Server& operator=(CDOTAOverview_ServersByRegion_Host_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAOverview_ServersByRegion_Host_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAOverview_ServersByRegion_Host_Server* internal_default_instance() {
    return reinterpret_cast<const CDOTAOverview_ServersByRegion_Host_Server*>(
               &_CDOTAOverview_ServersByRegion_Host_Server_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    220;

  void Swap(CDOTAOverview_ServersByRegion_Host_Server* other);
  friend void swap(CDOTAOverview_ServersByRegion_Host_Server& a, CDOTAOverview_ServersByRegion_Host_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAOverview_ServersByRegion_Host_Server* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAOverview_ServersByRegion_Host_Server* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAOverview_ServersByRegion_Host_Server& from);
  void MergeFrom(const CDOTAOverview_ServersByRegion_Host_Server& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAOverview_ServersByRegion_Host_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 user_steam_ids = 8;
  int user_steam_ids_size() const;
  void clear_user_steam_ids();
  static const int kUserSteamIdsFieldNumber = 8;
  ::google::protobuf::uint64 user_steam_ids(int index) const;
  void set_user_steam_ids(int index, ::google::protobuf::uint64 value);
  void add_user_steam_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_steam_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_steam_ids();

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional bool is_relay = 2;
  bool has_is_relay() const;
  void clear_is_relay();
  static const int kIsRelayFieldNumber = 2;
  bool is_relay() const;
  void set_is_relay(bool value);

  // optional bool in_use = 4;
  bool has_in_use() const;
  void clear_in_use();
  static const int kInUseFieldNumber = 4;
  bool in_use() const;
  void set_in_use(bool value);

  // optional fixed64 lobby_id = 6;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 6;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional fixed64 relayed_game_server_steam_id = 7;
  bool has_relayed_game_server_steam_id() const;
  void clear_relayed_game_server_steam_id();
  static const int kRelayedGameServerSteamIdFieldNumber = 7;
  ::google::protobuf::uint64 relayed_game_server_steam_id() const;
  void set_relayed_game_server_steam_id(::google::protobuf::uint64 value);

  // optional uint32 match_id = 5;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTAOverview.ServersByRegion.Host.Server)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_is_relay();
  void clear_has_is_relay();
  void set_has_port();
  void clear_has_port();
  void set_has_in_use();
  void clear_has_in_use();
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_relayed_game_server_steam_id();
  void clear_has_relayed_game_server_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_steam_ids_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 port_;
  bool is_relay_;
  bool in_use_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint64 relayed_game_server_steam_id_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTAOverview_ServersByRegion_Host_ServerImpl();
};
// -------------------------------------------------------------------

class CDOTAOverview_ServersByRegion_Host : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTAOverview.ServersByRegion.Host) */ {
 public:
  CDOTAOverview_ServersByRegion_Host();
  virtual ~CDOTAOverview_ServersByRegion_Host();

  CDOTAOverview_ServersByRegion_Host(const CDOTAOverview_ServersByRegion_Host& from);

  inline CDOTAOverview_ServersByRegion_Host& operator=(const CDOTAOverview_ServersByRegion_Host& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAOverview_ServersByRegion_Host(CDOTAOverview_ServersByRegion_Host&& from) noexcept
    : CDOTAOverview_ServersByRegion_Host() {
    *this = ::std::move(from);
  }

  inline CDOTAOverview_ServersByRegion_Host& operator=(CDOTAOverview_ServersByRegion_Host&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAOverview_ServersByRegion_Host& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAOverview_ServersByRegion_Host* internal_default_instance() {
    return reinterpret_cast<const CDOTAOverview_ServersByRegion_Host*>(
               &_CDOTAOverview_ServersByRegion_Host_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    221;

  void Swap(CDOTAOverview_ServersByRegion_Host* other);
  friend void swap(CDOTAOverview_ServersByRegion_Host& a, CDOTAOverview_ServersByRegion_Host& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAOverview_ServersByRegion_Host* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAOverview_ServersByRegion_Host* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAOverview_ServersByRegion_Host& from);
  void MergeFrom(const CDOTAOverview_ServersByRegion_Host& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAOverview_ServersByRegion_Host* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CDOTAOverview_ServersByRegion_Host_Server Server;

  // accessors -------------------------------------------------------

  // repeated .CDOTAOverview.ServersByRegion.Host.Server servers = 2;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 2;
  const ::CDOTAOverview_ServersByRegion_Host_Server& servers(int index) const;
  ::CDOTAOverview_ServersByRegion_Host_Server* mutable_servers(int index);
  ::CDOTAOverview_ServersByRegion_Host_Server* add_servers();
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host_Server >*
      mutable_servers();
  const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host_Server >&
      servers() const;

  // optional uint32 ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTAOverview.ServersByRegion.Host)
 private:
  void set_has_ip();
  void clear_has_ip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host_Server > servers_;
  ::google::protobuf::uint32 ip_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTAOverview_ServersByRegion_HostImpl();
};
// -------------------------------------------------------------------

class CDOTAOverview_ServersByRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTAOverview.ServersByRegion) */ {
 public:
  CDOTAOverview_ServersByRegion();
  virtual ~CDOTAOverview_ServersByRegion();

  CDOTAOverview_ServersByRegion(const CDOTAOverview_ServersByRegion& from);

  inline CDOTAOverview_ServersByRegion& operator=(const CDOTAOverview_ServersByRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAOverview_ServersByRegion(CDOTAOverview_ServersByRegion&& from) noexcept
    : CDOTAOverview_ServersByRegion() {
    *this = ::std::move(from);
  }

  inline CDOTAOverview_ServersByRegion& operator=(CDOTAOverview_ServersByRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAOverview_ServersByRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAOverview_ServersByRegion* internal_default_instance() {
    return reinterpret_cast<const CDOTAOverview_ServersByRegion*>(
               &_CDOTAOverview_ServersByRegion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    222;

  void Swap(CDOTAOverview_ServersByRegion* other);
  friend void swap(CDOTAOverview_ServersByRegion& a, CDOTAOverview_ServersByRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAOverview_ServersByRegion* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAOverview_ServersByRegion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAOverview_ServersByRegion& from);
  void MergeFrom(const CDOTAOverview_ServersByRegion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAOverview_ServersByRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CDOTAOverview_ServersByRegion_Host Host;

  // accessors -------------------------------------------------------

  // repeated .CDOTAOverview.ServersByRegion.Host hosts = 6;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 6;
  const ::CDOTAOverview_ServersByRegion_Host& hosts(int index) const;
  ::CDOTAOverview_ServersByRegion_Host* mutable_hosts(int index);
  ::CDOTAOverview_ServersByRegion_Host* add_hosts();
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host >*
      mutable_hosts();
  const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host >&
      hosts() const;

  // optional int32 region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional int32 game_servers_in_use = 2;
  bool has_game_servers_in_use() const;
  void clear_game_servers_in_use();
  static const int kGameServersInUseFieldNumber = 2;
  ::google::protobuf::int32 game_servers_in_use() const;
  void set_game_servers_in_use(::google::protobuf::int32 value);

  // optional int32 game_servers_available = 3;
  bool has_game_servers_available() const;
  void clear_game_servers_available();
  static const int kGameServersAvailableFieldNumber = 3;
  ::google::protobuf::int32 game_servers_available() const;
  void set_game_servers_available(::google::protobuf::int32 value);

  // optional int32 proxy_servers_in_use = 4;
  bool has_proxy_servers_in_use() const;
  void clear_proxy_servers_in_use();
  static const int kProxyServersInUseFieldNumber = 4;
  ::google::protobuf::int32 proxy_servers_in_use() const;
  void set_proxy_servers_in_use(::google::protobuf::int32 value);

  // optional int32 proxy_servers_available = 5;
  bool has_proxy_servers_available() const;
  void clear_proxy_servers_available();
  static const int kProxyServersAvailableFieldNumber = 5;
  ::google::protobuf::int32 proxy_servers_available() const;
  void set_proxy_servers_available(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CDOTAOverview.ServersByRegion)
 private:
  void set_has_region();
  void clear_has_region();
  void set_has_game_servers_in_use();
  void clear_has_game_servers_in_use();
  void set_has_game_servers_available();
  void clear_has_game_servers_available();
  void set_has_proxy_servers_in_use();
  void clear_has_proxy_servers_in_use();
  void set_has_proxy_servers_available();
  void clear_has_proxy_servers_available();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host > hosts_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 game_servers_in_use_;
  ::google::protobuf::int32 game_servers_available_;
  ::google::protobuf::int32 proxy_servers_in_use_;
  ::google::protobuf::int32 proxy_servers_available_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTAOverview_ServersByRegionImpl();
};
// -------------------------------------------------------------------

class CDOTAOverview : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDOTAOverview) */ {
 public:
  CDOTAOverview();
  virtual ~CDOTAOverview();

  CDOTAOverview(const CDOTAOverview& from);

  inline CDOTAOverview& operator=(const CDOTAOverview& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAOverview(CDOTAOverview&& from) noexcept
    : CDOTAOverview() {
    *this = ::std::move(from);
  }

  inline CDOTAOverview& operator=(CDOTAOverview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAOverview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAOverview* internal_default_instance() {
    return reinterpret_cast<const CDOTAOverview*>(
               &_CDOTAOverview_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    223;

  void Swap(CDOTAOverview* other);
  friend void swap(CDOTAOverview& a, CDOTAOverview& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAOverview* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAOverview* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAOverview& from);
  void MergeFrom(const CDOTAOverview& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAOverview* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CDOTAOverview_PlayersByRegion PlayersByRegion;
  typedef CDOTAOverview_ServersByRegion ServersByRegion;

  // accessors -------------------------------------------------------

  // repeated .CDOTAOverview.PlayersByRegion players_by_region = 1;
  int players_by_region_size() const;
  void clear_players_by_region();
  static const int kPlayersByRegionFieldNumber = 1;
  const ::CDOTAOverview_PlayersByRegion& players_by_region(int index) const;
  ::CDOTAOverview_PlayersByRegion* mutable_players_by_region(int index);
  ::CDOTAOverview_PlayersByRegion* add_players_by_region();
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_PlayersByRegion >*
      mutable_players_by_region();
  const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_PlayersByRegion >&
      players_by_region() const;

  // repeated .CDOTAOverview.ServersByRegion game_servers_by_region = 2;
  int game_servers_by_region_size() const;
  void clear_game_servers_by_region();
  static const int kGameServersByRegionFieldNumber = 2;
  const ::CDOTAOverview_ServersByRegion& game_servers_by_region(int index) const;
  ::CDOTAOverview_ServersByRegion* mutable_game_servers_by_region(int index);
  ::CDOTAOverview_ServersByRegion* add_game_servers_by_region();
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion >*
      mutable_game_servers_by_region();
  const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion >&
      game_servers_by_region() const;

  // @@protoc_insertion_point(class_scope:CDOTAOverview)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_PlayersByRegion > players_by_region_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion > game_servers_by_region_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCDOTAOverviewImpl();
};
// -------------------------------------------------------------------

class CMsgSetShowcaseHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSetShowcaseHero) */ {
 public:
  CMsgSetShowcaseHero();
  virtual ~CMsgSetShowcaseHero();

  CMsgSetShowcaseHero(const CMsgSetShowcaseHero& from);

  inline CMsgSetShowcaseHero& operator=(const CMsgSetShowcaseHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSetShowcaseHero(CMsgSetShowcaseHero&& from) noexcept
    : CMsgSetShowcaseHero() {
    *this = ::std::move(from);
  }

  inline CMsgSetShowcaseHero& operator=(CMsgSetShowcaseHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetShowcaseHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSetShowcaseHero* internal_default_instance() {
    return reinterpret_cast<const CMsgSetShowcaseHero*>(
               &_CMsgSetShowcaseHero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    224;

  void Swap(CMsgSetShowcaseHero* other);
  friend void swap(CMsgSetShowcaseHero& a, CMsgSetShowcaseHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetShowcaseHero* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSetShowcaseHero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSetShowcaseHero& from);
  void MergeFrom(const CMsgSetShowcaseHero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSetShowcaseHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 showcase_hero_id = 1;
  bool has_showcase_hero_id() const;
  void clear_showcase_hero_id();
  static const int kShowcaseHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 showcase_hero_id() const;
  void set_showcase_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetShowcaseHero)
 private:
  void set_has_showcase_hero_id();
  void clear_has_showcase_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 showcase_hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSetShowcaseHeroImpl();
};
// -------------------------------------------------------------------

class CMsgSetFeaturedItems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSetFeaturedItems) */ {
 public:
  CMsgSetFeaturedItems();
  virtual ~CMsgSetFeaturedItems();

  CMsgSetFeaturedItems(const CMsgSetFeaturedItems& from);

  inline CMsgSetFeaturedItems& operator=(const CMsgSetFeaturedItems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSetFeaturedItems(CMsgSetFeaturedItems&& from) noexcept
    : CMsgSetFeaturedItems() {
    *this = ::std::move(from);
  }

  inline CMsgSetFeaturedItems& operator=(CMsgSetFeaturedItems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetFeaturedItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSetFeaturedItems* internal_default_instance() {
    return reinterpret_cast<const CMsgSetFeaturedItems*>(
               &_CMsgSetFeaturedItems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    225;

  void Swap(CMsgSetFeaturedItems* other);
  friend void swap(CMsgSetFeaturedItems& a, CMsgSetFeaturedItems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetFeaturedItems* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSetFeaturedItems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSetFeaturedItems& from);
  void MergeFrom(const CMsgSetFeaturedItems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSetFeaturedItems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 featured_item_id = 1;
  int featured_item_id_size() const;
  void clear_featured_item_id();
  static const int kFeaturedItemIdFieldNumber = 1;
  ::google::protobuf::uint64 featured_item_id(int index) const;
  void set_featured_item_id(int index, ::google::protobuf::uint64 value);
  void add_featured_item_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      featured_item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_featured_item_id();

  // @@protoc_insertion_point(class_scope:CMsgSetFeaturedItems)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > featured_item_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSetFeaturedItemsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAFeaturedItems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFeaturedItems) */ {
 public:
  CMsgDOTAFeaturedItems();
  virtual ~CMsgDOTAFeaturedItems();

  CMsgDOTAFeaturedItems(const CMsgDOTAFeaturedItems& from);

  inline CMsgDOTAFeaturedItems& operator=(const CMsgDOTAFeaturedItems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAFeaturedItems(CMsgDOTAFeaturedItems&& from) noexcept
    : CMsgDOTAFeaturedItems() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFeaturedItems& operator=(CMsgDOTAFeaturedItems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFeaturedItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAFeaturedItems* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFeaturedItems*>(
               &_CMsgDOTAFeaturedItems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    226;

  void Swap(CMsgDOTAFeaturedItems* other);
  friend void swap(CMsgDOTAFeaturedItems& a, CMsgDOTAFeaturedItems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFeaturedItems* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAFeaturedItems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAFeaturedItems& from);
  void MergeFrom(const CMsgDOTAFeaturedItems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAFeaturedItems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 featured_item_id = 2;
  int featured_item_id_size() const;
  void clear_featured_item_id();
  static const int kFeaturedItemIdFieldNumber = 2;
  ::google::protobuf::uint64 featured_item_id(int index) const;
  void set_featured_item_id(int index, ::google::protobuf::uint64 value);
  void add_featured_item_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      featured_item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_featured_item_id();

  // repeated bytes object_data = 3;
  int object_data_size() const;
  void clear_object_data();
  static const int kObjectDataFieldNumber = 3;
  const ::std::string& object_data(int index) const;
  ::std::string* mutable_object_data(int index);
  void set_object_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_object_data(int index, ::std::string&& value);
  #endif
  void set_object_data(int index, const char* value);
  void set_object_data(int index, const void* value, size_t size);
  ::std::string* add_object_data();
  void add_object_data(const ::std::string& value);
  #if LANG_CXX11
  void add_object_data(::std::string&& value);
  #endif
  void add_object_data(const char* value);
  void add_object_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& object_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_object_data();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAFeaturedItems)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > featured_item_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> object_data_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAFeaturedItemsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAFeaturedItemsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFeaturedItemsRequest) */ {
 public:
  CMsgDOTAFeaturedItemsRequest();
  virtual ~CMsgDOTAFeaturedItemsRequest();

  CMsgDOTAFeaturedItemsRequest(const CMsgDOTAFeaturedItemsRequest& from);

  inline CMsgDOTAFeaturedItemsRequest& operator=(const CMsgDOTAFeaturedItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAFeaturedItemsRequest(CMsgDOTAFeaturedItemsRequest&& from) noexcept
    : CMsgDOTAFeaturedItemsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFeaturedItemsRequest& operator=(CMsgDOTAFeaturedItemsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFeaturedItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAFeaturedItemsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFeaturedItemsRequest*>(
               &_CMsgDOTAFeaturedItemsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    227;

  void Swap(CMsgDOTAFeaturedItemsRequest* other);
  friend void swap(CMsgDOTAFeaturedItemsRequest& a, CMsgDOTAFeaturedItemsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFeaturedItemsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAFeaturedItemsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAFeaturedItemsRequest& from);
  void MergeFrom(const CMsgDOTAFeaturedItemsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAFeaturedItemsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAFeaturedItemsRequest)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAFeaturedItemsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAFeaturedItemsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFeaturedItemsResponse) */ {
 public:
  CMsgDOTAFeaturedItemsResponse();
  virtual ~CMsgDOTAFeaturedItemsResponse();

  CMsgDOTAFeaturedItemsResponse(const CMsgDOTAFeaturedItemsResponse& from);

  inline CMsgDOTAFeaturedItemsResponse& operator=(const CMsgDOTAFeaturedItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAFeaturedItemsResponse(CMsgDOTAFeaturedItemsResponse&& from) noexcept
    : CMsgDOTAFeaturedItemsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFeaturedItemsResponse& operator=(CMsgDOTAFeaturedItemsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFeaturedItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAFeaturedItemsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFeaturedItemsResponse*>(
               &_CMsgDOTAFeaturedItemsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    228;

  void Swap(CMsgDOTAFeaturedItemsResponse* other);
  friend void swap(CMsgDOTAFeaturedItemsResponse& a, CMsgDOTAFeaturedItemsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFeaturedItemsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAFeaturedItemsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAFeaturedItemsResponse& from);
  void MergeFrom(const CMsgDOTAFeaturedItemsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAFeaturedItemsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAFeaturedItems featured_items = 1;
  bool has_featured_items() const;
  void clear_featured_items();
  static const int kFeaturedItemsFieldNumber = 1;
  const ::CMsgDOTAFeaturedItems& featured_items() const;
  ::CMsgDOTAFeaturedItems* release_featured_items();
  ::CMsgDOTAFeaturedItems* mutable_featured_items();
  void set_allocated_featured_items(::CMsgDOTAFeaturedItems* featured_items);

  // optional uint32 result = 2 [default = 2];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAFeaturedItemsResponse)
 private:
  void set_has_featured_items();
  void clear_has_featured_items();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTAFeaturedItems* featured_items_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAFeaturedItemsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgRequestLeagueInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRequestLeagueInfo) */ {
 public:
  CMsgRequestLeagueInfo();
  virtual ~CMsgRequestLeagueInfo();

  CMsgRequestLeagueInfo(const CMsgRequestLeagueInfo& from);

  inline CMsgRequestLeagueInfo& operator=(const CMsgRequestLeagueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRequestLeagueInfo(CMsgRequestLeagueInfo&& from) noexcept
    : CMsgRequestLeagueInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRequestLeagueInfo& operator=(CMsgRequestLeagueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestLeagueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRequestLeagueInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestLeagueInfo*>(
               &_CMsgRequestLeagueInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    229;

  void Swap(CMsgRequestLeagueInfo* other);
  friend void swap(CMsgRequestLeagueInfo& a, CMsgRequestLeagueInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRequestLeagueInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRequestLeagueInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRequestLeagueInfo& from);
  void MergeFrom(const CMsgRequestLeagueInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRequestLeagueInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRequestLeagueInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRequestLeagueInfoImpl();
};
// -------------------------------------------------------------------

class CLeague : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLeague) */ {
 public:
  CLeague();
  virtual ~CLeague();

  CLeague(const CLeague& from);

  inline CLeague& operator=(const CLeague& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLeague(CLeague&& from) noexcept
    : CLeague() {
    *this = ::std::move(from);
  }

  inline CLeague& operator=(CLeague&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLeague& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLeague* internal_default_instance() {
    return reinterpret_cast<const CLeague*>(
               &_CLeague_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    230;

  void Swap(CLeague* other);
  friend void swap(CLeague& a, CLeague& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLeague* New() const PROTOBUF_FINAL { return New(NULL); }

  CLeague* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CLeague& from);
  void MergeFrom(const CLeague& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CLeague* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 leagueid = 1;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 1;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional bool live = 2;
  bool has_live() const;
  void clear_live();
  static const int kLiveFieldNumber = 2;
  bool live() const;
  void set_live(bool value);

  // optional bool freeleague = 3;
  bool has_freeleague() const;
  void clear_freeleague();
  static const int kFreeleagueFieldNumber = 3;
  bool freeleague() const;
  void set_freeleague(bool value);

  // optional fixed32 lastgametime = 4;
  bool has_lastgametime() const;
  void clear_lastgametime();
  static const int kLastgametimeFieldNumber = 4;
  ::google::protobuf::uint32 lastgametime() const;
  void set_lastgametime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CLeague)
 private:
  void set_has_leagueid();
  void clear_has_leagueid();
  void set_has_live();
  void clear_has_live();
  void set_has_freeleague();
  void clear_has_freeleague();
  void set_has_lastgametime();
  void clear_has_lastgametime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 leagueid_;
  bool live_;
  bool freeleague_;
  ::google::protobuf::uint32 lastgametime_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCLeagueImpl();
};
// -------------------------------------------------------------------

class CMsgResponseLeagueInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgResponseLeagueInfo) */ {
 public:
  CMsgResponseLeagueInfo();
  virtual ~CMsgResponseLeagueInfo();

  CMsgResponseLeagueInfo(const CMsgResponseLeagueInfo& from);

  inline CMsgResponseLeagueInfo& operator=(const CMsgResponseLeagueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgResponseLeagueInfo(CMsgResponseLeagueInfo&& from) noexcept
    : CMsgResponseLeagueInfo() {
    *this = ::std::move(from);
  }

  inline CMsgResponseLeagueInfo& operator=(CMsgResponseLeagueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgResponseLeagueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgResponseLeagueInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgResponseLeagueInfo*>(
               &_CMsgResponseLeagueInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    231;

  void Swap(CMsgResponseLeagueInfo* other);
  friend void swap(CMsgResponseLeagueInfo& a, CMsgResponseLeagueInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgResponseLeagueInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgResponseLeagueInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgResponseLeagueInfo& from);
  void MergeFrom(const CMsgResponseLeagueInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgResponseLeagueInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CLeague leagues = 1;
  int leagues_size() const;
  void clear_leagues();
  static const int kLeaguesFieldNumber = 1;
  const ::CLeague& leagues(int index) const;
  ::CLeague* mutable_leagues(int index);
  ::CLeague* add_leagues();
  ::google::protobuf::RepeatedPtrField< ::CLeague >*
      mutable_leagues();
  const ::google::protobuf::RepeatedPtrField< ::CLeague >&
      leagues() const;

  // @@protoc_insertion_point(class_scope:CMsgResponseLeagueInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CLeague > leagues_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgResponseLeagueInfoImpl();
};
// -------------------------------------------------------------------

class CMsgTournamentItemEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgTournamentItemEvent) */ {
 public:
  CMsgTournamentItemEvent();
  virtual ~CMsgTournamentItemEvent();

  CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from);

  inline CMsgTournamentItemEvent& operator=(const CMsgTournamentItemEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgTournamentItemEvent(CMsgTournamentItemEvent&& from) noexcept
    : CMsgTournamentItemEvent() {
    *this = ::std::move(from);
  }

  inline CMsgTournamentItemEvent& operator=(CMsgTournamentItemEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTournamentItemEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgTournamentItemEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgTournamentItemEvent*>(
               &_CMsgTournamentItemEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    232;

  void Swap(CMsgTournamentItemEvent* other);
  friend void swap(CMsgTournamentItemEvent& a, CMsgTournamentItemEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgTournamentItemEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgTournamentItemEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgTournamentItemEvent& from);
  void MergeFrom(const CMsgTournamentItemEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgTournamentItemEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loot_list = 7;
  bool has_loot_list() const;
  void clear_loot_list();
  static const int kLootListFieldNumber = 7;
  const ::std::string& loot_list() const;
  void set_loot_list(const ::std::string& value);
  #if LANG_CXX11
  void set_loot_list(::std::string&& value);
  #endif
  void set_loot_list(const char* value);
  void set_loot_list(const char* value, size_t size);
  ::std::string* mutable_loot_list();
  ::std::string* release_loot_list();
  void set_allocated_loot_list(::std::string* loot_list);

  // optional fixed32 killer_account_id = 1;
  bool has_killer_account_id() const;
  void clear_killer_account_id();
  static const int kKillerAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 killer_account_id() const;
  void set_killer_account_id(::google::protobuf::uint32 value);

  // optional fixed32 victim_account_id = 2;
  bool has_victim_account_id() const;
  void clear_victim_account_id();
  static const int kVictimAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 victim_account_id() const;
  void set_victim_account_id(::google::protobuf::uint32 value);

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  ::DOTA_TournamentEvents event_type() const;
  void set_event_type(::DOTA_TournamentEvents value);

  // optional int32 tv_delay = 4;
  bool has_tv_delay() const;
  void clear_tv_delay();
  static const int kTvDelayFieldNumber = 4;
  ::google::protobuf::int32 tv_delay() const;
  void set_tv_delay(::google::protobuf::int32 value);

  // optional int32 dota_time = 5;
  bool has_dota_time() const;
  void clear_dota_time();
  static const int kDotaTimeFieldNumber = 5;
  ::google::protobuf::int32 dota_time() const;
  void set_dota_time(::google::protobuf::int32 value);

  // optional float replay_time = 6;
  bool has_replay_time() const;
  void clear_replay_time();
  static const int kReplayTimeFieldNumber = 6;
  float replay_time() const;
  void set_replay_time(float value);

  // optional uint32 event_team = 8;
  bool has_event_team() const;
  void clear_event_team();
  static const int kEventTeamFieldNumber = 8;
  ::google::protobuf::uint32 event_team() const;
  void set_event_team(::google::protobuf::uint32 value);

  // optional uint32 multi_kill_count = 9;
  bool has_multi_kill_count() const;
  void clear_multi_kill_count();
  static const int kMultiKillCountFieldNumber = 9;
  ::google::protobuf::uint32 multi_kill_count() const;
  void set_multi_kill_count(::google::protobuf::uint32 value);

  // optional uint32 winner_score = 10;
  bool has_winner_score() const;
  void clear_winner_score();
  static const int kWinnerScoreFieldNumber = 10;
  ::google::protobuf::uint32 winner_score() const;
  void set_winner_score(::google::protobuf::uint32 value);

  // optional uint32 loser_score = 11;
  bool has_loser_score() const;
  void clear_loser_score();
  static const int kLoserScoreFieldNumber = 11;
  ::google::protobuf::uint32 loser_score() const;
  void set_loser_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEvent)
 private:
  void set_has_killer_account_id();
  void clear_has_killer_account_id();
  void set_has_victim_account_id();
  void clear_has_victim_account_id();
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_tv_delay();
  void clear_has_tv_delay();
  void set_has_dota_time();
  void clear_has_dota_time();
  void set_has_replay_time();
  void clear_has_replay_time();
  void set_has_loot_list();
  void clear_has_loot_list();
  void set_has_event_team();
  void clear_has_event_team();
  void set_has_multi_kill_count();
  void clear_has_multi_kill_count();
  void set_has_winner_score();
  void clear_has_winner_score();
  void set_has_loser_score();
  void clear_has_loser_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr loot_list_;
  ::google::protobuf::uint32 killer_account_id_;
  ::google::protobuf::uint32 victim_account_id_;
  int event_type_;
  ::google::protobuf::int32 tv_delay_;
  ::google::protobuf::int32 dota_time_;
  float replay_time_;
  ::google::protobuf::uint32 event_team_;
  ::google::protobuf::uint32 multi_kill_count_;
  ::google::protobuf::uint32 winner_score_;
  ::google::protobuf::uint32 loser_score_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgTournamentItemEventImpl();
};
// -------------------------------------------------------------------

class CMsgTournamentItemEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgTournamentItemEventResponse) */ {
 public:
  CMsgTournamentItemEventResponse();
  virtual ~CMsgTournamentItemEventResponse();

  CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from);

  inline CMsgTournamentItemEventResponse& operator=(const CMsgTournamentItemEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgTournamentItemEventResponse(CMsgTournamentItemEventResponse&& from) noexcept
    : CMsgTournamentItemEventResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTournamentItemEventResponse& operator=(CMsgTournamentItemEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTournamentItemEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgTournamentItemEventResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTournamentItemEventResponse*>(
               &_CMsgTournamentItemEventResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    233;

  void Swap(CMsgTournamentItemEventResponse* other);
  friend void swap(CMsgTournamentItemEventResponse& a, CMsgTournamentItemEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgTournamentItemEventResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgTournamentItemEventResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgTournamentItemEventResponse& from);
  void MergeFrom(const CMsgTournamentItemEventResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgTournamentItemEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string winner_name = 2;
  bool has_winner_name() const;
  void clear_winner_name();
  static const int kWinnerNameFieldNumber = 2;
  const ::std::string& winner_name() const;
  void set_winner_name(const ::std::string& value);
  #if LANG_CXX11
  void set_winner_name(::std::string&& value);
  #endif
  void set_winner_name(const char* value);
  void set_winner_name(const char* value, size_t size);
  ::std::string* mutable_winner_name();
  ::std::string* release_winner_name();
  void set_allocated_winner_name(::std::string* winner_name);

  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::DOTA_TournamentEvents event_type() const;
  void set_event_type(::DOTA_TournamentEvents value);

  // optional bool tv_delayed = 3;
  bool has_tv_delayed() const;
  void clear_tv_delayed();
  static const int kTvDelayedFieldNumber = 3;
  bool tv_delayed() const;
  void set_tv_delayed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEventResponse)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_winner_name();
  void clear_has_winner_name();
  void set_has_tv_delayed();
  void clear_has_tv_delayed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr winner_name_;
  int event_type_;
  bool tv_delayed_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgTournamentItemEventResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatchVotes_PlayerVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchVotes.PlayerVote) */ {
 public:
  CMsgDOTAMatchVotes_PlayerVote();
  virtual ~CMsgDOTAMatchVotes_PlayerVote();

  CMsgDOTAMatchVotes_PlayerVote(const CMsgDOTAMatchVotes_PlayerVote& from);

  inline CMsgDOTAMatchVotes_PlayerVote& operator=(const CMsgDOTAMatchVotes_PlayerVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchVotes_PlayerVote(CMsgDOTAMatchVotes_PlayerVote&& from) noexcept
    : CMsgDOTAMatchVotes_PlayerVote() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchVotes_PlayerVote& operator=(CMsgDOTAMatchVotes_PlayerVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchVotes_PlayerVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchVotes_PlayerVote* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchVotes_PlayerVote*>(
               &_CMsgDOTAMatchVotes_PlayerVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    234;

  void Swap(CMsgDOTAMatchVotes_PlayerVote* other);
  friend void swap(CMsgDOTAMatchVotes_PlayerVote& a, CMsgDOTAMatchVotes_PlayerVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchVotes_PlayerVote* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchVotes_PlayerVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchVotes_PlayerVote& from);
  void MergeFrom(const CMsgDOTAMatchVotes_PlayerVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchVotes_PlayerVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 vote = 2;
  bool has_vote() const;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::google::protobuf::uint32 vote() const;
  void set_vote(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchVotes.PlayerVote)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_vote();
  void clear_has_vote();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 vote_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchVotes_PlayerVoteImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatchVotes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchVotes) */ {
 public:
  CMsgDOTAMatchVotes();
  virtual ~CMsgDOTAMatchVotes();

  CMsgDOTAMatchVotes(const CMsgDOTAMatchVotes& from);

  inline CMsgDOTAMatchVotes& operator=(const CMsgDOTAMatchVotes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchVotes(CMsgDOTAMatchVotes&& from) noexcept
    : CMsgDOTAMatchVotes() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchVotes& operator=(CMsgDOTAMatchVotes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchVotes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchVotes* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchVotes*>(
               &_CMsgDOTAMatchVotes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    235;

  void Swap(CMsgDOTAMatchVotes* other);
  friend void swap(CMsgDOTAMatchVotes& a, CMsgDOTAMatchVotes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchVotes* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchVotes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchVotes& from);
  void MergeFrom(const CMsgDOTAMatchVotes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchVotes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatchVotes_PlayerVote PlayerVote;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatchVotes.PlayerVote votes = 2;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 2;
  const ::CMsgDOTAMatchVotes_PlayerVote& votes(int index) const;
  ::CMsgDOTAMatchVotes_PlayerVote* mutable_votes(int index);
  ::CMsgDOTAMatchVotes_PlayerVote* add_votes();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchVotes_PlayerVote >*
      mutable_votes();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchVotes_PlayerVote >&
      votes() const;

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchVotes)
 private:
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchVotes_PlayerVote > votes_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchVotesImpl();
};
// -------------------------------------------------------------------

class CMsgCastMatchVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgCastMatchVote) */ {
 public:
  CMsgCastMatchVote();
  virtual ~CMsgCastMatchVote();

  CMsgCastMatchVote(const CMsgCastMatchVote& from);

  inline CMsgCastMatchVote& operator=(const CMsgCastMatchVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgCastMatchVote(CMsgCastMatchVote&& from) noexcept
    : CMsgCastMatchVote() {
    *this = ::std::move(from);
  }

  inline CMsgCastMatchVote& operator=(CMsgCastMatchVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCastMatchVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgCastMatchVote* internal_default_instance() {
    return reinterpret_cast<const CMsgCastMatchVote*>(
               &_CMsgCastMatchVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    236;

  void Swap(CMsgCastMatchVote* other);
  friend void swap(CMsgCastMatchVote& a, CMsgCastMatchVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgCastMatchVote* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgCastMatchVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgCastMatchVote& from);
  void MergeFrom(const CMsgCastMatchVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgCastMatchVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
  bool has_vote() const;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::DOTAMatchVote vote() const;
  void set_vote(::DOTAMatchVote value);

  // @@protoc_insertion_point(class_scope:CMsgCastMatchVote)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_vote();
  void clear_has_vote();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  int vote_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgCastMatchVoteImpl();
};
// -------------------------------------------------------------------

class CMsgRetrieveMatchVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRetrieveMatchVote) */ {
 public:
  CMsgRetrieveMatchVote();
  virtual ~CMsgRetrieveMatchVote();

  CMsgRetrieveMatchVote(const CMsgRetrieveMatchVote& from);

  inline CMsgRetrieveMatchVote& operator=(const CMsgRetrieveMatchVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRetrieveMatchVote(CMsgRetrieveMatchVote&& from) noexcept
    : CMsgRetrieveMatchVote() {
    *this = ::std::move(from);
  }

  inline CMsgRetrieveMatchVote& operator=(CMsgRetrieveMatchVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRetrieveMatchVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRetrieveMatchVote* internal_default_instance() {
    return reinterpret_cast<const CMsgRetrieveMatchVote*>(
               &_CMsgRetrieveMatchVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    237;

  void Swap(CMsgRetrieveMatchVote* other);
  friend void swap(CMsgRetrieveMatchVote& a, CMsgRetrieveMatchVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRetrieveMatchVote* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRetrieveMatchVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRetrieveMatchVote& from);
  void MergeFrom(const CMsgRetrieveMatchVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRetrieveMatchVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 incremental = 2;
  bool has_incremental() const;
  void clear_incremental();
  static const int kIncrementalFieldNumber = 2;
  ::google::protobuf::uint32 incremental() const;
  void set_incremental(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgRetrieveMatchVote)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_incremental();
  void clear_has_incremental();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 incremental_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRetrieveMatchVoteImpl();
};
// -------------------------------------------------------------------

class CMsgMatchVoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgMatchVoteResponse) */ {
 public:
  CMsgMatchVoteResponse();
  virtual ~CMsgMatchVoteResponse();

  CMsgMatchVoteResponse(const CMsgMatchVoteResponse& from);

  inline CMsgMatchVoteResponse& operator=(const CMsgMatchVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgMatchVoteResponse(CMsgMatchVoteResponse&& from) noexcept
    : CMsgMatchVoteResponse() {
    *this = ::std::move(from);
  }

  inline CMsgMatchVoteResponse& operator=(CMsgMatchVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMatchVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgMatchVoteResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchVoteResponse*>(
               &_CMsgMatchVoteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    238;

  void Swap(CMsgMatchVoteResponse* other);
  friend void swap(CMsgMatchVoteResponse& a, CMsgMatchVoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchVoteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgMatchVoteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgMatchVoteResponse& from);
  void MergeFrom(const CMsgMatchVoteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgMatchVoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
  bool has_vote() const;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::DOTAMatchVote vote() const;
  void set_vote(::DOTAMatchVote value);

  // optional uint32 positive_votes = 3;
  bool has_positive_votes() const;
  void clear_positive_votes();
  static const int kPositiveVotesFieldNumber = 3;
  ::google::protobuf::uint32 positive_votes() const;
  void set_positive_votes(::google::protobuf::uint32 value);

  // optional uint32 negative_votes = 4;
  bool has_negative_votes() const;
  void clear_negative_votes();
  static const int kNegativeVotesFieldNumber = 4;
  ::google::protobuf::uint32 negative_votes() const;
  void set_negative_votes(::google::protobuf::uint32 value);

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMatchVoteResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_vote();
  void clear_has_vote();
  void set_has_positive_votes();
  void clear_has_positive_votes();
  void set_has_negative_votes();
  void clear_has_negative_votes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int vote_;
  ::google::protobuf::uint32 positive_votes_;
  ::google::protobuf::uint32 negative_votes_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgMatchVoteResponseImpl();
};
// -------------------------------------------------------------------

class CMsgTeamFanfare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanfare) */ {
 public:
  CMsgTeamFanfare();
  virtual ~CMsgTeamFanfare();

  CMsgTeamFanfare(const CMsgTeamFanfare& from);

  inline CMsgTeamFanfare& operator=(const CMsgTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgTeamFanfare(CMsgTeamFanfare&& from) noexcept
    : CMsgTeamFanfare() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanfare& operator=(CMsgTeamFanfare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTeamFanfare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgTeamFanfare* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanfare*>(
               &_CMsgTeamFanfare_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    239;

  void Swap(CMsgTeamFanfare* other);
  friend void swap(CMsgTeamFanfare& a, CMsgTeamFanfare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgTeamFanfare* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgTeamFanfare* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgTeamFanfare& from);
  void MergeFrom(const CMsgTeamFanfare& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgTeamFanfare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTeamFanfare)
 private:
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgTeamFanfareImpl();
};
// -------------------------------------------------------------------

class CMsgResponseTeamFanfare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgResponseTeamFanfare) */ {
 public:
  CMsgResponseTeamFanfare();
  virtual ~CMsgResponseTeamFanfare();

  CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from);

  inline CMsgResponseTeamFanfare& operator=(const CMsgResponseTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgResponseTeamFanfare(CMsgResponseTeamFanfare&& from) noexcept
    : CMsgResponseTeamFanfare() {
    *this = ::std::move(from);
  }

  inline CMsgResponseTeamFanfare& operator=(CMsgResponseTeamFanfare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgResponseTeamFanfare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgResponseTeamFanfare* internal_default_instance() {
    return reinterpret_cast<const CMsgResponseTeamFanfare*>(
               &_CMsgResponseTeamFanfare_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    240;

  void Swap(CMsgResponseTeamFanfare* other);
  friend void swap(CMsgResponseTeamFanfare& a, CMsgResponseTeamFanfare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgResponseTeamFanfare* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgResponseTeamFanfare* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgResponseTeamFanfare& from);
  void MergeFrom(const CMsgResponseTeamFanfare& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgResponseTeamFanfare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fanfare_goodguys = 1;
  bool has_fanfare_goodguys() const;
  void clear_fanfare_goodguys();
  static const int kFanfareGoodguysFieldNumber = 1;
  ::google::protobuf::uint32 fanfare_goodguys() const;
  void set_fanfare_goodguys(::google::protobuf::uint32 value);

  // optional uint32 fanfare_badguys = 2;
  bool has_fanfare_badguys() const;
  void clear_fanfare_badguys();
  static const int kFanfareBadguysFieldNumber = 2;
  ::google::protobuf::uint32 fanfare_badguys() const;
  void set_fanfare_badguys(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgResponseTeamFanfare)
 private:
  void set_has_fanfare_goodguys();
  void clear_has_fanfare_goodguys();
  void set_has_fanfare_badguys();
  void clear_has_fanfare_badguys();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 fanfare_goodguys_;
  ::google::protobuf::uint32 fanfare_badguys_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgResponseTeamFanfareImpl();
};
// -------------------------------------------------------------------

class CMsgSpectatorConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorConnect) */ {
 public:
  CMsgSpectatorConnect();
  virtual ~CMsgSpectatorConnect();

  CMsgSpectatorConnect(const CMsgSpectatorConnect& from);

  inline CMsgSpectatorConnect& operator=(const CMsgSpectatorConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectatorConnect(CMsgSpectatorConnect&& from) noexcept
    : CMsgSpectatorConnect() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorConnect& operator=(CMsgSpectatorConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectatorConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorConnect*>(
               &_CMsgSpectatorConnect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    241;

  void Swap(CMsgSpectatorConnect* other);
  friend void swap(CMsgSpectatorConnect& a, CMsgSpectatorConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorConnect* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectatorConnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectatorConnect& from);
  void MergeFrom(const CMsgSpectatorConnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectatorConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 spectator_id = 1;
  bool has_spectator_id() const;
  void clear_spectator_id();
  static const int kSpectatorIdFieldNumber = 1;
  ::google::protobuf::uint64 spectator_id() const;
  void set_spectator_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectatorConnect)
 private:
  void set_has_spectator_id();
  void clear_has_spectator_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 spectator_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSpectatorConnectImpl();
};
// -------------------------------------------------------------------

class CMsgSpectatorDisconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorDisconnect) */ {
 public:
  CMsgSpectatorDisconnect();
  virtual ~CMsgSpectatorDisconnect();

  CMsgSpectatorDisconnect(const CMsgSpectatorDisconnect& from);

  inline CMsgSpectatorDisconnect& operator=(const CMsgSpectatorDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectatorDisconnect(CMsgSpectatorDisconnect&& from) noexcept
    : CMsgSpectatorDisconnect() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorDisconnect& operator=(CMsgSpectatorDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectatorDisconnect* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorDisconnect*>(
               &_CMsgSpectatorDisconnect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    242;

  void Swap(CMsgSpectatorDisconnect* other);
  friend void swap(CMsgSpectatorDisconnect& a, CMsgSpectatorDisconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorDisconnect* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectatorDisconnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectatorDisconnect& from);
  void MergeFrom(const CMsgSpectatorDisconnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectatorDisconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 spectator_id = 1;
  bool has_spectator_id() const;
  void clear_spectator_id();
  static const int kSpectatorIdFieldNumber = 1;
  ::google::protobuf::uint64 spectator_id() const;
  void set_spectator_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectatorDisconnect)
 private:
  void set_has_spectator_id();
  void clear_has_spectator_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 spectator_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSpectatorDisconnectImpl();
};
// -------------------------------------------------------------------

class CMsgGameServerUploadSaveGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerUploadSaveGame) */ {
 public:
  CMsgGameServerUploadSaveGame();
  virtual ~CMsgGameServerUploadSaveGame();

  CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from);

  inline CMsgGameServerUploadSaveGame& operator=(const CMsgGameServerUploadSaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameServerUploadSaveGame(CMsgGameServerUploadSaveGame&& from) noexcept
    : CMsgGameServerUploadSaveGame() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerUploadSaveGame& operator=(CMsgGameServerUploadSaveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerUploadSaveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameServerUploadSaveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerUploadSaveGame*>(
               &_CMsgGameServerUploadSaveGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    243;

  void Swap(CMsgGameServerUploadSaveGame* other);
  friend void swap(CMsgGameServerUploadSaveGame& a, CMsgGameServerUploadSaveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerUploadSaveGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameServerUploadSaveGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameServerUploadSaveGame& from);
  void MergeFrom(const CMsgGameServerUploadSaveGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameServerUploadSaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 player_steam_ids = 4;
  int player_steam_ids_size() const;
  void clear_player_steam_ids();
  static const int kPlayerSteamIdsFieldNumber = 4;
  ::google::protobuf::uint64 player_steam_ids(int index) const;
  void set_player_steam_ids(int index, ::google::protobuf::uint64 value);
  void add_player_steam_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_steam_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_steam_ids();

  // optional bytes save_game_data = 2;
  bool has_save_game_data() const;
  void clear_save_game_data();
  static const int kSaveGameDataFieldNumber = 2;
  const ::std::string& save_game_data() const;
  void set_save_game_data(const ::std::string& value);
  #if LANG_CXX11
  void set_save_game_data(::std::string&& value);
  #endif
  void set_save_game_data(const char* value);
  void set_save_game_data(const void* value, size_t size);
  ::std::string* mutable_save_game_data();
  ::std::string* release_save_game_data();
  void set_allocated_save_game_data(::std::string* save_game_data);

  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 3;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 game_time = 1;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameServerUploadSaveGame)
 private:
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_save_game_data();
  void clear_has_save_game_data();
  void set_has_lobby_id();
  void clear_has_lobby_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_steam_ids_;
  ::google::protobuf::internal::ArenaStringPtr save_game_data_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 game_time_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameServerUploadSaveGameImpl();
};
// -------------------------------------------------------------------

class CMsgGameServerSaveGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerSaveGameResult) */ {
 public:
  CMsgGameServerSaveGameResult();
  virtual ~CMsgGameServerSaveGameResult();

  CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from);

  inline CMsgGameServerSaveGameResult& operator=(const CMsgGameServerSaveGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameServerSaveGameResult(CMsgGameServerSaveGameResult&& from) noexcept
    : CMsgGameServerSaveGameResult() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerSaveGameResult& operator=(CMsgGameServerSaveGameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerSaveGameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameServerSaveGameResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerSaveGameResult*>(
               &_CMsgGameServerSaveGameResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    244;

  void Swap(CMsgGameServerSaveGameResult* other);
  friend void swap(CMsgGameServerSaveGameResult& a, CMsgGameServerSaveGameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerSaveGameResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameServerSaveGameResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameServerSaveGameResult& from);
  void MergeFrom(const CMsgGameServerSaveGameResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameServerSaveGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerSaveGameResult_Result Result;
  static const Result SaveSuccessful =
    CMsgGameServerSaveGameResult_Result_SaveSuccessful;
  static const Result SessionNotFound =
    CMsgGameServerSaveGameResult_Result_SessionNotFound;
  static const Result DatabaseError =
    CMsgGameServerSaveGameResult_Result_DatabaseError;
  static const Result TooBig =
    CMsgGameServerSaveGameResult_Result_TooBig;
  static inline bool Result_IsValid(int value) {
    return CMsgGameServerSaveGameResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgGameServerSaveGameResult_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgGameServerSaveGameResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgGameServerSaveGameResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgGameServerSaveGameResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgGameServerSaveGameResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::CMsgGameServerSaveGameResult_Result result() const;
  void set_result(::CMsgGameServerSaveGameResult_Result value);

  // @@protoc_insertion_point(class_scope:CMsgGameServerSaveGameResult)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameServerSaveGameResultImpl();
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerGetLoadGame) */ {
 public:
  CMsgGameServerGetLoadGame();
  virtual ~CMsgGameServerGetLoadGame();

  CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from);

  inline CMsgGameServerGetLoadGame& operator=(const CMsgGameServerGetLoadGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameServerGetLoadGame(CMsgGameServerGetLoadGame&& from) noexcept
    : CMsgGameServerGetLoadGame() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerGetLoadGame& operator=(CMsgGameServerGetLoadGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerGetLoadGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameServerGetLoadGame* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerGetLoadGame*>(
               &_CMsgGameServerGetLoadGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    245;

  void Swap(CMsgGameServerGetLoadGame* other);
  friend void swap(CMsgGameServerGetLoadGame& a, CMsgGameServerGetLoadGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerGetLoadGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameServerGetLoadGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameServerGetLoadGame& from);
  void MergeFrom(const CMsgGameServerGetLoadGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameServerGetLoadGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 save_id = 1;
  bool has_save_id() const;
  void clear_save_id();
  static const int kSaveIdFieldNumber = 1;
  ::google::protobuf::uint32 save_id() const;
  void set_save_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGame)
 private:
  void set_has_save_id();
  void clear_has_save_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 save_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameServerGetLoadGameImpl();
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerGetLoadGameResult) */ {
 public:
  CMsgGameServerGetLoadGameResult();
  virtual ~CMsgGameServerGetLoadGameResult();

  CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from);

  inline CMsgGameServerGetLoadGameResult& operator=(const CMsgGameServerGetLoadGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGameServerGetLoadGameResult(CMsgGameServerGetLoadGameResult&& from) noexcept
    : CMsgGameServerGetLoadGameResult() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerGetLoadGameResult& operator=(CMsgGameServerGetLoadGameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerGetLoadGameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGameServerGetLoadGameResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerGetLoadGameResult*>(
               &_CMsgGameServerGetLoadGameResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    246;

  void Swap(CMsgGameServerGetLoadGameResult* other);
  friend void swap(CMsgGameServerGetLoadGameResult& a, CMsgGameServerGetLoadGameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerGetLoadGameResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGameServerGetLoadGameResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGameServerGetLoadGameResult& from);
  void MergeFrom(const CMsgGameServerGetLoadGameResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGameServerGetLoadGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes save_game_data = 1;
  bool has_save_game_data() const;
  void clear_save_game_data();
  static const int kSaveGameDataFieldNumber = 1;
  const ::std::string& save_game_data() const;
  void set_save_game_data(const ::std::string& value);
  #if LANG_CXX11
  void set_save_game_data(::std::string&& value);
  #endif
  void set_save_game_data(const char* value);
  void set_save_game_data(const void* value, size_t size);
  ::std::string* mutable_save_game_data();
  ::std::string* release_save_game_data();
  void set_allocated_save_game_data(::std::string* save_game_data);

  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGameResult)
 private:
  void set_has_save_game_data();
  void clear_has_save_game_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr save_game_data_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGameServerGetLoadGameResultImpl();
};
// -------------------------------------------------------------------

class CMsgCheckSpectatorOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgCheckSpectatorOnly) */ {
 public:
  CMsgCheckSpectatorOnly();
  virtual ~CMsgCheckSpectatorOnly();

  CMsgCheckSpectatorOnly(const CMsgCheckSpectatorOnly& from);

  inline CMsgCheckSpectatorOnly& operator=(const CMsgCheckSpectatorOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgCheckSpectatorOnly(CMsgCheckSpectatorOnly&& from) noexcept
    : CMsgCheckSpectatorOnly() {
    *this = ::std::move(from);
  }

  inline CMsgCheckSpectatorOnly& operator=(CMsgCheckSpectatorOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCheckSpectatorOnly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgCheckSpectatorOnly* internal_default_instance() {
    return reinterpret_cast<const CMsgCheckSpectatorOnly*>(
               &_CMsgCheckSpectatorOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    247;

  void Swap(CMsgCheckSpectatorOnly* other);
  friend void swap(CMsgCheckSpectatorOnly& a, CMsgCheckSpectatorOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgCheckSpectatorOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgCheckSpectatorOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgCheckSpectatorOnly& from);
  void MergeFrom(const CMsgCheckSpectatorOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgCheckSpectatorOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgCheckSpectatorOnly)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgCheckSpectatorOnlyImpl();
};
// -------------------------------------------------------------------

class CMsgCheckSpectatorOnlyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgCheckSpectatorOnlyResponse) */ {
 public:
  CMsgCheckSpectatorOnlyResponse();
  virtual ~CMsgCheckSpectatorOnlyResponse();

  CMsgCheckSpectatorOnlyResponse(const CMsgCheckSpectatorOnlyResponse& from);

  inline CMsgCheckSpectatorOnlyResponse& operator=(const CMsgCheckSpectatorOnlyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgCheckSpectatorOnlyResponse(CMsgCheckSpectatorOnlyResponse&& from) noexcept
    : CMsgCheckSpectatorOnlyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgCheckSpectatorOnlyResponse& operator=(CMsgCheckSpectatorOnlyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCheckSpectatorOnlyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgCheckSpectatorOnlyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgCheckSpectatorOnlyResponse*>(
               &_CMsgCheckSpectatorOnlyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    248;

  void Swap(CMsgCheckSpectatorOnlyResponse* other);
  friend void swap(CMsgCheckSpectatorOnlyResponse& a, CMsgCheckSpectatorOnlyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgCheckSpectatorOnlyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgCheckSpectatorOnlyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgCheckSpectatorOnlyResponse& from);
  void MergeFrom(const CMsgCheckSpectatorOnlyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgCheckSpectatorOnlyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool spectator_only = 2;
  bool has_spectator_only() const;
  void clear_spectator_only();
  static const int kSpectatorOnlyFieldNumber = 2;
  bool spectator_only() const;
  void set_spectator_only(bool value);

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgCheckSpectatorOnlyResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_spectator_only();
  void clear_has_spectator_only();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool spectator_only_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgCheckSpectatorOnlyResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHallOfFame_FeaturedPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHallOfFame.FeaturedPlayer) */ {
 public:
  CMsgDOTAHallOfFame_FeaturedPlayer();
  virtual ~CMsgDOTAHallOfFame_FeaturedPlayer();

  CMsgDOTAHallOfFame_FeaturedPlayer(const CMsgDOTAHallOfFame_FeaturedPlayer& from);

  inline CMsgDOTAHallOfFame_FeaturedPlayer& operator=(const CMsgDOTAHallOfFame_FeaturedPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHallOfFame_FeaturedPlayer(CMsgDOTAHallOfFame_FeaturedPlayer&& from) noexcept
    : CMsgDOTAHallOfFame_FeaturedPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHallOfFame_FeaturedPlayer& operator=(CMsgDOTAHallOfFame_FeaturedPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHallOfFame_FeaturedPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHallOfFame_FeaturedPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHallOfFame_FeaturedPlayer*>(
               &_CMsgDOTAHallOfFame_FeaturedPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    249;

  void Swap(CMsgDOTAHallOfFame_FeaturedPlayer* other);
  friend void swap(CMsgDOTAHallOfFame_FeaturedPlayer& a, CMsgDOTAHallOfFame_FeaturedPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHallOfFame_FeaturedPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHallOfFame_FeaturedPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHallOfFame_FeaturedPlayer& from);
  void MergeFrom(const CMsgDOTAHallOfFame_FeaturedPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHallOfFame_FeaturedPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional float average_scaled_metric = 3;
  bool has_average_scaled_metric() const;
  void clear_average_scaled_metric();
  static const int kAverageScaledMetricFieldNumber = 3;
  float average_scaled_metric() const;
  void set_average_scaled_metric(float value);

  // optional uint32 num_games = 4;
  bool has_num_games() const;
  void clear_num_games();
  static const int kNumGamesFieldNumber = 4;
  ::google::protobuf::uint32 num_games() const;
  void set_num_games(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHallOfFame.FeaturedPlayer)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_average_scaled_metric();
  void clear_has_average_scaled_metric();
  void set_has_num_games();
  void clear_has_num_games();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  float average_scaled_metric_;
  ::google::protobuf::uint32 num_games_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHallOfFame_FeaturedPlayerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHallOfFame_FeaturedFarmer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHallOfFame.FeaturedFarmer) */ {
 public:
  CMsgDOTAHallOfFame_FeaturedFarmer();
  virtual ~CMsgDOTAHallOfFame_FeaturedFarmer();

  CMsgDOTAHallOfFame_FeaturedFarmer(const CMsgDOTAHallOfFame_FeaturedFarmer& from);

  inline CMsgDOTAHallOfFame_FeaturedFarmer& operator=(const CMsgDOTAHallOfFame_FeaturedFarmer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHallOfFame_FeaturedFarmer(CMsgDOTAHallOfFame_FeaturedFarmer&& from) noexcept
    : CMsgDOTAHallOfFame_FeaturedFarmer() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHallOfFame_FeaturedFarmer& operator=(CMsgDOTAHallOfFame_FeaturedFarmer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHallOfFame_FeaturedFarmer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHallOfFame_FeaturedFarmer* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHallOfFame_FeaturedFarmer*>(
               &_CMsgDOTAHallOfFame_FeaturedFarmer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    250;

  void Swap(CMsgDOTAHallOfFame_FeaturedFarmer* other);
  friend void swap(CMsgDOTAHallOfFame_FeaturedFarmer& a, CMsgDOTAHallOfFame_FeaturedFarmer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHallOfFame_FeaturedFarmer* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHallOfFame_FeaturedFarmer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHallOfFame_FeaturedFarmer& from);
  void MergeFrom(const CMsgDOTAHallOfFame_FeaturedFarmer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHallOfFame_FeaturedFarmer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 gold_per_min = 3;
  bool has_gold_per_min() const;
  void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 3;
  ::google::protobuf::uint32 gold_per_min() const;
  void set_gold_per_min(::google::protobuf::uint32 value);

  // optional uint32 match_id = 4;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 4;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHallOfFame.FeaturedFarmer)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_gold_per_min();
  void clear_has_gold_per_min();
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHallOfFame_FeaturedFarmerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHallOfFame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHallOfFame) */ {
 public:
  CMsgDOTAHallOfFame();
  virtual ~CMsgDOTAHallOfFame();

  CMsgDOTAHallOfFame(const CMsgDOTAHallOfFame& from);

  inline CMsgDOTAHallOfFame& operator=(const CMsgDOTAHallOfFame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHallOfFame(CMsgDOTAHallOfFame&& from) noexcept
    : CMsgDOTAHallOfFame() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHallOfFame& operator=(CMsgDOTAHallOfFame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHallOfFame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHallOfFame* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHallOfFame*>(
               &_CMsgDOTAHallOfFame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    251;

  void Swap(CMsgDOTAHallOfFame* other);
  friend void swap(CMsgDOTAHallOfFame& a, CMsgDOTAHallOfFame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHallOfFame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHallOfFame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHallOfFame& from);
  void MergeFrom(const CMsgDOTAHallOfFame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHallOfFame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAHallOfFame_FeaturedPlayer FeaturedPlayer;
  typedef CMsgDOTAHallOfFame_FeaturedFarmer FeaturedFarmer;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAHallOfFame.FeaturedPlayer featured_players = 2;
  int featured_players_size() const;
  void clear_featured_players();
  static const int kFeaturedPlayersFieldNumber = 2;
  const ::CMsgDOTAHallOfFame_FeaturedPlayer& featured_players(int index) const;
  ::CMsgDOTAHallOfFame_FeaturedPlayer* mutable_featured_players(int index);
  ::CMsgDOTAHallOfFame_FeaturedPlayer* add_featured_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAHallOfFame_FeaturedPlayer >*
      mutable_featured_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAHallOfFame_FeaturedPlayer >&
      featured_players() const;

  // optional .CMsgDOTAHallOfFame.FeaturedFarmer featured_farmer = 3;
  bool has_featured_farmer() const;
  void clear_featured_farmer();
  static const int kFeaturedFarmerFieldNumber = 3;
  const ::CMsgDOTAHallOfFame_FeaturedFarmer& featured_farmer() const;
  ::CMsgDOTAHallOfFame_FeaturedFarmer* release_featured_farmer();
  ::CMsgDOTAHallOfFame_FeaturedFarmer* mutable_featured_farmer();
  void set_allocated_featured_farmer(::CMsgDOTAHallOfFame_FeaturedFarmer* featured_farmer);

  // optional uint32 week = 1;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHallOfFame)
 private:
  void set_has_week();
  void clear_has_week();
  void set_has_featured_farmer();
  void clear_has_featured_farmer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAHallOfFame_FeaturedPlayer > featured_players_;
  ::CMsgDOTAHallOfFame_FeaturedFarmer* featured_farmer_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHallOfFameImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHallOfFameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHallOfFameRequest) */ {
 public:
  CMsgDOTAHallOfFameRequest();
  virtual ~CMsgDOTAHallOfFameRequest();

  CMsgDOTAHallOfFameRequest(const CMsgDOTAHallOfFameRequest& from);

  inline CMsgDOTAHallOfFameRequest& operator=(const CMsgDOTAHallOfFameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHallOfFameRequest(CMsgDOTAHallOfFameRequest&& from) noexcept
    : CMsgDOTAHallOfFameRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHallOfFameRequest& operator=(CMsgDOTAHallOfFameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHallOfFameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHallOfFameRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHallOfFameRequest*>(
               &_CMsgDOTAHallOfFameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    252;

  void Swap(CMsgDOTAHallOfFameRequest* other);
  friend void swap(CMsgDOTAHallOfFameRequest& a, CMsgDOTAHallOfFameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHallOfFameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHallOfFameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHallOfFameRequest& from);
  void MergeFrom(const CMsgDOTAHallOfFameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHallOfFameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 week = 1;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHallOfFameRequest)
 private:
  void set_has_week();
  void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHallOfFameRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHallOfFameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHallOfFameResponse) */ {
 public:
  CMsgDOTAHallOfFameResponse();
  virtual ~CMsgDOTAHallOfFameResponse();

  CMsgDOTAHallOfFameResponse(const CMsgDOTAHallOfFameResponse& from);

  inline CMsgDOTAHallOfFameResponse& operator=(const CMsgDOTAHallOfFameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHallOfFameResponse(CMsgDOTAHallOfFameResponse&& from) noexcept
    : CMsgDOTAHallOfFameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHallOfFameResponse& operator=(CMsgDOTAHallOfFameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHallOfFameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHallOfFameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHallOfFameResponse*>(
               &_CMsgDOTAHallOfFameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    253;

  void Swap(CMsgDOTAHallOfFameResponse* other);
  friend void swap(CMsgDOTAHallOfFameResponse& a, CMsgDOTAHallOfFameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHallOfFameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHallOfFameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHallOfFameResponse& from);
  void MergeFrom(const CMsgDOTAHallOfFameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHallOfFameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAHallOfFame hall_of_fame = 1;
  bool has_hall_of_fame() const;
  void clear_hall_of_fame();
  static const int kHallOfFameFieldNumber = 1;
  const ::CMsgDOTAHallOfFame& hall_of_fame() const;
  ::CMsgDOTAHallOfFame* release_hall_of_fame();
  ::CMsgDOTAHallOfFame* mutable_hall_of_fame();
  void set_allocated_hall_of_fame(::CMsgDOTAHallOfFame* hall_of_fame);

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHallOfFameResponse)
 private:
  void set_has_hall_of_fame();
  void clear_has_hall_of_fame();
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTAHallOfFame* hall_of_fame_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHallOfFameResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGenerateDiretidePrizeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGenerateDiretidePrizeList) */ {
 public:
  CMsgDOTAGenerateDiretidePrizeList();
  virtual ~CMsgDOTAGenerateDiretidePrizeList();

  CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from);

  inline CMsgDOTAGenerateDiretidePrizeList& operator=(const CMsgDOTAGenerateDiretidePrizeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGenerateDiretidePrizeList(CMsgDOTAGenerateDiretidePrizeList&& from) noexcept
    : CMsgDOTAGenerateDiretidePrizeList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGenerateDiretidePrizeList& operator=(CMsgDOTAGenerateDiretidePrizeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenerateDiretidePrizeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGenerateDiretidePrizeList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGenerateDiretidePrizeList*>(
               &_CMsgDOTAGenerateDiretidePrizeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    254;

  void Swap(CMsgDOTAGenerateDiretidePrizeList* other);
  friend void swap(CMsgDOTAGenerateDiretidePrizeList& a, CMsgDOTAGenerateDiretidePrizeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGenerateDiretidePrizeList* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGenerateDiretidePrizeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from);
  void MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGenerateDiretidePrizeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 prize_list = 1;
  bool has_prize_list() const;
  void clear_prize_list();
  static const int kPrizeListFieldNumber = 1;
  ::google::protobuf::uint32 prize_list() const;
  void set_prize_list(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGenerateDiretidePrizeList)
 private:
  void set_has_prize_list();
  void clear_has_prize_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 prize_list_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGenerateDiretidePrizeListImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGenerateDiretidePrizeListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGenerateDiretidePrizeListResponse) */ {
 public:
  CMsgDOTAGenerateDiretidePrizeListResponse();
  virtual ~CMsgDOTAGenerateDiretidePrizeListResponse();

  CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from);

  inline CMsgDOTAGenerateDiretidePrizeListResponse& operator=(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGenerateDiretidePrizeListResponse(CMsgDOTAGenerateDiretidePrizeListResponse&& from) noexcept
    : CMsgDOTAGenerateDiretidePrizeListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGenerateDiretidePrizeListResponse& operator=(CMsgDOTAGenerateDiretidePrizeListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenerateDiretidePrizeListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGenerateDiretidePrizeListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGenerateDiretidePrizeListResponse*>(
               &_CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    255;

  void Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other);
  friend void swap(CMsgDOTAGenerateDiretidePrizeListResponse& a, CMsgDOTAGenerateDiretidePrizeListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGenerateDiretidePrizeListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGenerateDiretidePrizeListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from);
  void MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGenerateDiretidePrizeListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 item_defs = 1;
  int item_defs_size() const;
  void clear_item_defs();
  static const int kItemDefsFieldNumber = 1;
  ::google::protobuf::uint32 item_defs(int index) const;
  void set_item_defs(int index, ::google::protobuf::uint32 value);
  void add_item_defs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_defs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_defs();

  // repeated fixed64 steam_ids = 2;
  int steam_ids_size() const;
  void clear_steam_ids();
  static const int kSteamIdsFieldNumber = 2;
  ::google::protobuf::uint64 steam_ids(int index) const;
  void set_steam_ids(int index, ::google::protobuf::uint64 value);
  void add_steam_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steam_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steam_ids();

  // optional uint32 prize_list = 3;
  bool has_prize_list() const;
  void clear_prize_list();
  static const int kPrizeListFieldNumber = 3;
  ::google::protobuf::uint32 prize_list() const;
  void set_prize_list(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGenerateDiretidePrizeListResponse)
 private:
  void set_has_prize_list();
  void clear_has_prize_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_defs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steam_ids_;
  ::google::protobuf::uint32 prize_list_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGenerateDiretidePrizeListResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARewardDiretidePrizes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARewardDiretidePrizes) */ {
 public:
  CMsgDOTARewardDiretidePrizes();
  virtual ~CMsgDOTARewardDiretidePrizes();

  CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from);

  inline CMsgDOTARewardDiretidePrizes& operator=(const CMsgDOTARewardDiretidePrizes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARewardDiretidePrizes(CMsgDOTARewardDiretidePrizes&& from) noexcept
    : CMsgDOTARewardDiretidePrizes() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARewardDiretidePrizes& operator=(CMsgDOTARewardDiretidePrizes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARewardDiretidePrizes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARewardDiretidePrizes* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARewardDiretidePrizes*>(
               &_CMsgDOTARewardDiretidePrizes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    256;

  void Swap(CMsgDOTARewardDiretidePrizes* other);
  friend void swap(CMsgDOTARewardDiretidePrizes& a, CMsgDOTARewardDiretidePrizes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARewardDiretidePrizes* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARewardDiretidePrizes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARewardDiretidePrizes& from);
  void MergeFrom(const CMsgDOTARewardDiretidePrizes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARewardDiretidePrizes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 prize_list = 2;
  bool has_prize_list() const;
  void clear_prize_list();
  static const int kPrizeListFieldNumber = 2;
  ::google::protobuf::uint32 prize_list() const;
  void set_prize_list(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARewardDiretidePrizes)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_prize_list();
  void clear_has_prize_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 prize_list_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARewardDiretidePrizesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTADiretidePrizesRewardedResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADiretidePrizesRewardedResponse) */ {
 public:
  CMsgDOTADiretidePrizesRewardedResponse();
  virtual ~CMsgDOTADiretidePrizesRewardedResponse();

  CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from);

  inline CMsgDOTADiretidePrizesRewardedResponse& operator=(const CMsgDOTADiretidePrizesRewardedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADiretidePrizesRewardedResponse(CMsgDOTADiretidePrizesRewardedResponse&& from) noexcept
    : CMsgDOTADiretidePrizesRewardedResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADiretidePrizesRewardedResponse& operator=(CMsgDOTADiretidePrizesRewardedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADiretidePrizesRewardedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADiretidePrizesRewardedResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADiretidePrizesRewardedResponse*>(
               &_CMsgDOTADiretidePrizesRewardedResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    257;

  void Swap(CMsgDOTADiretidePrizesRewardedResponse* other);
  friend void swap(CMsgDOTADiretidePrizesRewardedResponse& a, CMsgDOTADiretidePrizesRewardedResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADiretidePrizesRewardedResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTADiretidePrizesRewardedResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from);
  void MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTADiretidePrizesRewardedResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 prize_list = 1;
  bool has_prize_list() const;
  void clear_prize_list();
  static const int kPrizeListFieldNumber = 1;
  ::google::protobuf::uint32 prize_list() const;
  void set_prize_list(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTADiretidePrizesRewardedResponse)
 private:
  void set_has_prize_list();
  void clear_has_prize_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 prize_list_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTADiretidePrizesRewardedResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTADiretidePrizeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADiretidePrizeResponse) */ {
 public:
  CMsgDOTADiretidePrizeResponse();
  virtual ~CMsgDOTADiretidePrizeResponse();

  CMsgDOTADiretidePrizeResponse(const CMsgDOTADiretidePrizeResponse& from);

  inline CMsgDOTADiretidePrizeResponse& operator=(const CMsgDOTADiretidePrizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTADiretidePrizeResponse(CMsgDOTADiretidePrizeResponse&& from) noexcept
    : CMsgDOTADiretidePrizeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADiretidePrizeResponse& operator=(CMsgDOTADiretidePrizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADiretidePrizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTADiretidePrizeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADiretidePrizeResponse*>(
               &_CMsgDOTADiretidePrizeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    258;

  void Swap(CMsgDOTADiretidePrizeResponse* other);
  friend void swap(CMsgDOTADiretidePrizeResponse& a, CMsgDOTADiretidePrizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADiretidePrizeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTADiretidePrizeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTADiretidePrizeResponse& from);
  void MergeFrom(const CMsgDOTADiretidePrizeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTADiretidePrizeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def = 1;
  bool has_item_def() const;
  void clear_item_def();
  static const int kItemDefFieldNumber = 1;
  ::google::protobuf::uint32 item_def() const;
  void set_item_def(::google::protobuf::uint32 value);

  // optional uint32 prize_list = 2;
  bool has_prize_list() const;
  void clear_prize_list();
  static const int kPrizeListFieldNumber = 2;
  ::google::protobuf::uint32 prize_list() const;
  void set_prize_list(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTADiretidePrizeResponse)
 private:
  void set_has_item_def();
  void clear_has_item_def();
  void set_has_prize_list();
  void clear_has_prize_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_def_;
  ::google::protobuf::uint32 prize_list_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTADiretidePrizeResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHalloweenHighScoreRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHalloweenHighScoreRequest) */ {
 public:
  CMsgDOTAHalloweenHighScoreRequest();
  virtual ~CMsgDOTAHalloweenHighScoreRequest();

  CMsgDOTAHalloweenHighScoreRequest(const CMsgDOTAHalloweenHighScoreRequest& from);

  inline CMsgDOTAHalloweenHighScoreRequest& operator=(const CMsgDOTAHalloweenHighScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHalloweenHighScoreRequest(CMsgDOTAHalloweenHighScoreRequest&& from) noexcept
    : CMsgDOTAHalloweenHighScoreRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHalloweenHighScoreRequest& operator=(CMsgDOTAHalloweenHighScoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHalloweenHighScoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHalloweenHighScoreRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHalloweenHighScoreRequest*>(
               &_CMsgDOTAHalloweenHighScoreRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    259;

  void Swap(CMsgDOTAHalloweenHighScoreRequest* other);
  friend void swap(CMsgDOTAHalloweenHighScoreRequest& a, CMsgDOTAHalloweenHighScoreRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHalloweenHighScoreRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHalloweenHighScoreRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHalloweenHighScoreRequest& from);
  void MergeFrom(const CMsgDOTAHalloweenHighScoreRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHalloweenHighScoreRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 round = 1 [default = -1];
  bool has_round() const;
  void clear_round();
  static const int kRoundFieldNumber = 1;
  ::google::protobuf::int32 round() const;
  void set_round(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHalloweenHighScoreRequest)
 private:
  void set_has_round();
  void clear_has_round();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 round_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHalloweenHighScoreRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAHalloweenHighScoreResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHalloweenHighScoreResponse) */ {
 public:
  CMsgDOTAHalloweenHighScoreResponse();
  virtual ~CMsgDOTAHalloweenHighScoreResponse();

  CMsgDOTAHalloweenHighScoreResponse(const CMsgDOTAHalloweenHighScoreResponse& from);

  inline CMsgDOTAHalloweenHighScoreResponse& operator=(const CMsgDOTAHalloweenHighScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAHalloweenHighScoreResponse(CMsgDOTAHalloweenHighScoreResponse&& from) noexcept
    : CMsgDOTAHalloweenHighScoreResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHalloweenHighScoreResponse& operator=(CMsgDOTAHalloweenHighScoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAHalloweenHighScoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAHalloweenHighScoreResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHalloweenHighScoreResponse*>(
               &_CMsgDOTAHalloweenHighScoreResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    260;

  void Swap(CMsgDOTAHalloweenHighScoreResponse* other);
  friend void swap(CMsgDOTAHalloweenHighScoreResponse& a, CMsgDOTAHalloweenHighScoreResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAHalloweenHighScoreResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAHalloweenHighScoreResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAHalloweenHighScoreResponse& from);
  void MergeFrom(const CMsgDOTAHalloweenHighScoreResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAHalloweenHighScoreResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAMatch match = 2;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  const ::CMsgDOTAMatch& match() const;
  ::CMsgDOTAMatch* release_match();
  ::CMsgDOTAMatch* mutable_match();
  void set_allocated_match(::CMsgDOTAMatch* match);

  // optional uint32 score = 1;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // optional uint32 eresult = 3;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 3;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // optional int32 round = 4;
  bool has_round() const;
  void clear_round();
  static const int kRoundFieldNumber = 4;
  ::google::protobuf::int32 round() const;
  void set_round(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAHalloweenHighScoreResponse)
 private:
  void set_has_score();
  void clear_has_score();
  void set_has_match();
  void clear_has_match();
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_round();
  void clear_has_round();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTAMatch* match_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::int32 round_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAHalloweenHighScoreResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTANotifyResetKeybindings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTANotifyResetKeybindings) */ {
 public:
  CMsgDOTANotifyResetKeybindings();
  virtual ~CMsgDOTANotifyResetKeybindings();

  CMsgDOTANotifyResetKeybindings(const CMsgDOTANotifyResetKeybindings& from);

  inline CMsgDOTANotifyResetKeybindings& operator=(const CMsgDOTANotifyResetKeybindings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTANotifyResetKeybindings(CMsgDOTANotifyResetKeybindings&& from) noexcept
    : CMsgDOTANotifyResetKeybindings() {
    *this = ::std::move(from);
  }

  inline CMsgDOTANotifyResetKeybindings& operator=(CMsgDOTANotifyResetKeybindings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTANotifyResetKeybindings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTANotifyResetKeybindings* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTANotifyResetKeybindings*>(
               &_CMsgDOTANotifyResetKeybindings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    261;

  void Swap(CMsgDOTANotifyResetKeybindings* other);
  friend void swap(CMsgDOTANotifyResetKeybindings& a, CMsgDOTANotifyResetKeybindings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTANotifyResetKeybindings* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTANotifyResetKeybindings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTANotifyResetKeybindings& from);
  void MergeFrom(const CMsgDOTANotifyResetKeybindings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTANotifyResetKeybindings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 keybind_template = 1;
  bool has_keybind_template() const;
  void clear_keybind_template();
  static const int kKeybindTemplateFieldNumber = 1;
  ::google::protobuf::uint32 keybind_template() const;
  void set_keybind_template(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTANotifyResetKeybindings)
 private:
  void set_has_keybind_template();
  void clear_has_keybind_template();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 keybind_template_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTANotifyResetKeybindingsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAStorePromoPagesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAStorePromoPagesRequest) */ {
 public:
  CMsgDOTAStorePromoPagesRequest();
  virtual ~CMsgDOTAStorePromoPagesRequest();

  CMsgDOTAStorePromoPagesRequest(const CMsgDOTAStorePromoPagesRequest& from);

  inline CMsgDOTAStorePromoPagesRequest& operator=(const CMsgDOTAStorePromoPagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAStorePromoPagesRequest(CMsgDOTAStorePromoPagesRequest&& from) noexcept
    : CMsgDOTAStorePromoPagesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAStorePromoPagesRequest& operator=(CMsgDOTAStorePromoPagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAStorePromoPagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAStorePromoPagesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAStorePromoPagesRequest*>(
               &_CMsgDOTAStorePromoPagesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    262;

  void Swap(CMsgDOTAStorePromoPagesRequest* other);
  friend void swap(CMsgDOTAStorePromoPagesRequest& a, CMsgDOTAStorePromoPagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAStorePromoPagesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAStorePromoPagesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAStorePromoPagesRequest& from);
  void MergeFrom(const CMsgDOTAStorePromoPagesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAStorePromoPagesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version_seen = 1;
  bool has_version_seen() const;
  void clear_version_seen();
  static const int kVersionSeenFieldNumber = 1;
  ::google::protobuf::uint32 version_seen() const;
  void set_version_seen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAStorePromoPagesRequest)
 private:
  void set_has_version_seen();
  void clear_has_version_seen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_seen_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAStorePromoPagesRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAStorePromoPagesResponse_PromoPage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAStorePromoPagesResponse.PromoPage) */ {
 public:
  CMsgDOTAStorePromoPagesResponse_PromoPage();
  virtual ~CMsgDOTAStorePromoPagesResponse_PromoPage();

  CMsgDOTAStorePromoPagesResponse_PromoPage(const CMsgDOTAStorePromoPagesResponse_PromoPage& from);

  inline CMsgDOTAStorePromoPagesResponse_PromoPage& operator=(const CMsgDOTAStorePromoPagesResponse_PromoPage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAStorePromoPagesResponse_PromoPage(CMsgDOTAStorePromoPagesResponse_PromoPage&& from) noexcept
    : CMsgDOTAStorePromoPagesResponse_PromoPage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAStorePromoPagesResponse_PromoPage& operator=(CMsgDOTAStorePromoPagesResponse_PromoPage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAStorePromoPagesResponse_PromoPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAStorePromoPagesResponse_PromoPage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAStorePromoPagesResponse_PromoPage*>(
               &_CMsgDOTAStorePromoPagesResponse_PromoPage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    263;

  void Swap(CMsgDOTAStorePromoPagesResponse_PromoPage* other);
  friend void swap(CMsgDOTAStorePromoPagesResponse_PromoPage& a, CMsgDOTAStorePromoPagesResponse_PromoPage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAStorePromoPagesResponse_PromoPage* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAStorePromoPagesResponse_PromoPage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAStorePromoPagesResponse_PromoPage& from);
  void MergeFrom(const CMsgDOTAStorePromoPagesResponse_PromoPage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAStorePromoPagesResponse_PromoPage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 promo_id = 1;
  bool has_promo_id() const;
  void clear_promo_id();
  static const int kPromoIdFieldNumber = 1;
  ::google::protobuf::uint32 promo_id() const;
  void set_promo_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAStorePromoPagesResponse.PromoPage)
 private:
  void set_has_promo_id();
  void clear_has_promo_id();
  void set_has_title();
  void clear_has_title();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 promo_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAStorePromoPagesResponse_PromoPageImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAStorePromoPagesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAStorePromoPagesResponse) */ {
 public:
  CMsgDOTAStorePromoPagesResponse();
  virtual ~CMsgDOTAStorePromoPagesResponse();

  CMsgDOTAStorePromoPagesResponse(const CMsgDOTAStorePromoPagesResponse& from);

  inline CMsgDOTAStorePromoPagesResponse& operator=(const CMsgDOTAStorePromoPagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAStorePromoPagesResponse(CMsgDOTAStorePromoPagesResponse&& from) noexcept
    : CMsgDOTAStorePromoPagesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAStorePromoPagesResponse& operator=(CMsgDOTAStorePromoPagesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAStorePromoPagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAStorePromoPagesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAStorePromoPagesResponse*>(
               &_CMsgDOTAStorePromoPagesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    264;

  void Swap(CMsgDOTAStorePromoPagesResponse* other);
  friend void swap(CMsgDOTAStorePromoPagesResponse& a, CMsgDOTAStorePromoPagesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAStorePromoPagesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAStorePromoPagesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAStorePromoPagesResponse& from);
  void MergeFrom(const CMsgDOTAStorePromoPagesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAStorePromoPagesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAStorePromoPagesResponse_PromoPage PromoPage;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAStorePromoPagesResponse.PromoPage pages = 1;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 1;
  const ::CMsgDOTAStorePromoPagesResponse_PromoPage& pages(int index) const;
  ::CMsgDOTAStorePromoPagesResponse_PromoPage* mutable_pages(int index);
  ::CMsgDOTAStorePromoPagesResponse_PromoPage* add_pages();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAStorePromoPagesResponse_PromoPage >*
      mutable_pages();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAStorePromoPagesResponse_PromoPage >&
      pages() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAStorePromoPagesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAStorePromoPagesResponse_PromoPage > pages_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAStorePromoPagesResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAGCToGCMatchCompleted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGCToGCMatchCompleted) */ {
 public:
  CMsgDOTAGCToGCMatchCompleted();
  virtual ~CMsgDOTAGCToGCMatchCompleted();

  CMsgDOTAGCToGCMatchCompleted(const CMsgDOTAGCToGCMatchCompleted& from);

  inline CMsgDOTAGCToGCMatchCompleted& operator=(const CMsgDOTAGCToGCMatchCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAGCToGCMatchCompleted(CMsgDOTAGCToGCMatchCompleted&& from) noexcept
    : CMsgDOTAGCToGCMatchCompleted() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGCToGCMatchCompleted& operator=(CMsgDOTAGCToGCMatchCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGCToGCMatchCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAGCToGCMatchCompleted* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGCToGCMatchCompleted*>(
               &_CMsgDOTAGCToGCMatchCompleted_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    265;

  void Swap(CMsgDOTAGCToGCMatchCompleted* other);
  friend void swap(CMsgDOTAGCToGCMatchCompleted& a, CMsgDOTAGCToGCMatchCompleted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGCToGCMatchCompleted* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAGCToGCMatchCompleted* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAGCToGCMatchCompleted& from);
  void MergeFrom(const CMsgDOTAGCToGCMatchCompleted& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAGCToGCMatchCompleted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGCToGCMatchCompleted)
 private:
  void set_has_match_id();
  void clear_has_match_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAGCToGCMatchCompletedImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCCheckLeaguePermission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCCheckLeaguePermission) */ {
 public:
  CMsgGCToGCCheckLeaguePermission();
  virtual ~CMsgGCToGCCheckLeaguePermission();

  CMsgGCToGCCheckLeaguePermission(const CMsgGCToGCCheckLeaguePermission& from);

  inline CMsgGCToGCCheckLeaguePermission& operator=(const CMsgGCToGCCheckLeaguePermission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCCheckLeaguePermission(CMsgGCToGCCheckLeaguePermission&& from) noexcept
    : CMsgGCToGCCheckLeaguePermission() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCCheckLeaguePermission& operator=(CMsgGCToGCCheckLeaguePermission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCCheckLeaguePermission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCCheckLeaguePermission* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCCheckLeaguePermission*>(
               &_CMsgGCToGCCheckLeaguePermission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    266;

  void Swap(CMsgGCToGCCheckLeaguePermission* other);
  friend void swap(CMsgGCToGCCheckLeaguePermission& a, CMsgGCToGCCheckLeaguePermission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCCheckLeaguePermission* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCCheckLeaguePermission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCCheckLeaguePermission& from);
  void MergeFrom(const CMsgGCToGCCheckLeaguePermission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCCheckLeaguePermission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCCheckLeaguePermission)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCCheckLeaguePermissionImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCCheckLeaguePermissionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCCheckLeaguePermissionResponse) */ {
 public:
  CMsgGCToGCCheckLeaguePermissionResponse();
  virtual ~CMsgGCToGCCheckLeaguePermissionResponse();

  CMsgGCToGCCheckLeaguePermissionResponse(const CMsgGCToGCCheckLeaguePermissionResponse& from);

  inline CMsgGCToGCCheckLeaguePermissionResponse& operator=(const CMsgGCToGCCheckLeaguePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCCheckLeaguePermissionResponse(CMsgGCToGCCheckLeaguePermissionResponse&& from) noexcept
    : CMsgGCToGCCheckLeaguePermissionResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCCheckLeaguePermissionResponse& operator=(CMsgGCToGCCheckLeaguePermissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCCheckLeaguePermissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCCheckLeaguePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCCheckLeaguePermissionResponse*>(
               &_CMsgGCToGCCheckLeaguePermissionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    267;

  void Swap(CMsgGCToGCCheckLeaguePermissionResponse* other);
  friend void swap(CMsgGCToGCCheckLeaguePermissionResponse& a, CMsgGCToGCCheckLeaguePermissionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCCheckLeaguePermissionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCCheckLeaguePermissionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCCheckLeaguePermissionResponse& from);
  void MergeFrom(const CMsgGCToGCCheckLeaguePermissionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCCheckLeaguePermissionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_access = 1;
  bool has_has_access() const;
  void clear_has_access();
  static const int kHasAccessFieldNumber = 1;
  bool has_access() const;
  void set_has_access(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCCheckLeaguePermissionResponse)
 private:
  void set_has_has_access();
  void clear_has_has_access();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool has_access_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCCheckLeaguePermissionResponseImpl();
};
// -------------------------------------------------------------------

class CMsgLeagueScheduleBlockTeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueScheduleBlockTeamInfo) */ {
 public:
  CMsgLeagueScheduleBlockTeamInfo();
  virtual ~CMsgLeagueScheduleBlockTeamInfo();

  CMsgLeagueScheduleBlockTeamInfo(const CMsgLeagueScheduleBlockTeamInfo& from);

  inline CMsgLeagueScheduleBlockTeamInfo& operator=(const CMsgLeagueScheduleBlockTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeagueScheduleBlockTeamInfo(CMsgLeagueScheduleBlockTeamInfo&& from) noexcept
    : CMsgLeagueScheduleBlockTeamInfo() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueScheduleBlockTeamInfo& operator=(CMsgLeagueScheduleBlockTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeagueScheduleBlockTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeagueScheduleBlockTeamInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueScheduleBlockTeamInfo*>(
               &_CMsgLeagueScheduleBlockTeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    268;

  void Swap(CMsgLeagueScheduleBlockTeamInfo* other);
  friend void swap(CMsgLeagueScheduleBlockTeamInfo& a, CMsgLeagueScheduleBlockTeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeagueScheduleBlockTeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgLeagueScheduleBlockTeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgLeagueScheduleBlockTeamInfo& from);
  void MergeFrom(const CMsgLeagueScheduleBlockTeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgLeagueScheduleBlockTeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgLeagueScheduleBlockTeamInfo)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgLeagueScheduleBlockTeamInfoImpl();
};
// -------------------------------------------------------------------

class CMsgLeagueScheduleBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueScheduleBlock) */ {
 public:
  CMsgLeagueScheduleBlock();
  virtual ~CMsgLeagueScheduleBlock();

  CMsgLeagueScheduleBlock(const CMsgLeagueScheduleBlock& from);

  inline CMsgLeagueScheduleBlock& operator=(const CMsgLeagueScheduleBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeagueScheduleBlock(CMsgLeagueScheduleBlock&& from) noexcept
    : CMsgLeagueScheduleBlock() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueScheduleBlock& operator=(CMsgLeagueScheduleBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeagueScheduleBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeagueScheduleBlock* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueScheduleBlock*>(
               &_CMsgLeagueScheduleBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    269;

  void Swap(CMsgLeagueScheduleBlock* other);
  friend void swap(CMsgLeagueScheduleBlock& a, CMsgLeagueScheduleBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeagueScheduleBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgLeagueScheduleBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgLeagueScheduleBlock& from);
  void MergeFrom(const CMsgLeagueScheduleBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgLeagueScheduleBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgLeagueScheduleBlockTeamInfo teams = 6;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 6;
  const ::CMsgLeagueScheduleBlockTeamInfo& teams(int index) const;
  ::CMsgLeagueScheduleBlockTeamInfo* mutable_teams(int index);
  ::CMsgLeagueScheduleBlockTeamInfo* add_teams();
  ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlockTeamInfo >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlockTeamInfo >&
      teams() const;

  // optional string comment = 5;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::google::protobuf::uint32 block_id() const;
  void set_block_id(::google::protobuf::uint32 value);

  // optional uint32 start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // optional bool finals = 4;
  bool has_finals() const;
  void clear_finals();
  static const int kFinalsFieldNumber = 4;
  bool finals() const;
  void set_finals(bool value);

  // @@protoc_insertion_point(class_scope:CMsgLeagueScheduleBlock)
 private:
  void set_has_block_id();
  void clear_has_block_id();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_finals();
  void clear_has_finals();
  void set_has_comment();
  void clear_has_comment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlockTeamInfo > teams_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint32 block_id_;
  ::google::protobuf::uint32 start_time_;
  bool finals_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgLeagueScheduleBlockImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeague : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeague) */ {
 public:
  CMsgDOTALeague();
  virtual ~CMsgDOTALeague();

  CMsgDOTALeague(const CMsgDOTALeague& from);

  inline CMsgDOTALeague& operator=(const CMsgDOTALeague& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeague(CMsgDOTALeague&& from) noexcept
    : CMsgDOTALeague() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeague& operator=(CMsgDOTALeague&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeague& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeague* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeague*>(
               &_CMsgDOTALeague_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    270;

  void Swap(CMsgDOTALeague* other);
  friend void swap(CMsgDOTALeague& a, CMsgDOTALeague& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeague* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeague* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeague& from);
  void MergeFrom(const CMsgDOTALeague& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeague* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgLeagueScheduleBlock schedule = 2;
  int schedule_size() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 2;
  const ::CMsgLeagueScheduleBlock& schedule(int index) const;
  ::CMsgLeagueScheduleBlock* mutable_schedule(int index);
  ::CMsgLeagueScheduleBlock* add_schedule();
  ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlock >*
      mutable_schedule();
  const ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlock >&
      schedule() const;

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeague)
 private:
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlock > schedule_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeagueImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeagueScheduleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeagueScheduleRequest) */ {
 public:
  CMsgDOTALeagueScheduleRequest();
  virtual ~CMsgDOTALeagueScheduleRequest();

  CMsgDOTALeagueScheduleRequest(const CMsgDOTALeagueScheduleRequest& from);

  inline CMsgDOTALeagueScheduleRequest& operator=(const CMsgDOTALeagueScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeagueScheduleRequest(CMsgDOTALeagueScheduleRequest&& from) noexcept
    : CMsgDOTALeagueScheduleRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeagueScheduleRequest& operator=(CMsgDOTALeagueScheduleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeagueScheduleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeagueScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeagueScheduleRequest*>(
               &_CMsgDOTALeagueScheduleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    271;

  void Swap(CMsgDOTALeagueScheduleRequest* other);
  friend void swap(CMsgDOTALeagueScheduleRequest& a, CMsgDOTALeagueScheduleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeagueScheduleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeagueScheduleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeagueScheduleRequest& from);
  void MergeFrom(const CMsgDOTALeagueScheduleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeagueScheduleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeagueScheduleRequest)
 private:
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeagueScheduleRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeagueScheduleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeagueScheduleResponse) */ {
 public:
  CMsgDOTALeagueScheduleResponse();
  virtual ~CMsgDOTALeagueScheduleResponse();

  CMsgDOTALeagueScheduleResponse(const CMsgDOTALeagueScheduleResponse& from);

  inline CMsgDOTALeagueScheduleResponse& operator=(const CMsgDOTALeagueScheduleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeagueScheduleResponse(CMsgDOTALeagueScheduleResponse&& from) noexcept
    : CMsgDOTALeagueScheduleResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeagueScheduleResponse& operator=(CMsgDOTALeagueScheduleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeagueScheduleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeagueScheduleResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeagueScheduleResponse*>(
               &_CMsgDOTALeagueScheduleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    272;

  void Swap(CMsgDOTALeagueScheduleResponse* other);
  friend void swap(CMsgDOTALeagueScheduleResponse& a, CMsgDOTALeagueScheduleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeagueScheduleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeagueScheduleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeagueScheduleResponse& from);
  void MergeFrom(const CMsgDOTALeagueScheduleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeagueScheduleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTALeague league = 1;
  bool has_league() const;
  void clear_league();
  static const int kLeagueFieldNumber = 1;
  const ::CMsgDOTALeague& league() const;
  ::CMsgDOTALeague* release_league();
  ::CMsgDOTALeague* mutable_league();
  void set_allocated_league(::CMsgDOTALeague* league);

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeagueScheduleResponse)
 private:
  void set_has_league();
  void clear_has_league();
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTALeague* league_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeagueScheduleResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeagueScheduleEdit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeagueScheduleEdit) */ {
 public:
  CMsgDOTALeagueScheduleEdit();
  virtual ~CMsgDOTALeagueScheduleEdit();

  CMsgDOTALeagueScheduleEdit(const CMsgDOTALeagueScheduleEdit& from);

  inline CMsgDOTALeagueScheduleEdit& operator=(const CMsgDOTALeagueScheduleEdit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeagueScheduleEdit(CMsgDOTALeagueScheduleEdit&& from) noexcept
    : CMsgDOTALeagueScheduleEdit() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeagueScheduleEdit& operator=(CMsgDOTALeagueScheduleEdit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeagueScheduleEdit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeagueScheduleEdit* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeagueScheduleEdit*>(
               &_CMsgDOTALeagueScheduleEdit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    273;

  void Swap(CMsgDOTALeagueScheduleEdit* other);
  friend void swap(CMsgDOTALeagueScheduleEdit& a, CMsgDOTALeagueScheduleEdit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeagueScheduleEdit* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeagueScheduleEdit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeagueScheduleEdit& from);
  void MergeFrom(const CMsgDOTALeagueScheduleEdit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeagueScheduleEdit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgLeagueScheduleBlock schedule = 2;
  bool has_schedule() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 2;
  const ::CMsgLeagueScheduleBlock& schedule() const;
  ::CMsgLeagueScheduleBlock* release_schedule();
  ::CMsgLeagueScheduleBlock* mutable_schedule();
  void set_allocated_schedule(::CMsgLeagueScheduleBlock* schedule);

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional bool delete_block = 3;
  bool has_delete_block() const;
  void clear_delete_block();
  static const int kDeleteBlockFieldNumber = 3;
  bool delete_block() const;
  void set_delete_block(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeagueScheduleEdit)
 private:
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_schedule();
  void clear_has_schedule();
  void set_has_delete_block();
  void clear_has_delete_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgLeagueScheduleBlock* schedule_;
  ::google::protobuf::uint32 league_id_;
  bool delete_block_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeagueScheduleEditImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeagueScheduleEditResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeagueScheduleEditResponse) */ {
 public:
  CMsgDOTALeagueScheduleEditResponse();
  virtual ~CMsgDOTALeagueScheduleEditResponse();

  CMsgDOTALeagueScheduleEditResponse(const CMsgDOTALeagueScheduleEditResponse& from);

  inline CMsgDOTALeagueScheduleEditResponse& operator=(const CMsgDOTALeagueScheduleEditResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeagueScheduleEditResponse(CMsgDOTALeagueScheduleEditResponse&& from) noexcept
    : CMsgDOTALeagueScheduleEditResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeagueScheduleEditResponse& operator=(CMsgDOTALeagueScheduleEditResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeagueScheduleEditResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeagueScheduleEditResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeagueScheduleEditResponse*>(
               &_CMsgDOTALeagueScheduleEditResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    274;

  void Swap(CMsgDOTALeagueScheduleEditResponse* other);
  friend void swap(CMsgDOTALeagueScheduleEditResponse& a, CMsgDOTALeagueScheduleEditResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeagueScheduleEditResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeagueScheduleEditResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeagueScheduleEditResponse& from);
  void MergeFrom(const CMsgDOTALeagueScheduleEditResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeagueScheduleEditResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTALeague league = 1;
  bool has_league() const;
  void clear_league();
  static const int kLeagueFieldNumber = 1;
  const ::CMsgDOTALeague& league() const;
  ::CMsgDOTALeague* release_league();
  ::CMsgDOTALeague* mutable_league();
  void set_allocated_league(::CMsgDOTALeague* league);

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeagueScheduleEditResponse)
 private:
  void set_has_league();
  void clear_has_league();
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTALeague* league_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeagueScheduleEditResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeaguesInMonthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaguesInMonthRequest) */ {
 public:
  CMsgDOTALeaguesInMonthRequest();
  virtual ~CMsgDOTALeaguesInMonthRequest();

  CMsgDOTALeaguesInMonthRequest(const CMsgDOTALeaguesInMonthRequest& from);

  inline CMsgDOTALeaguesInMonthRequest& operator=(const CMsgDOTALeaguesInMonthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaguesInMonthRequest(CMsgDOTALeaguesInMonthRequest&& from) noexcept
    : CMsgDOTALeaguesInMonthRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaguesInMonthRequest& operator=(CMsgDOTALeaguesInMonthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaguesInMonthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaguesInMonthRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaguesInMonthRequest*>(
               &_CMsgDOTALeaguesInMonthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    275;

  void Swap(CMsgDOTALeaguesInMonthRequest* other);
  friend void swap(CMsgDOTALeaguesInMonthRequest& a, CMsgDOTALeaguesInMonthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaguesInMonthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaguesInMonthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaguesInMonthRequest& from);
  void MergeFrom(const CMsgDOTALeaguesInMonthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaguesInMonthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 month = 1;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 1;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // optional uint32 year = 2;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 2;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaguesInMonthRequest)
 private:
  void set_has_month();
  void clear_has_month();
  void set_has_year();
  void clear_has_year();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 year_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeaguesInMonthRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALeaguesInMonthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaguesInMonthResponse) */ {
 public:
  CMsgDOTALeaguesInMonthResponse();
  virtual ~CMsgDOTALeaguesInMonthResponse();

  CMsgDOTALeaguesInMonthResponse(const CMsgDOTALeaguesInMonthResponse& from);

  inline CMsgDOTALeaguesInMonthResponse& operator=(const CMsgDOTALeaguesInMonthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALeaguesInMonthResponse(CMsgDOTALeaguesInMonthResponse&& from) noexcept
    : CMsgDOTALeaguesInMonthResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaguesInMonthResponse& operator=(CMsgDOTALeaguesInMonthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaguesInMonthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALeaguesInMonthResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaguesInMonthResponse*>(
               &_CMsgDOTALeaguesInMonthResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    276;

  void Swap(CMsgDOTALeaguesInMonthResponse* other);
  friend void swap(CMsgDOTALeaguesInMonthResponse& a, CMsgDOTALeaguesInMonthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaguesInMonthResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaguesInMonthResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaguesInMonthResponse& from);
  void MergeFrom(const CMsgDOTALeaguesInMonthResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaguesInMonthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTALeague leagues = 4;
  int leagues_size() const;
  void clear_leagues();
  static const int kLeaguesFieldNumber = 4;
  const ::CMsgDOTALeague& leagues(int index) const;
  ::CMsgDOTALeague* mutable_leagues(int index);
  ::CMsgDOTALeague* add_leagues();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTALeague >*
      mutable_leagues();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALeague >&
      leagues() const;

  // optional uint32 month = 2;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // optional uint32 year = 3;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 3;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaguesInMonthResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_month();
  void clear_has_month();
  void set_has_year();
  void clear_has_year();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTALeague > leagues_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALeaguesInMonthResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatchmakingStatsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchmakingStatsRequest) */ {
 public:
  CMsgDOTAMatchmakingStatsRequest();
  virtual ~CMsgDOTAMatchmakingStatsRequest();

  CMsgDOTAMatchmakingStatsRequest(const CMsgDOTAMatchmakingStatsRequest& from);

  inline CMsgDOTAMatchmakingStatsRequest& operator=(const CMsgDOTAMatchmakingStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchmakingStatsRequest(CMsgDOTAMatchmakingStatsRequest&& from) noexcept
    : CMsgDOTAMatchmakingStatsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchmakingStatsRequest& operator=(CMsgDOTAMatchmakingStatsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchmakingStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchmakingStatsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchmakingStatsRequest*>(
               &_CMsgDOTAMatchmakingStatsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    277;

  void Swap(CMsgDOTAMatchmakingStatsRequest* other);
  friend void swap(CMsgDOTAMatchmakingStatsRequest& a, CMsgDOTAMatchmakingStatsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchmakingStatsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchmakingStatsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchmakingStatsRequest& from);
  void MergeFrom(const CMsgDOTAMatchmakingStatsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchmakingStatsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchmakingStatsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchmakingStatsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAMatchmakingStatsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchmakingStatsResponse) */ {
 public:
  CMsgDOTAMatchmakingStatsResponse();
  virtual ~CMsgDOTAMatchmakingStatsResponse();

  CMsgDOTAMatchmakingStatsResponse(const CMsgDOTAMatchmakingStatsResponse& from);

  inline CMsgDOTAMatchmakingStatsResponse& operator=(const CMsgDOTAMatchmakingStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAMatchmakingStatsResponse(CMsgDOTAMatchmakingStatsResponse&& from) noexcept
    : CMsgDOTAMatchmakingStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchmakingStatsResponse& operator=(CMsgDOTAMatchmakingStatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchmakingStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAMatchmakingStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchmakingStatsResponse*>(
               &_CMsgDOTAMatchmakingStatsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    278;

  void Swap(CMsgDOTAMatchmakingStatsResponse* other);
  friend void swap(CMsgDOTAMatchmakingStatsResponse& a, CMsgDOTAMatchmakingStatsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchmakingStatsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchmakingStatsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchmakingStatsResponse& from);
  void MergeFrom(const CMsgDOTAMatchmakingStatsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchmakingStatsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 wait_times_by_group = 1;
  int wait_times_by_group_size() const;
  void clear_wait_times_by_group();
  static const int kWaitTimesByGroupFieldNumber = 1;
  ::google::protobuf::uint32 wait_times_by_group(int index) const;
  void set_wait_times_by_group(int index, ::google::protobuf::uint32 value);
  void add_wait_times_by_group(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wait_times_by_group() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wait_times_by_group();

  // repeated uint32 searching_players_by_group = 2;
  int searching_players_by_group_size() const;
  void clear_searching_players_by_group();
  static const int kSearchingPlayersByGroupFieldNumber = 2;
  ::google::protobuf::uint32 searching_players_by_group(int index) const;
  void set_searching_players_by_group(int index, ::google::protobuf::uint32 value);
  void add_searching_players_by_group(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      searching_players_by_group() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_searching_players_by_group();

  // optional uint32 disabled_groups = 3;
  bool has_disabled_groups() const;
  void clear_disabled_groups();
  static const int kDisabledGroupsFieldNumber = 3;
  ::google::protobuf::uint32 disabled_groups() const;
  void set_disabled_groups(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchmakingStatsResponse)
 private:
  void set_has_disabled_groups();
  void clear_has_disabled_groups();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wait_times_by_group_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > searching_players_by_group_;
  ::google::protobuf::uint32 disabled_groups_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAMatchmakingStatsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASetMatchHistoryAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetMatchHistoryAccess) */ {
 public:
  CMsgDOTASetMatchHistoryAccess();
  virtual ~CMsgDOTASetMatchHistoryAccess();

  CMsgDOTASetMatchHistoryAccess(const CMsgDOTASetMatchHistoryAccess& from);

  inline CMsgDOTASetMatchHistoryAccess& operator=(const CMsgDOTASetMatchHistoryAccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASetMatchHistoryAccess(CMsgDOTASetMatchHistoryAccess&& from) noexcept
    : CMsgDOTASetMatchHistoryAccess() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetMatchHistoryAccess& operator=(CMsgDOTASetMatchHistoryAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetMatchHistoryAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASetMatchHistoryAccess* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetMatchHistoryAccess*>(
               &_CMsgDOTASetMatchHistoryAccess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    279;

  void Swap(CMsgDOTASetMatchHistoryAccess* other);
  friend void swap(CMsgDOTASetMatchHistoryAccess& a, CMsgDOTASetMatchHistoryAccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetMatchHistoryAccess* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASetMatchHistoryAccess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASetMatchHistoryAccess& from);
  void MergeFrom(const CMsgDOTASetMatchHistoryAccess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASetMatchHistoryAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool allow_3rd_party_match_history = 1;
  bool has_allow_3rd_party_match_history() const;
  void clear_allow_3rd_party_match_history();
  static const int kAllow3RdPartyMatchHistoryFieldNumber = 1;
  bool allow_3rd_party_match_history() const;
  void set_allow_3rd_party_match_history(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASetMatchHistoryAccess)
 private:
  void set_has_allow_3rd_party_match_history();
  void clear_has_allow_3rd_party_match_history();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool allow_3rd_party_match_history_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASetMatchHistoryAccessImpl();
};
// -------------------------------------------------------------------

class CMsgDOTASetMatchHistoryAccessResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetMatchHistoryAccessResponse) */ {
 public:
  CMsgDOTASetMatchHistoryAccessResponse();
  virtual ~CMsgDOTASetMatchHistoryAccessResponse();

  CMsgDOTASetMatchHistoryAccessResponse(const CMsgDOTASetMatchHistoryAccessResponse& from);

  inline CMsgDOTASetMatchHistoryAccessResponse& operator=(const CMsgDOTASetMatchHistoryAccessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASetMatchHistoryAccessResponse(CMsgDOTASetMatchHistoryAccessResponse&& from) noexcept
    : CMsgDOTASetMatchHistoryAccessResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetMatchHistoryAccessResponse& operator=(CMsgDOTASetMatchHistoryAccessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetMatchHistoryAccessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASetMatchHistoryAccessResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetMatchHistoryAccessResponse*>(
               &_CMsgDOTASetMatchHistoryAccessResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    280;

  void Swap(CMsgDOTASetMatchHistoryAccessResponse* other);
  friend void swap(CMsgDOTASetMatchHistoryAccessResponse& a, CMsgDOTASetMatchHistoryAccessResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetMatchHistoryAccessResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTASetMatchHistoryAccessResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTASetMatchHistoryAccessResponse& from);
  void MergeFrom(const CMsgDOTASetMatchHistoryAccessResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTASetMatchHistoryAccessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASetMatchHistoryAccessResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTASetMatchHistoryAccessResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTANotifyMatchHistoryAccessChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTANotifyMatchHistoryAccessChange) */ {
 public:
  CMsgDOTANotifyMatchHistoryAccessChange();
  virtual ~CMsgDOTANotifyMatchHistoryAccessChange();

  CMsgDOTANotifyMatchHistoryAccessChange(const CMsgDOTANotifyMatchHistoryAccessChange& from);

  inline CMsgDOTANotifyMatchHistoryAccessChange& operator=(const CMsgDOTANotifyMatchHistoryAccessChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTANotifyMatchHistoryAccessChange(CMsgDOTANotifyMatchHistoryAccessChange&& from) noexcept
    : CMsgDOTANotifyMatchHistoryAccessChange() {
    *this = ::std::move(from);
  }

  inline CMsgDOTANotifyMatchHistoryAccessChange& operator=(CMsgDOTANotifyMatchHistoryAccessChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTANotifyMatchHistoryAccessChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTANotifyMatchHistoryAccessChange* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTANotifyMatchHistoryAccessChange*>(
               &_CMsgDOTANotifyMatchHistoryAccessChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    281;

  void Swap(CMsgDOTANotifyMatchHistoryAccessChange* other);
  friend void swap(CMsgDOTANotifyMatchHistoryAccessChange& a, CMsgDOTANotifyMatchHistoryAccessChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTANotifyMatchHistoryAccessChange* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTANotifyMatchHistoryAccessChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTANotifyMatchHistoryAccessChange& from);
  void MergeFrom(const CMsgDOTANotifyMatchHistoryAccessChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTANotifyMatchHistoryAccessChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional bool allow_3rd_party_match_history = 2;
  bool has_allow_3rd_party_match_history() const;
  void clear_allow_3rd_party_match_history();
  static const int kAllow3RdPartyMatchHistoryFieldNumber = 2;
  bool allow_3rd_party_match_history() const;
  void set_allow_3rd_party_match_history(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTANotifyMatchHistoryAccessChange)
 private:
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_allow_3rd_party_match_history();
  void clear_has_allow_3rd_party_match_history();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 accountid_;
  bool allow_3rd_party_match_history_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTANotifyMatchHistoryAccessChangeImpl();
};
// -------------------------------------------------------------------

class CMsgUpgradeLeagueItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgUpgradeLeagueItem) */ {
 public:
  CMsgUpgradeLeagueItem();
  virtual ~CMsgUpgradeLeagueItem();

  CMsgUpgradeLeagueItem(const CMsgUpgradeLeagueItem& from);

  inline CMsgUpgradeLeagueItem& operator=(const CMsgUpgradeLeagueItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgUpgradeLeagueItem(CMsgUpgradeLeagueItem&& from) noexcept
    : CMsgUpgradeLeagueItem() {
    *this = ::std::move(from);
  }

  inline CMsgUpgradeLeagueItem& operator=(CMsgUpgradeLeagueItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgUpgradeLeagueItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgUpgradeLeagueItem* internal_default_instance() {
    return reinterpret_cast<const CMsgUpgradeLeagueItem*>(
               &_CMsgUpgradeLeagueItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    282;

  void Swap(CMsgUpgradeLeagueItem* other);
  friend void swap(CMsgUpgradeLeagueItem& a, CMsgUpgradeLeagueItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgUpgradeLeagueItem* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgUpgradeLeagueItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgUpgradeLeagueItem& from);
  void MergeFrom(const CMsgUpgradeLeagueItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgUpgradeLeagueItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint32 match_id() const;
  void set_match_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgUpgradeLeagueItem)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgUpgradeLeagueItemImpl();
};
// -------------------------------------------------------------------

class CMsgUpgradeLeagueItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgUpgradeLeagueItemResponse) */ {
 public:
  CMsgUpgradeLeagueItemResponse();
  virtual ~CMsgUpgradeLeagueItemResponse();

  CMsgUpgradeLeagueItemResponse(const CMsgUpgradeLeagueItemResponse& from);

  inline CMsgUpgradeLeagueItemResponse& operator=(const CMsgUpgradeLeagueItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgUpgradeLeagueItemResponse(CMsgUpgradeLeagueItemResponse&& from) noexcept
    : CMsgUpgradeLeagueItemResponse() {
    *this = ::std::move(from);
  }

  inline CMsgUpgradeLeagueItemResponse& operator=(CMsgUpgradeLeagueItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgUpgradeLeagueItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgUpgradeLeagueItemResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgUpgradeLeagueItemResponse*>(
               &_CMsgUpgradeLeagueItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    283;

  void Swap(CMsgUpgradeLeagueItemResponse* other);
  friend void swap(CMsgUpgradeLeagueItemResponse& a, CMsgUpgradeLeagueItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgUpgradeLeagueItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgUpgradeLeagueItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgUpgradeLeagueItemResponse& from);
  void MergeFrom(const CMsgUpgradeLeagueItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgUpgradeLeagueItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgUpgradeLeagueItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgUpgradeLeagueItemResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCWatchDownloadedReplay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCWatchDownloadedReplay) */ {
 public:
  CMsgGCWatchDownloadedReplay();
  virtual ~CMsgGCWatchDownloadedReplay();

  CMsgGCWatchDownloadedReplay(const CMsgGCWatchDownloadedReplay& from);

  inline CMsgGCWatchDownloadedReplay& operator=(const CMsgGCWatchDownloadedReplay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCWatchDownloadedReplay(CMsgGCWatchDownloadedReplay&& from) noexcept
    : CMsgGCWatchDownloadedReplay() {
    *this = ::std::move(from);
  }

  inline CMsgGCWatchDownloadedReplay& operator=(CMsgGCWatchDownloadedReplay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCWatchDownloadedReplay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCWatchDownloadedReplay* internal_default_instance() {
    return reinterpret_cast<const CMsgGCWatchDownloadedReplay*>(
               &_CMsgGCWatchDownloadedReplay_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    284;

  void Swap(CMsgGCWatchDownloadedReplay* other);
  friend void swap(CMsgGCWatchDownloadedReplay& a, CMsgGCWatchDownloadedReplay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCWatchDownloadedReplay* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCWatchDownloadedReplay* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCWatchDownloadedReplay& from);
  void MergeFrom(const CMsgGCWatchDownloadedReplay& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCWatchDownloadedReplay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional .DOTA_WatchReplayType watch_type = 2 [default = DOTA_WATCH_REPLAY_NORMAL];
  bool has_watch_type() const;
  void clear_watch_type();
  static const int kWatchTypeFieldNumber = 2;
  ::DOTA_WatchReplayType watch_type() const;
  void set_watch_type(::DOTA_WatchReplayType value);

  // @@protoc_insertion_point(class_scope:CMsgGCWatchDownloadedReplay)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_watch_type();
  void clear_has_watch_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  int watch_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCWatchDownloadedReplayImpl();
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSODOTAMapLocationState) */ {
 public:
  CSODOTAMapLocationState();
  virtual ~CSODOTAMapLocationState();

  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);

  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAMapLocationState(CSODOTAMapLocationState&& from) noexcept
    : CSODOTAMapLocationState() {
    *this = ::std::move(from);
  }

  inline CSODOTAMapLocationState& operator=(CSODOTAMapLocationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAMapLocationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAMapLocationState* internal_default_instance() {
    return reinterpret_cast<const CSODOTAMapLocationState*>(
               &_CSODOTAMapLocationState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    285;

  void Swap(CSODOTAMapLocationState* other);
  friend void swap(CSODOTAMapLocationState& a, CSODOTAMapLocationState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAMapLocationState* New() const PROTOBUF_FINAL { return New(NULL); }

  CSODOTAMapLocationState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSODOTAMapLocationState& from);
  void MergeFrom(const CSODOTAMapLocationState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSODOTAMapLocationState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional int32 location_id = 2 [(.key_field) = true];
  bool has_location_id() const;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  ::google::protobuf::int32 location_id() const;
  void set_location_id(::google::protobuf::int32 value);

  // optional bool completed = 3;
  bool has_completed() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 3;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:CSODOTAMapLocationState)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_location_id();
  void clear_has_location_id();
  void set_has_completed();
  void clear_has_completed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCSODOTAMapLocationStateImpl();
};
// -------------------------------------------------------------------

class CMsgSetMapLocationState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSetMapLocationState) */ {
 public:
  CMsgSetMapLocationState();
  virtual ~CMsgSetMapLocationState();

  CMsgSetMapLocationState(const CMsgSetMapLocationState& from);

  inline CMsgSetMapLocationState& operator=(const CMsgSetMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSetMapLocationState(CMsgSetMapLocationState&& from) noexcept
    : CMsgSetMapLocationState() {
    *this = ::std::move(from);
  }

  inline CMsgSetMapLocationState& operator=(CMsgSetMapLocationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetMapLocationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSetMapLocationState* internal_default_instance() {
    return reinterpret_cast<const CMsgSetMapLocationState*>(
               &_CMsgSetMapLocationState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    286;

  void Swap(CMsgSetMapLocationState* other);
  friend void swap(CMsgSetMapLocationState& a, CMsgSetMapLocationState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetMapLocationState* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSetMapLocationState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSetMapLocationState& from);
  void MergeFrom(const CMsgSetMapLocationState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSetMapLocationState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 location_id = 1;
  bool has_location_id() const;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 1;
  ::google::protobuf::int32 location_id() const;
  void set_location_id(::google::protobuf::int32 value);

  // optional bool completed = 2;
  bool has_completed() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 2;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgSetMapLocationState)
 private:
  void set_has_location_id();
  void clear_has_location_id();
  void set_has_completed();
  void clear_has_completed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSetMapLocationStateImpl();
};
// -------------------------------------------------------------------

class CMsgSetMapLocationStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSetMapLocationStateResponse) */ {
 public:
  CMsgSetMapLocationStateResponse();
  virtual ~CMsgSetMapLocationStateResponse();

  CMsgSetMapLocationStateResponse(const CMsgSetMapLocationStateResponse& from);

  inline CMsgSetMapLocationStateResponse& operator=(const CMsgSetMapLocationStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSetMapLocationStateResponse(CMsgSetMapLocationStateResponse&& from) noexcept
    : CMsgSetMapLocationStateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSetMapLocationStateResponse& operator=(CMsgSetMapLocationStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetMapLocationStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSetMapLocationStateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSetMapLocationStateResponse*>(
               &_CMsgSetMapLocationStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    287;

  void Swap(CMsgSetMapLocationStateResponse* other);
  friend void swap(CMsgSetMapLocationStateResponse& a, CMsgSetMapLocationStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetMapLocationStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSetMapLocationStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSetMapLocationStateResponse& from);
  void MergeFrom(const CMsgSetMapLocationStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSetMapLocationStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetMapLocationStateResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgSetMapLocationStateResponseImpl();
};
// -------------------------------------------------------------------

class CMsgResetMapLocations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgResetMapLocations) */ {
 public:
  CMsgResetMapLocations();
  virtual ~CMsgResetMapLocations();

  CMsgResetMapLocations(const CMsgResetMapLocations& from);

  inline CMsgResetMapLocations& operator=(const CMsgResetMapLocations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgResetMapLocations(CMsgResetMapLocations&& from) noexcept
    : CMsgResetMapLocations() {
    *this = ::std::move(from);
  }

  inline CMsgResetMapLocations& operator=(CMsgResetMapLocations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgResetMapLocations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgResetMapLocations* internal_default_instance() {
    return reinterpret_cast<const CMsgResetMapLocations*>(
               &_CMsgResetMapLocations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    288;

  void Swap(CMsgResetMapLocations* other);
  friend void swap(CMsgResetMapLocations& a, CMsgResetMapLocations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgResetMapLocations* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgResetMapLocations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgResetMapLocations& from);
  void MergeFrom(const CMsgResetMapLocations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgResetMapLocations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgResetMapLocations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgResetMapLocationsImpl();
};
// -------------------------------------------------------------------

class CMsgResetMapLocationsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgResetMapLocationsResponse) */ {
 public:
  CMsgResetMapLocationsResponse();
  virtual ~CMsgResetMapLocationsResponse();

  CMsgResetMapLocationsResponse(const CMsgResetMapLocationsResponse& from);

  inline CMsgResetMapLocationsResponse& operator=(const CMsgResetMapLocationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgResetMapLocationsResponse(CMsgResetMapLocationsResponse&& from) noexcept
    : CMsgResetMapLocationsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgResetMapLocationsResponse& operator=(CMsgResetMapLocationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgResetMapLocationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgResetMapLocationsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgResetMapLocationsResponse*>(
               &_CMsgResetMapLocationsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    289;

  void Swap(CMsgResetMapLocationsResponse* other);
  friend void swap(CMsgResetMapLocationsResponse& a, CMsgResetMapLocationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgResetMapLocationsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgResetMapLocationsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgResetMapLocationsResponse& from);
  void MergeFrom(const CMsgResetMapLocationsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgResetMapLocationsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgResetMapLocationsResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgResetMapLocationsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgRefreshPartnerAccountLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRefreshPartnerAccountLink) */ {
 public:
  CMsgRefreshPartnerAccountLink();
  virtual ~CMsgRefreshPartnerAccountLink();

  CMsgRefreshPartnerAccountLink(const CMsgRefreshPartnerAccountLink& from);

  inline CMsgRefreshPartnerAccountLink& operator=(const CMsgRefreshPartnerAccountLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRefreshPartnerAccountLink(CMsgRefreshPartnerAccountLink&& from) noexcept
    : CMsgRefreshPartnerAccountLink() {
    *this = ::std::move(from);
  }

  inline CMsgRefreshPartnerAccountLink& operator=(CMsgRefreshPartnerAccountLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRefreshPartnerAccountLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRefreshPartnerAccountLink* internal_default_instance() {
    return reinterpret_cast<const CMsgRefreshPartnerAccountLink*>(
               &_CMsgRefreshPartnerAccountLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    290;

  void Swap(CMsgRefreshPartnerAccountLink* other);
  friend void swap(CMsgRefreshPartnerAccountLink& a, CMsgRefreshPartnerAccountLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRefreshPartnerAccountLink* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRefreshPartnerAccountLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRefreshPartnerAccountLink& from);
  void MergeFrom(const CMsgRefreshPartnerAccountLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRefreshPartnerAccountLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 partner_type = 1;
  bool has_partner_type() const;
  void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  ::google::protobuf::int32 partner_type() const;
  void set_partner_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgRefreshPartnerAccountLink)
 private:
  void set_has_partner_type();
  void clear_has_partner_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 partner_type_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRefreshPartnerAccountLinkImpl();
};
// -------------------------------------------------------------------

class CMsgClientsRejoinChatChannels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgClientsRejoinChatChannels) */ {
 public:
  CMsgClientsRejoinChatChannels();
  virtual ~CMsgClientsRejoinChatChannels();

  CMsgClientsRejoinChatChannels(const CMsgClientsRejoinChatChannels& from);

  inline CMsgClientsRejoinChatChannels& operator=(const CMsgClientsRejoinChatChannels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientsRejoinChatChannels(CMsgClientsRejoinChatChannels&& from) noexcept
    : CMsgClientsRejoinChatChannels() {
    *this = ::std::move(from);
  }

  inline CMsgClientsRejoinChatChannels& operator=(CMsgClientsRejoinChatChannels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientsRejoinChatChannels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientsRejoinChatChannels* internal_default_instance() {
    return reinterpret_cast<const CMsgClientsRejoinChatChannels*>(
               &_CMsgClientsRejoinChatChannels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    291;

  void Swap(CMsgClientsRejoinChatChannels* other);
  friend void swap(CMsgClientsRejoinChatChannels& a, CMsgClientsRejoinChatChannels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientsRejoinChatChannels* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientsRejoinChatChannels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientsRejoinChatChannels& from);
  void MergeFrom(const CMsgClientsRejoinChatChannels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientsRejoinChatChannels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientsRejoinChatChannels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgClientsRejoinChatChannelsImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetUserChatInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetUserChatInfo) */ {
 public:
  CMsgGCToGCGetUserChatInfo();
  virtual ~CMsgGCToGCGetUserChatInfo();

  CMsgGCToGCGetUserChatInfo(const CMsgGCToGCGetUserChatInfo& from);

  inline CMsgGCToGCGetUserChatInfo& operator=(const CMsgGCToGCGetUserChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetUserChatInfo(CMsgGCToGCGetUserChatInfo&& from) noexcept
    : CMsgGCToGCGetUserChatInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetUserChatInfo& operator=(CMsgGCToGCGetUserChatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetUserChatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetUserChatInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetUserChatInfo*>(
               &_CMsgGCToGCGetUserChatInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    292;

  void Swap(CMsgGCToGCGetUserChatInfo* other);
  friend void swap(CMsgGCToGCGetUserChatInfo& a, CMsgGCToGCGetUserChatInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetUserChatInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetUserChatInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetUserChatInfo& from);
  void MergeFrom(const CMsgGCToGCGetUserChatInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetUserChatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetUserChatInfo)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetUserChatInfoImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetUserChatInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetUserChatInfoResponse) */ {
 public:
  CMsgGCToGCGetUserChatInfoResponse();
  virtual ~CMsgGCToGCGetUserChatInfoResponse();

  CMsgGCToGCGetUserChatInfoResponse(const CMsgGCToGCGetUserChatInfoResponse& from);

  inline CMsgGCToGCGetUserChatInfoResponse& operator=(const CMsgGCToGCGetUserChatInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetUserChatInfoResponse(CMsgGCToGCGetUserChatInfoResponse&& from) noexcept
    : CMsgGCToGCGetUserChatInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetUserChatInfoResponse& operator=(CMsgGCToGCGetUserChatInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetUserChatInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetUserChatInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetUserChatInfoResponse*>(
               &_CMsgGCToGCGetUserChatInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    293;

  void Swap(CMsgGCToGCGetUserChatInfoResponse* other);
  friend void swap(CMsgGCToGCGetUserChatInfoResponse& a, CMsgGCToGCGetUserChatInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetUserChatInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetUserChatInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetUserChatInfoResponse& from);
  void MergeFrom(const CMsgGCToGCGetUserChatInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetUserChatInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool valid_session = 1;
  bool has_valid_session() const;
  void clear_valid_session();
  static const int kValidSessionFieldNumber = 1;
  bool valid_session() const;
  void set_valid_session(bool value);

  // optional .DOTA_PartnerAccountType partner_type = 2 [default = DOTA_PARTNER_NONE];
  bool has_partner_type() const;
  void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 2;
  ::DOTA_PartnerAccountType partner_type() const;
  void set_partner_type(::DOTA_PartnerAccountType value);

  // optional uint32 chat_ban_end = 3;
  bool has_chat_ban_end() const;
  void clear_chat_ban_end();
  static const int kChatBanEndFieldNumber = 3;
  ::google::protobuf::uint32 chat_ban_end() const;
  void set_chat_ban_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetUserChatInfoResponse)
 private:
  void set_has_valid_session();
  void clear_has_valid_session();
  void set_has_partner_type();
  void clear_has_partner_type();
  void set_has_chat_ban_end();
  void clear_has_chat_ban_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool valid_session_;
  int partner_type_;
  ::google::protobuf::uint32 chat_ban_end_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetUserChatInfoResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCLeaveAllChatChannels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCLeaveAllChatChannels) */ {
 public:
  CMsgGCToGCLeaveAllChatChannels();
  virtual ~CMsgGCToGCLeaveAllChatChannels();

  CMsgGCToGCLeaveAllChatChannels(const CMsgGCToGCLeaveAllChatChannels& from);

  inline CMsgGCToGCLeaveAllChatChannels& operator=(const CMsgGCToGCLeaveAllChatChannels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCLeaveAllChatChannels(CMsgGCToGCLeaveAllChatChannels&& from) noexcept
    : CMsgGCToGCLeaveAllChatChannels() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCLeaveAllChatChannels& operator=(CMsgGCToGCLeaveAllChatChannels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCLeaveAllChatChannels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCLeaveAllChatChannels* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCLeaveAllChatChannels*>(
               &_CMsgGCToGCLeaveAllChatChannels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    294;

  void Swap(CMsgGCToGCLeaveAllChatChannels* other);
  friend void swap(CMsgGCToGCLeaveAllChatChannels& a, CMsgGCToGCLeaveAllChatChannels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCLeaveAllChatChannels* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCLeaveAllChatChannels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCLeaveAllChatChannels& from);
  void MergeFrom(const CMsgGCToGCLeaveAllChatChannels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCLeaveAllChatChannels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCLeaveAllChatChannels)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCLeaveAllChatChannelsImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCUpdateAccountChatBan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCUpdateAccountChatBan) */ {
 public:
  CMsgGCToGCUpdateAccountChatBan();
  virtual ~CMsgGCToGCUpdateAccountChatBan();

  CMsgGCToGCUpdateAccountChatBan(const CMsgGCToGCUpdateAccountChatBan& from);

  inline CMsgGCToGCUpdateAccountChatBan& operator=(const CMsgGCToGCUpdateAccountChatBan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCUpdateAccountChatBan(CMsgGCToGCUpdateAccountChatBan&& from) noexcept
    : CMsgGCToGCUpdateAccountChatBan() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCUpdateAccountChatBan& operator=(CMsgGCToGCUpdateAccountChatBan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCUpdateAccountChatBan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCUpdateAccountChatBan* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCUpdateAccountChatBan*>(
               &_CMsgGCToGCUpdateAccountChatBan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    295;

  void Swap(CMsgGCToGCUpdateAccountChatBan* other);
  friend void swap(CMsgGCToGCUpdateAccountChatBan& a, CMsgGCToGCUpdateAccountChatBan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCUpdateAccountChatBan* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCUpdateAccountChatBan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCUpdateAccountChatBan& from);
  void MergeFrom(const CMsgGCToGCUpdateAccountChatBan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCUpdateAccountChatBan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 chat_ban_end = 2;
  bool has_chat_ban_end() const;
  void clear_chat_ban_end();
  static const int kChatBanEndFieldNumber = 2;
  ::google::protobuf::uint32 chat_ban_end() const;
  void set_chat_ban_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCUpdateAccountChatBan)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_chat_ban_end();
  void clear_has_chat_ban_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 chat_ban_end_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCUpdateAccountChatBanImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCCanInviteUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCCanInviteUser) */ {
 public:
  CMsgGCToGCCanInviteUser();
  virtual ~CMsgGCToGCCanInviteUser();

  CMsgGCToGCCanInviteUser(const CMsgGCToGCCanInviteUser& from);

  inline CMsgGCToGCCanInviteUser& operator=(const CMsgGCToGCCanInviteUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCCanInviteUser(CMsgGCToGCCanInviteUser&& from) noexcept
    : CMsgGCToGCCanInviteUser() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCCanInviteUser& operator=(CMsgGCToGCCanInviteUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCCanInviteUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCCanInviteUser* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCCanInviteUser*>(
               &_CMsgGCToGCCanInviteUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    296;

  void Swap(CMsgGCToGCCanInviteUser* other);
  friend void swap(CMsgGCToGCCanInviteUser& a, CMsgGCToGCCanInviteUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCCanInviteUser* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCCanInviteUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCCanInviteUser& from);
  void MergeFrom(const CMsgGCToGCCanInviteUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCCanInviteUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCCanInviteUser)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCCanInviteUserImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCCanInviteUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCCanInviteUserResponse) */ {
 public:
  CMsgGCToGCCanInviteUserResponse();
  virtual ~CMsgGCToGCCanInviteUserResponse();

  CMsgGCToGCCanInviteUserResponse(const CMsgGCToGCCanInviteUserResponse& from);

  inline CMsgGCToGCCanInviteUserResponse& operator=(const CMsgGCToGCCanInviteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCCanInviteUserResponse(CMsgGCToGCCanInviteUserResponse&& from) noexcept
    : CMsgGCToGCCanInviteUserResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCCanInviteUserResponse& operator=(CMsgGCToGCCanInviteUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCCanInviteUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCCanInviteUserResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCCanInviteUserResponse*>(
               &_CMsgGCToGCCanInviteUserResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    297;

  void Swap(CMsgGCToGCCanInviteUserResponse* other);
  friend void swap(CMsgGCToGCCanInviteUserResponse& a, CMsgGCToGCCanInviteUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCCanInviteUserResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCCanInviteUserResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCCanInviteUserResponse& from);
  void MergeFrom(const CMsgGCToGCCanInviteUserResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCCanInviteUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool can_invite = 1;
  bool has_can_invite() const;
  void clear_can_invite();
  static const int kCanInviteFieldNumber = 1;
  bool can_invite() const;
  void set_can_invite(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCCanInviteUserResponse)
 private:
  void set_has_can_invite();
  void clear_has_can_invite();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool can_invite_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCCanInviteUserResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetUserRank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetUserRank) */ {
 public:
  CMsgGCToGCGetUserRank();
  virtual ~CMsgGCToGCGetUserRank();

  CMsgGCToGCGetUserRank(const CMsgGCToGCGetUserRank& from);

  inline CMsgGCToGCGetUserRank& operator=(const CMsgGCToGCGetUserRank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetUserRank(CMsgGCToGCGetUserRank&& from) noexcept
    : CMsgGCToGCGetUserRank() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetUserRank& operator=(CMsgGCToGCGetUserRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetUserRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetUserRank* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetUserRank*>(
               &_CMsgGCToGCGetUserRank_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    298;

  void Swap(CMsgGCToGCGetUserRank* other);
  friend void swap(CMsgGCToGCGetUserRank& a, CMsgGCToGCGetUserRank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetUserRank* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetUserRank* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetUserRank& from);
  void MergeFrom(const CMsgGCToGCGetUserRank& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetUserRank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetUserRank)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetUserRankImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetUserRankResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetUserRankResponse) */ {
 public:
  CMsgGCToGCGetUserRankResponse();
  virtual ~CMsgGCToGCGetUserRankResponse();

  CMsgGCToGCGetUserRankResponse(const CMsgGCToGCGetUserRankResponse& from);

  inline CMsgGCToGCGetUserRankResponse& operator=(const CMsgGCToGCGetUserRankResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetUserRankResponse(CMsgGCToGCGetUserRankResponse&& from) noexcept
    : CMsgGCToGCGetUserRankResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetUserRankResponse& operator=(CMsgGCToGCGetUserRankResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetUserRankResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetUserRankResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetUserRankResponse*>(
               &_CMsgGCToGCGetUserRankResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    299;

  void Swap(CMsgGCToGCGetUserRankResponse* other);
  friend void swap(CMsgGCToGCGetUserRankResponse& a, CMsgGCToGCGetUserRankResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetUserRankResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetUserRankResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetUserRankResponse& from);
  void MergeFrom(const CMsgGCToGCGetUserRankResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetUserRankResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetUserRankResponse)
 private:
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetUserRankResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetTeamRankChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetTeamRankChange) */ {
 public:
  CMsgGCToGCGetTeamRankChange();
  virtual ~CMsgGCToGCGetTeamRankChange();

  CMsgGCToGCGetTeamRankChange(const CMsgGCToGCGetTeamRankChange& from);

  inline CMsgGCToGCGetTeamRankChange& operator=(const CMsgGCToGCGetTeamRankChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetTeamRankChange(CMsgGCToGCGetTeamRankChange&& from) noexcept
    : CMsgGCToGCGetTeamRankChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetTeamRankChange& operator=(CMsgGCToGCGetTeamRankChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetTeamRankChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetTeamRankChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetTeamRankChange*>(
               &_CMsgGCToGCGetTeamRankChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    300;

  void Swap(CMsgGCToGCGetTeamRankChange* other);
  friend void swap(CMsgGCToGCGetTeamRankChange& a, CMsgGCToGCGetTeamRankChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetTeamRankChange* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetTeamRankChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetTeamRankChange& from);
  void MergeFrom(const CMsgGCToGCGetTeamRankChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetTeamRankChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 winner_team_id = 1;
  bool has_winner_team_id() const;
  void clear_winner_team_id();
  static const int kWinnerTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 winner_team_id() const;
  void set_winner_team_id(::google::protobuf::uint32 value);

  // optional uint32 loser_team_id = 2;
  bool has_loser_team_id() const;
  void clear_loser_team_id();
  static const int kLoserTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 loser_team_id() const;
  void set_loser_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetTeamRankChange)
 private:
  void set_has_winner_team_id();
  void clear_has_winner_team_id();
  void set_has_loser_team_id();
  void clear_has_loser_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 winner_team_id_;
  ::google::protobuf::uint32 loser_team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetTeamRankChangeImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetTeamRankChangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetTeamRankChangeResponse) */ {
 public:
  CMsgGCToGCGetTeamRankChangeResponse();
  virtual ~CMsgGCToGCGetTeamRankChangeResponse();

  CMsgGCToGCGetTeamRankChangeResponse(const CMsgGCToGCGetTeamRankChangeResponse& from);

  inline CMsgGCToGCGetTeamRankChangeResponse& operator=(const CMsgGCToGCGetTeamRankChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetTeamRankChangeResponse(CMsgGCToGCGetTeamRankChangeResponse&& from) noexcept
    : CMsgGCToGCGetTeamRankChangeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetTeamRankChangeResponse& operator=(CMsgGCToGCGetTeamRankChangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetTeamRankChangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetTeamRankChangeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetTeamRankChangeResponse*>(
               &_CMsgGCToGCGetTeamRankChangeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    301;

  void Swap(CMsgGCToGCGetTeamRankChangeResponse* other);
  friend void swap(CMsgGCToGCGetTeamRankChangeResponse& a, CMsgGCToGCGetTeamRankChangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetTeamRankChangeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetTeamRankChangeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetTeamRankChangeResponse& from);
  void MergeFrom(const CMsgGCToGCGetTeamRankChangeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetTeamRankChangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank_change = 1;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 1;
  ::google::protobuf::uint32 rank_change() const;
  void set_rank_change(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetTeamRankChangeResponse)
 private:
  void set_has_rank_change();
  void clear_has_rank_change();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_change_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetTeamRankChangeResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetTeamRank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetTeamRank) */ {
 public:
  CMsgGCToGCGetTeamRank();
  virtual ~CMsgGCToGCGetTeamRank();

  CMsgGCToGCGetTeamRank(const CMsgGCToGCGetTeamRank& from);

  inline CMsgGCToGCGetTeamRank& operator=(const CMsgGCToGCGetTeamRank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetTeamRank(CMsgGCToGCGetTeamRank&& from) noexcept
    : CMsgGCToGCGetTeamRank() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetTeamRank& operator=(CMsgGCToGCGetTeamRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetTeamRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetTeamRank* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetTeamRank*>(
               &_CMsgGCToGCGetTeamRank_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    302;

  void Swap(CMsgGCToGCGetTeamRank* other);
  friend void swap(CMsgGCToGCGetTeamRank& a, CMsgGCToGCGetTeamRank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetTeamRank* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetTeamRank* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetTeamRank& from);
  void MergeFrom(const CMsgGCToGCGetTeamRank& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetTeamRank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 team_members = 2;
  int team_members_size() const;
  void clear_team_members();
  static const int kTeamMembersFieldNumber = 2;
  ::google::protobuf::uint32 team_members(int index) const;
  void set_team_members(int index, ::google::protobuf::uint32 value);
  void add_team_members(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      team_members() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_team_members();

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetTeamRank)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > team_members_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetTeamRankImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetTeamRankResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetTeamRankResponse) */ {
 public:
  CMsgGCToGCGetTeamRankResponse();
  virtual ~CMsgGCToGCGetTeamRankResponse();

  CMsgGCToGCGetTeamRankResponse(const CMsgGCToGCGetTeamRankResponse& from);

  inline CMsgGCToGCGetTeamRankResponse& operator=(const CMsgGCToGCGetTeamRankResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetTeamRankResponse(CMsgGCToGCGetTeamRankResponse&& from) noexcept
    : CMsgGCToGCGetTeamRankResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetTeamRankResponse& operator=(CMsgGCToGCGetTeamRankResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetTeamRankResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetTeamRankResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetTeamRankResponse*>(
               &_CMsgGCToGCGetTeamRankResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    303;

  void Swap(CMsgGCToGCGetTeamRankResponse* other);
  friend void swap(CMsgGCToGCGetTeamRankResponse& a, CMsgGCToGCGetTeamRankResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetTeamRankResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetTeamRankResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetTeamRankResponse& from);
  void MergeFrom(const CMsgGCToGCGetTeamRankResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetTeamRankResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool valid_team = 1;
  bool has_valid_team() const;
  void clear_valid_team();
  static const int kValidTeamFieldNumber = 1;
  bool valid_team() const;
  void set_valid_team(bool value);

  // optional uint32 rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 games_won = 3;
  bool has_games_won() const;
  void clear_games_won();
  static const int kGamesWonFieldNumber = 3;
  ::google::protobuf::uint32 games_won() const;
  void set_games_won(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetTeamRankResponse)
 private:
  void set_has_valid_team();
  void clear_has_valid_team();
  void set_has_rank();
  void clear_has_rank();
  void set_has_games_won();
  void clear_has_games_won();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool valid_team_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 games_won_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetTeamRankResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCUpdateTeamStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCUpdateTeamStats) */ {
 public:
  CMsgGCToGCUpdateTeamStats();
  virtual ~CMsgGCToGCUpdateTeamStats();

  CMsgGCToGCUpdateTeamStats(const CMsgGCToGCUpdateTeamStats& from);

  inline CMsgGCToGCUpdateTeamStats& operator=(const CMsgGCToGCUpdateTeamStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCUpdateTeamStats(CMsgGCToGCUpdateTeamStats&& from) noexcept
    : CMsgGCToGCUpdateTeamStats() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCUpdateTeamStats& operator=(CMsgGCToGCUpdateTeamStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCUpdateTeamStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCUpdateTeamStats* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCUpdateTeamStats*>(
               &_CMsgGCToGCUpdateTeamStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    304;

  void Swap(CMsgGCToGCUpdateTeamStats* other);
  friend void swap(CMsgGCToGCUpdateTeamStats& a, CMsgGCToGCUpdateTeamStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCUpdateTeamStats* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCUpdateTeamStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCUpdateTeamStats& from);
  void MergeFrom(const CMsgGCToGCUpdateTeamStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCUpdateTeamStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 radiant_team = 1;
  bool has_radiant_team() const;
  void clear_radiant_team();
  static const int kRadiantTeamFieldNumber = 1;
  ::google::protobuf::uint32 radiant_team() const;
  void set_radiant_team(::google::protobuf::uint32 value);

  // optional uint32 dire_team = 3;
  bool has_dire_team() const;
  void clear_dire_team();
  static const int kDireTeamFieldNumber = 3;
  ::google::protobuf::uint32 dire_team() const;
  void set_dire_team(::google::protobuf::uint32 value);

  // optional bool radiant_team_complete = 2;
  bool has_radiant_team_complete() const;
  void clear_radiant_team_complete();
  static const int kRadiantTeamCompleteFieldNumber = 2;
  bool radiant_team_complete() const;
  void set_radiant_team_complete(bool value);

  // optional bool dire_team_complete = 4;
  bool has_dire_team_complete() const;
  void clear_dire_team_complete();
  static const int kDireTeamCompleteFieldNumber = 4;
  bool dire_team_complete() const;
  void set_dire_team_complete(bool value);

  // optional bool radiant_team_won = 7;
  bool has_radiant_team_won() const;
  void clear_radiant_team_won();
  static const int kRadiantTeamWonFieldNumber = 7;
  bool radiant_team_won() const;
  void set_radiant_team_won(bool value);

  // optional uint32 lobby_type = 5;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 5;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional uint32 league_id = 6;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 6;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCUpdateTeamStats)
 private:
  void set_has_radiant_team();
  void clear_has_radiant_team();
  void set_has_radiant_team_complete();
  void clear_has_radiant_team_complete();
  void set_has_dire_team();
  void clear_has_dire_team();
  void set_has_dire_team_complete();
  void clear_has_dire_team_complete();
  void set_has_lobby_type();
  void clear_has_lobby_type();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_radiant_team_won();
  void clear_has_radiant_team_won();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 radiant_team_;
  ::google::protobuf::uint32 dire_team_;
  bool radiant_team_complete_;
  bool dire_team_complete_;
  bool radiant_team_won_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCUpdateTeamStatsImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteTeamGuess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteTeamGuess) */ {
 public:
  CMsgDOTAPassportVoteTeamGuess();
  virtual ~CMsgDOTAPassportVoteTeamGuess();

  CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from);

  inline CMsgDOTAPassportVoteTeamGuess& operator=(const CMsgDOTAPassportVoteTeamGuess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPassportVoteTeamGuess(CMsgDOTAPassportVoteTeamGuess&& from) noexcept
    : CMsgDOTAPassportVoteTeamGuess() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteTeamGuess& operator=(CMsgDOTAPassportVoteTeamGuess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPassportVoteTeamGuess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPassportVoteTeamGuess* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteTeamGuess*>(
               &_CMsgDOTAPassportVoteTeamGuess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    305;

  void Swap(CMsgDOTAPassportVoteTeamGuess* other);
  friend void swap(CMsgDOTAPassportVoteTeamGuess& a, CMsgDOTAPassportVoteTeamGuess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVoteTeamGuess* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPassportVoteTeamGuess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from);
  void MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPassportVoteTeamGuess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 winner_id = 2;
  bool has_winner_id() const;
  void clear_winner_id();
  static const int kWinnerIdFieldNumber = 2;
  ::google::protobuf::uint32 winner_id() const;
  void set_winner_id(::google::protobuf::uint32 value);

  // optional uint32 runnerup_id = 3;
  bool has_runnerup_id() const;
  void clear_runnerup_id();
  static const int kRunnerupIdFieldNumber = 3;
  ::google::protobuf::uint32 runnerup_id() const;
  void set_runnerup_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteTeamGuess)
 private:
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_winner_id();
  void clear_has_winner_id();
  void set_has_runnerup_id();
  void clear_has_runnerup_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 winner_id_;
  ::google::protobuf::uint32 runnerup_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPassportVoteTeamGuessImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteGenericSelection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteGenericSelection) */ {
 public:
  CMsgDOTAPassportVoteGenericSelection();
  virtual ~CMsgDOTAPassportVoteGenericSelection();

  CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from);

  inline CMsgDOTAPassportVoteGenericSelection& operator=(const CMsgDOTAPassportVoteGenericSelection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPassportVoteGenericSelection(CMsgDOTAPassportVoteGenericSelection&& from) noexcept
    : CMsgDOTAPassportVoteGenericSelection() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteGenericSelection& operator=(CMsgDOTAPassportVoteGenericSelection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPassportVoteGenericSelection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPassportVoteGenericSelection* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteGenericSelection*>(
               &_CMsgDOTAPassportVoteGenericSelection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    306;

  void Swap(CMsgDOTAPassportVoteGenericSelection* other);
  friend void swap(CMsgDOTAPassportVoteGenericSelection& a, CMsgDOTAPassportVoteGenericSelection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVoteGenericSelection* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPassportVoteGenericSelection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from);
  void MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPassportVoteGenericSelection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  bool has_selection_index() const;
  void clear_selection_index();
  static const int kSelectionIndexFieldNumber = 1;
  ::DOTA_2013PassportSelectionIndices selection_index() const;
  void set_selection_index(::DOTA_2013PassportSelectionIndices value);

  // optional uint32 selection = 2;
  bool has_selection() const;
  void clear_selection();
  static const int kSelectionFieldNumber = 2;
  ::google::protobuf::uint32 selection() const;
  void set_selection(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteGenericSelection)
 private:
  void set_has_selection_index();
  void clear_has_selection_index();
  void set_has_selection();
  void clear_has_selection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int selection_index_;
  ::google::protobuf::uint32 selection_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPassportVoteGenericSelectionImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPassportStampedPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportStampedPlayer) */ {
 public:
  CMsgDOTAPassportStampedPlayer();
  virtual ~CMsgDOTAPassportStampedPlayer();

  CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from);

  inline CMsgDOTAPassportStampedPlayer& operator=(const CMsgDOTAPassportStampedPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPassportStampedPlayer(CMsgDOTAPassportStampedPlayer&& from) noexcept
    : CMsgDOTAPassportStampedPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportStampedPlayer& operator=(CMsgDOTAPassportStampedPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPassportStampedPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPassportStampedPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportStampedPlayer*>(
               &_CMsgDOTAPassportStampedPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    307;

  void Swap(CMsgDOTAPassportStampedPlayer* other);
  friend void swap(CMsgDOTAPassportStampedPlayer& a, CMsgDOTAPassportStampedPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportStampedPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPassportStampedPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPassportStampedPlayer& from);
  void MergeFrom(const CMsgDOTAPassportStampedPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPassportStampedPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 stamp_level = 2;
  bool has_stamp_level() const;
  void clear_stamp_level();
  static const int kStampLevelFieldNumber = 2;
  ::google::protobuf::uint32 stamp_level() const;
  void set_stamp_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportStampedPlayer)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();
  void set_has_stamp_level();
  void clear_has_stamp_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 stamp_level_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPassportStampedPlayerImpl();
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVote) */ {
 public:
  CMsgDOTAPassportVote();
  virtual ~CMsgDOTAPassportVote();

  CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from);

  inline CMsgDOTAPassportVote& operator=(const CMsgDOTAPassportVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTAPassportVote(CMsgDOTAPassportVote&& from) noexcept
    : CMsgDOTAPassportVote() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVote& operator=(CMsgDOTAPassportVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPassportVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTAPassportVote* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVote*>(
               &_CMsgDOTAPassportVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    308;

  void Swap(CMsgDOTAPassportVote* other);
  friend void swap(CMsgDOTAPassportVote& a, CMsgDOTAPassportVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVote* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAPassportVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAPassportVote& from);
  void MergeFrom(const CMsgDOTAPassportVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAPassportVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  int team_votes_size() const;
  void clear_team_votes();
  static const int kTeamVotesFieldNumber = 1;
  const ::CMsgDOTAPassportVoteTeamGuess& team_votes(int index) const;
  ::CMsgDOTAPassportVoteTeamGuess* mutable_team_votes(int index);
  ::CMsgDOTAPassportVoteTeamGuess* add_team_votes();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
      mutable_team_votes();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
      team_votes() const;

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  int generic_selections_size() const;
  void clear_generic_selections();
  static const int kGenericSelectionsFieldNumber = 2;
  const ::CMsgDOTAPassportVoteGenericSelection& generic_selections(int index) const;
  ::CMsgDOTAPassportVoteGenericSelection* mutable_generic_selections(int index);
  ::CMsgDOTAPassportVoteGenericSelection* add_generic_selections();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
      mutable_generic_selections();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
      generic_selections() const;

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  int stamped_players_size() const;
  void clear_stamped_players();
  static const int kStampedPlayersFieldNumber = 3;
  const ::CMsgDOTAPassportStampedPlayer& stamped_players(int index) const;
  ::CMsgDOTAPassportStampedPlayer* mutable_stamped_players(int index);
  ::CMsgDOTAPassportStampedPlayer* add_stamped_players();
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
      mutable_stamped_players();
  const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
      stamped_players() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess > team_votes_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection > generic_selections_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer > stamped_players_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTAPassportVoteImpl();
};
// -------------------------------------------------------------------

class CMsgPassportDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPassportDataRequest) */ {
 public:
  CMsgPassportDataRequest();
  virtual ~CMsgPassportDataRequest();

  CMsgPassportDataRequest(const CMsgPassportDataRequest& from);

  inline CMsgPassportDataRequest& operator=(const CMsgPassportDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPassportDataRequest(CMsgPassportDataRequest&& from) noexcept
    : CMsgPassportDataRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPassportDataRequest& operator=(CMsgPassportDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPassportDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPassportDataRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPassportDataRequest*>(
               &_CMsgPassportDataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    309;

  void Swap(CMsgPassportDataRequest* other);
  friend void swap(CMsgPassportDataRequest& a, CMsgPassportDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPassportDataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPassportDataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPassportDataRequest& from);
  void MergeFrom(const CMsgPassportDataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPassportDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPassportDataRequest)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPassportDataRequestImpl();
};
// -------------------------------------------------------------------

class CMsgPassportDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPassportDataResponse) */ {
 public:
  CMsgPassportDataResponse();
  virtual ~CMsgPassportDataResponse();

  CMsgPassportDataResponse(const CMsgPassportDataResponse& from);

  inline CMsgPassportDataResponse& operator=(const CMsgPassportDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPassportDataResponse(CMsgPassportDataResponse&& from) noexcept
    : CMsgPassportDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPassportDataResponse& operator=(CMsgPassportDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPassportDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPassportDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPassportDataResponse*>(
               &_CMsgPassportDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    310;

  void Swap(CMsgPassportDataResponse* other);
  friend void swap(CMsgPassportDataResponse& a, CMsgPassportDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPassportDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPassportDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPassportDataResponse& from);
  void MergeFrom(const CMsgPassportDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPassportDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgDOTATournament east_qualifiers = 3;
  bool has_east_qualifiers() const;
  void clear_east_qualifiers();
  static const int kEastQualifiersFieldNumber = 3;
  const ::CMsgDOTATournament& east_qualifiers() const;
  ::CMsgDOTATournament* release_east_qualifiers();
  ::CMsgDOTATournament* mutable_east_qualifiers();
  void set_allocated_east_qualifiers(::CMsgDOTATournament* east_qualifiers);

  // optional .CMsgDOTATournament west_qualifiers = 4;
  bool has_west_qualifiers() const;
  void clear_west_qualifiers();
  static const int kWestQualifiersFieldNumber = 4;
  const ::CMsgDOTATournament& west_qualifiers() const;
  ::CMsgDOTATournament* release_west_qualifiers();
  ::CMsgDOTATournament* mutable_west_qualifiers();
  void set_allocated_west_qualifiers(::CMsgDOTATournament* west_qualifiers);

  // optional .CMsgDOTATournament international = 5;
  bool has_international() const;
  void clear_international();
  static const int kInternationalFieldNumber = 5;
  const ::CMsgDOTATournament& international() const;
  ::CMsgDOTATournament* release_international();
  ::CMsgDOTATournament* mutable_international();
  void set_allocated_international(::CMsgDOTATournament* international);

  // optional .CMsgDOTAPassportVote league_guesses = 6;
  bool has_league_guesses() const;
  void clear_league_guesses();
  static const int kLeagueGuessesFieldNumber = 6;
  const ::CMsgDOTAPassportVote& league_guesses() const;
  ::CMsgDOTAPassportVote* release_league_guesses();
  ::CMsgDOTAPassportVote* mutable_league_guesses();
  void set_allocated_league_guesses(::CMsgDOTAPassportVote* league_guesses);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 east_qualifiers_predict_end_time = 7;
  bool has_east_qualifiers_predict_end_time() const;
  void clear_east_qualifiers_predict_end_time();
  static const int kEastQualifiersPredictEndTimeFieldNumber = 7;
  ::google::protobuf::uint32 east_qualifiers_predict_end_time() const;
  void set_east_qualifiers_predict_end_time(::google::protobuf::uint32 value);

  // optional uint32 west_qualifiers_predict_end_time = 8;
  bool has_west_qualifiers_predict_end_time() const;
  void clear_west_qualifiers_predict_end_time();
  static const int kWestQualifiersPredictEndTimeFieldNumber = 8;
  ::google::protobuf::uint32 west_qualifiers_predict_end_time() const;
  void set_west_qualifiers_predict_end_time(::google::protobuf::uint32 value);

  // optional uint32 allstar_match_end_time = 9;
  bool has_allstar_match_end_time() const;
  void clear_allstar_match_end_time();
  static const int kAllstarMatchEndTimeFieldNumber = 9;
  ::google::protobuf::uint32 allstar_match_end_time() const;
  void set_allstar_match_end_time(::google::protobuf::uint32 value);

  // optional uint32 east_qualifiers_winner_team_id = 10;
  bool has_east_qualifiers_winner_team_id() const;
  void clear_east_qualifiers_winner_team_id();
  static const int kEastQualifiersWinnerTeamIdFieldNumber = 10;
  ::google::protobuf::uint32 east_qualifiers_winner_team_id() const;
  void set_east_qualifiers_winner_team_id(::google::protobuf::uint32 value);

  // optional uint32 east_qualifiers_runner_up_team_id = 11;
  bool has_east_qualifiers_runner_up_team_id() const;
  void clear_east_qualifiers_runner_up_team_id();
  static const int kEastQualifiersRunnerUpTeamIdFieldNumber = 11;
  ::google::protobuf::uint32 east_qualifiers_runner_up_team_id() const;
  void set_east_qualifiers_runner_up_team_id(::google::protobuf::uint32 value);

  // optional uint32 west_qualifiers_winner_team_id = 12;
  bool has_west_qualifiers_winner_team_id() const;
  void clear_west_qualifiers_winner_team_id();
  static const int kWestQualifiersWinnerTeamIdFieldNumber = 12;
  ::google::protobuf::uint32 west_qualifiers_winner_team_id() const;
  void set_west_qualifiers_winner_team_id(::google::protobuf::uint32 value);

  // optional uint32 west_qualifiers_runner_up_team_id = 13;
  bool has_west_qualifiers_runner_up_team_id() const;
  void clear_west_qualifiers_runner_up_team_id();
  static const int kWestQualifiersRunnerUpTeamIdFieldNumber = 13;
  ::google::protobuf::uint32 west_qualifiers_runner_up_team_id() const;
  void set_west_qualifiers_runner_up_team_id(::google::protobuf::uint32 value);

  // optional uint32 passports_bought = 14;
  bool has_passports_bought() const;
  void clear_passports_bought();
  static const int kPassportsBoughtFieldNumber = 14;
  ::google::protobuf::uint32 passports_bought() const;
  void set_passports_bought(::google::protobuf::uint32 value);

  // optional uint32 original_purchaser_id = 15;
  bool has_original_purchaser_id() const;
  void clear_original_purchaser_id();
  static const int kOriginalPurchaserIdFieldNumber = 15;
  ::google::protobuf::uint32 original_purchaser_id() const;
  void set_original_purchaser_id(::google::protobuf::uint32 value);

  // optional uint32 result = 2 [default = 2];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPassportDataResponse)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_result();
  void clear_has_result();
  void set_has_east_qualifiers();
  void clear_has_east_qualifiers();
  void set_has_west_qualifiers();
  void clear_has_west_qualifiers();
  void set_has_international();
  void clear_has_international();
  void set_has_east_qualifiers_predict_end_time();
  void clear_has_east_qualifiers_predict_end_time();
  void set_has_west_qualifiers_predict_end_time();
  void clear_has_west_qualifiers_predict_end_time();
  void set_has_allstar_match_end_time();
  void clear_has_allstar_match_end_time();
  void set_has_league_guesses();
  void clear_has_league_guesses();
  void set_has_east_qualifiers_winner_team_id();
  void clear_has_east_qualifiers_winner_team_id();
  void set_has_east_qualifiers_runner_up_team_id();
  void clear_has_east_qualifiers_runner_up_team_id();
  void set_has_west_qualifiers_winner_team_id();
  void clear_has_west_qualifiers_winner_team_id();
  void set_has_west_qualifiers_runner_up_team_id();
  void clear_has_west_qualifiers_runner_up_team_id();
  void set_has_passports_bought();
  void clear_has_passports_bought();
  void set_has_original_purchaser_id();
  void clear_has_original_purchaser_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CMsgDOTATournament* east_qualifiers_;
  ::CMsgDOTATournament* west_qualifiers_;
  ::CMsgDOTATournament* international_;
  ::CMsgDOTAPassportVote* league_guesses_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 east_qualifiers_predict_end_time_;
  ::google::protobuf::uint32 west_qualifiers_predict_end_time_;
  ::google::protobuf::uint32 allstar_match_end_time_;
  ::google::protobuf::uint32 east_qualifiers_winner_team_id_;
  ::google::protobuf::uint32 east_qualifiers_runner_up_team_id_;
  ::google::protobuf::uint32 west_qualifiers_winner_team_id_;
  ::google::protobuf::uint32 west_qualifiers_runner_up_team_id_;
  ::google::protobuf::uint32 passports_bought_;
  ::google::protobuf::uint32 original_purchaser_id_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPassportDataResponseImpl();
};
// -------------------------------------------------------------------

class CMsgPassportFeaturedMatchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPassportFeaturedMatchRequest) */ {
 public:
  CMsgPassportFeaturedMatchRequest();
  virtual ~CMsgPassportFeaturedMatchRequest();

  CMsgPassportFeaturedMatchRequest(const CMsgPassportFeaturedMatchRequest& from);

  inline CMsgPassportFeaturedMatchRequest& operator=(const CMsgPassportFeaturedMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPassportFeaturedMatchRequest(CMsgPassportFeaturedMatchRequest&& from) noexcept
    : CMsgPassportFeaturedMatchRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPassportFeaturedMatchRequest& operator=(CMsgPassportFeaturedMatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPassportFeaturedMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPassportFeaturedMatchRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPassportFeaturedMatchRequest*>(
               &_CMsgPassportFeaturedMatchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    311;

  void Swap(CMsgPassportFeaturedMatchRequest* other);
  friend void swap(CMsgPassportFeaturedMatchRequest& a, CMsgPassportFeaturedMatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPassportFeaturedMatchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPassportFeaturedMatchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPassportFeaturedMatchRequest& from);
  void MergeFrom(const CMsgPassportFeaturedMatchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPassportFeaturedMatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPassportFeaturedMatchRequest)
 private:
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPassportFeaturedMatchRequestImpl();
};
// -------------------------------------------------------------------

class CMsgPassportFeaturedMatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgPassportFeaturedMatchResponse) */ {
 public:
  CMsgPassportFeaturedMatchResponse();
  virtual ~CMsgPassportFeaturedMatchResponse();

  CMsgPassportFeaturedMatchResponse(const CMsgPassportFeaturedMatchResponse& from);

  inline CMsgPassportFeaturedMatchResponse& operator=(const CMsgPassportFeaturedMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPassportFeaturedMatchResponse(CMsgPassportFeaturedMatchResponse&& from) noexcept
    : CMsgPassportFeaturedMatchResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPassportFeaturedMatchResponse& operator=(CMsgPassportFeaturedMatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPassportFeaturedMatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPassportFeaturedMatchResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPassportFeaturedMatchResponse*>(
               &_CMsgPassportFeaturedMatchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    312;

  void Swap(CMsgPassportFeaturedMatchResponse* other);
  friend void swap(CMsgPassportFeaturedMatchResponse& a, CMsgPassportFeaturedMatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPassportFeaturedMatchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPassportFeaturedMatchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPassportFeaturedMatchResponse& from);
  void MergeFrom(const CMsgPassportFeaturedMatchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPassportFeaturedMatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 radiant_heroes = 7;
  int radiant_heroes_size() const;
  void clear_radiant_heroes();
  static const int kRadiantHeroesFieldNumber = 7;
  ::google::protobuf::uint32 radiant_heroes(int index) const;
  void set_radiant_heroes(int index, ::google::protobuf::uint32 value);
  void add_radiant_heroes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      radiant_heroes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_radiant_heroes();

  // repeated uint32 dire_heroes = 11;
  int dire_heroes_size() const;
  void clear_dire_heroes();
  static const int kDireHeroesFieldNumber = 11;
  ::google::protobuf::uint32 dire_heroes(int index) const;
  void set_dire_heroes(int index, ::google::protobuf::uint32 value);
  void add_dire_heroes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dire_heroes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dire_heroes();

  // optional string radiant_team_name = 6;
  bool has_radiant_team_name() const;
  void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 6;
  const ::std::string& radiant_team_name() const;
  void set_radiant_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_name(::std::string&& value);
  #endif
  void set_radiant_team_name(const char* value);
  void set_radiant_team_name(const char* value, size_t size);
  ::std::string* mutable_radiant_team_name();
  ::std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 10;
  bool has_dire_team_name() const;
  void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 10;
  const ::std::string& dire_team_name() const;
  void set_dire_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_name(::std::string&& value);
  #endif
  void set_dire_team_name(const char* value);
  void set_dire_team_name(const char* value, size_t size);
  ::std::string* mutable_dire_team_name();
  ::std::string* release_dire_team_name();
  void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 featured_match_id = 3;
  bool has_featured_match_id() const;
  void clear_featured_match_id();
  static const int kFeaturedMatchIdFieldNumber = 3;
  ::google::protobuf::uint32 featured_match_id() const;
  void set_featured_match_id(::google::protobuf::uint32 value);

  // optional uint64 radiant_team_logo = 5;
  bool has_radiant_team_logo() const;
  void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 5;
  ::google::protobuf::uint64 radiant_team_logo() const;
  void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint32 radiant_team_id = 4;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 4;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional uint32 dire_team_id = 8;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 8;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint64 dire_team_logo = 9;
  bool has_dire_team_logo() const;
  void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 9;
  ::google::protobuf::uint64 dire_team_logo() const;
  void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional bool has_passport = 12;
  bool has_has_passport() const;
  void clear_has_passport();
  static const int kHasPassportFieldNumber = 12;
  bool has_passport() const;
  void set_has_passport(bool value);

  // optional uint32 result = 1 [default = 2];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPassportFeaturedMatchResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_featured_match_id();
  void clear_has_featured_match_id();
  void set_has_radiant_team_id();
  void clear_has_radiant_team_id();
  void set_has_radiant_team_logo();
  void clear_has_radiant_team_logo();
  void set_has_radiant_team_name();
  void clear_has_radiant_team_name();
  void set_has_dire_team_id();
  void clear_has_dire_team_id();
  void set_has_dire_team_logo();
  void clear_has_dire_team_logo();
  void set_has_dire_team_name();
  void clear_has_dire_team_name();
  void set_has_has_passport();
  void clear_has_has_passport();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > radiant_heroes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dire_heroes_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_name_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_name_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 featured_match_id_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint64 dire_team_logo_;
  bool has_passport_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgPassportFeaturedMatchResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetLeagueAdmin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetLeagueAdmin) */ {
 public:
  CMsgGCToGCGetLeagueAdmin();
  virtual ~CMsgGCToGCGetLeagueAdmin();

  CMsgGCToGCGetLeagueAdmin(const CMsgGCToGCGetLeagueAdmin& from);

  inline CMsgGCToGCGetLeagueAdmin& operator=(const CMsgGCToGCGetLeagueAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetLeagueAdmin(CMsgGCToGCGetLeagueAdmin&& from) noexcept
    : CMsgGCToGCGetLeagueAdmin() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetLeagueAdmin& operator=(CMsgGCToGCGetLeagueAdmin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetLeagueAdmin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetLeagueAdmin* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetLeagueAdmin*>(
               &_CMsgGCToGCGetLeagueAdmin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    313;

  void Swap(CMsgGCToGCGetLeagueAdmin* other);
  friend void swap(CMsgGCToGCGetLeagueAdmin& a, CMsgGCToGCGetLeagueAdmin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetLeagueAdmin* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetLeagueAdmin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetLeagueAdmin& from);
  void MergeFrom(const CMsgGCToGCGetLeagueAdmin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetLeagueAdmin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetLeagueAdmin)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetLeagueAdminImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCGetLeagueAdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCGetLeagueAdminResponse) */ {
 public:
  CMsgGCToGCGetLeagueAdminResponse();
  virtual ~CMsgGCToGCGetLeagueAdminResponse();

  CMsgGCToGCGetLeagueAdminResponse(const CMsgGCToGCGetLeagueAdminResponse& from);

  inline CMsgGCToGCGetLeagueAdminResponse& operator=(const CMsgGCToGCGetLeagueAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCGetLeagueAdminResponse(CMsgGCToGCGetLeagueAdminResponse&& from) noexcept
    : CMsgGCToGCGetLeagueAdminResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCGetLeagueAdminResponse& operator=(CMsgGCToGCGetLeagueAdminResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCGetLeagueAdminResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCGetLeagueAdminResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCGetLeagueAdminResponse*>(
               &_CMsgGCToGCGetLeagueAdminResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    314;

  void Swap(CMsgGCToGCGetLeagueAdminResponse* other);
  friend void swap(CMsgGCToGCGetLeagueAdminResponse& a, CMsgGCToGCGetLeagueAdminResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCGetLeagueAdminResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCGetLeagueAdminResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCGetLeagueAdminResponse& from);
  void MergeFrom(const CMsgGCToGCGetLeagueAdminResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCGetLeagueAdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_admin_access = 1;
  bool has_has_admin_access() const;
  void clear_has_admin_access();
  static const int kHasAdminAccessFieldNumber = 1;
  bool has_admin_access() const;
  void set_has_admin_access(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCGetLeagueAdminResponse)
 private:
  void set_has_has_admin_access();
  void clear_has_has_admin_access();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool has_admin_access_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCGetLeagueAdminResponseImpl();
};
// -------------------------------------------------------------------

class CMsgRequestLeaguePrizePool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRequestLeaguePrizePool) */ {
 public:
  CMsgRequestLeaguePrizePool();
  virtual ~CMsgRequestLeaguePrizePool();

  CMsgRequestLeaguePrizePool(const CMsgRequestLeaguePrizePool& from);

  inline CMsgRequestLeaguePrizePool& operator=(const CMsgRequestLeaguePrizePool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRequestLeaguePrizePool(CMsgRequestLeaguePrizePool&& from) noexcept
    : CMsgRequestLeaguePrizePool() {
    *this = ::std::move(from);
  }

  inline CMsgRequestLeaguePrizePool& operator=(CMsgRequestLeaguePrizePool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestLeaguePrizePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRequestLeaguePrizePool* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestLeaguePrizePool*>(
               &_CMsgRequestLeaguePrizePool_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    315;

  void Swap(CMsgRequestLeaguePrizePool* other);
  friend void swap(CMsgRequestLeaguePrizePool& a, CMsgRequestLeaguePrizePool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRequestLeaguePrizePool* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRequestLeaguePrizePool* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRequestLeaguePrizePool& from);
  void MergeFrom(const CMsgRequestLeaguePrizePool& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRequestLeaguePrizePool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgRequestLeaguePrizePool)
 private:
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRequestLeaguePrizePoolImpl();
};
// -------------------------------------------------------------------

class CMsgRequestLeaguePrizePoolResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgRequestLeaguePrizePoolResponse) */ {
 public:
  CMsgRequestLeaguePrizePoolResponse();
  virtual ~CMsgRequestLeaguePrizePoolResponse();

  CMsgRequestLeaguePrizePoolResponse(const CMsgRequestLeaguePrizePoolResponse& from);

  inline CMsgRequestLeaguePrizePoolResponse& operator=(const CMsgRequestLeaguePrizePoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRequestLeaguePrizePoolResponse(CMsgRequestLeaguePrizePoolResponse&& from) noexcept
    : CMsgRequestLeaguePrizePoolResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRequestLeaguePrizePoolResponse& operator=(CMsgRequestLeaguePrizePoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestLeaguePrizePoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRequestLeaguePrizePoolResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestLeaguePrizePoolResponse*>(
               &_CMsgRequestLeaguePrizePoolResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    316;

  void Swap(CMsgRequestLeaguePrizePoolResponse* other);
  friend void swap(CMsgRequestLeaguePrizePoolResponse& a, CMsgRequestLeaguePrizePoolResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRequestLeaguePrizePoolResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgRequestLeaguePrizePoolResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgRequestLeaguePrizePoolResponse& from);
  void MergeFrom(const CMsgRequestLeaguePrizePoolResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgRequestLeaguePrizePoolResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 prize_pool = 2;
  bool has_prize_pool() const;
  void clear_prize_pool();
  static const int kPrizePoolFieldNumber = 2;
  ::google::protobuf::uint32 prize_pool() const;
  void set_prize_pool(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgRequestLeaguePrizePoolResponse)
 private:
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_prize_pool();
  void clear_has_prize_pool();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 prize_pool_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgRequestLeaguePrizePoolResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCToGCUpdateMatchmakingStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCUpdateMatchmakingStats) */ {
 public:
  CMsgGCToGCUpdateMatchmakingStats();
  virtual ~CMsgGCToGCUpdateMatchmakingStats();

  CMsgGCToGCUpdateMatchmakingStats(const CMsgGCToGCUpdateMatchmakingStats& from);

  inline CMsgGCToGCUpdateMatchmakingStats& operator=(const CMsgGCToGCUpdateMatchmakingStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToGCUpdateMatchmakingStats(CMsgGCToGCUpdateMatchmakingStats&& from) noexcept
    : CMsgGCToGCUpdateMatchmakingStats() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCUpdateMatchmakingStats& operator=(CMsgGCToGCUpdateMatchmakingStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCUpdateMatchmakingStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToGCUpdateMatchmakingStats* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCUpdateMatchmakingStats*>(
               &_CMsgGCToGCUpdateMatchmakingStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    317;

  void Swap(CMsgGCToGCUpdateMatchmakingStats* other);
  friend void swap(CMsgGCToGCUpdateMatchmakingStats& a, CMsgGCToGCUpdateMatchmakingStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCUpdateMatchmakingStats* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToGCUpdateMatchmakingStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToGCUpdateMatchmakingStats& from);
  void MergeFrom(const CMsgGCToGCUpdateMatchmakingStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToGCUpdateMatchmakingStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes msg_body = 1;
  bool has_msg_body() const;
  void clear_msg_body();
  static const int kMsgBodyFieldNumber = 1;
  const ::std::string& msg_body() const;
  void set_msg_body(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_body(::std::string&& value);
  #endif
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  ::std::string* mutable_msg_body();
  ::std::string* release_msg_body();
  void set_allocated_msg_body(::std::string* msg_body);

  // @@protoc_insertion_point(class_scope:CMsgGCToGCUpdateMatchmakingStats)
 private:
  void set_has_msg_body();
  void clear_has_msg_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_body_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCToGCUpdateMatchmakingStatsImpl();
};
// -------------------------------------------------------------------

class CMsgGCGetHeroStandings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetHeroStandings) */ {
 public:
  CMsgGCGetHeroStandings();
  virtual ~CMsgGCGetHeroStandings();

  CMsgGCGetHeroStandings(const CMsgGCGetHeroStandings& from);

  inline CMsgGCGetHeroStandings& operator=(const CMsgGCGetHeroStandings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetHeroStandings(CMsgGCGetHeroStandings&& from) noexcept
    : CMsgGCGetHeroStandings() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetHeroStandings& operator=(CMsgGCGetHeroStandings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetHeroStandings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetHeroStandings* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetHeroStandings*>(
               &_CMsgGCGetHeroStandings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    318;

  void Swap(CMsgGCGetHeroStandings* other);
  friend void swap(CMsgGCGetHeroStandings& a, CMsgGCGetHeroStandings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetHeroStandings* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCGetHeroStandings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCGetHeroStandings& from);
  void MergeFrom(const CMsgGCGetHeroStandings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCGetHeroStandings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCGetHeroStandings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCGetHeroStandingsImpl();
};
// -------------------------------------------------------------------

class CMsgGCGetHeroStandingsResponse_Hero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetHeroStandingsResponse.Hero) */ {
 public:
  CMsgGCGetHeroStandingsResponse_Hero();
  virtual ~CMsgGCGetHeroStandingsResponse_Hero();

  CMsgGCGetHeroStandingsResponse_Hero(const CMsgGCGetHeroStandingsResponse_Hero& from);

  inline CMsgGCGetHeroStandingsResponse_Hero& operator=(const CMsgGCGetHeroStandingsResponse_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetHeroStandingsResponse_Hero(CMsgGCGetHeroStandingsResponse_Hero&& from) noexcept
    : CMsgGCGetHeroStandingsResponse_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetHeroStandingsResponse_Hero& operator=(CMsgGCGetHeroStandingsResponse_Hero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetHeroStandingsResponse_Hero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetHeroStandingsResponse_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetHeroStandingsResponse_Hero*>(
               &_CMsgGCGetHeroStandingsResponse_Hero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    319;

  void Swap(CMsgGCGetHeroStandingsResponse_Hero* other);
  friend void swap(CMsgGCGetHeroStandingsResponse_Hero& a, CMsgGCGetHeroStandingsResponse_Hero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetHeroStandingsResponse_Hero* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCGetHeroStandingsResponse_Hero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCGetHeroStandingsResponse_Hero& from);
  void MergeFrom(const CMsgGCGetHeroStandingsResponse_Hero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCGetHeroStandingsResponse_Hero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 2;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 2;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 3;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 3;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCGetHeroStandingsResponse.Hero)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_wins();
  void clear_has_wins();
  void set_has_losses();
  void clear_has_losses();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCGetHeroStandingsResponse_HeroImpl();
};
// -------------------------------------------------------------------

class CMsgGCGetHeroStandingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetHeroStandingsResponse) */ {
 public:
  CMsgGCGetHeroStandingsResponse();
  virtual ~CMsgGCGetHeroStandingsResponse();

  CMsgGCGetHeroStandingsResponse(const CMsgGCGetHeroStandingsResponse& from);

  inline CMsgGCGetHeroStandingsResponse& operator=(const CMsgGCGetHeroStandingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCGetHeroStandingsResponse(CMsgGCGetHeroStandingsResponse&& from) noexcept
    : CMsgGCGetHeroStandingsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetHeroStandingsResponse& operator=(CMsgGCGetHeroStandingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCGetHeroStandingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCGetHeroStandingsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetHeroStandingsResponse*>(
               &_CMsgGCGetHeroStandingsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    320;

  void Swap(CMsgGCGetHeroStandingsResponse* other);
  friend void swap(CMsgGCGetHeroStandingsResponse& a, CMsgGCGetHeroStandingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCGetHeroStandingsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCGetHeroStandingsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCGetHeroStandingsResponse& from);
  void MergeFrom(const CMsgGCGetHeroStandingsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCGetHeroStandingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgGCGetHeroStandingsResponse_Hero Hero;

  // accessors -------------------------------------------------------

  // repeated .CMsgGCGetHeroStandingsResponse.Hero standings = 1;
  int standings_size() const;
  void clear_standings();
  static const int kStandingsFieldNumber = 1;
  const ::CMsgGCGetHeroStandingsResponse_Hero& standings(int index) const;
  ::CMsgGCGetHeroStandingsResponse_Hero* mutable_standings(int index);
  ::CMsgGCGetHeroStandingsResponse_Hero* add_standings();
  ::google::protobuf::RepeatedPtrField< ::CMsgGCGetHeroStandingsResponse_Hero >*
      mutable_standings();
  const ::google::protobuf::RepeatedPtrField< ::CMsgGCGetHeroStandingsResponse_Hero >&
      standings() const;

  // @@protoc_insertion_point(class_scope:CMsgGCGetHeroStandingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCGetHeroStandingsResponse_Hero > standings_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCGetHeroStandingsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReservationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReservationsRequest) */ {
 public:
  CMsgGCItemEditorReservationsRequest();
  virtual ~CMsgGCItemEditorReservationsRequest();

  CMsgGCItemEditorReservationsRequest(const CMsgGCItemEditorReservationsRequest& from);

  inline CMsgGCItemEditorReservationsRequest& operator=(const CMsgGCItemEditorReservationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReservationsRequest(CMsgGCItemEditorReservationsRequest&& from) noexcept
    : CMsgGCItemEditorReservationsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReservationsRequest& operator=(CMsgGCItemEditorReservationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReservationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReservationsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReservationsRequest*>(
               &_CMsgGCItemEditorReservationsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    321;

  void Swap(CMsgGCItemEditorReservationsRequest* other);
  friend void swap(CMsgGCItemEditorReservationsRequest& a, CMsgGCItemEditorReservationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReservationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReservationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReservationsRequest& from);
  void MergeFrom(const CMsgGCItemEditorReservationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReservationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReservationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReservationsRequestImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReservation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReservation) */ {
 public:
  CMsgGCItemEditorReservation();
  virtual ~CMsgGCItemEditorReservation();

  CMsgGCItemEditorReservation(const CMsgGCItemEditorReservation& from);

  inline CMsgGCItemEditorReservation& operator=(const CMsgGCItemEditorReservation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReservation(CMsgGCItemEditorReservation&& from) noexcept
    : CMsgGCItemEditorReservation() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReservation& operator=(CMsgGCItemEditorReservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReservation* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReservation*>(
               &_CMsgGCItemEditorReservation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    322;

  void Swap(CMsgGCItemEditorReservation* other);
  friend void swap(CMsgGCItemEditorReservation& a, CMsgGCItemEditorReservation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReservation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReservation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReservation& from);
  void MergeFrom(const CMsgGCItemEditorReservation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReservation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReservation)
 private:
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 def_index_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReservationImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReservationsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReservationsResponse) */ {
 public:
  CMsgGCItemEditorReservationsResponse();
  virtual ~CMsgGCItemEditorReservationsResponse();

  CMsgGCItemEditorReservationsResponse(const CMsgGCItemEditorReservationsResponse& from);

  inline CMsgGCItemEditorReservationsResponse& operator=(const CMsgGCItemEditorReservationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReservationsResponse(CMsgGCItemEditorReservationsResponse&& from) noexcept
    : CMsgGCItemEditorReservationsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReservationsResponse& operator=(CMsgGCItemEditorReservationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReservationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReservationsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReservationsResponse*>(
               &_CMsgGCItemEditorReservationsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    323;

  void Swap(CMsgGCItemEditorReservationsResponse* other);
  friend void swap(CMsgGCItemEditorReservationsResponse& a, CMsgGCItemEditorReservationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReservationsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReservationsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReservationsResponse& from);
  void MergeFrom(const CMsgGCItemEditorReservationsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReservationsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgGCItemEditorReservation reservations = 1;
  int reservations_size() const;
  void clear_reservations();
  static const int kReservationsFieldNumber = 1;
  const ::CMsgGCItemEditorReservation& reservations(int index) const;
  ::CMsgGCItemEditorReservation* mutable_reservations(int index);
  ::CMsgGCItemEditorReservation* add_reservations();
  ::google::protobuf::RepeatedPtrField< ::CMsgGCItemEditorReservation >*
      mutable_reservations();
  const ::google::protobuf::RepeatedPtrField< ::CMsgGCItemEditorReservation >&
      reservations() const;

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReservationsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCItemEditorReservation > reservations_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReservationsResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReserveItemDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReserveItemDef) */ {
 public:
  CMsgGCItemEditorReserveItemDef();
  virtual ~CMsgGCItemEditorReserveItemDef();

  CMsgGCItemEditorReserveItemDef(const CMsgGCItemEditorReserveItemDef& from);

  inline CMsgGCItemEditorReserveItemDef& operator=(const CMsgGCItemEditorReserveItemDef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReserveItemDef(CMsgGCItemEditorReserveItemDef&& from) noexcept
    : CMsgGCItemEditorReserveItemDef() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReserveItemDef& operator=(CMsgGCItemEditorReserveItemDef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReserveItemDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReserveItemDef* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReserveItemDef*>(
               &_CMsgGCItemEditorReserveItemDef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    324;

  void Swap(CMsgGCItemEditorReserveItemDef* other);
  friend void swap(CMsgGCItemEditorReserveItemDef& a, CMsgGCItemEditorReserveItemDef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReserveItemDef* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReserveItemDef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReserveItemDef& from);
  void MergeFrom(const CMsgGCItemEditorReserveItemDef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReserveItemDef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReserveItemDef)
 private:
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint32 def_index_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReserveItemDefImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReserveItemDefResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReserveItemDefResponse) */ {
 public:
  CMsgGCItemEditorReserveItemDefResponse();
  virtual ~CMsgGCItemEditorReserveItemDefResponse();

  CMsgGCItemEditorReserveItemDefResponse(const CMsgGCItemEditorReserveItemDefResponse& from);

  inline CMsgGCItemEditorReserveItemDefResponse& operator=(const CMsgGCItemEditorReserveItemDefResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReserveItemDefResponse(CMsgGCItemEditorReserveItemDefResponse&& from) noexcept
    : CMsgGCItemEditorReserveItemDefResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReserveItemDefResponse& operator=(CMsgGCItemEditorReserveItemDefResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReserveItemDefResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReserveItemDefResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReserveItemDefResponse*>(
               &_CMsgGCItemEditorReserveItemDefResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    325;

  void Swap(CMsgGCItemEditorReserveItemDefResponse* other);
  friend void swap(CMsgGCItemEditorReserveItemDefResponse& a, CMsgGCItemEditorReserveItemDefResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReserveItemDefResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReserveItemDefResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReserveItemDefResponse& from);
  void MergeFrom(const CMsgGCItemEditorReserveItemDefResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReserveItemDefResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReserveItemDefResponse)
 private:
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_username();
  void clear_has_username();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint32 def_index_;
  ::google::protobuf::uint32 result_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReserveItemDefResponseImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReleaseReservation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReleaseReservation) */ {
 public:
  CMsgGCItemEditorReleaseReservation();
  virtual ~CMsgGCItemEditorReleaseReservation();

  CMsgGCItemEditorReleaseReservation(const CMsgGCItemEditorReleaseReservation& from);

  inline CMsgGCItemEditorReleaseReservation& operator=(const CMsgGCItemEditorReleaseReservation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReleaseReservation(CMsgGCItemEditorReleaseReservation&& from) noexcept
    : CMsgGCItemEditorReleaseReservation() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReleaseReservation& operator=(CMsgGCItemEditorReleaseReservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReleaseReservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReleaseReservation* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReleaseReservation*>(
               &_CMsgGCItemEditorReleaseReservation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    326;

  void Swap(CMsgGCItemEditorReleaseReservation* other);
  friend void swap(CMsgGCItemEditorReleaseReservation& a, CMsgGCItemEditorReleaseReservation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReleaseReservation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReleaseReservation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReleaseReservation& from);
  void MergeFrom(const CMsgGCItemEditorReleaseReservation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReleaseReservation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReleaseReservation)
 private:
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint32 def_index_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReleaseReservationImpl();
};
// -------------------------------------------------------------------

class CMsgGCItemEditorReleaseReservationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgGCItemEditorReleaseReservationResponse) */ {
 public:
  CMsgGCItemEditorReleaseReservationResponse();
  virtual ~CMsgGCItemEditorReleaseReservationResponse();

  CMsgGCItemEditorReleaseReservationResponse(const CMsgGCItemEditorReleaseReservationResponse& from);

  inline CMsgGCItemEditorReleaseReservationResponse& operator=(const CMsgGCItemEditorReleaseReservationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCItemEditorReleaseReservationResponse(CMsgGCItemEditorReleaseReservationResponse&& from) noexcept
    : CMsgGCItemEditorReleaseReservationResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCItemEditorReleaseReservationResponse& operator=(CMsgGCItemEditorReleaseReservationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCItemEditorReleaseReservationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCItemEditorReleaseReservationResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCItemEditorReleaseReservationResponse*>(
               &_CMsgGCItemEditorReleaseReservationResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    327;

  void Swap(CMsgGCItemEditorReleaseReservationResponse* other);
  friend void swap(CMsgGCItemEditorReleaseReservationResponse& a, CMsgGCItemEditorReleaseReservationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCItemEditorReleaseReservationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCItemEditorReleaseReservationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCItemEditorReleaseReservationResponse& from);
  void MergeFrom(const CMsgGCItemEditorReleaseReservationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCItemEditorReleaseReservationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  ::google::protobuf::uint32 def_index() const;
  void set_def_index(::google::protobuf::uint32 value);

  // optional bool released = 2;
  bool has_released() const;
  void clear_released();
  static const int kReleasedFieldNumber = 2;
  bool released() const;
  void set_released(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCItemEditorReleaseReservationResponse)
 private:
  void set_has_def_index();
  void clear_has_def_index();
  void set_has_released();
  void clear_has_released();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 def_index_;
  bool released_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgGCItemEditorReleaseReservationResponseImpl();
};
// -------------------------------------------------------------------

class CMsgDOTARewardTutorialPrizes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARewardTutorialPrizes) */ {
 public:
  CMsgDOTARewardTutorialPrizes();
  virtual ~CMsgDOTARewardTutorialPrizes();

  CMsgDOTARewardTutorialPrizes(const CMsgDOTARewardTutorialPrizes& from);

  inline CMsgDOTARewardTutorialPrizes& operator=(const CMsgDOTARewardTutorialPrizes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTARewardTutorialPrizes(CMsgDOTARewardTutorialPrizes&& from) noexcept
    : CMsgDOTARewardTutorialPrizes() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARewardTutorialPrizes& operator=(CMsgDOTARewardTutorialPrizes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARewardTutorialPrizes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTARewardTutorialPrizes* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARewardTutorialPrizes*>(
               &_CMsgDOTARewardTutorialPrizes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    328;

  void Swap(CMsgDOTARewardTutorialPrizes* other);
  friend void swap(CMsgDOTARewardTutorialPrizes& a, CMsgDOTARewardTutorialPrizes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTARewardTutorialPrizes* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTARewardTutorialPrizes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTARewardTutorialPrizes& from);
  void MergeFrom(const CMsgDOTARewardTutorialPrizes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTARewardTutorialPrizes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 location_id = 1;
  bool has_location_id() const;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 1;
  ::google::protobuf::uint32 location_id() const;
  void set_location_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARewardTutorialPrizes)
 private:
  void set_has_location_id();
  void clear_has_location_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 location_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTARewardTutorialPrizesImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALastHitChallengeHighScorePost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALastHitChallengeHighScorePost) */ {
 public:
  CMsgDOTALastHitChallengeHighScorePost();
  virtual ~CMsgDOTALastHitChallengeHighScorePost();

  CMsgDOTALastHitChallengeHighScorePost(const CMsgDOTALastHitChallengeHighScorePost& from);

  inline CMsgDOTALastHitChallengeHighScorePost& operator=(const CMsgDOTALastHitChallengeHighScorePost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALastHitChallengeHighScorePost(CMsgDOTALastHitChallengeHighScorePost&& from) noexcept
    : CMsgDOTALastHitChallengeHighScorePost() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALastHitChallengeHighScorePost& operator=(CMsgDOTALastHitChallengeHighScorePost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALastHitChallengeHighScorePost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALastHitChallengeHighScorePost* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALastHitChallengeHighScorePost*>(
               &_CMsgDOTALastHitChallengeHighScorePost_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    329;

  void Swap(CMsgDOTALastHitChallengeHighScorePost* other);
  friend void swap(CMsgDOTALastHitChallengeHighScorePost& a, CMsgDOTALastHitChallengeHighScorePost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALastHitChallengeHighScorePost* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALastHitChallengeHighScorePost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALastHitChallengeHighScorePost& from);
  void MergeFrom(const CMsgDOTALastHitChallengeHighScorePost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALastHitChallengeHighScorePost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 high_score = 2;
  bool has_high_score() const;
  void clear_high_score();
  static const int kHighScoreFieldNumber = 2;
  ::google::protobuf::uint32 high_score() const;
  void set_high_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALastHitChallengeHighScorePost)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_high_score();
  void clear_has_high_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 high_score_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALastHitChallengeHighScorePostImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALastHitChallengeHighScoreRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALastHitChallengeHighScoreRequest) */ {
 public:
  CMsgDOTALastHitChallengeHighScoreRequest();
  virtual ~CMsgDOTALastHitChallengeHighScoreRequest();

  CMsgDOTALastHitChallengeHighScoreRequest(const CMsgDOTALastHitChallengeHighScoreRequest& from);

  inline CMsgDOTALastHitChallengeHighScoreRequest& operator=(const CMsgDOTALastHitChallengeHighScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALastHitChallengeHighScoreRequest(CMsgDOTALastHitChallengeHighScoreRequest&& from) noexcept
    : CMsgDOTALastHitChallengeHighScoreRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALastHitChallengeHighScoreRequest& operator=(CMsgDOTALastHitChallengeHighScoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALastHitChallengeHighScoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALastHitChallengeHighScoreRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALastHitChallengeHighScoreRequest*>(
               &_CMsgDOTALastHitChallengeHighScoreRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    330;

  void Swap(CMsgDOTALastHitChallengeHighScoreRequest* other);
  friend void swap(CMsgDOTALastHitChallengeHighScoreRequest& a, CMsgDOTALastHitChallengeHighScoreRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALastHitChallengeHighScoreRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALastHitChallengeHighScoreRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALastHitChallengeHighScoreRequest& from);
  void MergeFrom(const CMsgDOTALastHitChallengeHighScoreRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALastHitChallengeHighScoreRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALastHitChallengeHighScoreRequest)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALastHitChallengeHighScoreRequestImpl();
};
// -------------------------------------------------------------------

class CMsgDOTALastHitChallengeHighScoreResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALastHitChallengeHighScoreResponse) */ {
 public:
  CMsgDOTALastHitChallengeHighScoreResponse();
  virtual ~CMsgDOTALastHitChallengeHighScoreResponse();

  CMsgDOTALastHitChallengeHighScoreResponse(const CMsgDOTALastHitChallengeHighScoreResponse& from);

  inline CMsgDOTALastHitChallengeHighScoreResponse& operator=(const CMsgDOTALastHitChallengeHighScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTALastHitChallengeHighScoreResponse(CMsgDOTALastHitChallengeHighScoreResponse&& from) noexcept
    : CMsgDOTALastHitChallengeHighScoreResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALastHitChallengeHighScoreResponse& operator=(CMsgDOTALastHitChallengeHighScoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALastHitChallengeHighScoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTALastHitChallengeHighScoreResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALastHitChallengeHighScoreResponse*>(
               &_CMsgDOTALastHitChallengeHighScoreResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    331;

  void Swap(CMsgDOTALastHitChallengeHighScoreResponse* other);
  friend void swap(CMsgDOTALastHitChallengeHighScoreResponse& a, CMsgDOTALastHitChallengeHighScoreResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALastHitChallengeHighScoreResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALastHitChallengeHighScoreResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALastHitChallengeHighScoreResponse& from);
  void MergeFrom(const CMsgDOTALastHitChallengeHighScoreResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALastHitChallengeHighScoreResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // optional uint32 eresult = 2;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALastHitChallengeHighScoreResponse)
 private:
  void set_has_score();
  void clear_has_score();
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 eresult_;
  friend struct ::protobuf_dota_5fgcmessages_2eproto::TableStruct;
  friend void ::protobuf_dota_5fgcmessages_2eproto::InitDefaultsCMsgDOTALastHitChallengeHighScoreResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAGameAccountClient

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_id)
  return account_id_;
}
inline void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.wins)
  return wins_;
}
inline void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.losses)
  return losses_;
}
inline void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.xp)
  return xp_;
}
inline void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.level)
  return level_;
}
inline void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
inline void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 prevent_match_until_date = 18;
inline bool CSODOTAGameAccountClient::has_prevent_match_until_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_match_until_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_match_until_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_prevent_match_until_date() {
  prevent_match_until_date_ = 0u;
  clear_has_prevent_match_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_match_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_match_until_date)
  return prevent_match_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_match_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_match_until_date();
  prevent_match_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_match_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
inline bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.teaching)
  return teaching_;
}
inline void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
inline bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leadership)
  return leadership_;
}
inline void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
inline bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.friendly)
  return friendly_;
}
inline void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
inline bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
inline void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.forgiving)
}

// optional uint32 successful_report_count = 36;
inline bool CSODOTAGameAccountClient::has_successful_report_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_successful_report_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_has_successful_report_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_successful_report_count() {
  successful_report_count_ = 0u;
  clear_has_successful_report_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::successful_report_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.successful_report_count)
  return successful_report_count_;
}
inline void CSODOTAGameAccountClient::set_successful_report_count(::google::protobuf::uint32 value) {
  set_has_successful_report_count();
  successful_report_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.successful_report_count)
}

// optional uint32 notify_successful_report = 37;
inline bool CSODOTAGameAccountClient::has_notify_successful_report() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_notify_successful_report() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_has_notify_successful_report() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_notify_successful_report() {
  notify_successful_report_ = 0u;
  clear_has_notify_successful_report();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::notify_successful_report() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.notify_successful_report)
  return notify_successful_report_;
}
inline void CSODOTAGameAccountClient::set_notify_successful_report(::google::protobuf::uint32 value) {
  set_has_notify_successful_report();
  notify_successful_report_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.notify_successful_report)
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 showcase_hero_id = 40;
inline bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.showcase_hero_id)
  return showcase_hero_id_;
}
inline void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.showcase_hero_id)
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_count)
}

// optional .DOTA_PartnerAccountType partner_account_type = 44 [default = DOTA_PARTNER_NONE];
inline bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::DOTA_PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::DOTA_PartnerAccountType >(partner_account_type_);
}
inline void CSODOTAGameAccountClient::set_partner_account_type(::DOTA_PartnerAccountType value) {
  assert(::DOTA_PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
inline bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
inline void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 matchmaking_language_preference = 46;
inline bool CSODOTAGameAccountClient::has_matchmaking_language_preference() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_matchmaking_language_preference() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_has_matchmaking_language_preference() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_matchmaking_language_preference() {
  matchmaking_language_preference_ = 0u;
  clear_has_matchmaking_language_preference();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::matchmaking_language_preference() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.matchmaking_language_preference)
  return matchmaking_language_preference_;
}
inline void CSODOTAGameAccountClient::set_matchmaking_language_preference(::google::protobuf::uint32 value) {
  set_has_matchmaking_language_preference();
  matchmaking_language_preference_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.matchmaking_language_preference)
}

// optional uint32 shutdownlawterminatetime = 47;
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_shutdownlawterminatetime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetime() {
  shutdownlawterminatetime_ = 0u;
  clear_has_shutdownlawterminatetime();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetime() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.shutdownlawterminatetime)
  return shutdownlawterminatetime_;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetime(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetime();
  shutdownlawterminatetime_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.shutdownlawterminatetime)
}

// -------------------------------------------------------------------

// CSODOTAGameAccountClientInternal

// optional uint32 rank = 1;
inline bool CSODOTAGameAccountClientInternal::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClientInternal::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.rank)
  return rank_;
}
inline void CSODOTAGameAccountClientInternal::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.rank)
}

// optional uint32 rank_uncertainty = 2;
inline bool CSODOTAGameAccountClientInternal::has_rank_uncertainty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_rank_uncertainty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_rank_uncertainty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClientInternal::clear_rank_uncertainty() {
  rank_uncertainty_ = 0u;
  clear_has_rank_uncertainty();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.rank_uncertainty)
  return rank_uncertainty_;
}
inline void CSODOTAGameAccountClientInternal::set_rank_uncertainty(::google::protobuf::uint32 value) {
  set_has_rank_uncertainty();
  rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.rank_uncertainty)
}

// optional int32 win_loss_streak = 3;
inline bool CSODOTAGameAccountClientInternal::has_win_loss_streak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_win_loss_streak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_win_loss_streak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClientInternal::clear_win_loss_streak() {
  win_loss_streak_ = 0;
  clear_has_win_loss_streak();
}
inline ::google::protobuf::int32 CSODOTAGameAccountClientInternal::win_loss_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.win_loss_streak)
  return win_loss_streak_;
}
inline void CSODOTAGameAccountClientInternal::set_win_loss_streak(::google::protobuf::int32 value) {
  set_has_win_loss_streak();
  win_loss_streak_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.win_loss_streak)
}

// optional uint32 feeding_count = 5;
inline bool CSODOTAGameAccountClientInternal::has_feeding_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_feeding_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_feeding_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClientInternal::clear_feeding_count() {
  feeding_count_ = 0u;
  clear_has_feeding_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::feeding_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.feeding_count)
  return feeding_count_;
}
inline void CSODOTAGameAccountClientInternal::set_feeding_count(::google::protobuf::uint32 value) {
  set_has_feeding_count();
  feeding_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.feeding_count)
}

// optional uint32 voice_reports = 7;
inline bool CSODOTAGameAccountClientInternal::has_voice_reports() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_voice_reports() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_voice_reports() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClientInternal::clear_voice_reports() {
  voice_reports_ = 0u;
  clear_has_voice_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::voice_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.voice_reports)
  return voice_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_voice_reports(::google::protobuf::uint32 value) {
  set_has_voice_reports();
  voice_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.voice_reports)
}

// optional uint32 text_reports = 8;
inline bool CSODOTAGameAccountClientInternal::has_text_reports() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_text_reports() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_text_reports() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClientInternal::clear_text_reports() {
  text_reports_ = 0u;
  clear_has_text_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::text_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.text_reports)
  return text_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_text_reports(::google::protobuf::uint32 value) {
  set_has_text_reports();
  text_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.text_reports)
}

// optional uint32 ability_reports = 9;
inline bool CSODOTAGameAccountClientInternal::has_ability_reports() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_ability_reports() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_ability_reports() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClientInternal::clear_ability_reports() {
  ability_reports_ = 0u;
  clear_has_ability_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::ability_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.ability_reports)
  return ability_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_ability_reports(::google::protobuf::uint32 value) {
  set_has_ability_reports();
  ability_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.ability_reports)
}

// optional uint32 feeding_reports = 10;
inline bool CSODOTAGameAccountClientInternal::has_feeding_reports() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_feeding_reports() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_feeding_reports() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClientInternal::clear_feeding_reports() {
  feeding_reports_ = 0u;
  clear_has_feeding_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::feeding_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.feeding_reports)
  return feeding_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_feeding_reports(::google::protobuf::uint32 value) {
  set_has_feeding_reports();
  feeding_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.feeding_reports)
}

// optional uint32 automatic_report_penalty = 11;
inline bool CSODOTAGameAccountClientInternal::has_automatic_report_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_automatic_report_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_automatic_report_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClientInternal::clear_automatic_report_penalty() {
  automatic_report_penalty_ = 0u;
  clear_has_automatic_report_penalty();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::automatic_report_penalty() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.automatic_report_penalty)
  return automatic_report_penalty_;
}
inline void CSODOTAGameAccountClientInternal::set_automatic_report_penalty(::google::protobuf::uint32 value) {
  set_has_automatic_report_penalty();
  automatic_report_penalty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.automatic_report_penalty)
}

// optional uint32 games_since_report_penalty = 12;
inline bool CSODOTAGameAccountClientInternal::has_games_since_report_penalty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_games_since_report_penalty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_games_since_report_penalty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClientInternal::clear_games_since_report_penalty() {
  games_since_report_penalty_ = 0u;
  clear_has_games_since_report_penalty();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::games_since_report_penalty() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.games_since_report_penalty)
  return games_since_report_penalty_;
}
inline void CSODOTAGameAccountClientInternal::set_games_since_report_penalty(::google::protobuf::uint32 value) {
  set_has_games_since_report_penalty();
  games_since_report_penalty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.games_since_report_penalty)
}

// optional uint32 report_penalty_count = 13;
inline bool CSODOTAGameAccountClientInternal::has_report_penalty_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_report_penalty_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_report_penalty_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClientInternal::clear_report_penalty_count() {
  report_penalty_count_ = 0u;
  clear_has_report_penalty_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::report_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.report_penalty_count)
  return report_penalty_count_;
}
inline void CSODOTAGameAccountClientInternal::set_report_penalty_count(::google::protobuf::uint32 value) {
  set_has_report_penalty_count();
  report_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.report_penalty_count)
}

// optional uint32 pending_detected_reports = 14;
inline bool CSODOTAGameAccountClientInternal::has_pending_detected_reports() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_pending_detected_reports() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_pending_detected_reports() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClientInternal::clear_pending_detected_reports() {
  pending_detected_reports_ = 0u;
  clear_has_pending_detected_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::pending_detected_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.pending_detected_reports)
  return pending_detected_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_pending_detected_reports(::google::protobuf::uint32 value) {
  set_has_pending_detected_reports();
  pending_detected_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.pending_detected_reports)
}

// optional uint32 pending_in_game_reports = 15;
inline bool CSODOTAGameAccountClientInternal::has_pending_in_game_reports() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_pending_in_game_reports() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_pending_in_game_reports() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClientInternal::clear_pending_in_game_reports() {
  pending_in_game_reports_ = 0u;
  clear_has_pending_in_game_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::pending_in_game_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.pending_in_game_reports)
  return pending_in_game_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_pending_in_game_reports(::google::protobuf::uint32 value) {
  set_has_pending_in_game_reports();
  pending_in_game_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.pending_in_game_reports)
}

// optional uint32 pending_out_of_game_reports = 16;
inline bool CSODOTAGameAccountClientInternal::has_pending_out_of_game_reports() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_pending_out_of_game_reports() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_pending_out_of_game_reports() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClientInternal::clear_pending_out_of_game_reports() {
  pending_out_of_game_reports_ = 0u;
  clear_has_pending_out_of_game_reports();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::pending_out_of_game_reports() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.pending_out_of_game_reports)
  return pending_out_of_game_reports_;
}
inline void CSODOTAGameAccountClientInternal::set_pending_out_of_game_reports(::google::protobuf::uint32 value) {
  set_has_pending_out_of_game_reports();
  pending_out_of_game_reports_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.pending_out_of_game_reports)
}

// optional uint32 automated_penalty_date = 17;
inline bool CSODOTAGameAccountClientInternal::has_automated_penalty_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_automated_penalty_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_automated_penalty_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClientInternal::clear_automated_penalty_date() {
  automated_penalty_date_ = 0u;
  clear_has_automated_penalty_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::automated_penalty_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.automated_penalty_date)
  return automated_penalty_date_;
}
inline void CSODOTAGameAccountClientInternal::set_automated_penalty_date(::google::protobuf::uint32 value) {
  set_has_automated_penalty_date();
  automated_penalty_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.automated_penalty_date)
}

// optional uint32 last_reported_match_id = 18;
inline bool CSODOTAGameAccountClientInternal::has_last_reported_match_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_last_reported_match_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_last_reported_match_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClientInternal::clear_last_reported_match_id() {
  last_reported_match_id_ = 0u;
  clear_has_last_reported_match_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::last_reported_match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.last_reported_match_id)
  return last_reported_match_id_;
}
inline void CSODOTAGameAccountClientInternal::set_last_reported_match_id(::google::protobuf::uint32 value) {
  set_has_last_reported_match_id();
  last_reported_match_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.last_reported_match_id)
}

// optional uint32 pending_reported_games = 19;
inline bool CSODOTAGameAccountClientInternal::has_pending_reported_games() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_pending_reported_games() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_pending_reported_games() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClientInternal::clear_pending_reported_games() {
  pending_reported_games_ = 0u;
  clear_has_pending_reported_games();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::pending_reported_games() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.pending_reported_games)
  return pending_reported_games_;
}
inline void CSODOTAGameAccountClientInternal::set_pending_reported_games(::google::protobuf::uint32 value) {
  set_has_pending_reported_games();
  pending_reported_games_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.pending_reported_games)
}

// optional fixed32 last_communication_report_time = 20;
inline bool CSODOTAGameAccountClientInternal::has_last_communication_report_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_last_communication_report_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_last_communication_report_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClientInternal::clear_last_communication_report_time() {
  last_communication_report_time_ = 0u;
  clear_has_last_communication_report_time();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::last_communication_report_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.last_communication_report_time)
  return last_communication_report_time_;
}
inline void CSODOTAGameAccountClientInternal::set_last_communication_report_time(::google::protobuf::uint32 value) {
  set_has_last_communication_report_time();
  last_communication_report_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.last_communication_report_time)
}

// optional uint32 communication_penalty_severity = 21;
inline bool CSODOTAGameAccountClientInternal::has_communication_penalty_severity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_communication_penalty_severity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_communication_penalty_severity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClientInternal::clear_communication_penalty_severity() {
  communication_penalty_severity_ = 0u;
  clear_has_communication_penalty_severity();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::communication_penalty_severity() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.communication_penalty_severity)
  return communication_penalty_severity_;
}
inline void CSODOTAGameAccountClientInternal::set_communication_penalty_severity(::google::protobuf::uint32 value) {
  set_has_communication_penalty_severity();
  communication_penalty_severity_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.communication_penalty_severity)
}

// optional uint32 solo_rank = 22;
inline bool CSODOTAGameAccountClientInternal::has_solo_rank() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_solo_rank() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_solo_rank() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClientInternal::clear_solo_rank() {
  solo_rank_ = 0u;
  clear_has_solo_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::solo_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.solo_rank)
  return solo_rank_;
}
inline void CSODOTAGameAccountClientInternal::set_solo_rank(::google::protobuf::uint32 value) {
  set_has_solo_rank();
  solo_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.solo_rank)
}

// optional uint32 solo_rank_uncertainty = 23;
inline bool CSODOTAGameAccountClientInternal::has_solo_rank_uncertainty() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_solo_rank_uncertainty() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_solo_rank_uncertainty() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClientInternal::clear_solo_rank_uncertainty() {
  solo_rank_uncertainty_ = 0u;
  clear_has_solo_rank_uncertainty();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::solo_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.solo_rank_uncertainty)
  return solo_rank_uncertainty_;
}
inline void CSODOTAGameAccountClientInternal::set_solo_rank_uncertainty(::google::protobuf::uint32 value) {
  set_has_solo_rank_uncertainty();
  solo_rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.solo_rank_uncertainty)
}

// optional uint32 bonus_reports_remaining = 24;
inline bool CSODOTAGameAccountClientInternal::has_bonus_reports_remaining() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_bonus_reports_remaining() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_bonus_reports_remaining() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClientInternal::clear_bonus_reports_remaining() {
  bonus_reports_remaining_ = 0u;
  clear_has_bonus_reports_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::bonus_reports_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.bonus_reports_remaining)
  return bonus_reports_remaining_;
}
inline void CSODOTAGameAccountClientInternal::set_bonus_reports_remaining(::google::protobuf::uint32 value) {
  set_has_bonus_reports_remaining();
  bonus_reports_remaining_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.bonus_reports_remaining)
}

// optional uint32 last_timed_player_card_drop = 25;
inline bool CSODOTAGameAccountClientInternal::has_last_timed_player_card_drop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClientInternal::set_has_last_timed_player_card_drop() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAGameAccountClientInternal::clear_has_last_timed_player_card_drop() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClientInternal::clear_last_timed_player_card_drop() {
  last_timed_player_card_drop_ = 0u;
  clear_has_last_timed_player_card_drop();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClientInternal::last_timed_player_card_drop() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClientInternal.last_timed_player_card_drop)
  return last_timed_player_card_drop_;
}
inline void CSODOTAGameAccountClientInternal::set_last_timed_player_card_drop(::google::protobuf::uint32 value) {
  set_has_last_timed_player_card_drop();
  last_timed_player_card_drop_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClientInternal.last_timed_player_card_drop)
}

// -------------------------------------------------------------------

// CSODOTAPartyMember

// optional .DOTA_PartnerAccountType partner_type = 1 [default = DOTA_PARTNER_NONE];
inline bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::DOTA_PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.partner_type)
  return static_cast< ::DOTA_PartnerAccountType >(partner_type_);
}
inline void CSODOTAPartyMember::set_partner_type(::DOTA_PartnerAccountType value) {
  assert(::DOTA_PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.partner_type)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1 [(.key_field) = true];
inline bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return party_id_;
}
inline void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return leader_id_;
}
inline void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
inline void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return game_modes_;
}
inline void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// repeated fixed64 pending_invites = 5;
inline int CSODOTAParty::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTAParty::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.pending_invites)
  return pending_invites_.Get(index);
}
inline void CSODOTAParty::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.pending_invites)
}
inline void CSODOTAParty::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.pending_invites)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.pending_invites)
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.pending_invites)
  return &pending_invites_;
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return static_cast< ::CSODOTAParty_State >(state_);
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 started_matchmaking_time = 7;
inline bool CSODOTAParty::has_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAParty::set_has_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAParty::clear_has_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAParty::clear_started_matchmaking_time() {
  started_matchmaking_time_ = 0u;
  clear_has_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.started_matchmaking_time)
  return started_matchmaking_time_;
}
inline void CSODOTAParty::set_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_started_matchmaking_time();
  started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.started_matchmaking_time)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return matchgroups_;
}
inline void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 prevent_match_until_date = 18;
inline bool CSODOTAParty::has_prevent_match_until_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAParty::set_has_prevent_match_until_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAParty::clear_has_prevent_match_until_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAParty::clear_prevent_match_until_date() {
  prevent_match_until_date_ = 0u;
  clear_has_prevent_match_until_date();
}
inline ::google::protobuf::uint32 CSODOTAParty::prevent_match_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.prevent_match_until_date)
  return prevent_match_until_date_;
}
inline void CSODOTAParty::set_prevent_match_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_match_until_date();
  prevent_match_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.prevent_match_until_date)
}

// optional uint32 prevent_match_account_id = 19;
inline bool CSODOTAParty::has_prevent_match_account_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAParty::set_has_prevent_match_account_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAParty::clear_has_prevent_match_account_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAParty::clear_prevent_match_account_id() {
  prevent_match_account_id_ = 0u;
  clear_has_prevent_match_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::prevent_match_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.prevent_match_account_id)
  return prevent_match_account_id_;
}
inline void CSODOTAParty::set_prevent_match_account_id(::google::protobuf::uint32 value) {
  set_has_prevent_match_account_id();
  prevent_match_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.prevent_match_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_RANKED];
inline bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CSODOTAParty::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTAParty::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return team_id_;
}
inline void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
inline void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
inline void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::members_size() const {
  return members_.size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return members_;
}

// optional uint32 open_guild_id = 30;
inline bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
inline void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
inline int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
inline void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
inline void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.common_guilds)
}
inline void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.common_guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.common_guilds)
  return common_guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// -------------------------------------------------------------------

// CSODOTAPartyInternal

// optional string search_key = 1;
inline bool CSODOTAPartyInternal::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInternal::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInternal::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInternal::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CSODOTAPartyInternal::search_key() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInternal.search_key)
  return search_key_.GetNoArena();
}
inline void CSODOTAPartyInternal::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInternal.search_key)
}
#if LANG_CXX11
inline void CSODOTAPartyInternal::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAPartyInternal.search_key)
}
#endif
inline void CSODOTAPartyInternal::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInternal.search_key)
}
inline void CSODOTAPartyInternal::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInternal.search_key)
}
inline ::std::string* CSODOTAPartyInternal::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInternal.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAPartyInternal::release_search_key() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInternal.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAPartyInternal::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInternal.search_key)
}

// -------------------------------------------------------------------

// CSODOTAPartyMemcached

// optional .CSODOTAParty party = 1;
inline bool CSODOTAPartyMemcached::has_party() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMemcached::set_has_party() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyMemcached::clear_has_party() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyMemcached::clear_party() {
  if (party_ != NULL) party_->Clear();
  clear_has_party();
}
inline const ::CSODOTAParty& CSODOTAPartyMemcached::party() const {
  const ::CSODOTAParty* p = party_;
  // @@protoc_insertion_point(field_get:CSODOTAPartyMemcached.party)
  return p != NULL ? *p : *reinterpret_cast<const ::CSODOTAParty*>(
      &::_CSODOTAParty_default_instance_);
}
inline ::CSODOTAParty* CSODOTAPartyMemcached::release_party() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyMemcached.party)
  clear_has_party();
  ::CSODOTAParty* temp = party_;
  party_ = NULL;
  return temp;
}
inline ::CSODOTAParty* CSODOTAPartyMemcached::mutable_party() {
  set_has_party();
  if (party_ == NULL) {
    party_ = new ::CSODOTAParty;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyMemcached.party)
  return party_;
}
inline void CSODOTAPartyMemcached::set_allocated_party(::CSODOTAParty* party) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete party_;
  }
  if (party) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      party = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    set_has_party();
  } else {
    clear_has_party();
  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyMemcached.party)
}

// optional .CSODOTAPartyInternal internal = 2;
inline bool CSODOTAPartyMemcached::has_internal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyMemcached::set_has_internal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyMemcached::clear_has_internal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyMemcached::clear_internal() {
  if (internal_ != NULL) internal_->Clear();
  clear_has_internal();
}
inline const ::CSODOTAPartyInternal& CSODOTAPartyMemcached::internal() const {
  const ::CSODOTAPartyInternal* p = internal_;
  // @@protoc_insertion_point(field_get:CSODOTAPartyMemcached.internal)
  return p != NULL ? *p : *reinterpret_cast<const ::CSODOTAPartyInternal*>(
      &::_CSODOTAPartyInternal_default_instance_);
}
inline ::CSODOTAPartyInternal* CSODOTAPartyMemcached::release_internal() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyMemcached.internal)
  clear_has_internal();
  ::CSODOTAPartyInternal* temp = internal_;
  internal_ = NULL;
  return temp;
}
inline ::CSODOTAPartyInternal* CSODOTAPartyMemcached::mutable_internal() {
  set_has_internal();
  if (internal_ == NULL) {
    internal_ = new ::CSODOTAPartyInternal;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyMemcached.internal)
  return internal_;
}
inline void CSODOTAPartyMemcached::set_allocated_internal(::CSODOTAPartyInternal* internal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete internal_;
  }
  if (internal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      internal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, internal, submessage_arena);
    }
    set_has_internal();
  } else {
    clear_has_internal();
  }
  internal_ = internal;
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyMemcached.internal)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return name_.GetNoArena();
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
#if LANG_CXX11
inline void CSODOTAPartyInvite_PartyMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAPartyInvite.PartyMember.name)
}
#endif
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.PartyMember.name)
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.PartyMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return group_id_;
}
inline void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
inline const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return sender_name_.GetNoArena();
}
inline void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
#if LANG_CXX11
inline void CSODOTAPartyInvite::set_sender_name(::std::string&& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAPartyInvite.sender_name)
}
#endif
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.sender_name)
}
inline ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAPartyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.sender_name)
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return members_.Get(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return team_id_;
}
inline void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1 [(.key_field) = true];
inline bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.id)
  return id_;
}
inline void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.hero_id)
  return hero_id_;
}
inline void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CDOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.team)
}

// optional bool connected_to_game_server = 4;
inline bool CDOTALobbyMember::has_connected_to_game_server() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTALobbyMember::set_has_connected_to_game_server() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTALobbyMember::clear_has_connected_to_game_server() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTALobbyMember::clear_connected_to_game_server() {
  connected_to_game_server_ = false;
  clear_has_connected_to_game_server();
}
inline bool CDOTALobbyMember::connected_to_game_server() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.connected_to_game_server)
  return connected_to_game_server_;
}
inline void CDOTALobbyMember::set_connected_to_game_server(bool value) {
  set_has_connected_to_game_server();
  connected_to_game_server_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.connected_to_game_server)
}

// optional string name = 6;
inline bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.name)
  return name_.GetNoArena();
}
inline void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.name)
}
#if LANG_CXX11
inline void CDOTALobbyMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDOTALobbyMember.name)
}
#endif
inline void CDOTALobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTALobbyMember.name)
}
inline ::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CDOTALobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTALobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:CDOTALobbyMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.slot)
  return slot_;
}
inline void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.slot)
}

// optional float latitude = 8;
inline bool CDOTALobbyMember::has_latitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTALobbyMember::set_has_latitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTALobbyMember::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTALobbyMember::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float CDOTALobbyMember::latitude() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.latitude)
  return latitude_;
}
inline void CDOTALobbyMember::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.latitude)
}

// optional float longitude = 9;
inline bool CDOTALobbyMember::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTALobbyMember::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTALobbyMember::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTALobbyMember::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float CDOTALobbyMember::longitude() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.longitude)
  return longitude_;
}
inline void CDOTALobbyMember::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.longitude)
}

// optional .DOTALobbyReadyState ready_state = 11 [default = DOTALobbyReadyState_UNDECLARED];
inline bool CDOTALobbyMember::has_ready_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTALobbyMember::set_has_ready_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTALobbyMember::clear_has_ready_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTALobbyMember::clear_ready_state() {
  ready_state_ = 0;
  clear_has_ready_state();
}
inline ::DOTALobbyReadyState CDOTALobbyMember::ready_state() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.ready_state)
  return static_cast< ::DOTALobbyReadyState >(ready_state_);
}
inline void CDOTALobbyMember::set_ready_state(::DOTALobbyReadyState value) {
  assert(::DOTALobbyReadyState_IsValid(value));
  set_has_ready_state();
  ready_state_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.ready_state)
}

// optional uint64 party_id = 12;
inline bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.party_id)
  return party_id_;
}
inline void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_level)
  return meta_level_;
}
inline void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
inline void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
inline void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
inline ::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.leaver_status)
  return static_cast< ::DOTALeaverStatus_t >(leaver_status_);
}
inline void CDOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.leaver_status)
}

// optional uint32 channel = 17;
inline bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.channel)
  return channel_;
}
inline void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
inline bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
inline void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.prize_def_index)
}

// optional uint32 meta_xp_bonus_rate = 19;
inline bool CDOTALobbyMember::has_meta_xp_bonus_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp_bonus_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDOTALobbyMember::clear_has_meta_xp_bonus_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDOTALobbyMember::clear_meta_xp_bonus_rate() {
  meta_xp_bonus_rate_ = 0u;
  clear_has_meta_xp_bonus_rate();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_bonus_rate() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.meta_xp_bonus_rate)
  return meta_xp_bonus_rate_;
}
inline void CDOTALobbyMember::set_meta_xp_bonus_rate(::google::protobuf::uint32 value) {
  set_has_meta_xp_bonus_rate();
  meta_xp_bonus_rate_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.meta_xp_bonus_rate)
}

// repeated uint32 disabled_hero_id = 20;
inline int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.disabled_hero_id)
}
inline void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.disabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .DOTA_PartnerAccountType partner_account_type = 21 [default = DOTA_PARTNER_NONE];
inline bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::DOTA_PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.partner_account_type)
  return static_cast< ::DOTA_PartnerAccountType >(partner_account_type_);
}
inline void CDOTALobbyMember::set_partner_account_type(::DOTA_PartnerAccountType value) {
  assert(::DOTA_PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
inline int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTALobbyMember.enabled_hero_id)
}
inline void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTALobbyMember.enabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return team_name_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_name)
}
#endif
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
inline const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return team_tag_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_tag)
}
#endif
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return team_id_;
}
inline void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return team_logo_;
}
inline void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
inline void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return team_complete_;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional string team_logo_url = 20;
inline bool CLobbyTeamDetails::has_team_logo_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_logo_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTeamDetails::clear_has_team_logo_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTeamDetails::clear_team_logo_url() {
  team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_logo_url();
}
inline const ::std::string& CLobbyTeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo_url)
  return team_logo_url_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_logo_url(const ::std::string& value) {
  set_has_team_logo_url();
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo_url)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_logo_url(::std::string&& value) {
  set_has_team_logo_url();
  team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_logo_url)
}
#endif
inline void CLobbyTeamDetails::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_logo_url();
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_logo_url)
}
inline void CLobbyTeamDetails::set_team_logo_url(const char* value, size_t size) {
  set_has_team_logo_url();
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_logo_url)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_logo_url() {
  set_has_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_logo_url)
  return team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_logo_url)
  clear_has_team_logo_url();
  return team_logo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_logo_url(::std::string* team_logo_url) {
  if (team_logo_url != NULL) {
    set_has_team_logo_url();
  } else {
    clear_has_team_logo_url();
  }
  team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_logo_url)
}

// optional string guild_name = 9;
inline bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTeamDetails::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_name)
  return guild_name_.GetNoArena();
}
inline void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_name)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_guild_name(::std::string&& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.guild_name)
}
#endif
inline void CLobbyTeamDetails::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_guild_name() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
inline bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTeamDetails::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_tag();
}
inline const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_tag)
  return guild_tag_.GetNoArena();
}
inline void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_tag)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_guild_tag(::std::string&& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.guild_tag)
}
#endif
inline void CLobbyTeamDetails::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.guild_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_guild_tag() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.guild_tag)
  clear_has_guild_tag();
  return guild_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != NULL) {
    set_has_guild_tag();
  } else {
    clear_has_guild_tag();
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
inline bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_id)
  return guild_id_;
}
inline void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
inline bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
inline void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
inline bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
inline void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
inline bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
inline void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CLobbyTeamDetails::clear_has_rank() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return rank_;
}
inline void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CLobbyTeamDetails::set_has_rank_change() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CLobbyTeamDetails::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return rank_change_;
}
inline void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CLobbyTeamDetails::set_has_is_home_team() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CLobbyTeamDetails::clear_has_is_home_team() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  clear_has_is_home_team();
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  set_has_is_home_team();
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

// optional bool is_challenge_match = 18;
inline bool CLobbyTeamDetails::has_is_challenge_match() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CLobbyTeamDetails::set_has_is_challenge_match() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CLobbyTeamDetails::clear_has_is_challenge_match() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CLobbyTeamDetails::clear_is_challenge_match() {
  is_challenge_match_ = false;
  clear_has_is_challenge_match();
}
inline bool CLobbyTeamDetails::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_challenge_match)
  return is_challenge_match_;
}
inline void CLobbyTeamDetails::set_is_challenge_match(bool value) {
  set_has_is_challenge_match();
  is_challenge_match_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_challenge_match)
}

// optional uint64 challenge_match_token_account = 19;
inline bool CLobbyTeamDetails::has_challenge_match_token_account() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CLobbyTeamDetails::set_has_challenge_match_token_account() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CLobbyTeamDetails::clear_has_challenge_match_token_account() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CLobbyTeamDetails::clear_challenge_match_token_account() {
  challenge_match_token_account_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge_match_token_account();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::challenge_match_token_account() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.challenge_match_token_account)
  return challenge_match_token_account_;
}
inline void CLobbyTeamDetails::set_challenge_match_token_account(::google::protobuf::uint64 value) {
  set_has_challenge_match_token_account();
  challenge_match_token_account_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.challenge_match_token_account)
}

// -------------------------------------------------------------------

// CLobbyPendingPlayerReport

// optional uint32 account_id = 1;
inline bool CLobbyPendingPlayerReport::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyPendingPlayerReport::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyPendingPlayerReport::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyPendingPlayerReport::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLobbyPendingPlayerReport::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyPendingPlayerReport.account_id)
  return account_id_;
}
inline void CLobbyPendingPlayerReport::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyPendingPlayerReport.account_id)
}

// optional fixed32 date = 2;
inline bool CLobbyPendingPlayerReport::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyPendingPlayerReport::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyPendingPlayerReport::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyPendingPlayerReport::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CLobbyPendingPlayerReport::date() const {
  // @@protoc_insertion_point(field_get:CLobbyPendingPlayerReport.date)
  return date_;
}
inline void CLobbyPendingPlayerReport::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:CLobbyPendingPlayerReport.date)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint64 item_id = 1;
inline bool CLobbyTimedRewardDetails::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CLobbyTimedRewardDetails::item_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_id)
  return item_id_;
}
inline void CLobbyTimedRewardDetails::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_id)
}

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
inline void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1 [(.key_field) = true];
inline bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return lobby_id_;
}
inline void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CDOTALobbyMember members = 2;
inline int CSODOTALobby::members_size() const {
  return members_.size();
}
inline void CSODOTALobby::clear_members() {
  members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.members)
  return members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.members)
  return members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.members)
  return members_;
}

// repeated .CDOTALobbyMember left_members = 7;
inline int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_members)
  return left_members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_members)
  return left_members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_members)
  return &left_members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_members)
  return left_members_;
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return leader_id_;
}
inline void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return server_id_;
}
inline void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return game_mode_;
}
inline void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return static_cast< ::CSODOTALobby_State >(state_);
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_connect() {
  connect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connect();
}
inline const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return connect_.GetNoArena();
}
inline void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
#if LANG_CXX11
inline void CSODOTALobby::set_connect(::std::string&& value) {
  set_has_connect();
  connect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.connect)
}
#endif
inline void CSODOTALobby::set_connect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.connect)
}
inline ::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return connect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_connect() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.connect)
  clear_has_connect();
  return connect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect != NULL) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  connect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return intro_mode_;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
inline const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return game_name_.GetNoArena();
}
inline void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
#if LANG_CXX11
inline void CSODOTALobby::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.game_name)
}
#endif
inline void CSODOTALobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.game_name)
}
inline ::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_game_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return team_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &team_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
inline ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
inline void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return tournament_id_;
}
inline void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
inline void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return server_region_;
}
inline void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return num_spectators_;
}
inline void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 tower_state = 24;
inline bool CSODOTALobby::has_tower_state() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_tower_state() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
inline ::google::protobuf::uint32 CSODOTALobby::tower_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tower_state)
  return tower_state_;
}
inline void CSODOTALobby::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.tower_state)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
inline ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return matchgroup_;
}
inline void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional bool leaver_detected = 27;
inline bool CSODOTALobby::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
inline bool CSODOTALobby::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leaver_detected)
  return leaver_detected_;
}
inline void CSODOTALobby::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leaver_detected)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint32 match_id = 30;
inline bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return match_id_;
}
inline void CSODOTALobby::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_bot_difficulty() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_bot_difficulty() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTALobby::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty)
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline ::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline void CSODOTALobby::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_version)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
inline const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return pass_key_.GetNoArena();
}
inline void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
#if LANG_CXX11
inline void CSODOTALobby::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.pass_key)
}
#endif
inline void CSODOTALobby::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.pass_key)
}
inline ::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_pass_key() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// optional float drop_rate_bonus = 40;
inline bool CSODOTALobby::has_drop_rate_bonus() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_drop_rate_bonus() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_drop_rate_bonus() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_drop_rate_bonus() {
  drop_rate_bonus_ = 0;
  clear_has_drop_rate_bonus();
}
inline float CSODOTALobby::drop_rate_bonus() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.drop_rate_bonus)
  return drop_rate_bonus_;
}
inline void CSODOTALobby::set_drop_rate_bonus(float value) {
  set_has_drop_rate_bonus();
  drop_rate_bonus_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.drop_rate_bonus)
}

// repeated .DOTABotDifficulty bot_slot_difficulty = 41;
inline int CSODOTALobby::bot_slot_difficulty_size() const {
  return bot_slot_difficulty_.size();
}
inline void CSODOTALobby::clear_bot_slot_difficulty() {
  bot_slot_difficulty_.Clear();
}
inline ::DOTABotDifficulty CSODOTALobby::bot_slot_difficulty(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_slot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_slot_difficulty_.Get(index));
}
inline void CSODOTALobby::set_bot_slot_difficulty(int index, ::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_slot_difficulty)
}
inline void CSODOTALobby::add_bot_slot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Add(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.bot_slot_difficulty)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::bot_slot_difficulty() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.bot_slot_difficulty)
  return bot_slot_difficulty_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_bot_slot_difficulty() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.bot_slot_difficulty)
  return &bot_slot_difficulty_;
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return leagueid_;
}
inline void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return load_game_id_;
}
inline void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTALobby::set_has_series_type() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTALobby::clear_has_series_type() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return series_type_;
}
inline void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
inline void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return loot_generated_;
}
inline void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
inline void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_allchat() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_allchat() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return allchat_;
}
inline void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional uint32 rank_change = 52;
inline bool CSODOTALobby::has_rank_change() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_rank_change() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_rank_change() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_rank_change() {
  rank_change_ = 0u;
  clear_has_rank_change();
}
inline ::google::protobuf::uint32 CSODOTALobby::rank_change() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.rank_change)
  return rank_change_;
}
inline void CSODOTALobby::set_rank_change(::google::protobuf::uint32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.rank_change)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
inline ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// -------------------------------------------------------------------

// CSODOTALobbyInternal

// optional string search_key = 1;
inline bool CSODOTALobbyInternal::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInternal::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInternal::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInternal::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CSODOTALobbyInternal::search_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.search_key)
  return search_key_.GetNoArena();
}
inline void CSODOTALobbyInternal::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.search_key)
}
#if LANG_CXX11
inline void CSODOTALobbyInternal::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobbyInternal.search_key)
}
#endif
inline void CSODOTALobbyInternal::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInternal.search_key)
}
inline void CSODOTALobbyInternal::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInternal.search_key)
}
inline ::std::string* CSODOTALobbyInternal::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInternal.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobbyInternal::release_search_key() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyInternal.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobbyInternal::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInternal.search_key)
}

// repeated .CLobbyPendingPlayerReport pending_player_reports = 2;
inline int CSODOTALobbyInternal::pending_player_reports_size() const {
  return pending_player_reports_.size();
}
inline void CSODOTALobbyInternal::clear_pending_player_reports() {
  pending_player_reports_.Clear();
}
inline const ::CLobbyPendingPlayerReport& CSODOTALobbyInternal::pending_player_reports(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.pending_player_reports)
  return pending_player_reports_.Get(index);
}
inline ::CLobbyPendingPlayerReport* CSODOTALobbyInternal::mutable_pending_player_reports(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInternal.pending_player_reports)
  return pending_player_reports_.Mutable(index);
}
inline ::CLobbyPendingPlayerReport* CSODOTALobbyInternal::add_pending_player_reports() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyInternal.pending_player_reports)
  return pending_player_reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyPendingPlayerReport >*
CSODOTALobbyInternal::mutable_pending_player_reports() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInternal.pending_player_reports)
  return &pending_player_reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyPendingPlayerReport >&
CSODOTALobbyInternal::pending_player_reports() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInternal.pending_player_reports)
  return pending_player_reports_;
}

// optional uint32 average_rank = 3;
inline bool CSODOTALobbyInternal::has_average_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInternal::set_has_average_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInternal::clear_has_average_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInternal::clear_average_rank() {
  average_rank_ = 0u;
  clear_has_average_rank();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::average_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.average_rank)
  return average_rank_;
}
inline void CSODOTALobbyInternal::set_average_rank(::google::protobuf::uint32 value) {
  set_has_average_rank();
  average_rank_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.average_rank)
}

// optional fixed32 replay_salt = 4;
inline bool CSODOTALobbyInternal::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobbyInternal::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTALobbyInternal::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTALobbyInternal::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::replay_salt() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.replay_salt)
  return replay_salt_;
}
inline void CSODOTALobbyInternal::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.replay_salt)
}

// optional bool disable_radiant_automatic_team_detection = 5;
inline bool CSODOTALobbyInternal::has_disable_radiant_automatic_team_detection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobbyInternal::set_has_disable_radiant_automatic_team_detection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobbyInternal::clear_has_disable_radiant_automatic_team_detection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobbyInternal::clear_disable_radiant_automatic_team_detection() {
  disable_radiant_automatic_team_detection_ = false;
  clear_has_disable_radiant_automatic_team_detection();
}
inline bool CSODOTALobbyInternal::disable_radiant_automatic_team_detection() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.disable_radiant_automatic_team_detection)
  return disable_radiant_automatic_team_detection_;
}
inline void CSODOTALobbyInternal::set_disable_radiant_automatic_team_detection(bool value) {
  set_has_disable_radiant_automatic_team_detection();
  disable_radiant_automatic_team_detection_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.disable_radiant_automatic_team_detection)
}

// optional bool disable_dire_automatic_team_detection = 6;
inline bool CSODOTALobbyInternal::has_disable_dire_automatic_team_detection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobbyInternal::set_has_disable_dire_automatic_team_detection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobbyInternal::clear_has_disable_dire_automatic_team_detection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobbyInternal::clear_disable_dire_automatic_team_detection() {
  disable_dire_automatic_team_detection_ = false;
  clear_has_disable_dire_automatic_team_detection();
}
inline bool CSODOTALobbyInternal::disable_dire_automatic_team_detection() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.disable_dire_automatic_team_detection)
  return disable_dire_automatic_team_detection_;
}
inline void CSODOTALobbyInternal::set_disable_dire_automatic_team_detection(bool value) {
  set_has_disable_dire_automatic_team_detection();
  disable_dire_automatic_team_detection_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.disable_dire_automatic_team_detection)
}

// optional uint32 final_match_duration = 7;
inline bool CSODOTALobbyInternal::has_final_match_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTALobbyInternal::set_has_final_match_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTALobbyInternal::clear_has_final_match_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTALobbyInternal::clear_final_match_duration() {
  final_match_duration_ = 0u;
  clear_has_final_match_duration();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::final_match_duration() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.final_match_duration)
  return final_match_duration_;
}
inline void CSODOTALobbyInternal::set_final_match_duration(::google::protobuf::uint32 value) {
  set_has_final_match_duration();
  final_match_duration_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.final_match_duration)
}

// optional bool submitted_match_history = 8;
inline bool CSODOTALobbyInternal::has_submitted_match_history() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobbyInternal::set_has_submitted_match_history() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobbyInternal::clear_has_submitted_match_history() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobbyInternal::clear_submitted_match_history() {
  submitted_match_history_ = false;
  clear_has_submitted_match_history();
}
inline bool CSODOTALobbyInternal::submitted_match_history() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInternal.submitted_match_history)
  return submitted_match_history_;
}
inline void CSODOTALobbyInternal::set_submitted_match_history(bool value) {
  set_has_submitted_match_history();
  submitted_match_history_ = value;
  // @@protoc_insertion_point(field_set:CSODOTALobbyInternal.submitted_match_history)
}

// -------------------------------------------------------------------

// CSODOTALobbyMemcached

// optional .CSODOTALobby lobby = 1;
inline bool CSODOTALobbyMemcached::has_lobby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyMemcached::set_has_lobby() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyMemcached::clear_has_lobby() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyMemcached::clear_lobby() {
  if (lobby_ != NULL) lobby_->Clear();
  clear_has_lobby();
}
inline const ::CSODOTALobby& CSODOTALobbyMemcached::lobby() const {
  const ::CSODOTALobby* p = lobby_;
  // @@protoc_insertion_point(field_get:CSODOTALobbyMemcached.lobby)
  return p != NULL ? *p : *reinterpret_cast<const ::CSODOTALobby*>(
      &::_CSODOTALobby_default_instance_);
}
inline ::CSODOTALobby* CSODOTALobbyMemcached::release_lobby() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMemcached.lobby)
  clear_has_lobby();
  ::CSODOTALobby* temp = lobby_;
  lobby_ = NULL;
  return temp;
}
inline ::CSODOTALobby* CSODOTALobbyMemcached::mutable_lobby() {
  set_has_lobby();
  if (lobby_ == NULL) {
    lobby_ = new ::CSODOTALobby;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMemcached.lobby)
  return lobby_;
}
inline void CSODOTALobbyMemcached::set_allocated_lobby(::CSODOTALobby* lobby) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lobby_;
  }
  if (lobby) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lobby = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lobby, submessage_arena);
    }
    set_has_lobby();
  } else {
    clear_has_lobby();
  }
  lobby_ = lobby;
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMemcached.lobby)
}

// optional .CSODOTALobbyInternal internal = 2;
inline bool CSODOTALobbyMemcached::has_internal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyMemcached::set_has_internal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyMemcached::clear_has_internal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyMemcached::clear_internal() {
  if (internal_ != NULL) internal_->Clear();
  clear_has_internal();
}
inline const ::CSODOTALobbyInternal& CSODOTALobbyMemcached::internal() const {
  const ::CSODOTALobbyInternal* p = internal_;
  // @@protoc_insertion_point(field_get:CSODOTALobbyMemcached.internal)
  return p != NULL ? *p : *reinterpret_cast<const ::CSODOTALobbyInternal*>(
      &::_CSODOTALobbyInternal_default_instance_);
}
inline ::CSODOTALobbyInternal* CSODOTALobbyMemcached::release_internal() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMemcached.internal)
  clear_has_internal();
  ::CSODOTALobbyInternal* temp = internal_;
  internal_ = NULL;
  return temp;
}
inline ::CSODOTALobbyInternal* CSODOTALobbyMemcached::mutable_internal() {
  set_has_internal();
  if (internal_ == NULL) {
    internal_ = new ::CSODOTALobbyInternal;
  }
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMemcached.internal)
  return internal_;
}
inline void CSODOTALobbyMemcached::set_allocated_internal(::CSODOTALobbyInternal* internal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete internal_;
  }
  if (internal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      internal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, internal, submessage_arena);
    }
    set_has_internal();
  } else {
    clear_has_internal();
  }
  internal_ = internal;
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMemcached.internal)
}

// -------------------------------------------------------------------

// CMsgConnectedPlayers_Player

// optional fixed64 steam_id = 1;
inline bool CMsgConnectedPlayers_Player::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgConnectedPlayers_Player::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgConnectedPlayers_Player::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgConnectedPlayers_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.steam_id)
  return steam_id_;
}
inline void CMsgConnectedPlayers_Player::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.Player.steam_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgConnectedPlayers_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgConnectedPlayers_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgConnectedPlayers_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.hero_id)
  return hero_id_;
}
inline void CMsgConnectedPlayers_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.Player.hero_id)
}

// -------------------------------------------------------------------

// CMsgConnectedPlayers

// repeated .CMsgConnectedPlayers.Player players = 1;
inline int CMsgConnectedPlayers::players_size() const {
  return players_.size();
}
inline void CMsgConnectedPlayers::clear_players() {
  players_.Clear();
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.players)
  return players_.Get(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgConnectedPlayers.players)
  return players_.Mutable(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_players() {
  // @@protoc_insertion_point(field_add:CMsgConnectedPlayers.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgConnectedPlayers.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::players() const {
  // @@protoc_insertion_point(field_list:CMsgConnectedPlayers.players)
  return players_;
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgConnectedPlayers::has_game_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgConnectedPlayers::set_has_game_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgConnectedPlayers::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgConnectedPlayers::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline ::DOTA_GameState CMsgConnectedPlayers::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.game_state)
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline void CMsgConnectedPlayers::set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.game_state)
}

// optional uint32 num_spectators = 3;
inline bool CMsgConnectedPlayers::has_num_spectators() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgConnectedPlayers::set_has_num_spectators() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgConnectedPlayers::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgConnectedPlayers::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers::num_spectators() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.num_spectators)
  return num_spectators_;
}
inline void CMsgConnectedPlayers::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.num_spectators)
}

// optional uint32 tower_state = 4;
inline bool CMsgConnectedPlayers::has_tower_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgConnectedPlayers::set_has_tower_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgConnectedPlayers::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgConnectedPlayers::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers::tower_state() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.tower_state)
  return tower_state_;
}
inline void CMsgConnectedPlayers::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.tower_state)
}

// optional bool skip_player_validation = 5;
inline bool CMsgConnectedPlayers::has_skip_player_validation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgConnectedPlayers::set_has_skip_player_validation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgConnectedPlayers::clear_has_skip_player_validation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgConnectedPlayers::clear_skip_player_validation() {
  skip_player_validation_ = false;
  clear_has_skip_player_validation();
}
inline bool CMsgConnectedPlayers::skip_player_validation() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.skip_player_validation)
  return skip_player_validation_;
}
inline void CMsgConnectedPlayers::set_skip_player_validation(bool value) {
  set_has_skip_player_validation();
  skip_player_validation_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.skip_player_validation)
}

// -------------------------------------------------------------------

// CMsgMatchmakingLanguagePreference

// optional uint32 matchmaking_language_preference = 1;
inline bool CMsgMatchmakingLanguagePreference::has_matchmaking_language_preference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMatchmakingLanguagePreference::set_has_matchmaking_language_preference() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMatchmakingLanguagePreference::clear_has_matchmaking_language_preference() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMatchmakingLanguagePreference::clear_matchmaking_language_preference() {
  matchmaking_language_preference_ = 0u;
  clear_has_matchmaking_language_preference();
}
inline ::google::protobuf::uint32 CMsgMatchmakingLanguagePreference::matchmaking_language_preference() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingLanguagePreference.matchmaking_language_preference)
  return matchmaking_language_preference_;
}
inline void CMsgMatchmakingLanguagePreference::set_matchmaking_language_preference(::google::protobuf::uint32 value) {
  set_has_matchmaking_language_preference();
  matchmaking_language_preference_ = value;
  // @@protoc_insertion_point(field_set:CMsgMatchmakingLanguagePreference.matchmaking_language_preference)
}

// -------------------------------------------------------------------

// CMsgStartFindingMatch

// optional string key = 1;
inline bool CMsgStartFindingMatch::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgStartFindingMatch::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgStartFindingMatch::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgStartFindingMatch::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CMsgStartFindingMatch::key() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.key)
  return key_.GetNoArena();
}
inline void CMsgStartFindingMatch::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.key)
}
#if LANG_CXX11
inline void CMsgStartFindingMatch::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgStartFindingMatch.key)
}
#endif
inline void CMsgStartFindingMatch::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatch.key)
}
inline void CMsgStartFindingMatch::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatch.key)
}
inline ::std::string* CMsgStartFindingMatch::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgStartFindingMatch::release_key() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatch.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgStartFindingMatch::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.key)
}

// optional uint32 matchgroups = 2 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgStartFindingMatch::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgStartFindingMatch::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgStartFindingMatch::clear_matchgroups() {
  matchgroups_ = 4294967295u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::matchgroups() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchgroups)
  return matchgroups_;
}
inline void CMsgStartFindingMatch::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchgroups)
}

// optional uint32 client_version = 3;
inline bool CMsgStartFindingMatch::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgStartFindingMatch::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgStartFindingMatch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgStartFindingMatch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.client_version)
  return client_version_;
}
inline void CMsgStartFindingMatch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.client_version)
}

// optional uint32 game_modes = 4 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_game_modes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgStartFindingMatch::set_has_game_modes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgStartFindingMatch::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgStartFindingMatch::clear_game_modes() {
  game_modes_ = 4294967295u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::game_modes() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_modes)
  return game_modes_;
}
inline void CMsgStartFindingMatch::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_modes)
}

// optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
inline bool CMsgStartFindingMatch::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgStartFindingMatch::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgStartFindingMatch::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgStartFindingMatch::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CMsgStartFindingMatch::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CMsgStartFindingMatch::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.bot_difficulty)
}

// optional .MatchType match_type = 6 [default = MATCH_TYPE_RANKED];
inline bool CMsgStartFindingMatch::has_match_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgStartFindingMatch::set_has_match_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgStartFindingMatch::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgStartFindingMatch::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CMsgStartFindingMatch::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CMsgStartFindingMatch::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.match_type)
}

// optional uint32 matchlanguages = 7 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgStartFindingMatch::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgStartFindingMatch::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgStartFindingMatch::clear_matchlanguages() {
  matchlanguages_ = 4294967295u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchlanguages)
  return matchlanguages_;
}
inline void CMsgStartFindingMatch::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchlanguages)
}

// optional uint32 team_id = 8;
inline bool CMsgStartFindingMatch::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgStartFindingMatch::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgStartFindingMatch::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgStartFindingMatch::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.team_id)
  return team_id_;
}
inline void CMsgStartFindingMatch::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.team_id)
}

// -------------------------------------------------------------------

// CMsgStopFindingMatch

// -------------------------------------------------------------------

// CMsgReadyUp

// optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
inline bool CMsgReadyUp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyUp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgReadyUp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgReadyUp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::DOTALobbyReadyState CMsgReadyUp::state() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.state)
  return static_cast< ::DOTALobbyReadyState >(state_);
}
inline void CMsgReadyUp::set_state(::DOTALobbyReadyState value) {
  assert(::DOTALobbyReadyState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgReadyUp.state)
}

// -------------------------------------------------------------------

// CMsgReadyUpStatus

// optional fixed64 lobby_id = 1;
inline bool CMsgReadyUpStatus::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyUpStatus::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgReadyUpStatus::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgReadyUpStatus::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgReadyUpStatus::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.lobby_id)
  return lobby_id_;
}
inline void CMsgReadyUpStatus::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.lobby_id)
}

// repeated uint32 accepted_ids = 2;
inline int CMsgReadyUpStatus::accepted_ids_size() const {
  return accepted_ids_.size();
}
inline void CMsgReadyUpStatus::clear_accepted_ids() {
  accepted_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgReadyUpStatus::accepted_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_.Get(index);
}
inline void CMsgReadyUpStatus::set_accepted_ids(int index, ::google::protobuf::uint32 value) {
  accepted_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.accepted_ids)
}
inline void CMsgReadyUpStatus::add_accepted_ids(::google::protobuf::uint32 value) {
  accepted_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.accepted_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::accepted_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_accepted_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.accepted_ids)
  return &accepted_ids_;
}

// repeated uint32 declined_ids = 3;
inline int CMsgReadyUpStatus::declined_ids_size() const {
  return declined_ids_.size();
}
inline void CMsgReadyUpStatus::clear_declined_ids() {
  declined_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgReadyUpStatus::declined_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.declined_ids)
  return declined_ids_.Get(index);
}
inline void CMsgReadyUpStatus::set_declined_ids(int index, ::google::protobuf::uint32 value) {
  declined_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.declined_ids)
}
inline void CMsgReadyUpStatus::add_declined_ids(::google::protobuf::uint32 value) {
  declined_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.declined_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::declined_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.declined_ids)
  return declined_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_declined_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.declined_ids)
  return &declined_ids_;
}

// -------------------------------------------------------------------

// CMsgSpawnLootGreevil

// optional bool rare = 1;
inline bool CMsgSpawnLootGreevil::has_rare() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpawnLootGreevil::set_has_rare() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpawnLootGreevil::clear_has_rare() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpawnLootGreevil::clear_rare() {
  rare_ = false;
  clear_has_rare();
}
inline bool CMsgSpawnLootGreevil::rare() const {
  // @@protoc_insertion_point(field_get:CMsgSpawnLootGreevil.rare)
  return rare_;
}
inline void CMsgSpawnLootGreevil::set_rare(bool value) {
  set_has_rare();
  rare_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpawnLootGreevil.rare)
}

// -------------------------------------------------------------------

// CMsgDismissLootGreevil

// optional bool killed = 2;
inline bool CMsgDismissLootGreevil::has_killed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDismissLootGreevil::set_has_killed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDismissLootGreevil::clear_has_killed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDismissLootGreevil::clear_killed() {
  killed_ = false;
  clear_has_killed();
}
inline bool CMsgDismissLootGreevil::killed() const {
  // @@protoc_insertion_point(field_get:CMsgDismissLootGreevil.killed)
  return killed_;
}
inline void CMsgDismissLootGreevil::set_killed(bool value) {
  set_has_killed();
  killed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDismissLootGreevil.killed)
}

// optional bool rare = 3;
inline bool CMsgDismissLootGreevil::has_rare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDismissLootGreevil::set_has_rare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDismissLootGreevil::clear_has_rare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDismissLootGreevil::clear_rare() {
  rare_ = false;
  clear_has_rare();
}
inline bool CMsgDismissLootGreevil::rare() const {
  // @@protoc_insertion_point(field_get:CMsgDismissLootGreevil.rare)
  return rare_;
}
inline void CMsgDismissLootGreevil::set_rare(bool value) {
  set_has_rare();
  rare_ = value;
  // @@protoc_insertion_point(field_set:CMsgDismissLootGreevil.rare)
}

// -------------------------------------------------------------------

// CMsgDismissLootGreevilResponse

// -------------------------------------------------------------------

// CSourceTVGame_Player

// optional fixed64 steam_id = 1;
inline bool CSourceTVGame_Player::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGame_Player::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGame_Player::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGame_Player::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSourceTVGame_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.Player.steam_id)
  return steam_id_;
}
inline void CSourceTVGame_Player::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.Player.steam_id)
}

// optional string name = 2;
inline bool CSourceTVGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGame_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CSourceTVGame_Player::name() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.Player.name)
  return name_.GetNoArena();
}
inline void CSourceTVGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSourceTVGame.Player.name)
}
#if LANG_CXX11
inline void CSourceTVGame_Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSourceTVGame.Player.name)
}
#endif
inline void CSourceTVGame_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSourceTVGame.Player.name)
}
inline void CSourceTVGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSourceTVGame.Player.name)
}
inline ::std::string* CSourceTVGame_Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGame_Player::release_name() {
  // @@protoc_insertion_point(field_release:CSourceTVGame.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGame_Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGame.Player.name)
}

// optional uint32 hero_id = 3;
inline bool CSourceTVGame_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSourceTVGame_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSourceTVGame_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSourceTVGame_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CSourceTVGame_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.Player.hero_id)
  return hero_id_;
}
inline void CSourceTVGame_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.Player.hero_id)
}

// -------------------------------------------------------------------

// CSourceTVGame

// optional uint32 source_tv_public_addr = 1;
inline bool CSourceTVGame::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGame::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGame::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGame::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CSourceTVGame::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CSourceTVGame::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 2;
inline bool CSourceTVGame::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSourceTVGame::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSourceTVGame::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSourceTVGame::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CSourceTVGame::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CSourceTVGame::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.source_tv_private_addr)
}

// optional uint32 source_tv_port = 3;
inline bool CSourceTVGame::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSourceTVGame::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSourceTVGame::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSourceTVGame::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CSourceTVGame::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.source_tv_port)
  return source_tv_port_;
}
inline void CSourceTVGame::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.source_tv_port)
}

// repeated .CSourceTVGame.Player good_players = 14;
inline int CSourceTVGame::good_players_size() const {
  return good_players_.size();
}
inline void CSourceTVGame::clear_good_players() {
  good_players_.Clear();
}
inline const ::CSourceTVGame_Player& CSourceTVGame::good_players(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.good_players)
  return good_players_.Get(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::mutable_good_players(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.good_players)
  return good_players_.Mutable(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::add_good_players() {
  // @@protoc_insertion_point(field_add:CSourceTVGame.good_players)
  return good_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
CSourceTVGame::mutable_good_players() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGame.good_players)
  return &good_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
CSourceTVGame::good_players() const {
  // @@protoc_insertion_point(field_list:CSourceTVGame.good_players)
  return good_players_;
}

// repeated .CSourceTVGame.Player bad_players = 15;
inline int CSourceTVGame::bad_players_size() const {
  return bad_players_.size();
}
inline void CSourceTVGame::clear_bad_players() {
  bad_players_.Clear();
}
inline const ::CSourceTVGame_Player& CSourceTVGame::bad_players(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.bad_players)
  return bad_players_.Get(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::mutable_bad_players(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.bad_players)
  return bad_players_.Mutable(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::add_bad_players() {
  // @@protoc_insertion_point(field_add:CSourceTVGame.bad_players)
  return bad_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
CSourceTVGame::mutable_bad_players() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGame.bad_players)
  return &bad_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
CSourceTVGame::bad_players() const {
  // @@protoc_insertion_point(field_list:CSourceTVGame.bad_players)
  return bad_players_;
}

// repeated .CSourceTVGame.Player other_players = 16;
inline int CSourceTVGame::other_players_size() const {
  return other_players_.size();
}
inline void CSourceTVGame::clear_other_players() {
  other_players_.Clear();
}
inline const ::CSourceTVGame_Player& CSourceTVGame::other_players(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.other_players)
  return other_players_.Get(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::mutable_other_players(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.other_players)
  return other_players_.Mutable(index);
}
inline ::CSourceTVGame_Player* CSourceTVGame::add_other_players() {
  // @@protoc_insertion_point(field_add:CSourceTVGame.other_players)
  return other_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >*
CSourceTVGame::mutable_other_players() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGame.other_players)
  return &other_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame_Player >&
CSourceTVGame::other_players() const {
  // @@protoc_insertion_point(field_list:CSourceTVGame.other_players)
  return other_players_;
}

// optional string game_name = 7;
inline bool CSourceTVGame::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGame::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGame::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGame::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
inline const ::std::string& CSourceTVGame::game_name() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.game_name)
  return game_name_.GetNoArena();
}
inline void CSourceTVGame::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSourceTVGame.game_name)
}
#if LANG_CXX11
inline void CSourceTVGame::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSourceTVGame.game_name)
}
#endif
inline void CSourceTVGame::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSourceTVGame.game_name)
}
inline void CSourceTVGame::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSourceTVGame.game_name)
}
inline ::std::string* CSourceTVGame::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGame::release_game_name() {
  // @@protoc_insertion_point(field_release:CSourceTVGame.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGame::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGame.game_name)
}

// repeated .CLobbyTeamDetails team_details = 9;
inline int CSourceTVGame::team_details_size() const {
  return team_details_.size();
}
inline void CSourceTVGame::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CSourceTVGame::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CSourceTVGame::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGame.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CSourceTVGame::add_team_details() {
  // @@protoc_insertion_point(field_add:CSourceTVGame.team_details)
  return team_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSourceTVGame::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGame.team_details)
  return &team_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSourceTVGame::team_details() const {
  // @@protoc_insertion_point(field_list:CSourceTVGame.team_details)
  return team_details_;
}

// optional uint32 num_spectators = 10;
inline bool CSourceTVGame::has_num_spectators() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSourceTVGame::set_has_num_spectators() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSourceTVGame::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSourceTVGame::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CSourceTVGame::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.num_spectators)
  return num_spectators_;
}
inline void CSourceTVGame::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.num_spectators)
}

// optional uint32 tournament_id = 11;
inline bool CSourceTVGame::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSourceTVGame::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSourceTVGame::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSourceTVGame::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CSourceTVGame::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.tournament_id)
  return tournament_id_;
}
inline void CSourceTVGame::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.tournament_id)
}

// optional uint32 tournament_game_id = 12;
inline bool CSourceTVGame::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSourceTVGame::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSourceTVGame::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSourceTVGame::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CSourceTVGame::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.tournament_game_id)
  return tournament_game_id_;
}
inline void CSourceTVGame::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.tournament_game_id)
}

// optional uint32 tower_state = 13;
inline bool CSourceTVGame::has_tower_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSourceTVGame::set_has_tower_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSourceTVGame::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSourceTVGame::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
inline ::google::protobuf::uint32 CSourceTVGame::tower_state() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.tower_state)
  return tower_state_;
}
inline void CSourceTVGame::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.tower_state)
}

// optional float tv_broadcast_time = 17;
inline bool CSourceTVGame::has_tv_broadcast_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSourceTVGame::set_has_tv_broadcast_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSourceTVGame::clear_has_tv_broadcast_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSourceTVGame::clear_tv_broadcast_time() {
  tv_broadcast_time_ = 0;
  clear_has_tv_broadcast_time();
}
inline float CSourceTVGame::tv_broadcast_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.tv_broadcast_time)
  return tv_broadcast_time_;
}
inline void CSourceTVGame::set_tv_broadcast_time(float value) {
  set_has_tv_broadcast_time();
  tv_broadcast_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.tv_broadcast_time)
}

// optional float game_time = 18;
inline bool CSourceTVGame::has_game_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSourceTVGame::set_has_game_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSourceTVGame::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSourceTVGame::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline float CSourceTVGame::game_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.game_time)
  return game_time_;
}
inline void CSourceTVGame::set_game_time(float value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.game_time)
}

// optional fixed64 server_steamid = 19;
inline bool CSourceTVGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSourceTVGame::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSourceTVGame::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSourceTVGame::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CSourceTVGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.server_steamid)
  return server_steamid_;
}
inline void CSourceTVGame::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.server_steamid)
}

// optional uint32 leagueid = 20;
inline bool CSourceTVGame::has_leagueid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSourceTVGame::set_has_leagueid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSourceTVGame::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSourceTVGame::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CSourceTVGame::leagueid() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.leagueid)
  return leagueid_;
}
inline void CSourceTVGame::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.leagueid)
}

// optional .DOTA_GameMode game_mode = 21 [default = DOTA_GAMEMODE_NONE];
inline bool CSourceTVGame::has_game_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSourceTVGame::set_has_game_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSourceTVGame::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSourceTVGame::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CSourceTVGame::game_mode() const {
  // @@protoc_insertion_point(field_get:CSourceTVGame.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CSourceTVGame::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGame.game_mode)
}

// -------------------------------------------------------------------

// CMsgSourceTVGamesResponse

// repeated .CSourceTVGame games = 1;
inline int CMsgSourceTVGamesResponse::games_size() const {
  return games_.size();
}
inline void CMsgSourceTVGamesResponse::clear_games() {
  games_.Clear();
}
inline const ::CSourceTVGame& CMsgSourceTVGamesResponse::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSourceTVGamesResponse.games)
  return games_.Get(index);
}
inline ::CSourceTVGame* CMsgSourceTVGamesResponse::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSourceTVGamesResponse.games)
  return games_.Mutable(index);
}
inline ::CSourceTVGame* CMsgSourceTVGamesResponse::add_games() {
  // @@protoc_insertion_point(field_add:CMsgSourceTVGamesResponse.games)
  return games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGame >*
CMsgSourceTVGamesResponse::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSourceTVGamesResponse.games)
  return &games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGame >&
CMsgSourceTVGamesResponse::games() const {
  // @@protoc_insertion_point(field_list:CMsgSourceTVGamesResponse.games)
  return games_;
}

// optional uint32 num_total_games = 2;
inline bool CMsgSourceTVGamesResponse::has_num_total_games() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSourceTVGamesResponse::set_has_num_total_games() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSourceTVGamesResponse::clear_has_num_total_games() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSourceTVGamesResponse::clear_num_total_games() {
  num_total_games_ = 0u;
  clear_has_num_total_games();
}
inline ::google::protobuf::uint32 CMsgSourceTVGamesResponse::num_total_games() const {
  // @@protoc_insertion_point(field_get:CMsgSourceTVGamesResponse.num_total_games)
  return num_total_games_;
}
inline void CMsgSourceTVGamesResponse::set_num_total_games(::google::protobuf::uint32 value) {
  set_has_num_total_games();
  num_total_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgSourceTVGamesResponse.num_total_games)
}

// -------------------------------------------------------------------

// CMsgFindSourceTVGames

// optional string search_key = 1;
inline bool CMsgFindSourceTVGames::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgFindSourceTVGames::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgFindSourceTVGames::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CMsgFindSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgFindSourceTVGames::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.search_key)
}
#if LANG_CXX11
inline void CMsgFindSourceTVGames::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgFindSourceTVGames.search_key)
}
#endif
inline void CMsgFindSourceTVGames::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgFindSourceTVGames.search_key)
}
inline void CMsgFindSourceTVGames::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgFindSourceTVGames.search_key)
}
inline ::std::string* CMsgFindSourceTVGames::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:CMsgFindSourceTVGames.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgFindSourceTVGames::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgFindSourceTVGames.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgFindSourceTVGames::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgFindSourceTVGames.search_key)
}

// optional uint32 start = 2;
inline bool CMsgFindSourceTVGames::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgFindSourceTVGames::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgFindSourceTVGames::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 CMsgFindSourceTVGames::start() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.start)
  return start_;
}
inline void CMsgFindSourceTVGames::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.start)
}

// optional uint32 num_games = 3;
inline bool CMsgFindSourceTVGames::has_num_games() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_num_games() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgFindSourceTVGames::clear_has_num_games() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgFindSourceTVGames::clear_num_games() {
  num_games_ = 0u;
  clear_has_num_games();
}
inline ::google::protobuf::uint32 CMsgFindSourceTVGames::num_games() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.num_games)
  return num_games_;
}
inline void CMsgFindSourceTVGames::set_num_games(::google::protobuf::uint32 value) {
  set_has_num_games();
  num_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.num_games)
}

// optional uint32 leagueid = 4;
inline bool CMsgFindSourceTVGames::has_leagueid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_leagueid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgFindSourceTVGames::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgFindSourceTVGames::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgFindSourceTVGames::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.leagueid)
  return leagueid_;
}
inline void CMsgFindSourceTVGames::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.leagueid)
}

// optional uint32 heroid = 5;
inline bool CMsgFindSourceTVGames::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgFindSourceTVGames::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgFindSourceTVGames::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CMsgFindSourceTVGames::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.heroid)
  return heroid_;
}
inline void CMsgFindSourceTVGames::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.heroid)
}

// optional bool team_game = 6;
inline bool CMsgFindSourceTVGames::has_team_game() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_team_game() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgFindSourceTVGames::clear_has_team_game() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgFindSourceTVGames::clear_team_game() {
  team_game_ = false;
  clear_has_team_game();
}
inline bool CMsgFindSourceTVGames::team_game() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.team_game)
  return team_game_;
}
inline void CMsgFindSourceTVGames::set_team_game(bool value) {
  set_has_team_game();
  team_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.team_game)
}

// optional bool diretide = 7;
inline bool CMsgFindSourceTVGames::has_diretide() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_diretide() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgFindSourceTVGames::clear_has_diretide() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgFindSourceTVGames::clear_diretide() {
  diretide_ = false;
  clear_has_diretide();
}
inline bool CMsgFindSourceTVGames::diretide() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.diretide)
  return diretide_;
}
inline void CMsgFindSourceTVGames::set_diretide(bool value) {
  set_has_diretide();
  diretide_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.diretide)
}

// optional bool xmas = 8;
inline bool CMsgFindSourceTVGames::has_xmas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgFindSourceTVGames::set_has_xmas() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgFindSourceTVGames::clear_has_xmas() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgFindSourceTVGames::clear_xmas() {
  xmas_ = false;
  clear_has_xmas();
}
inline bool CMsgFindSourceTVGames::xmas() const {
  // @@protoc_insertion_point(field_get:CMsgFindSourceTVGames.xmas)
  return xmas_;
}
inline void CMsgFindSourceTVGames::set_xmas(bool value) {
  set_has_xmas();
  xmas_ = value;
  // @@protoc_insertion_point(field_set:CMsgFindSourceTVGames.xmas)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
inline bool CMsgSpectateFriendGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGame.steam_id)
  return steam_id_;
}
inline void CMsgSpectateFriendGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGame.steam_id)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
inline bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGameResponse::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGameResponse.server_steamid)
  return server_steamid_;
}
inline void CMsgSpectateFriendGameResponse::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGameResponse.server_steamid)
}

// -------------------------------------------------------------------

// CMsgAbandonCurrentGame

// -------------------------------------------------------------------

// CMsgGameServerInfo

// optional fixed32 server_public_ip_addr = 1;
inline bool CMsgGameServerInfo::has_server_public_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_public_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameServerInfo::clear_has_server_public_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameServerInfo::clear_server_public_ip_addr() {
  server_public_ip_addr_ = 0u;
  clear_has_server_public_ip_addr();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_public_ip_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_public_ip_addr)
  return server_public_ip_addr_;
}
inline void CMsgGameServerInfo::set_server_public_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_public_ip_addr();
  server_public_ip_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_public_ip_addr)
}

// optional fixed32 server_private_ip_addr = 2;
inline bool CMsgGameServerInfo::has_server_private_ip_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_private_ip_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameServerInfo::clear_has_server_private_ip_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameServerInfo::clear_server_private_ip_addr() {
  server_private_ip_addr_ = 0u;
  clear_has_server_private_ip_addr();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_private_ip_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_private_ip_addr)
  return server_private_ip_addr_;
}
inline void CMsgGameServerInfo::set_server_private_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_private_ip_addr();
  server_private_ip_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_private_ip_addr)
}

// optional uint32 server_port = 3;
inline bool CMsgGameServerInfo::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameServerInfo::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameServerInfo::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_port)
  return server_port_;
}
inline void CMsgGameServerInfo::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_port)
}

// optional uint32 server_tv_port = 4;
inline bool CMsgGameServerInfo::has_server_tv_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_tv_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameServerInfo::clear_has_server_tv_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameServerInfo::clear_server_tv_port() {
  server_tv_port_ = 0u;
  clear_has_server_tv_port();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_tv_port)
  return server_tv_port_;
}
inline void CMsgGameServerInfo::set_server_tv_port(::google::protobuf::uint32 value) {
  set_has_server_tv_port();
  server_tv_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_tv_port)
}

// optional string server_key = 5;
inline bool CMsgGameServerInfo::has_server_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerInfo::clear_has_server_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerInfo::clear_server_key() {
  server_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_key();
}
inline const ::std::string& CMsgGameServerInfo::server_key() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_key)
  return server_key_.GetNoArena();
}
inline void CMsgGameServerInfo::set_server_key(const ::std::string& value) {
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_key)
}
#if LANG_CXX11
inline void CMsgGameServerInfo::set_server_key(::std::string&& value) {
  set_has_server_key();
  server_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameServerInfo.server_key)
}
#endif
inline void CMsgGameServerInfo::set_server_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameServerInfo.server_key)
}
inline void CMsgGameServerInfo::set_server_key(const char* value, size_t size) {
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameServerInfo.server_key)
}
inline ::std::string* CMsgGameServerInfo::mutable_server_key() {
  set_has_server_key();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerInfo.server_key)
  return server_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameServerInfo::release_server_key() {
  // @@protoc_insertion_point(field_release:CMsgGameServerInfo.server_key)
  clear_has_server_key();
  return server_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameServerInfo::set_allocated_server_key(::std::string* server_key) {
  if (server_key != NULL) {
    set_has_server_key();
  } else {
    clear_has_server_key();
  }
  server_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerInfo.server_key)
}

// optional bool server_hibernation = 6;
inline bool CMsgGameServerInfo::has_server_hibernation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_hibernation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGameServerInfo::clear_has_server_hibernation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGameServerInfo::clear_server_hibernation() {
  server_hibernation_ = false;
  clear_has_server_hibernation();
}
inline bool CMsgGameServerInfo::server_hibernation() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_hibernation)
  return server_hibernation_;
}
inline void CMsgGameServerInfo::set_server_hibernation(bool value) {
  set_has_server_hibernation();
  server_hibernation_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_hibernation)
}

// optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
inline bool CMsgGameServerInfo::has_server_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGameServerInfo::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGameServerInfo::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::CMsgGameServerInfo_ServerType CMsgGameServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_type)
  return static_cast< ::CMsgGameServerInfo_ServerType >(server_type_);
}
inline void CMsgGameServerInfo::set_server_type(::CMsgGameServerInfo_ServerType value) {
  assert(::CMsgGameServerInfo_ServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_type)
}

// optional uint32 server_region = 8;
inline bool CMsgGameServerInfo::has_server_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_region() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGameServerInfo::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGameServerInfo::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_region)
  return server_region_;
}
inline void CMsgGameServerInfo::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_region)
}

// optional float server_loadavg = 9;
inline bool CMsgGameServerInfo::has_server_loadavg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_loadavg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameServerInfo::clear_has_server_loadavg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameServerInfo::clear_server_loadavg() {
  server_loadavg_ = 0;
  clear_has_server_loadavg();
}
inline float CMsgGameServerInfo::server_loadavg() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_loadavg)
  return server_loadavg_;
}
inline void CMsgGameServerInfo::set_server_loadavg(float value) {
  set_has_server_loadavg();
  server_loadavg_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_loadavg)
}

// optional float server_tv_broadcast_time = 10;
inline bool CMsgGameServerInfo::has_server_tv_broadcast_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_tv_broadcast_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameServerInfo::clear_has_server_tv_broadcast_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameServerInfo::clear_server_tv_broadcast_time() {
  server_tv_broadcast_time_ = 0;
  clear_has_server_tv_broadcast_time();
}
inline float CMsgGameServerInfo::server_tv_broadcast_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_tv_broadcast_time)
  return server_tv_broadcast_time_;
}
inline void CMsgGameServerInfo::set_server_tv_broadcast_time(float value) {
  set_has_server_tv_broadcast_time();
  server_tv_broadcast_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_tv_broadcast_time)
}

// optional float server_game_time = 11;
inline bool CMsgGameServerInfo::has_server_game_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_game_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGameServerInfo::clear_has_server_game_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGameServerInfo::clear_server_game_time() {
  server_game_time_ = 0;
  clear_has_server_game_time();
}
inline float CMsgGameServerInfo::server_game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_game_time)
  return server_game_time_;
}
inline void CMsgGameServerInfo::set_server_game_time(float value) {
  set_has_server_game_time();
  server_game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_game_time)
}

// optional fixed64 server_relay_connected_steam_id = 12;
inline bool CMsgGameServerInfo::has_server_relay_connected_steam_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_relay_connected_steam_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGameServerInfo::clear_has_server_relay_connected_steam_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGameServerInfo::clear_server_relay_connected_steam_id() {
  server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_relay_connected_steam_id();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::server_relay_connected_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_relay_connected_steam_id)
  return server_relay_connected_steam_id_;
}
inline void CMsgGameServerInfo::set_server_relay_connected_steam_id(::google::protobuf::uint64 value) {
  set_has_server_relay_connected_steam_id();
  server_relay_connected_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_relay_connected_steam_id)
}

// optional uint32 relay_slots_max = 13;
inline bool CMsgGameServerInfo::has_relay_slots_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relay_slots_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGameServerInfo::clear_has_relay_slots_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGameServerInfo::clear_relay_slots_max() {
  relay_slots_max_ = 0u;
  clear_has_relay_slots_max();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::relay_slots_max() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relay_slots_max)
  return relay_slots_max_;
}
inline void CMsgGameServerInfo::set_relay_slots_max(::google::protobuf::uint32 value) {
  set_has_relay_slots_max();
  relay_slots_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relay_slots_max)
}

// optional int32 relays_connected = 14;
inline bool CMsgGameServerInfo::has_relays_connected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relays_connected() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGameServerInfo::clear_has_relays_connected() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGameServerInfo::clear_relays_connected() {
  relays_connected_ = 0;
  clear_has_relays_connected();
}
inline ::google::protobuf::int32 CMsgGameServerInfo::relays_connected() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relays_connected)
  return relays_connected_;
}
inline void CMsgGameServerInfo::set_relays_connected(::google::protobuf::int32 value) {
  set_has_relays_connected();
  relays_connected_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relays_connected)
}

// optional int32 relay_clients_connected = 15;
inline bool CMsgGameServerInfo::has_relay_clients_connected() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relay_clients_connected() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGameServerInfo::clear_has_relay_clients_connected() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGameServerInfo::clear_relay_clients_connected() {
  relay_clients_connected_ = 0;
  clear_has_relay_clients_connected();
}
inline ::google::protobuf::int32 CMsgGameServerInfo::relay_clients_connected() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relay_clients_connected)
  return relay_clients_connected_;
}
inline void CMsgGameServerInfo::set_relay_clients_connected(::google::protobuf::int32 value) {
  set_has_relay_clients_connected();
  relay_clients_connected_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relay_clients_connected)
}

// optional fixed64 relayed_game_server_steam_id = 16;
inline bool CMsgGameServerInfo::has_relayed_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relayed_game_server_steam_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGameServerInfo::clear_has_relayed_game_server_steam_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGameServerInfo::clear_relayed_game_server_steam_id() {
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_relayed_game_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::relayed_game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relayed_game_server_steam_id)
  return relayed_game_server_steam_id_;
}
inline void CMsgGameServerInfo::set_relayed_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_relayed_game_server_steam_id();
  relayed_game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relayed_game_server_steam_id)
}

// optional uint32 parent_relay_count = 17;
inline bool CMsgGameServerInfo::has_parent_relay_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGameServerInfo::set_has_parent_relay_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGameServerInfo::clear_has_parent_relay_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGameServerInfo::clear_parent_relay_count() {
  parent_relay_count_ = 0u;
  clear_has_parent_relay_count();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::parent_relay_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.parent_relay_count)
  return parent_relay_count_;
}
inline void CMsgGameServerInfo::set_parent_relay_count(::google::protobuf::uint32 value) {
  set_has_parent_relay_count();
  parent_relay_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.parent_relay_count)
}

// optional fixed64 tv_secret_code = 18;
inline bool CMsgGameServerInfo::has_tv_secret_code() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGameServerInfo::set_has_tv_secret_code() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGameServerInfo::clear_has_tv_secret_code() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGameServerInfo::clear_tv_secret_code() {
  tv_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_secret_code();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::tv_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.tv_secret_code)
  return tv_secret_code_;
}
inline void CMsgGameServerInfo::set_tv_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_secret_code();
  tv_secret_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.tv_secret_code)
}

// -------------------------------------------------------------------

// CMsgLeaverDetected

// optional fixed64 steam_id = 1;
inline bool CMsgLeaverDetected::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverDetected::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverDetected::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverDetected::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgLeaverDetected::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.steam_id)
  return steam_id_;
}
inline void CMsgLeaverDetected::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.steam_id)
}

// optional uint32 leaver_status = 2;
inline bool CMsgLeaverDetected::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverDetected::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeaverDetected::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeaverDetected::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
inline ::google::protobuf::uint32 CMsgLeaverDetected::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.leaver_status)
  return leaver_status_;
}
inline void CMsgLeaverDetected::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.leaver_status)
}

// -------------------------------------------------------------------

// CMsgLeaverDetectedResponse

// optional uint32 result = 1;
inline bool CMsgLeaverDetectedResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverDetectedResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverDetectedResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverDetectedResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgLeaverDetectedResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetectedResponse.result)
  return result_;
}
inline void CMsgLeaverDetectedResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeaverDetectedResponse.result)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetDetails

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbySetDetails::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lobby_id)
  return lobby_id_;
}
inline void CMsgPracticeLobbySetDetails::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lobby_id)
}

// optional string game_name = 2;
inline bool CMsgPracticeLobbySetDetails::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_name)
  return game_name_.GetNoArena();
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_name)
}
#if LANG_CXX11
inline void CMsgPracticeLobbySetDetails::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.game_name)
}
#endif
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.game_name)
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.game_name)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.game_name)
}

// repeated .CLobbyTeamDetails team_details = 3;
inline int CMsgPracticeLobbySetDetails::team_details_size() const {
  return team_details_.size();
}
inline void CMsgPracticeLobbySetDetails::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CMsgPracticeLobbySetDetails::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::add_team_details() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CMsgPracticeLobbySetDetails::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbySetDetails.team_details)
  return &team_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CMsgPracticeLobbySetDetails::team_details() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbySetDetails.team_details)
  return team_details_;
}

// optional uint32 server_region = 4;
inline bool CMsgPracticeLobbySetDetails::has_server_region() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_server_region() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.server_region)
  return server_region_;
}
inline void CMsgPracticeLobbySetDetails::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.server_region)
}

// optional uint32 game_mode = 5;
inline bool CMsgPracticeLobbySetDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_mode)
  return game_mode_;
}
inline void CMsgPracticeLobbySetDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_mode)
}

// optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
inline bool CMsgPracticeLobbySetDetails::has_cm_pick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_cm_pick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline ::DOTA_CM_PICK CMsgPracticeLobbySetDetails::cm_pick() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline void CMsgPracticeLobbySetDetails::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.cm_pick)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_radiant() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 0;
  clear_has_bot_difficulty_radiant();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
}

// optional bool allow_cheats = 10;
inline bool CMsgPracticeLobbySetDetails::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CMsgPracticeLobbySetDetails::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_cheats)
  return allow_cheats_;
}
inline void CMsgPracticeLobbySetDetails::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_cheats)
}

// optional bool fill_with_bots = 11;
inline bool CMsgPracticeLobbySetDetails::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPracticeLobbySetDetails::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CMsgPracticeLobbySetDetails::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.fill_with_bots)
  return fill_with_bots_;
}
inline void CMsgPracticeLobbySetDetails::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.fill_with_bots)
}

// optional bool intro_mode = 12;
inline bool CMsgPracticeLobbySetDetails::has_intro_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_intro_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgPracticeLobbySetDetails::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CMsgPracticeLobbySetDetails::intro_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.intro_mode)
  return intro_mode_;
}
inline void CMsgPracticeLobbySetDetails::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.intro_mode)
}

// optional bool allow_spectating = 13;
inline bool CMsgPracticeLobbySetDetails::has_allow_spectating() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allow_spectating() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgPracticeLobbySetDetails::clear_allow_spectating() {
  allow_spectating_ = false;
  clear_has_allow_spectating();
}
inline bool CMsgPracticeLobbySetDetails::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_spectating)
  return allow_spectating_;
}
inline void CMsgPracticeLobbySetDetails::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_spectating)
}

// optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
inline bool CMsgPracticeLobbySetDetails::has_game_version() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_version() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_version() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline ::DOTAGameVersion CMsgPracticeLobbySetDetails::game_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline void CMsgPracticeLobbySetDetails::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_version)
}

// optional string pass_key = 15;
inline bool CMsgPracticeLobbySetDetails::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pass_key)
  return pass_key_.GetNoArena();
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pass_key)
}
#if LANG_CXX11
inline void CMsgPracticeLobbySetDetails::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.pass_key)
}
#endif
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.pass_key)
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.pass_key)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.pass_key)
}

// optional uint32 leagueid = 16;
inline bool CMsgPracticeLobbySetDetails::has_leagueid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_leagueid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgPracticeLobbySetDetails::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.leagueid)
  return leagueid_;
}
inline void CMsgPracticeLobbySetDetails::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.leagueid)
}

// optional uint32 penalty_level_radiant = 17;
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 18;
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_dire)
}

// optional uint32 load_game_id = 19;
inline bool CMsgPracticeLobbySetDetails::has_load_game_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_load_game_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_load_game_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgPracticeLobbySetDetails::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::load_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.load_game_id)
  return load_game_id_;
}
inline void CMsgPracticeLobbySetDetails::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.load_game_id)
}

// optional uint32 series_type = 20;
inline bool CMsgPracticeLobbySetDetails::has_series_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_series_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_series_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgPracticeLobbySetDetails::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.series_type)
  return series_type_;
}
inline void CMsgPracticeLobbySetDetails::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.series_type)
}

// optional uint32 radiant_series_wins = 21;
inline bool CMsgPracticeLobbySetDetails::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_radiant_series_wins() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_radiant_series_wins() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgPracticeLobbySetDetails::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CMsgPracticeLobbySetDetails::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.radiant_series_wins)
}

// optional uint32 dire_series_wins = 22;
inline bool CMsgPracticeLobbySetDetails::has_dire_series_wins() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_dire_series_wins() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_dire_series_wins() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgPracticeLobbySetDetails::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dire_series_wins)
  return dire_series_wins_;
}
inline void CMsgPracticeLobbySetDetails::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dire_series_wins)
}

// optional bool allchat = 23 [default = false];
inline bool CMsgPracticeLobbySetDetails::has_allchat() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allchat() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allchat() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CMsgPracticeLobbySetDetails::allchat() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allchat)
  return allchat_;
}
inline void CMsgPracticeLobbySetDetails::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
inline bool CMsgPracticeLobbySetDetails::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_dota_tv_delay() {
  dota_tv_delay_ = 1;
  clear_has_dota_tv_delay();
}
inline ::LobbyDotaTVDelay CMsgPracticeLobbySetDetails::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CMsgPracticeLobbySetDetails::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dota_tv_delay)
}

// optional bool lan = 25;
inline bool CMsgPracticeLobbySetDetails::has_lan() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lan() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lan() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
inline bool CMsgPracticeLobbySetDetails::lan() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan)
  return lan_;
}
inline void CMsgPracticeLobbySetDetails::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan)
}

// optional string custom_game_mode = 26;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_game_mode();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_mode)
  return custom_game_mode_.GetNoArena();
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_mode)
}
#if LANG_CXX11
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(::std::string&& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.custom_game_mode)
}
#endif
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.custom_game_mode)
  clear_has_custom_game_mode();
  return custom_game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != NULL) {
    set_has_custom_game_mode();
  } else {
    clear_has_custom_game_mode();
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_game_mode)
}

// optional string custom_map_name = 27;
inline bool CMsgPracticeLobbySetDetails::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_map_name)
  return custom_map_name_.GetNoArena();
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_map_name)
}
#if LANG_CXX11
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(::std::string&& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.custom_map_name)
}
#endif
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.custom_map_name)
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_map_name)
}

// optional uint32 custom_difficulty = 28;
inline bool CMsgPracticeLobbySetDetails::has_custom_difficulty() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_difficulty() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_difficulty() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_difficulty)
  return custom_difficulty_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_difficulty)
}

// optional uint64 custom_game_id = 29;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_id)
  return custom_game_id_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_id)
}

// optional uint32 custom_min_players = 30;
inline bool CMsgPracticeLobbySetDetails::has_custom_min_players() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_min_players() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_min_players() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_min_players)
  return custom_min_players_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_min_players)
}

// optional uint32 custom_max_players = 31;
inline bool CMsgPracticeLobbySetDetails::has_custom_max_players() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_max_players() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_max_players() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_max_players)
  return custom_max_players_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_max_players)
}

// optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
inline bool CMsgPracticeLobbySetDetails::has_visibility() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_visibility() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_visibility() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline ::DOTALobbyVisibility CMsgPracticeLobbySetDetails::visibility() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.visibility)
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline void CMsgPracticeLobbySetDetails::set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.visibility)
}

// optional fixed64 custom_game_crc = 34;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_crc)
  return custom_game_crc_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 37;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_timestamp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_timestamp() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_timestamp() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_timestamp)
}

// optional uint64 previous_match_override = 38;
inline bool CMsgPracticeLobbySetDetails::has_previous_match_override() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_previous_match_override() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_previous_match_override() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_previous_match_override() {
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  clear_has_previous_match_override();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.previous_match_override)
  return previous_match_override_;
}
inline void CMsgPracticeLobbySetDetails::set_previous_match_override(::google::protobuf::uint64 value) {
  set_has_previous_match_override();
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.previous_match_override)
}

// optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CMsgPracticeLobbySetDetails::has_pause_setting() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_pause_setting() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_pause_setting() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_pause_setting() {
  pause_setting_ = 0;
  clear_has_pause_setting();
}
inline ::LobbyDotaPauseSetting CMsgPracticeLobbySetDetails::pause_setting() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pause_setting)
  return static_cast< ::LobbyDotaPauseSetting >(pause_setting_);
}
inline void CMsgPracticeLobbySetDetails::set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  set_has_pause_setting();
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pause_setting)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_dire() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_dire() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_dire() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 0;
  clear_has_bot_difficulty_dire();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 44;
inline bool CMsgPracticeLobbySetDetails::has_bot_radiant() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_radiant() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_radiant() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_radiant() {
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_radiant();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_radiant)
  return bot_radiant_;
}
inline void CMsgPracticeLobbySetDetails::set_bot_radiant(::google::protobuf::uint64 value) {
  set_has_bot_radiant();
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_radiant)
}

// optional uint64 bot_dire = 45;
inline bool CMsgPracticeLobbySetDetails::has_bot_dire() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_dire() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_dire() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_dire() {
  bot_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_dire();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_dire)
  return bot_dire_;
}
inline void CMsgPracticeLobbySetDetails::set_bot_dire(::google::protobuf::uint64 value) {
  set_has_bot_dire();
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_dire)
}

// optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
inline bool CMsgPracticeLobbySetDetails::has_selection_priority_rules() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_selection_priority_rules() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_selection_priority_rules() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  clear_has_selection_priority_rules();
}
inline ::DOTASelectionPriorityRules CMsgPracticeLobbySetDetails::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.selection_priority_rules)
  return static_cast< ::DOTASelectionPriorityRules >(selection_priority_rules_);
}
inline void CMsgPracticeLobbySetDetails::set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  assert(::DOTASelectionPriorityRules_IsValid(value));
  set_has_selection_priority_rules();
  selection_priority_rules_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.selection_priority_rules)
}

// optional bool custom_game_penalties = 47;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_penalties() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_penalties() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_penalties() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_penalties() {
  custom_game_penalties_ = false;
  clear_has_custom_game_penalties();
}
inline bool CMsgPracticeLobbySetDetails::custom_game_penalties() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_penalties)
  return custom_game_penalties_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_penalties(bool value) {
  set_has_custom_game_penalties();
  custom_game_penalties_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_penalties)
}

// optional string lan_host_ping_location = 48;
inline bool CMsgPracticeLobbySetDetails::has_lan_host_ping_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lan_host_ping_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lan_host_ping_location();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  return lan_host_ping_location_.GetNoArena();
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const ::std::string& value) {
  set_has_lan_host_ping_location();
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
#if LANG_CXX11
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(::std::string&& value) {
  set_has_lan_host_ping_location();
  lan_host_ping_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
#endif
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lan_host_ping_location();
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const char* value, size_t size) {
  set_has_lan_host_ping_location();
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_lan_host_ping_location() {
  set_has_lan_host_ping_location();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  return lan_host_ping_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  clear_has_lan_host_ping_location();
  return lan_host_ping_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_lan_host_ping_location(::std::string* lan_host_ping_location) {
  if (lan_host_ping_location != NULL) {
    set_has_lan_host_ping_location();
  } else {
    clear_has_lan_host_ping_location();
  }
  lan_host_ping_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}

// optional uint32 league_node_id = 49;
inline bool CMsgPracticeLobbySetDetails::has_league_node_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_node_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_node_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_node_id() {
  league_node_id_ = 0u;
  clear_has_league_node_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_node_id)
  return league_node_id_;
}
inline void CMsgPracticeLobbySetDetails::set_league_node_id(::google::protobuf::uint32 value) {
  set_has_league_node_id();
  league_node_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_node_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate_SaveGame

// optional bytes data = 1;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& CMsgPracticeLobbyCreate_SaveGame::data() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.data)
  return data_.GetNoArena();
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.data)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.SaveGame.data)
}
#endif
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline ::std::string* CMsgPracticeLobbyCreate_SaveGame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.SaveGame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyCreate_SaveGame::release_data() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.SaveGame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.SaveGame.data)
}

// optional int32 version = 2;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CMsgPracticeLobbyCreate_SaveGame::version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.version)
  return version_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.version)
}

// optional fixed64 steam_id = 3;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.steam_id)
  return steam_id_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.steam_id)
}

// optional fixed64 signature = 4;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::signature() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.signature)
  return signature_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.signature)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate

// optional string search_key = 1;
inline bool CMsgPracticeLobbyCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CMsgPracticeLobbyCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgPracticeLobbyCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.search_key)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.search_key)
}
#endif
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.search_key)
}
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.search_key)
}
inline ::std::string* CMsgPracticeLobbyCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.search_key)
}

// optional string pass_key = 5;
inline bool CMsgPracticeLobbyCreate::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyCreate::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyCreate::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyCreate::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.pass_key)
  return pass_key_.GetNoArena();
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.pass_key)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyCreate::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.pass_key)
}
#endif
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.pass_key)
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.pass_key)
}
inline ::std::string* CMsgPracticeLobbyCreate::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyCreate::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyCreate::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.pass_key)
}

// optional uint32 client_version = 6;
inline bool CMsgPracticeLobbyCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.client_version)
}

// optional .CMsgPracticeLobbySetDetails lobby_details = 7;
inline bool CMsgPracticeLobbyCreate::has_lobby_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_lobby_details() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyCreate::clear_has_lobby_details() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyCreate::clear_lobby_details() {
  if (lobby_details_ != NULL) lobby_details_->Clear();
  clear_has_lobby_details();
}
inline const ::CMsgPracticeLobbySetDetails& CMsgPracticeLobbyCreate::lobby_details() const {
  const ::CMsgPracticeLobbySetDetails* p = lobby_details_;
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.lobby_details)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgPracticeLobbySetDetails*>(
      &::_CMsgPracticeLobbySetDetails_default_instance_);
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::release_lobby_details() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.lobby_details)
  clear_has_lobby_details();
  ::CMsgPracticeLobbySetDetails* temp = lobby_details_;
  lobby_details_ = NULL;
  return temp;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::mutable_lobby_details() {
  set_has_lobby_details();
  if (lobby_details_ == NULL) {
    lobby_details_ = new ::CMsgPracticeLobbySetDetails;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.lobby_details)
  return lobby_details_;
}
inline void CMsgPracticeLobbyCreate::set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lobby_details_;
  }
  if (lobby_details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lobby_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lobby_details, submessage_arena);
    }
    set_has_lobby_details();
  } else {
    clear_has_lobby_details();
  }
  lobby_details_ = lobby_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.lobby_details)
}

// optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
inline bool CMsgPracticeLobbyCreate::has_save_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_save_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyCreate::clear_has_save_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyCreate::clear_save_game() {
  if (save_game_ != NULL) save_game_->Clear();
  clear_has_save_game();
}
inline const ::CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate::save_game() const {
  const ::CMsgPracticeLobbyCreate_SaveGame* p = save_game_;
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.save_game)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgPracticeLobbyCreate_SaveGame*>(
      &::_CMsgPracticeLobbyCreate_SaveGame_default_instance_);
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::release_save_game() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.save_game)
  clear_has_save_game();
  ::CMsgPracticeLobbyCreate_SaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) {
    save_game_ = new ::CMsgPracticeLobbyCreate_SaveGame;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.save_game)
  return save_game_;
}
inline void CMsgPracticeLobbyCreate::set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete save_game_;
  }
  if (save_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_game, submessage_arena);
    }
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  save_game_ = save_game;
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.save_game)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetTeamSlot

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgPracticeLobbySetTeamSlot::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetTeamSlot::team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgPracticeLobbySetTeamSlot::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.team)
}

// optional uint32 slot = 2;
inline bool CMsgPracticeLobbySetTeamSlot::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetTeamSlot::slot() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.slot)
  return slot_;
}
inline void CMsgPracticeLobbySetTeamSlot::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.slot)
}

// optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_INVALID];
inline bool CMsgPracticeLobbySetTeamSlot::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_bot_difficulty() {
  bot_difficulty_ = 5;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetTeamSlot::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CMsgPracticeLobbySetTeamSlot::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinBroadcastChannel

// optional uint32 channel = 1;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoinBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.channel)
  return channel_;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.channel)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyKick

// optional uint32 account_id = 3;
inline bool CMsgPracticeLobbyKick::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyKick::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyKick::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyKick::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyKick::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyKick.account_id)
  return account_id_;
}
inline void CMsgPracticeLobbyKick::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyKick.account_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyLeave

// -------------------------------------------------------------------

// CMsgPracticeLobbyLaunch

// optional uint32 client_version = 5;
inline bool CMsgPracticeLobbyLaunch::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyLaunch::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyLaunch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyLaunch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyLaunch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyLaunch.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyLaunch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyLaunch.client_version)
}

// -------------------------------------------------------------------

// CMsgApplyTeamToPracticeLobby

// optional uint32 team_id = 1;
inline bool CMsgApplyTeamToPracticeLobby::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgApplyTeamToPracticeLobby::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgApplyTeamToPracticeLobby::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgApplyTeamToPracticeLobby::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgApplyTeamToPracticeLobby::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgApplyTeamToPracticeLobby.team_id)
  return team_id_;
}
inline void CMsgApplyTeamToPracticeLobby::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgApplyTeamToPracticeLobby.team_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyList

// optional bool tournament_games = 1;
inline bool CMsgPracticeLobbyList::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyList::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyList::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
inline bool CMsgPracticeLobbyList::tournament_games() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.tournament_games)
  return tournament_games_;
}
inline void CMsgPracticeLobbyList::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.tournament_games)
}

// optional string pass_key = 2;
inline bool CMsgPracticeLobbyList::has_pass_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_pass_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyList::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyList::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyList::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.pass_key)
  return pass_key_.GetNoArena();
}
inline void CMsgPracticeLobbyList::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.pass_key)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyList::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyList.pass_key)
}
#endif
inline void CMsgPracticeLobbyList::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyList.pass_key)
}
inline void CMsgPracticeLobbyList::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyList.pass_key)
}
inline ::std::string* CMsgPracticeLobbyList::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyList.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyList::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyList.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyList::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyList.pass_key)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry_CLobbyMember

// optional uint32 account_id = 1;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
  return account_id_;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
}

// optional string player_name = 2;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& CMsgPracticeLobbyListResponseEntry_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
#endif
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry

// optional uint64 id = 1 [(.key_field) = true];
inline bool CMsgPracticeLobbyListResponseEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.id)
  return id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.id)
}

// optional uint32 tournament_id = 3;
inline bool CMsgPracticeLobbyListResponseEntry::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.tournament_id)
  return tournament_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.tournament_id)
}

// optional uint32 tournament_game_id = 4;
inline bool CMsgPracticeLobbyListResponseEntry::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.tournament_game_id)
  return tournament_game_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.tournament_game_id)
}

// repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
inline int CMsgPracticeLobbyListResponseEntry::members_size() const {
  return members_.size();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_members() {
  members_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::add_members() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
CMsgPracticeLobbyListResponseEntry::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponseEntry.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
CMsgPracticeLobbyListResponseEntry::members() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponseEntry.members)
  return members_;
}

// optional bool requires_pass_key = 6;
inline bool CMsgPracticeLobbyListResponseEntry::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
inline bool CMsgPracticeLobbyListResponseEntry::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
  return requires_pass_key_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
}

// optional uint32 leader_account_id = 7;
inline bool CMsgPracticeLobbyListResponseEntry::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.leader_account_id)
  return leader_account_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.leader_account_id)
}

// optional uint32 guild_id = 8;
inline bool CMsgPracticeLobbyListResponseEntry::has_guild_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_guild_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.guild_id)
  return guild_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.guild_id)
}

// optional uint64 guild_logo = 9;
inline bool CMsgPracticeLobbyListResponseEntry::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::guild_logo() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.guild_logo)
  return guild_logo_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.guild_logo)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponse

// optional bool tournament_games = 1;
inline bool CMsgPracticeLobbyListResponse::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponse::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponse::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponse::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
inline bool CMsgPracticeLobbyListResponse::tournament_games() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponse.tournament_games)
  return tournament_games_;
}
inline void CMsgPracticeLobbyListResponse::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponse.tournament_games)
}

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
inline int CMsgPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoin

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbyJoin::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyJoin::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyJoin::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyJoin::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.lobby_id)
  return lobby_id_;
}
inline void CMsgPracticeLobbyJoin::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.lobby_id)
}

// optional uint32 client_version = 2;
inline bool CMsgPracticeLobbyJoin::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyJoin::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyJoin::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoin::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyJoin::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.client_version)
}

// optional string pass_key = 3;
inline bool CMsgPracticeLobbyJoin::has_pass_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_pass_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoin::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoin::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyJoin::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.pass_key)
  return pass_key_.GetNoArena();
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.pass_key)
}
#if LANG_CXX11
inline void CMsgPracticeLobbyJoin::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyJoin.pass_key)
}
#endif
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoin.pass_key)
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoin.pass_key)
}
inline ::std::string* CMsgPracticeLobbyJoin::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoin.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPracticeLobbyJoin::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyJoin.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPracticeLobbyJoin::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoin.pass_key)
}

// optional fixed64 custom_game_crc = 4;
inline bool CMsgPracticeLobbyJoin::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyJoin::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyJoin::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_crc)
  return custom_game_crc_;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 5;
inline bool CMsgPracticeLobbyJoin::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyJoin::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoin::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinResponse

// optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
inline bool CMsgPracticeLobbyJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoinResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::DOTAJoinLobbyResult CMsgPracticeLobbyJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinResponse.result)
  return static_cast< ::DOTAJoinLobbyResult >(result_);
}
inline void CMsgPracticeLobbyJoinResponse::set_result(::DOTAJoinLobbyResult value) {
  assert(::DOTAJoinLobbyResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinResponse.result)
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListRequest

// repeated uint32 friends = 1;
inline int CMsgFriendPracticeLobbyListRequest::friends_size() const {
  return friends_.size();
}
inline void CMsgFriendPracticeLobbyListRequest::clear_friends() {
  friends_.Clear();
}
inline ::google::protobuf::uint32 CMsgFriendPracticeLobbyListRequest::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListRequest.friends)
  return friends_.Get(index);
}
inline void CMsgFriendPracticeLobbyListRequest::set_friends(int index, ::google::protobuf::uint32 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgFriendPracticeLobbyListRequest.friends)
}
inline void CMsgFriendPracticeLobbyListRequest::add_friends(::google::protobuf::uint32 value) {
  friends_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListRequest.friends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgFriendPracticeLobbyListRequest::friends() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListRequest.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgFriendPracticeLobbyListRequest::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListRequest.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgFriendPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgFriendPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgFriendPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgFriendPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgFriendPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgGuildmatePracticeLobbyListRequest

// repeated uint32 guilds = 1;
inline int CMsgGuildmatePracticeLobbyListRequest::guilds_size() const {
  return guilds_.size();
}
inline void CMsgGuildmatePracticeLobbyListRequest::clear_guilds() {
  guilds_.Clear();
}
inline ::google::protobuf::uint32 CMsgGuildmatePracticeLobbyListRequest::guilds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_.Get(index);
}
inline void CMsgGuildmatePracticeLobbyListRequest::set_guilds(int index, ::google::protobuf::uint32 value) {
  guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGuildmatePracticeLobbyListRequest.guilds)
}
inline void CMsgGuildmatePracticeLobbyListRequest::add_guilds(::google::protobuf::uint32 value) {
  guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGuildmatePracticeLobbyListRequest.guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGuildmatePracticeLobbyListRequest::guilds() const {
  // @@protoc_insertion_point(field_list:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGuildmatePracticeLobbyListRequest::mutable_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return &guilds_;
}

// -------------------------------------------------------------------

// CMsgGuildmatePracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgGuildmatePracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgGuildmatePracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgGuildmatePracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgGuildmatePracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgBotGameCreate

// optional string search_key = 1;
inline bool CMsgBotGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotGameCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CMsgBotGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgBotGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.search_key)
}
#if LANG_CXX11
inline void CMsgBotGameCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgBotGameCreate.search_key)
}
#endif
inline void CMsgBotGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgBotGameCreate.search_key)
}
inline void CMsgBotGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgBotGameCreate.search_key)
}
inline ::std::string* CMsgBotGameCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:CMsgBotGameCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgBotGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgBotGameCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgBotGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgBotGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgBotGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgBotGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.client_version)
  return client_version_;
}
inline void CMsgBotGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.client_version)
}

// optional .DOTABotDifficulty difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgBotGameCreate::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotGameCreate::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotGameCreate::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotGameCreate::clear_difficulty() {
  difficulty_ = 0;
  clear_has_difficulty();
}
inline ::DOTABotDifficulty CMsgBotGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.difficulty)
  return static_cast< ::DOTABotDifficulty >(difficulty_);
}
inline void CMsgBotGameCreate::set_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.difficulty)
}

// optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgBotGameCreate::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotGameCreate::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotGameCreate::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotGameCreate::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgBotGameCreate::team() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgBotGameCreate::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.team)
}

// optional uint32 game_mode = 5;
inline bool CMsgBotGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotGameCreate::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgBotGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.game_mode)
  return game_mode_;
}
inline void CMsgBotGameCreate::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.game_mode)
}

// -------------------------------------------------------------------

// CMsgRequestInternationalTicket

// -------------------------------------------------------------------

// CMsgBalancedShuffleLobby

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.team)
  return team_;
}
inline void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
inline void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.time)
  return time_;
}
inline void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.time)
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit_name();
}
inline const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.GetNoArena();
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.unit_name)
}
#if LANG_CXX11
inline void CMatchAdditionalUnitInventory::set_unit_name(::std::string&& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMatchAdditionalUnitInventory.unit_name)
}
#endif
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMatchAdditionalUnitInventory.unit_name)
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMatchAdditionalUnitInventory.unit_name)
}
inline ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  // @@protoc_insertion_point(field_mutable:CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  // @@protoc_insertion_point(field_release:CMatchAdditionalUnitInventory.unit_name)
  clear_has_unit_name();
  return unit_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != NULL) {
    set_has_unit_name();
  } else {
    clear_has_unit_name();
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
inline int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.items)
}
inline void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMatchAdditionalUnitInventory.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:CMatchAdditionalUnitInventory.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMatchAdditionalUnitInventory.items)
  return &items_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam_CPlayer

// optional fixed64 account_id = 1;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.account_id)
  return account_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.account_id)
}

// optional uint32 fake_client_id = 2;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_fake_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_fake_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_fake_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_fake_client_id() {
  fake_client_id_ = 0u;
  clear_has_fake_client_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::fake_client_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.fake_client_id)
  return fake_client_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_fake_client_id(::google::protobuf::uint32 value) {
  set_has_fake_client_id();
  fake_client_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.fake_client_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
  return hero_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
}

// repeated uint32 items = 4;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::items_size() const {
  return items_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return items_.Get(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut_CTeam_CPlayer::items() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return &items_;
}

// optional uint32 gold = 5;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold)
  return gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold)
}

// optional uint32 kills = 6;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::kills() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.kills)
  return kills_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.kills)
}

// optional uint32 deaths = 7;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
  return deaths_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
}

// optional uint32 assists = 8;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::assists() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.assists)
  return assists_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.assists)
}

// optional uint32 leaver_status = 9;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
  return leaver_status_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
}

// optional uint32 last_hits = 10;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_last_hits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_last_hits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
  return last_hits_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
}

// optional uint32 denies = 11;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_denies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_denies() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_denies() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::denies() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.denies)
  return denies_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.denies)
}

// optional uint32 gold_per_min = 12;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
  return gold_per_min_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
}

// optional uint32 xp_per_minute = 13;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_xp_per_minute() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_xp_per_minute() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_xp_per_minute() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_xp_per_minute() {
  xp_per_minute_ = 0u;
  clear_has_xp_per_minute();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::xp_per_minute() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
  return xp_per_minute_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_xp_per_minute(::google::protobuf::uint32 value) {
  set_has_xp_per_minute();
  xp_per_minute_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
}

// optional uint32 gold_spent = 14;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_spent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_spent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
  return gold_spent_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
}

// optional uint32 level = 15;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::level() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.level)
  return level_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.level)
}

// optional uint32 hero_damage = 16;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_damage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_damage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
  return hero_damage_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
}

// optional uint32 tower_damage = 17;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_tower_damage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_tower_damage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
  return tower_damage_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
}

// optional uint32 hero_healing = 18;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_healing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_healing() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
  return hero_healing_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
}

// optional uint32 time_last_seen = 19;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_last_seen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_time_last_seen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_time_last_seen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::time_last_seen() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
  return time_last_seen_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
}

// optional uint32 support_ability_value = 20;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_ability_value() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_ability_value() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_ability_value() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_ability_value() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
  return support_ability_value_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
}

// optional uint64 party_id = 21;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_party_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_party_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_party_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
  return party_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
}

// optional float scaled_kills = 24;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_kills() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_kills() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_kills() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_kills)
  return scaled_kills_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_kills)
}

// optional float scaled_deaths = 25;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_deaths() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_deaths() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_deaths() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_deaths)
  return scaled_deaths_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_deaths)
}

// optional float scaled_assists = 26;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_assists() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_assists() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_assists() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_assists() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_assists)
  return scaled_assists_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_assists)
}

// optional uint32 claimed_farm_gold = 27;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_farm_gold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_farm_gold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_farm_gold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
  return claimed_farm_gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
}

// optional uint32 support_gold = 28;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_gold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_gold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_gold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
  return support_gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
}

// optional uint32 claimed_denies = 29;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_denies() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_denies() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_denies() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_denies() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
  return claimed_denies_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
}

// optional uint32 claimed_misses = 30;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_misses() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_misses() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_misses() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_misses() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
  return claimed_misses_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
}

// optional uint32 misses = 31;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_misses() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_misses() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_misses() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::misses() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.misses)
  return misses_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.misses)
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return &ability_upgrades_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
inline const ::CMatchAdditionalUnitInventory& CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return &additional_units_inventory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam

// repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
inline int CMsgGameMatchSignOut_CTeam::players_size() const {
  return players_.size();
}
inline void CMsgGameMatchSignOut_CTeam::clear_players() {
  players_.Clear();
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.players)
  return players_.Get(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.players)
  return players_.Mutable(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::add_players() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
CMsgGameMatchSignOut_CTeam::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
CMsgGameMatchSignOut_CTeam::players() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.players)
  return players_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut

// optional uint32 match_id = 1 [(.key_field) = true];
inline bool CMsgGameMatchSignOut::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignOut::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignOut::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.match_id)
  return match_id_;
}
inline void CMsgGameMatchSignOut::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.match_id)
}

// optional uint32 duration = 2;
inline bool CMsgGameMatchSignOut::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameMatchSignOut::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameMatchSignOut::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::duration() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.duration)
  return duration_;
}
inline void CMsgGameMatchSignOut::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.duration)
}

// optional bool good_guys_win = 3;
inline bool CMsgGameMatchSignOut::has_good_guys_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_good_guys_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameMatchSignOut::clear_has_good_guys_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameMatchSignOut::clear_good_guys_win() {
  good_guys_win_ = false;
  clear_has_good_guys_win();
}
inline bool CMsgGameMatchSignOut::good_guys_win() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.good_guys_win)
  return good_guys_win_;
}
inline void CMsgGameMatchSignOut::set_good_guys_win(bool value) {
  set_has_good_guys_win();
  good_guys_win_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.good_guys_win)
}

// optional fixed32 date = 4;
inline bool CMsgGameMatchSignOut::has_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGameMatchSignOut::clear_has_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGameMatchSignOut::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::date() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.date)
  return date_;
}
inline void CMsgGameMatchSignOut::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.date)
}

// repeated uint32 num_players = 5;
inline int CMsgGameMatchSignOut::num_players_size() const {
  return num_players_.size();
}
inline void CMsgGameMatchSignOut::clear_num_players() {
  num_players_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::num_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.num_players)
  return num_players_.Get(index);
}
inline void CMsgGameMatchSignOut::set_num_players(int index, ::google::protobuf::uint32 value) {
  num_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.num_players)
}
inline void CMsgGameMatchSignOut::add_num_players(::google::protobuf::uint32 value) {
  num_players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.num_players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::num_players() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.num_players)
  return num_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_num_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.num_players)
  return &num_players_;
}

// repeated .CMsgGameMatchSignOut.CTeam teams = 6;
inline int CMsgGameMatchSignOut::teams_size() const {
  return teams_.size();
}
inline void CMsgGameMatchSignOut::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.teams)
  return teams_.Get(index);
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.teams)
  return teams_.Mutable(index);
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
CMsgGameMatchSignOut::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
CMsgGameMatchSignOut::teams() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.teams)
  return teams_;
}

// optional string computer_name = 7;
inline bool CMsgGameMatchSignOut::has_computer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_computer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOut::clear_has_computer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOut::clear_computer_name() {
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_computer_name();
}
inline const ::std::string& CMsgGameMatchSignOut::computer_name() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.computer_name)
  return computer_name_.GetNoArena();
}
inline void CMsgGameMatchSignOut::set_computer_name(const ::std::string& value) {
  set_has_computer_name();
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.computer_name)
}
#if LANG_CXX11
inline void CMsgGameMatchSignOut::set_computer_name(::std::string&& value) {
  set_has_computer_name();
  computer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameMatchSignOut.computer_name)
}
#endif
inline void CMsgGameMatchSignOut::set_computer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_computer_name();
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameMatchSignOut.computer_name)
}
inline void CMsgGameMatchSignOut::set_computer_name(const char* value, size_t size) {
  set_has_computer_name();
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameMatchSignOut.computer_name)
}
inline ::std::string* CMsgGameMatchSignOut::mutable_computer_name() {
  set_has_computer_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.computer_name)
  return computer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameMatchSignOut::release_computer_name() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.computer_name)
  clear_has_computer_name();
  return computer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameMatchSignOut::set_allocated_computer_name(::std::string* computer_name) {
  if (computer_name != NULL) {
    set_has_computer_name();
  } else {
    clear_has_computer_name();
  }
  computer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), computer_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.computer_name)
}

// repeated uint32 tower_status = 8;
inline int CMsgGameMatchSignOut::tower_status_size() const {
  return tower_status_.size();
}
inline void CMsgGameMatchSignOut::clear_tower_status() {
  tower_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.tower_status)
  return tower_status_.Get(index);
}
inline void CMsgGameMatchSignOut::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.tower_status)
}
inline void CMsgGameMatchSignOut::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.tower_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::tower_status() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.tower_status)
  return tower_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
inline int CMsgGameMatchSignOut::barracks_status_size() const {
  return barracks_status_.size();
}
inline void CMsgGameMatchSignOut::clear_barracks_status() {
  barracks_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.barracks_status)
  return barracks_status_.Get(index);
}
inline void CMsgGameMatchSignOut::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.barracks_status)
}
inline void CMsgGameMatchSignOut::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.barracks_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::barracks_status() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.barracks_status)
  return barracks_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
inline bool CMsgGameMatchSignOut::has_cluster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_cluster() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGameMatchSignOut::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGameMatchSignOut::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.cluster)
  return cluster_;
}
inline void CMsgGameMatchSignOut::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.cluster)
}

// optional string server_addr = 11;
inline bool CMsgGameMatchSignOut::has_server_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_server_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOut::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOut::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_addr();
}
inline const ::std::string& CMsgGameMatchSignOut::server_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.server_addr)
  return server_addr_.GetNoArena();
}
inline void CMsgGameMatchSignOut::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.server_addr)
}
#if LANG_CXX11
inline void CMsgGameMatchSignOut::set_server_addr(::std::string&& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameMatchSignOut.server_addr)
}
#endif
inline void CMsgGameMatchSignOut::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameMatchSignOut.server_addr)
}
inline void CMsgGameMatchSignOut::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameMatchSignOut.server_addr)
}
inline ::std::string* CMsgGameMatchSignOut::mutable_server_addr() {
  set_has_server_addr();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.server_addr)
  return server_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameMatchSignOut::release_server_addr() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.server_addr)
  clear_has_server_addr();
  return server_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameMatchSignOut::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr != NULL) {
    set_has_server_addr();
  } else {
    clear_has_server_addr();
  }
  server_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.server_addr)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgGameMatchSignOut::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGameMatchSignOut::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGameMatchSignOut::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::first_blood_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.first_blood_time)
  return first_blood_time_;
}
inline void CMsgGameMatchSignOut::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.first_blood_time)
}

// optional float game_balance = 13;
inline bool CMsgGameMatchSignOut::has_game_balance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_game_balance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameMatchSignOut::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameMatchSignOut::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
inline float CMsgGameMatchSignOut::game_balance() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.game_balance)
  return game_balance_;
}
inline void CMsgGameMatchSignOut::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.game_balance)
}

// optional uint32 event_score = 14;
inline bool CMsgGameMatchSignOut::has_event_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_event_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameMatchSignOut::clear_has_event_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameMatchSignOut::clear_event_score() {
  event_score_ = 0u;
  clear_has_event_score();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::event_score() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.event_score)
  return event_score_;
}
inline void CMsgGameMatchSignOut::set_event_score(::google::protobuf::uint32 value) {
  set_has_event_score();
  event_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.event_score)
}

// repeated .CMatchHeroSelectEvent picks_bans = 15;
inline int CMsgGameMatchSignOut::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CMsgGameMatchSignOut::clear_picks_bans() {
  picks_bans_.Clear();
}
inline const ::CMatchHeroSelectEvent& CMsgGameMatchSignOut::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Get(index);
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Mutable(index);
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::add_picks_bans() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgGameMatchSignOut::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.picks_bans)
  return &picks_bans_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgGameMatchSignOut::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.picks_bans)
  return picks_bans_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignoutResponse

// optional uint32 match_id = 1;
inline bool CMsgGameMatchSignoutResponse::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignoutResponse::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.match_id)
  return match_id_;
}
inline void CMsgGameMatchSignoutResponse::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.match_id)
}

// optional fixed32 replay_salt = 2;
inline bool CMsgGameMatchSignoutResponse::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignoutResponse::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::replay_salt() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.replay_salt)
  return replay_salt_;
}
inline void CMsgGameMatchSignoutResponse::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.replay_salt)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
inline int CMsgGameMatchSignoutResponse::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CMsgGameMatchSignoutResponse::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CMsgGameMatchSignoutResponse::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignoutResponse.timed_reward_details)
  return &timed_reward_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CMsgGameMatchSignoutResponse::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_;
}

// repeated .CDOTALobbyMember xp_reward_details = 4;
inline int CMsgGameMatchSignoutResponse::xp_reward_details_size() const {
  return xp_reward_details_.size();
}
inline void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  xp_reward_details_.Clear();
}
inline const ::CDOTALobbyMember& CMsgGameMatchSignoutResponse::xp_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Get(index);
}
inline ::CDOTALobbyMember* CMsgGameMatchSignoutResponse::mutable_xp_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Mutable(index);
}
inline ::CDOTALobbyMember* CMsgGameMatchSignoutResponse::add_xp_reward_details() {
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CMsgGameMatchSignoutResponse::mutable_xp_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignoutResponse.xp_reward_details)
  return &xp_reward_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CMsgGameMatchSignoutResponse::xp_reward_details() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_;
}

// optional uint32 leagueid = 5;
inline bool CMsgGameMatchSignoutResponse::has_leagueid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_leagueid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignoutResponse::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.leagueid)
  return leagueid_;
}
inline void CMsgGameMatchSignoutResponse::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.leagueid)
}

// -------------------------------------------------------------------

// CMsgGameChatLog_CChatLine

// optional uint32 account_id = 1;
inline bool CMsgGameChatLog_CChatLine::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameChatLog_CChatLine::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.CChatLine.account_id)
  return account_id_;
}
inline void CMsgGameChatLog_CChatLine::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameChatLog.CChatLine.account_id)
}

// optional uint32 team_only = 2;
inline bool CMsgGameChatLog_CChatLine::has_team_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_team_only() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_team_only() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameChatLog_CChatLine::clear_team_only() {
  team_only_ = 0u;
  clear_has_team_only();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::team_only() const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.CChatLine.team_only)
  return team_only_;
}
inline void CMsgGameChatLog_CChatLine::set_team_only(::google::protobuf::uint32 value) {
  set_has_team_only();
  team_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameChatLog.CChatLine.team_only)
}

// optional string text = 3;
inline bool CMsgGameChatLog_CChatLine::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameChatLog_CChatLine::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& CMsgGameChatLog_CChatLine::text() const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.CChatLine.text)
  return text_.GetNoArena();
}
inline void CMsgGameChatLog_CChatLine::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameChatLog.CChatLine.text)
}
#if LANG_CXX11
inline void CMsgGameChatLog_CChatLine::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameChatLog.CChatLine.text)
}
#endif
inline void CMsgGameChatLog_CChatLine::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameChatLog.CChatLine.text)
}
inline void CMsgGameChatLog_CChatLine::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameChatLog.CChatLine.text)
}
inline ::std::string* CMsgGameChatLog_CChatLine::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CMsgGameChatLog.CChatLine.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameChatLog_CChatLine::release_text() {
  // @@protoc_insertion_point(field_release:CMsgGameChatLog.CChatLine.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameChatLog_CChatLine::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameChatLog.CChatLine.text)
}

// optional uint32 game_time = 4;
inline bool CMsgGameChatLog_CChatLine::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameChatLog_CChatLine::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.CChatLine.game_time)
  return game_time_;
}
inline void CMsgGameChatLog_CChatLine::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameChatLog.CChatLine.game_time)
}

// -------------------------------------------------------------------

// CMsgGameChatLog

// optional uint32 match_id = 1;
inline bool CMsgGameChatLog::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameChatLog::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameChatLog::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameChatLog::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameChatLog::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.match_id)
  return match_id_;
}
inline void CMsgGameChatLog::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameChatLog.match_id)
}

// repeated .CMsgGameChatLog.CChatLine lines = 2;
inline int CMsgGameChatLog::lines_size() const {
  return lines_.size();
}
inline void CMsgGameChatLog::clear_lines() {
  lines_.Clear();
}
inline const ::CMsgGameChatLog_CChatLine& CMsgGameChatLog::lines(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameChatLog.lines)
  return lines_.Get(index);
}
inline ::CMsgGameChatLog_CChatLine* CMsgGameChatLog::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameChatLog.lines)
  return lines_.Mutable(index);
}
inline ::CMsgGameChatLog_CChatLine* CMsgGameChatLog::add_lines() {
  // @@protoc_insertion_point(field_add:CMsgGameChatLog.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >*
CMsgGameChatLog::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameChatLog.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >&
CMsgGameChatLog::lines() const {
  // @@protoc_insertion_point(field_list:CMsgGameChatLog.lines)
  return lines_;
}

// -------------------------------------------------------------------

// CMsgInitialQuestionnaireResponse

// optional uint32 initial_skill = 1;
inline bool CMsgInitialQuestionnaireResponse::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgInitialQuestionnaireResponse::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgInitialQuestionnaireResponse::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgInitialQuestionnaireResponse::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
inline ::google::protobuf::uint32 CMsgInitialQuestionnaireResponse::initial_skill() const {
  // @@protoc_insertion_point(field_get:CMsgInitialQuestionnaireResponse.initial_skill)
  return initial_skill_;
}
inline void CMsgInitialQuestionnaireResponse::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:CMsgInitialQuestionnaireResponse.initial_skill)
}

// -------------------------------------------------------------------

// CMsgInterGCSurgeTest

// -------------------------------------------------------------------

// CMsgInterGCProfile

// optional bool start = 1;
inline bool CMsgInterGCProfile::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgInterGCProfile::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgInterGCProfile::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgInterGCProfile::clear_start() {
  start_ = false;
  clear_has_start();
}
inline bool CMsgInterGCProfile::start() const {
  // @@protoc_insertion_point(field_get:CMsgInterGCProfile.start)
  return start_;
}
inline void CMsgInterGCProfile::set_start(bool value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:CMsgInterGCProfile.start)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTATournament_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_id)
  return team_id_;
}
inline void CMsgDOTATournament_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_id)
}

// optional string team_name = 2;
inline bool CMsgDOTATournament_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Team::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATournament_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTATournament_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_name)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Team::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Team.team_name)
}
#endif
inline void CMsgDOTATournament_Team::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.team_name)
}
inline void CMsgDOTATournament_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.team_name)
}
inline ::std::string* CMsgDOTATournament_Team::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Team::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Team.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_name)
}

// optional string team_abbrev = 3;
inline bool CMsgDOTATournament_Team::has_team_abbrev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_abbrev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Team::clear_has_team_abbrev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Team::clear_team_abbrev() {
  team_abbrev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_abbrev();
}
inline const ::std::string& CMsgDOTATournament_Team::team_abbrev() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_abbrev)
  return team_abbrev_.GetNoArena();
}
inline void CMsgDOTATournament_Team::set_team_abbrev(const ::std::string& value) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_abbrev)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Team::set_team_abbrev(::std::string&& value) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Team.team_abbrev)
}
#endif
inline void CMsgDOTATournament_Team::set_team_abbrev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.team_abbrev)
}
inline void CMsgDOTATournament_Team::set_team_abbrev(const char* value, size_t size) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.team_abbrev)
}
inline ::std::string* CMsgDOTATournament_Team::mutable_team_abbrev() {
  set_has_team_abbrev();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_abbrev)
  return team_abbrev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Team::release_team_abbrev() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Team.team_abbrev)
  clear_has_team_abbrev();
  return team_abbrev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Team::set_allocated_team_abbrev(::std::string* team_abbrev) {
  if (team_abbrev != NULL) {
    set_has_team_abbrev();
  } else {
    clear_has_team_abbrev();
  }
  team_abbrev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_abbrev);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_abbrev)
}

// repeated uint32 players = 4;
inline int CMsgDOTATournament_Team::players_size() const {
  return players_.size();
}
inline void CMsgDOTATournament_Team::clear_players() {
  players_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.players)
  return players_.Get(index);
}
inline void CMsgDOTATournament_Team::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.players)
}
inline void CMsgDOTATournament_Team::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.players)
  return players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.players)
  return &players_;
}

// optional uint32 seed = 5;
inline bool CMsgDOTATournament_Team::has_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_seed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournament_Team::clear_has_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournament_Team::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::seed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.seed)
  return seed_;
}
inline void CMsgDOTATournament_Team::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.seed)
}

// optional uint64 team_logo = 6;
inline bool CMsgDOTATournament_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournament_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournament_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_logo)
  return team_logo_;
}
inline void CMsgDOTATournament_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_logo)
}

// optional string country_code = 7;
inline bool CMsgDOTATournament_Team::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament_Team::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament_Team::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTATournament_Team::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTATournament_Team::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.country_code)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Team::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Team.country_code)
}
#endif
inline void CMsgDOTATournament_Team::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.country_code)
}
inline void CMsgDOTATournament_Team::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.country_code)
}
inline ::std::string* CMsgDOTATournament_Team::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Team::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Team.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Team::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.country_code)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Game_ReplayURL

// optional uint32 provider_id = 1;
inline bool CMsgDOTATournament_Game_ReplayURL::has_provider_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_has_provider_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_has_provider_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_provider_id() {
  provider_id_ = 0u;
  clear_has_provider_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game_ReplayURL::provider_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.ReplayURL.provider_id)
  return provider_id_;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_provider_id(::google::protobuf::uint32 value) {
  set_has_provider_id();
  provider_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.ReplayURL.provider_id)
}

// optional uint32 stream_id = 2;
inline bool CMsgDOTATournament_Game_ReplayURL::has_stream_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_has_stream_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game_ReplayURL::stream_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.ReplayURL.stream_id)
  return stream_id_;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.ReplayURL.stream_id)
}

// optional string url = 3;
inline bool CMsgDOTATournament_Game_ReplayURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTATournament_Game_ReplayURL::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.ReplayURL.url)
  return url_.GetNoArena();
}
inline void CMsgDOTATournament_Game_ReplayURL::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.ReplayURL.url)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Game_ReplayURL::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Game.ReplayURL.url)
}
#endif
inline void CMsgDOTATournament_Game_ReplayURL::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.ReplayURL.url)
}
inline void CMsgDOTATournament_Game_ReplayURL::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.ReplayURL.url)
}
inline ::std::string* CMsgDOTATournament_Game_ReplayURL::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.ReplayURL.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Game_ReplayURL::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Game.ReplayURL.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Game_ReplayURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.ReplayURL.url)
}

// optional string description = 4;
inline bool CMsgDOTATournament_Game_ReplayURL::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Game_ReplayURL::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Game_ReplayURL::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CMsgDOTATournament_Game_ReplayURL::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.ReplayURL.description)
  return description_.GetNoArena();
}
inline void CMsgDOTATournament_Game_ReplayURL::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.ReplayURL.description)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Game_ReplayURL::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Game.ReplayURL.description)
}
#endif
inline void CMsgDOTATournament_Game_ReplayURL::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.ReplayURL.description)
}
inline void CMsgDOTATournament_Game_ReplayURL::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.ReplayURL.description)
}
inline ::std::string* CMsgDOTATournament_Game_ReplayURL::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.ReplayURL.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Game_ReplayURL::release_description() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Game.ReplayURL.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Game_ReplayURL::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.ReplayURL.description)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Game

// optional uint32 game_id = 1;
inline bool CMsgDOTATournament_Game::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament_Game::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament_Game::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.game_id)
  return game_id_;
}
inline void CMsgDOTATournament_Game::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.game_id)
}

// optional uint32 good_team_id = 2;
inline bool CMsgDOTATournament_Game::has_good_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_good_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament_Game::clear_has_good_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament_Game::clear_good_team_id() {
  good_team_id_ = 0u;
  clear_has_good_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::good_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.good_team_id)
  return good_team_id_;
}
inline void CMsgDOTATournament_Game::set_good_team_id(::google::protobuf::uint32 value) {
  set_has_good_team_id();
  good_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.good_team_id)
}

// optional uint32 bad_team_id = 3;
inline bool CMsgDOTATournament_Game::has_bad_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_bad_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournament_Game::clear_has_bad_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournament_Game::clear_bad_team_id() {
  bad_team_id_ = 0u;
  clear_has_bad_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::bad_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.bad_team_id)
  return bad_team_id_;
}
inline void CMsgDOTATournament_Game::set_bad_team_id(::google::protobuf::uint32 value) {
  set_has_bad_team_id();
  bad_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.bad_team_id)
}

// optional fixed64 lobby_id = 4;
inline bool CMsgDOTATournament_Game::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournament_Game::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournament_Game::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Game::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.lobby_id)
  return lobby_id_;
}
inline void CMsgDOTATournament_Game::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.lobby_id)
}

// optional uint32 match_id = 5;
inline bool CMsgDOTATournament_Game::has_match_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_match_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATournament_Game::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATournament_Game::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.match_id)
  return match_id_;
}
inline void CMsgDOTATournament_Game::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.match_id)
}

// optional string game_name = 6;
inline bool CMsgDOTATournament_Game::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Game::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Game::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
inline const ::std::string& CMsgDOTATournament_Game::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.game_name)
  return game_name_.GetNoArena();
}
inline void CMsgDOTATournament_Game::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.game_name)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Game::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Game.game_name)
}
#endif
inline void CMsgDOTATournament_Game::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.game_name)
}
inline void CMsgDOTATournament_Game::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.game_name)
}
inline ::std::string* CMsgDOTATournament_Game::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Game::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Game.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Game::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.game_name)
}

// optional bool live_stream = 7;
inline bool CMsgDOTATournament_Game::has_live_stream() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_live_stream() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATournament_Game::clear_has_live_stream() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATournament_Game::clear_live_stream() {
  live_stream_ = false;
  clear_has_live_stream();
}
inline bool CMsgDOTATournament_Game::live_stream() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.live_stream)
  return live_stream_;
}
inline void CMsgDOTATournament_Game::set_live_stream(bool value) {
  set_has_live_stream();
  live_stream_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.live_stream)
}

// optional string message = 9;
inline bool CMsgDOTATournament_Game::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Game::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Game::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CMsgDOTATournament_Game::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.message)
  return message_.GetNoArena();
}
inline void CMsgDOTATournament_Game::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.message)
}
#if LANG_CXX11
inline void CMsgDOTATournament_Game::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATournament.Game.message)
}
#endif
inline void CMsgDOTATournament_Game::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.message)
}
inline void CMsgDOTATournament_Game::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.message)
}
inline ::std::string* CMsgDOTATournament_Game::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATournament_Game::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Game.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATournament_Game::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.message)
}

// optional bool results_final = 10;
inline bool CMsgDOTATournament_Game::has_results_final() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_results_final() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATournament_Game::clear_has_results_final() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATournament_Game::clear_results_final() {
  results_final_ = false;
  clear_has_results_final();
}
inline bool CMsgDOTATournament_Game::results_final() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.results_final)
  return results_final_;
}
inline void CMsgDOTATournament_Game::set_results_final(bool value) {
  set_has_results_final();
  results_final_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.results_final)
}

// repeated .CMsgDOTATournament.Game.ReplayURL replay_urls = 11;
inline int CMsgDOTATournament_Game::replay_urls_size() const {
  return replay_urls_.size();
}
inline void CMsgDOTATournament_Game::clear_replay_urls() {
  replay_urls_.Clear();
}
inline const ::CMsgDOTATournament_Game_ReplayURL& CMsgDOTATournament_Game::replay_urls(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.replay_urls)
  return replay_urls_.Get(index);
}
inline ::CMsgDOTATournament_Game_ReplayURL* CMsgDOTATournament_Game::mutable_replay_urls(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.replay_urls)
  return replay_urls_.Mutable(index);
}
inline ::CMsgDOTATournament_Game_ReplayURL* CMsgDOTATournament_Game::add_replay_urls() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Game.replay_urls)
  return replay_urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game_ReplayURL >*
CMsgDOTATournament_Game::mutable_replay_urls() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Game.replay_urls)
  return &replay_urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game_ReplayURL >&
CMsgDOTATournament_Game::replay_urls() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Game.replay_urls)
  return replay_urls_;
}

// -------------------------------------------------------------------

// CMsgDOTATournament

// repeated .CMsgDOTATournament.Team teams = 1;
inline int CMsgDOTATournament::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTATournament::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTATournament_Team& CMsgDOTATournament::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >*
CMsgDOTATournament::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >&
CMsgDOTATournament::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.teams)
  return teams_;
}

// repeated .CMsgDOTATournament.Game games = 2;
inline int CMsgDOTATournament::games_size() const {
  return games_.size();
}
inline void CMsgDOTATournament::clear_games() {
  games_.Clear();
}
inline const ::CMsgDOTATournament_Game& CMsgDOTATournament::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.games)
  return games_.Get(index);
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.games)
  return games_.Mutable(index);
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::add_games() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.games)
  return games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >*
CMsgDOTATournament::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.games)
  return &games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >&
CMsgDOTATournament::games() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.games)
  return games_;
}

// optional uint64 gid = 3;
inline bool CMsgDOTATournament::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 CMsgDOTATournament::gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.gid)
  return gid_;
}
inline void CMsgDOTATournament::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.gid)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentRequest

// optional uint32 tournament_id = 1;
inline bool CMsgDOTATournamentRequest::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentRequest::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentRequest::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentRequest::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTATournamentRequest::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.tournament_id)
}

// optional uint64 client_tournament_gid = 2;
inline bool CMsgDOTATournamentRequest::has_client_tournament_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentRequest::set_has_client_tournament_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentRequest::clear_has_client_tournament_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentRequest::clear_client_tournament_gid() {
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_tournament_gid();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentRequest::client_tournament_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.client_tournament_gid)
  return client_tournament_gid_;
}
inline void CMsgDOTATournamentRequest::set_client_tournament_gid(::google::protobuf::uint64 value) {
  set_has_client_tournament_gid();
  client_tournament_gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.client_tournament_gid)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentResponse

// optional uint32 result = 1 [default = 2];
inline bool CMsgDOTATournamentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.result)
  return result_;
}
inline void CMsgDOTATournamentResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentResponse.result)
}

// optional .CMsgDOTATournament tournament = 2;
inline bool CMsgDOTATournamentResponse::has_tournament() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentResponse::set_has_tournament() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentResponse::clear_has_tournament() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentResponse::clear_tournament() {
  if (tournament_ != NULL) tournament_->Clear();
  clear_has_tournament();
}
inline const ::CMsgDOTATournament& CMsgDOTATournamentResponse::tournament() const {
  const ::CMsgDOTATournament* p = tournament_;
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.tournament)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATournament*>(
      &::_CMsgDOTATournament_default_instance_);
}
inline ::CMsgDOTATournament* CMsgDOTATournamentResponse::release_tournament() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournamentResponse.tournament)
  clear_has_tournament();
  ::CMsgDOTATournament* temp = tournament_;
  tournament_ = NULL;
  return temp;
}
inline ::CMsgDOTATournament* CMsgDOTATournamentResponse::mutable_tournament() {
  set_has_tournament();
  if (tournament_ == NULL) {
    tournament_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentResponse.tournament)
  return tournament_;
}
inline void CMsgDOTATournamentResponse::set_allocated_tournament(::CMsgDOTATournament* tournament) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tournament_;
  }
  if (tournament) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tournament = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tournament, submessage_arena);
    }
    set_has_tournament();
  } else {
    clear_has_tournament();
  }
  tournament_ = tournament;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentResponse.tournament)
}

// -------------------------------------------------------------------

// CMsgDOTAClearTournamentGame

// optional uint32 tournament_id = 1;
inline bool CMsgDOTAClearTournamentGame::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAClearTournamentGame::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAClearTournamentGame::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAClearTournamentGame::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTAClearTournamentGame::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.tournament_id)
}

// optional uint32 game_id = 2;
inline bool CMsgDOTAClearTournamentGame::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAClearTournamentGame::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAClearTournamentGame::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAClearTournamentGame::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.game_id)
  return game_id_;
}
inline void CMsgDOTAClearTournamentGame::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.game_id)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatch_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CMsgDOTAMatch_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatch_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_slot)
}

// optional uint32 hero_id = 3;
inline bool CMsgDOTAMatch_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatch_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_id)
}

// optional uint32 item_0 = 4;
inline bool CMsgDOTAMatch_Player::has_item_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_item_0() {
  item_0_ = 0u;
  clear_has_item_0();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_0)
  return item_0_;
}
inline void CMsgDOTAMatch_Player::set_item_0(::google::protobuf::uint32 value) {
  set_has_item_0();
  item_0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_0)
}

// optional uint32 item_1 = 5;
inline bool CMsgDOTAMatch_Player::has_item_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_item_1() {
  item_1_ = 0u;
  clear_has_item_1();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_1)
  return item_1_;
}
inline void CMsgDOTAMatch_Player::set_item_1(::google::protobuf::uint32 value) {
  set_has_item_1();
  item_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_1)
}

// optional uint32 item_2 = 6;
inline bool CMsgDOTAMatch_Player::has_item_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_item_2() {
  item_2_ = 0u;
  clear_has_item_2();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_2)
  return item_2_;
}
inline void CMsgDOTAMatch_Player::set_item_2(::google::protobuf::uint32 value) {
  set_has_item_2();
  item_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_2)
}

// optional uint32 item_3 = 7;
inline bool CMsgDOTAMatch_Player::has_item_3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_item_3() {
  item_3_ = 0u;
  clear_has_item_3();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_3)
  return item_3_;
}
inline void CMsgDOTAMatch_Player::set_item_3(::google::protobuf::uint32 value) {
  set_has_item_3();
  item_3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_3)
}

// optional uint32 item_4 = 8;
inline bool CMsgDOTAMatch_Player::has_item_4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_item_4() {
  item_4_ = 0u;
  clear_has_item_4();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_4)
  return item_4_;
}
inline void CMsgDOTAMatch_Player::set_item_4(::google::protobuf::uint32 value) {
  set_has_item_4();
  item_4_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_4)
}

// optional uint32 item_5 = 9;
inline bool CMsgDOTAMatch_Player::has_item_5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_item_5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_has_item_5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_item_5() {
  item_5_ = 0u;
  clear_has_item_5();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::item_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_5)
  return item_5_;
}
inline void CMsgDOTAMatch_Player::set_item_5(::google::protobuf::uint32 value) {
  set_has_item_5();
  item_5_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_5)
}

// optional float expected_team_contribution = 10;
inline bool CMsgDOTAMatch_Player::has_expected_team_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_expected_team_contribution() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_has_expected_team_contribution() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_expected_team_contribution() {
  expected_team_contribution_ = 0;
  clear_has_expected_team_contribution();
}
inline float CMsgDOTAMatch_Player::expected_team_contribution() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.expected_team_contribution)
  return expected_team_contribution_;
}
inline void CMsgDOTAMatch_Player::set_expected_team_contribution(float value) {
  set_has_expected_team_contribution();
  expected_team_contribution_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.expected_team_contribution)
}

// optional float scaled_metric = 11;
inline bool CMsgDOTAMatch_Player::has_scaled_metric() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_metric() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_metric() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_metric() {
  scaled_metric_ = 0;
  clear_has_scaled_metric();
}
inline float CMsgDOTAMatch_Player::scaled_metric() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_metric)
  return scaled_metric_;
}
inline void CMsgDOTAMatch_Player::set_scaled_metric(float value) {
  set_has_scaled_metric();
  scaled_metric_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_metric)
}

// optional uint32 previous_rank = 12;
inline bool CMsgDOTAMatch_Player::has_previous_rank() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_previous_rank() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_has_previous_rank() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatch_Player::clear_previous_rank() {
  previous_rank_ = 0u;
  clear_has_previous_rank();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::previous_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.previous_rank)
  return previous_rank_;
}
inline void CMsgDOTAMatch_Player::set_previous_rank(::google::protobuf::uint32 value) {
  set_has_previous_rank();
  previous_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.previous_rank)
}

// optional uint32 rank_change = 13;
inline bool CMsgDOTAMatch_Player::has_rank_change() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_rank_change() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAMatch_Player::clear_rank_change() {
  rank_change_ = 0u;
  clear_has_rank_change();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_change)
  return rank_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_change(::google::protobuf::uint32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_change)
}

// optional uint32 kills = 14;
inline bool CMsgDOTAMatch_Player::has_kills() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_kills() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAMatch_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatch_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.kills)
}

// optional uint32 deaths = 15;
inline bool CMsgDOTAMatch_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAMatch_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatch_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.deaths)
}

// optional uint32 assists = 16;
inline bool CMsgDOTAMatch_Player::has_assists() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_assists() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAMatch_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatch_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.assists)
}

// optional uint32 leaver_status = 17;
inline bool CMsgDOTAMatch_Player::has_leaver_status() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_leaver_status() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAMatch_Player::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.leaver_status)
  return leaver_status_;
}
inline void CMsgDOTAMatch_Player::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.leaver_status)
}

// optional uint32 gold = 18;
inline bool CMsgDOTAMatch_Player::has_gold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAMatch_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold)
  return gold_;
}
inline void CMsgDOTAMatch_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold)
}

// optional uint32 last_hits = 19;
inline bool CMsgDOTAMatch_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAMatch_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.last_hits)
  return last_hits_;
}
inline void CMsgDOTAMatch_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.last_hits)
}

// optional uint32 denies = 20;
inline bool CMsgDOTAMatch_Player::has_denies() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_denies() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTAMatch_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTAMatch_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.denies)
  return denies_;
}
inline void CMsgDOTAMatch_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.denies)
}

// optional uint32 gold_per_min = 21;
inline bool CMsgDOTAMatch_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTAMatch_Player::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTAMatch_Player::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_per_min)
}

// optional uint32 XP_per_min = 22;
inline bool CMsgDOTAMatch_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTAMatch_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTAMatch_Player::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.XP_per_min)
  return xp_per_min_;
}
inline void CMsgDOTAMatch_Player::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.XP_per_min)
}

// optional uint32 gold_spent = 23;
inline bool CMsgDOTAMatch_Player::has_gold_spent() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_gold_spent() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTAMatch_Player::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_spent)
  return gold_spent_;
}
inline void CMsgDOTAMatch_Player::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_spent)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTAMatch_Player::has_hero_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_damage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTAMatch_Player::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_damage)
  return hero_damage_;
}
inline void CMsgDOTAMatch_Player::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTAMatch_Player::has_tower_damage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_tower_damage() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTAMatch_Player::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.tower_damage)
  return tower_damage_;
}
inline void CMsgDOTAMatch_Player::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.tower_damage)
}

// optional uint32 hero_healing = 26;
inline bool CMsgDOTAMatch_Player::has_hero_healing() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_healing() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTAMatch_Player::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_healing)
  return hero_healing_;
}
inline void CMsgDOTAMatch_Player::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_healing)
}

// optional uint32 level = 27;
inline bool CMsgDOTAMatch_Player::has_level() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_level() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_level() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTAMatch_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.level)
  return level_;
}
inline void CMsgDOTAMatch_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.level)
}

// optional uint32 time_last_seen = 28;
inline bool CMsgDOTAMatch_Player::has_time_last_seen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_time_last_seen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_time_last_seen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTAMatch_Player::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::time_last_seen() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.time_last_seen)
  return time_last_seen_;
}
inline void CMsgDOTAMatch_Player::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.time_last_seen)
}

// optional string player_name = 29;
inline bool CMsgDOTAMatch_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTAMatch_Player::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgDOTAMatch_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch_Player::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAMatch.Player.player_name)
}
#endif
inline void CMsgDOTAMatch_Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.Player.player_name)
}
inline void CMsgDOTAMatch_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.Player.player_name)
}
inline ::std::string* CMsgDOTAMatch_Player::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Player.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.player_name)
}

// optional uint32 support_ability_value = 30;
inline bool CMsgDOTAMatch_Player::has_support_ability_value() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_support_ability_value() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_support_ability_value() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTAMatch_Player::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_ability_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_ability_value)
  return support_ability_value_;
}
inline void CMsgDOTAMatch_Player::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_ability_value)
}

// optional bool feeding_detected = 32;
inline bool CMsgDOTAMatch_Player::has_feeding_detected() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_feeding_detected() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_feeding_detected() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTAMatch_Player::clear_feeding_detected() {
  feeding_detected_ = false;
  clear_has_feeding_detected();
}
inline bool CMsgDOTAMatch_Player::feeding_detected() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.feeding_detected)
  return feeding_detected_;
}
inline void CMsgDOTAMatch_Player::set_feeding_detected(bool value) {
  set_has_feeding_detected();
  feeding_detected_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.feeding_detected)
}

// optional uint32 search_rank = 34;
inline bool CMsgDOTAMatch_Player::has_search_rank() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_search_rank() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgDOTAMatch_Player::clear_has_search_rank() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgDOTAMatch_Player::clear_search_rank() {
  search_rank_ = 0u;
  clear_has_search_rank();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank)
  return search_rank_;
}
inline void CMsgDOTAMatch_Player::set_search_rank(::google::protobuf::uint32 value) {
  set_has_search_rank();
  search_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank)
}

// optional uint32 search_rank_uncertainty = 35;
inline bool CMsgDOTAMatch_Player::has_search_rank_uncertainty() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_search_rank_uncertainty() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_has_search_rank_uncertainty() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgDOTAMatch_Player::clear_search_rank_uncertainty() {
  search_rank_uncertainty_ = 0u;
  clear_has_search_rank_uncertainty();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank_uncertainty)
  return search_rank_uncertainty_;
}
inline void CMsgDOTAMatch_Player::set_search_rank_uncertainty(::google::protobuf::uint32 value) {
  set_has_search_rank_uncertainty();
  search_rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank_uncertainty)
}

// optional uint32 rank_uncertainty_change = 36;
inline bool CMsgDOTAMatch_Player::has_rank_uncertainty_change() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_rank_uncertainty_change() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_has_rank_uncertainty_change() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgDOTAMatch_Player::clear_rank_uncertainty_change() {
  rank_uncertainty_change_ = 0u;
  clear_has_rank_uncertainty_change();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::rank_uncertainty_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_uncertainty_change)
  return rank_uncertainty_change_;
}
inline void CMsgDOTAMatch_Player::set_rank_uncertainty_change(::google::protobuf::uint32 value) {
  set_has_rank_uncertainty_change();
  rank_uncertainty_change_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_uncertainty_change)
}

// optional uint32 hero_play_count = 37;
inline bool CMsgDOTAMatch_Player::has_hero_play_count() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_hero_play_count() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_has_hero_play_count() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgDOTAMatch_Player::clear_hero_play_count() {
  hero_play_count_ = 0u;
  clear_has_hero_play_count();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_play_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_play_count)
  return hero_play_count_;
}
inline void CMsgDOTAMatch_Player::set_hero_play_count(::google::protobuf::uint32 value) {
  set_has_hero_play_count();
  hero_play_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_play_count)
}

// optional fixed64 party_id = 38;
inline bool CMsgDOTAMatch_Player::has_party_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_party_id() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_has_party_id() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgDOTAMatch_Player::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch_Player::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.party_id)
  return party_id_;
}
inline void CMsgDOTAMatch_Player::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.party_id)
}

// optional float scaled_kills = 39;
inline bool CMsgDOTAMatch_Player::has_scaled_kills() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_kills() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_kills() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
inline float CMsgDOTAMatch_Player::scaled_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_kills)
  return scaled_kills_;
}
inline void CMsgDOTAMatch_Player::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_kills)
}

// optional float scaled_deaths = 40;
inline bool CMsgDOTAMatch_Player::has_scaled_deaths() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_deaths() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_deaths() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
inline float CMsgDOTAMatch_Player::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_deaths)
  return scaled_deaths_;
}
inline void CMsgDOTAMatch_Player::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_deaths)
}

// optional float scaled_assists = 41;
inline bool CMsgDOTAMatch_Player::has_scaled_assists() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_scaled_assists() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_has_scaled_assists() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgDOTAMatch_Player::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
inline float CMsgDOTAMatch_Player::scaled_assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_assists)
  return scaled_assists_;
}
inline void CMsgDOTAMatch_Player::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_assists)
}

// optional uint32 claimed_farm_gold = 42;
inline bool CMsgDOTAMatch_Player::has_claimed_farm_gold() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_farm_gold() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_farm_gold() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_farm_gold)
  return claimed_farm_gold_;
}
inline void CMsgDOTAMatch_Player::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_farm_gold)
}

// optional uint32 support_gold = 43;
inline bool CMsgDOTAMatch_Player::has_support_gold() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_support_gold() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_has_support_gold() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgDOTAMatch_Player::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_gold)
  return support_gold_;
}
inline void CMsgDOTAMatch_Player::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_gold)
}

// optional uint32 claimed_denies = 44;
inline bool CMsgDOTAMatch_Player::has_claimed_denies() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_denies() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_denies() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_denies)
  return claimed_denies_;
}
inline void CMsgDOTAMatch_Player::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_denies)
}

// optional uint32 claimed_misses = 45;
inline bool CMsgDOTAMatch_Player::has_claimed_misses() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_claimed_misses() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_has_claimed_misses() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgDOTAMatch_Player::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_misses)
  return claimed_misses_;
}
inline void CMsgDOTAMatch_Player::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_misses)
}

// optional uint32 misses = 46;
inline bool CMsgDOTAMatch_Player::has_misses() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch_Player::set_has_misses() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_has_misses() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgDOTAMatch_Player::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch_Player::misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.misses)
  return misses_;
}
inline void CMsgDOTAMatch_Player::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.misses)
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
inline int CMsgDOTAMatch_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CMsgDOTAMatch_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgDOTAMatch_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.ability_upgrades)
  return &ability_upgrades_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgDOTAMatch_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
inline int CMsgDOTAMatch_Player::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
inline void CMsgDOTAMatch_Player::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
inline const ::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgDOTAMatch_Player::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return &additional_units_inventory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgDOTAMatch_Player::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatch

// optional bool good_guys_win = 2;
inline bool CMsgDOTAMatch::has_good_guys_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatch::set_has_good_guys_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatch::clear_has_good_guys_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatch::clear_good_guys_win() {
  good_guys_win_ = false;
  clear_has_good_guys_win();
}
inline bool CMsgDOTAMatch::good_guys_win() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.good_guys_win)
  return good_guys_win_;
}
inline void CMsgDOTAMatch::set_good_guys_win(bool value) {
  set_has_good_guys_win();
  good_guys_win_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.good_guys_win)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAMatch::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatch::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatch::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatch::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.duration)
  return duration_;
}
inline void CMsgDOTAMatch::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.duration)
}

// optional fixed32 startTime = 4;
inline bool CMsgDOTAMatch::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatch::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatch::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatch::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::starttime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.startTime)
  return starttime_;
}
inline void CMsgDOTAMatch::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.startTime)
}

// repeated .CMsgDOTAMatch.Player players = 5;
inline int CMsgDOTAMatch::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatch::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTAMatch_Player& CMsgDOTAMatch::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.players)
  return players_.Get(index);
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
CMsgDOTAMatch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
CMsgDOTAMatch::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.players)
  return players_;
}

// optional uint32 match_id = 6;
inline bool CMsgDOTAMatch::has_match_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatch::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatch::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_id)
  return match_id_;
}
inline void CMsgDOTAMatch::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_id)
}

// repeated uint32 tower_status = 8;
inline int CMsgDOTAMatch::tower_status_size() const {
  return tower_status_.size();
}
inline void CMsgDOTAMatch::clear_tower_status() {
  tower_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tower_status)
  return tower_status_.Get(index);
}
inline void CMsgDOTAMatch::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tower_status)
}
inline void CMsgDOTAMatch::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.tower_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::tower_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.tower_status)
  return tower_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
inline int CMsgDOTAMatch::barracks_status_size() const {
  return barracks_status_.size();
}
inline void CMsgDOTAMatch::clear_barracks_status() {
  barracks_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.barracks_status)
  return barracks_status_.Get(index);
}
inline void CMsgDOTAMatch::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.barracks_status)
}
inline void CMsgDOTAMatch::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.barracks_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::barracks_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.barracks_status)
  return barracks_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
inline bool CMsgDOTAMatch::has_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatch::set_has_cluster() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatch::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatch::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.cluster)
  return cluster_;
}
inline void CMsgDOTAMatch::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.cluster)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgDOTAMatch::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatch::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatch::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatch::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::first_blood_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.first_blood_time)
  return first_blood_time_;
}
inline void CMsgDOTAMatch::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.first_blood_time)
}

// optional fixed32 replay_salt = 13;
inline bool CMsgDOTAMatch::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatch::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatch::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatch::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::replay_salt() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_salt)
  return replay_salt_;
}
inline void CMsgDOTAMatch::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_salt)
}

// optional fixed32 server_ip = 14;
inline bool CMsgDOTAMatch::has_server_ip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatch::set_has_server_ip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatch::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatch::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_ip)
  return server_ip_;
}
inline void CMsgDOTAMatch::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_ip)
}

// optional uint32 server_port = 15;
inline bool CMsgDOTAMatch::has_server_port() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatch::set_has_server_port() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatch::clear_has_server_port() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatch::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_port)
  return server_port_;
}
inline void CMsgDOTAMatch::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_port)
}

// optional uint32 lobby_type = 16;
inline bool CMsgDOTAMatch::has_lobby_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAMatch::set_has_lobby_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAMatch::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAMatch::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.lobby_type)
  return lobby_type_;
}
inline void CMsgDOTAMatch::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.lobby_type)
}

// optional uint32 human_players = 17;
inline bool CMsgDOTAMatch::has_human_players() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAMatch::set_has_human_players() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAMatch::clear_has_human_players() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAMatch::clear_human_players() {
  human_players_ = 0u;
  clear_has_human_players();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::human_players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.human_players)
  return human_players_;
}
inline void CMsgDOTAMatch::set_human_players(::google::protobuf::uint32 value) {
  set_has_human_players();
  human_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.human_players)
}

// optional uint32 average_skill = 18;
inline bool CMsgDOTAMatch::has_average_skill() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAMatch::set_has_average_skill() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAMatch::clear_has_average_skill() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAMatch::clear_average_skill() {
  average_skill_ = 0u;
  clear_has_average_skill();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::average_skill() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.average_skill)
  return average_skill_;
}
inline void CMsgDOTAMatch::set_average_skill(::google::protobuf::uint32 value) {
  set_has_average_skill();
  average_skill_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.average_skill)
}

// optional float game_balance = 19;
inline bool CMsgDOTAMatch::has_game_balance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAMatch::set_has_game_balance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAMatch::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAMatch::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
inline float CMsgDOTAMatch::game_balance() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_balance)
  return game_balance_;
}
inline void CMsgDOTAMatch::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_balance)
}

// optional uint32 radiant_team_id = 20;
inline bool CMsgDOTAMatch::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatch::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_id)
}

// optional uint32 dire_team_id = 21;
inline bool CMsgDOTAMatch::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAMatch::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatch::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_id)
}

// optional uint32 leagueid = 22;
inline bool CMsgDOTAMatch::has_leagueid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAMatch::set_has_leagueid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAMatch::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAMatch::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.leagueid)
  return leagueid_;
}
inline void CMsgDOTAMatch::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.leagueid)
}

// optional string radiant_team_name = 23;
inline bool CMsgDOTAMatch::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatch::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_name();
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
inline void CMsgDOTAMatch::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_radiant_team_name(::std::string&& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAMatch.radiant_team_name)
}
#endif
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.radiant_team_name)
}
inline void CMsgDOTAMatch::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.radiant_team_name)
  clear_has_radiant_team_name();
  return radiant_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != NULL) {
    set_has_radiant_team_name();
  } else {
    clear_has_radiant_team_name();
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_name)
}

// optional string dire_team_name = 24;
inline bool CMsgDOTAMatch::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatch::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_name();
}
inline const ::std::string& CMsgDOTAMatch::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.GetNoArena();
}
inline void CMsgDOTAMatch::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_dire_team_name(::std::string&& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAMatch.dire_team_name)
}
#endif
inline void CMsgDOTAMatch::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.dire_team_name)
}
inline void CMsgDOTAMatch::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.dire_team_name)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_name() {
  set_has_dire_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.dire_team_name)
  clear_has_dire_team_name();
  return dire_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != NULL) {
    set_has_dire_team_name();
  } else {
    clear_has_dire_team_name();
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_name)
}

// optional uint64 radiant_team_logo = 25;
inline bool CMsgDOTAMatch::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatch::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_logo)
}

// optional uint64 dire_team_logo = 26;
inline bool CMsgDOTAMatch::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTAMatch::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatch::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_logo)
}

// optional uint32 radiant_team_complete = 27;
inline bool CMsgDOTAMatch::has_radiant_team_complete() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_complete() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_complete() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTAMatch::clear_radiant_team_complete() {
  radiant_team_complete_ = 0u;
  clear_has_radiant_team_complete();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_complete)
  return radiant_team_complete_;
}
inline void CMsgDOTAMatch::set_radiant_team_complete(::google::protobuf::uint32 value) {
  set_has_radiant_team_complete();
  radiant_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_complete)
}

// optional uint32 dire_team_complete = 28;
inline bool CMsgDOTAMatch::has_dire_team_complete() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_complete() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_complete() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTAMatch::clear_dire_team_complete() {
  dire_team_complete_ = 0u;
  clear_has_dire_team_complete();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_complete)
  return dire_team_complete_;
}
inline void CMsgDOTAMatch::set_dire_team_complete(::google::protobuf::uint32 value) {
  set_has_dire_team_complete();
  dire_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_complete)
}

// optional uint32 positive_votes = 29;
inline bool CMsgDOTAMatch::has_positive_votes() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_positive_votes() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTAMatch::clear_has_positive_votes() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTAMatch::clear_positive_votes() {
  positive_votes_ = 0u;
  clear_has_positive_votes();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::positive_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.positive_votes)
  return positive_votes_;
}
inline void CMsgDOTAMatch::set_positive_votes(::google::protobuf::uint32 value) {
  set_has_positive_votes();
  positive_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.positive_votes)
}

// optional uint32 negative_votes = 30;
inline bool CMsgDOTAMatch::has_negative_votes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_negative_votes() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTAMatch::clear_has_negative_votes() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTAMatch::clear_negative_votes() {
  negative_votes_ = 0u;
  clear_has_negative_votes();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::negative_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.negative_votes)
  return negative_votes_;
}
inline void CMsgDOTAMatch::set_negative_votes(::google::protobuf::uint32 value) {
  set_has_negative_votes();
  negative_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.negative_votes)
}

// optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatch::has_game_mode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_game_mode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTAMatch::clear_has_game_mode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTAMatch::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgDOTAMatch::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatch::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_mode)
}

// repeated .CMatchHeroSelectEvent picks_bans = 32;
inline int CMsgDOTAMatch::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CMsgDOTAMatch::clear_picks_bans() {
  picks_bans_.Clear();
}
inline const ::CMatchHeroSelectEvent& CMsgDOTAMatch::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Get(index);
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Mutable(index);
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::add_picks_bans() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.picks_bans)
  return picks_bans_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgDOTAMatch::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.picks_bans)
  return &picks_bans_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgDOTAMatch::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.picks_bans)
  return picks_bans_;
}

// optional uint64 match_seq_num = 33;
inline bool CMsgDOTAMatch::has_match_seq_num() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_match_seq_num() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgDOTAMatch::clear_has_match_seq_num() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgDOTAMatch::clear_match_seq_num() {
  match_seq_num_ = GOOGLE_ULONGLONG(0);
  clear_has_match_seq_num();
}
inline ::google::protobuf::uint64 CMsgDOTAMatch::match_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_seq_num)
  return match_seq_num_;
}
inline void CMsgDOTAMatch::set_match_seq_num(::google::protobuf::uint64 value) {
  set_has_match_seq_num();
  match_seq_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_seq_num)
}

// optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
inline bool CMsgDOTAMatch::has_replay_state() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_replay_state() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTAMatch::clear_has_replay_state() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTAMatch::clear_replay_state() {
  replay_state_ = 0;
  clear_has_replay_state();
}
inline ::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::replay_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_state)
  return static_cast< ::CMsgDOTAMatch_ReplayState >(replay_state_);
}
inline void CMsgDOTAMatch::set_replay_state(::CMsgDOTAMatch_ReplayState value) {
  assert(::CMsgDOTAMatch_ReplayState_IsValid(value));
  set_has_replay_state();
  replay_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_state)
}

// optional uint32 radiant_guild_id = 35;
inline bool CMsgDOTAMatch::has_radiant_guild_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_guild_id() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgDOTAMatch::clear_has_radiant_guild_id() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgDOTAMatch::clear_radiant_guild_id() {
  radiant_guild_id_ = 0u;
  clear_has_radiant_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::radiant_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_guild_id)
  return radiant_guild_id_;
}
inline void CMsgDOTAMatch::set_radiant_guild_id(::google::protobuf::uint32 value) {
  set_has_radiant_guild_id();
  radiant_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_guild_id)
}

// optional uint32 dire_guild_id = 36;
inline bool CMsgDOTAMatch::has_dire_guild_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_guild_id() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgDOTAMatch::clear_has_dire_guild_id() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgDOTAMatch::clear_dire_guild_id() {
  dire_guild_id_ = 0u;
  clear_has_dire_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatch::dire_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_guild_id)
  return dire_guild_id_;
}
inline void CMsgDOTAMatch::set_dire_guild_id(::google::protobuf::uint32 value) {
  set_has_dire_guild_id();
  dire_guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_guild_id)
}

// optional string radiant_team_tag = 37;
inline bool CMsgDOTAMatch::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatch::set_has_radiant_team_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatch::clear_has_radiant_team_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatch::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_tag();
}
inline const ::std::string& CMsgDOTAMatch::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.GetNoArena();
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const ::std::string& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_tag)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_radiant_team_tag(::std::string&& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAMatch.radiant_team_tag)
}
#endif
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.radiant_team_tag)
}
inline void CMsgDOTAMatch::set_radiant_team_tag(const char* value, size_t size) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.radiant_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_radiant_team_tag() {
  set_has_radiant_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.radiant_team_tag)
  clear_has_radiant_team_tag();
  return radiant_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != NULL) {
    set_has_radiant_team_tag();
  } else {
    clear_has_radiant_team_tag();
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_tag)
}

// optional string dire_team_tag = 38;
inline bool CMsgDOTAMatch::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatch::set_has_dire_team_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatch::clear_has_dire_team_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatch::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_tag();
}
inline const ::std::string& CMsgDOTAMatch::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.GetNoArena();
}
inline void CMsgDOTAMatch::set_dire_team_tag(const ::std::string& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_tag)
}
#if LANG_CXX11
inline void CMsgDOTAMatch::set_dire_team_tag(::std::string&& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAMatch.dire_team_tag)
}
#endif
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatch.dire_team_tag)
}
inline void CMsgDOTAMatch::set_dire_team_tag(const char* value, size_t size) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatch.dire_team_tag)
}
inline ::std::string* CMsgDOTAMatch::mutable_dire_team_tag() {
  set_has_dire_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatch::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.dire_team_tag)
  clear_has_dire_team_tag();
  return dire_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatch::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != NULL) {
    set_has_dire_team_tag();
  } else {
    clear_has_dire_team_tag();
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_tag)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerMatchHistory

// repeated uint32 match_ids = 1;
inline int CMsgDOTAPlayerMatchHistory::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgDOTAPlayerMatchHistory::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerMatchHistory::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerMatchHistory.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgDOTAPlayerMatchHistory::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerMatchHistory.match_ids)
}
inline void CMsgDOTAPlayerMatchHistory::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerMatchHistory.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAPlayerMatchHistory::match_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerMatchHistory.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAPlayerMatchHistory::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerMatchHistory.match_ids)
  return &match_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatchHistoryFilter

// repeated uint32 match_ids = 1;
inline int CMsgDOTAMatchHistoryFilter::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgDOTAMatchHistoryFilter::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchHistoryFilter::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchHistoryFilter.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgDOTAMatchHistoryFilter::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchHistoryFilter.match_ids)
}
inline void CMsgDOTAMatchHistoryFilter::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchHistoryFilter.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchHistoryFilter::match_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchHistoryFilter.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchHistoryFilter::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchHistoryFilter.match_ids)
  return &match_ids_;
}

// optional uint32 newest_match_id_at_last_query = 2;
inline bool CMsgDOTAMatchHistoryFilter::has_newest_match_id_at_last_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchHistoryFilter::set_has_newest_match_id_at_last_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchHistoryFilter::clear_has_newest_match_id_at_last_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchHistoryFilter::clear_newest_match_id_at_last_query() {
  newest_match_id_at_last_query_ = 0u;
  clear_has_newest_match_id_at_last_query();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchHistoryFilter::newest_match_id_at_last_query() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchHistoryFilter.newest_match_id_at_last_query)
  return newest_match_id_at_last_query_;
}
inline void CMsgDOTAMatchHistoryFilter::set_newest_match_id_at_last_query(::google::protobuf::uint32 value) {
  set_has_newest_match_id_at_last_query();
  newest_match_id_at_last_query_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchHistoryFilter.newest_match_id_at_last_query)
}

// optional uint32 time_last_query = 3;
inline bool CMsgDOTAMatchHistoryFilter::has_time_last_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchHistoryFilter::set_has_time_last_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchHistoryFilter::clear_has_time_last_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchHistoryFilter::clear_time_last_query() {
  time_last_query_ = 0u;
  clear_has_time_last_query();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchHistoryFilter::time_last_query() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchHistoryFilter.time_last_query)
  return time_last_query_;
}
inline void CMsgDOTAMatchHistoryFilter::set_time_last_query(::google::protobuf::uint32 value) {
  set_has_time_last_query();
  time_last_query_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchHistoryFilter.time_last_query)
}

// -------------------------------------------------------------------

// CMsgDOTARequestMatches

// optional string player_name = 1;
inline bool CMsgDOTARequestMatches::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestMatches::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestMatches::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTARequestMatches::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgDOTARequestMatches::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.player_name)
}
#if LANG_CXX11
inline void CMsgDOTARequestMatches::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTARequestMatches.player_name)
}
#endif
inline void CMsgDOTARequestMatches::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestMatches.player_name)
}
inline void CMsgDOTARequestMatches::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestMatches.player_name)
}
inline ::std::string* CMsgDOTARequestMatches::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestMatches.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestMatches::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestMatches.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestMatches::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestMatches.player_name)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTARequestMatches::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestMatches::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestMatches::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.hero_id)
  return hero_id_;
}
inline void CMsgDOTARequestMatches::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.hero_id)
}

// optional uint32 game_mode = 3;
inline bool CMsgDOTARequestMatches::has_game_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_game_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestMatches::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestMatches::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.game_mode)
  return game_mode_;
}
inline void CMsgDOTARequestMatches::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.game_mode)
}

// optional fixed32 date_min = 6;
inline bool CMsgDOTARequestMatches::has_date_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_date_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARequestMatches::clear_has_date_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARequestMatches::clear_date_min() {
  date_min_ = 0u;
  clear_has_date_min();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::date_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.date_min)
  return date_min_;
}
inline void CMsgDOTARequestMatches::set_date_min(::google::protobuf::uint32 value) {
  set_has_date_min();
  date_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.date_min)
}

// optional fixed32 date_max = 7;
inline bool CMsgDOTARequestMatches::has_date_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_date_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARequestMatches::clear_has_date_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARequestMatches::clear_date_max() {
  date_max_ = 0u;
  clear_has_date_max();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::date_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.date_max)
  return date_max_;
}
inline void CMsgDOTARequestMatches::set_date_max(::google::protobuf::uint32 value) {
  set_has_date_max();
  date_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.date_max)
}

// optional bool friends_only = 8;
inline bool CMsgDOTARequestMatches::has_friends_only() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_friends_only() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARequestMatches::clear_has_friends_only() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARequestMatches::clear_friends_only() {
  friends_only_ = false;
  clear_has_friends_only();
}
inline bool CMsgDOTARequestMatches::friends_only() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.friends_only)
  return friends_only_;
}
inline void CMsgDOTARequestMatches::set_friends_only(bool value) {
  set_has_friends_only();
  friends_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.friends_only)
}

// optional bool recently_played_only = 9;
inline bool CMsgDOTARequestMatches::has_recently_played_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_recently_played_only() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTARequestMatches::clear_has_recently_played_only() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTARequestMatches::clear_recently_played_only() {
  recently_played_only_ = false;
  clear_has_recently_played_only();
}
inline bool CMsgDOTARequestMatches::recently_played_only() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.recently_played_only)
  return recently_played_only_;
}
inline void CMsgDOTARequestMatches::set_recently_played_only(bool value) {
  set_has_recently_played_only();
  recently_played_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.recently_played_only)
}

// optional uint32 matches_requested = 10;
inline bool CMsgDOTARequestMatches::has_matches_requested() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_matches_requested() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARequestMatches::clear_has_matches_requested() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARequestMatches::clear_matches_requested() {
  matches_requested_ = 0u;
  clear_has_matches_requested();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::matches_requested() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.matches_requested)
  return matches_requested_;
}
inline void CMsgDOTARequestMatches::set_matches_requested(::google::protobuf::uint32 value) {
  set_has_matches_requested();
  matches_requested_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.matches_requested)
}

// optional uint32 start_at_match_id = 11;
inline bool CMsgDOTARequestMatches::has_start_at_match_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_start_at_match_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTARequestMatches::clear_has_start_at_match_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTARequestMatches::clear_start_at_match_id() {
  start_at_match_id_ = 0u;
  clear_has_start_at_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::start_at_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.start_at_match_id)
  return start_at_match_id_;
}
inline void CMsgDOTARequestMatches::set_start_at_match_id(::google::protobuf::uint32 value) {
  set_has_start_at_match_id();
  start_at_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.start_at_match_id)
}

// optional fixed32 min_players = 12;
inline bool CMsgDOTARequestMatches::has_min_players() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_min_players() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTARequestMatches::clear_has_min_players() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTARequestMatches::clear_min_players() {
  min_players_ = 0u;
  clear_has_min_players();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::min_players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.min_players)
  return min_players_;
}
inline void CMsgDOTARequestMatches::set_min_players(::google::protobuf::uint32 value) {
  set_has_min_players();
  min_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.min_players)
}

// optional uint32 request_id = 13;
inline bool CMsgDOTARequestMatches::has_request_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_request_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTARequestMatches::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTARequestMatches::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.request_id)
  return request_id_;
}
inline void CMsgDOTARequestMatches::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.request_id)
}

// optional bool tournament_games_only = 14;
inline bool CMsgDOTARequestMatches::has_tournament_games_only() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_tournament_games_only() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTARequestMatches::clear_has_tournament_games_only() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTARequestMatches::clear_tournament_games_only() {
  tournament_games_only_ = false;
  clear_has_tournament_games_only();
}
inline bool CMsgDOTARequestMatches::tournament_games_only() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.tournament_games_only)
  return tournament_games_only_;
}
inline void CMsgDOTARequestMatches::set_tournament_games_only(bool value) {
  set_has_tournament_games_only();
  tournament_games_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.tournament_games_only)
}

// optional uint32 account_id = 15;
inline bool CMsgDOTARequestMatches::has_account_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_account_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTARequestMatches::clear_has_account_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTARequestMatches::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.account_id)
  return account_id_;
}
inline void CMsgDOTARequestMatches::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.account_id)
}

// optional uint32 league_id = 16;
inline bool CMsgDOTARequestMatches::has_league_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_league_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTARequestMatches::clear_has_league_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTARequestMatches::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.league_id)
  return league_id_;
}
inline void CMsgDOTARequestMatches::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.league_id)
}

// optional .CMsgDOTARequestMatches.SkillLevel skill = 17 [default = Any];
inline bool CMsgDOTARequestMatches::has_skill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_skill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTARequestMatches::clear_has_skill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTARequestMatches::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::CMsgDOTARequestMatches_SkillLevel CMsgDOTARequestMatches::skill() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.skill)
  return static_cast< ::CMsgDOTARequestMatches_SkillLevel >(skill_);
}
inline void CMsgDOTARequestMatches::set_skill(::CMsgDOTARequestMatches_SkillLevel value) {
  assert(::CMsgDOTARequestMatches_SkillLevel_IsValid(value));
  set_has_skill();
  skill_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.skill)
}

// optional uint32 team_id = 18;
inline bool CMsgDOTARequestMatches::has_team_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTARequestMatches::set_has_team_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTARequestMatches::clear_has_team_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTARequestMatches::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatches::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatches.team_id)
  return team_id_;
}
inline void CMsgDOTARequestMatches::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatches.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTARequestMatchesResponse

// repeated .CMsgDOTAMatch matches = 1;
inline int CMsgDOTARequestMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgDOTARequestMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAMatch& CMsgDOTARequestMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAMatch* CMsgDOTARequestMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAMatch* CMsgDOTARequestMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestMatchesResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
CMsgDOTARequestMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestMatchesResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
CMsgDOTARequestMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestMatchesResponse.matches)
  return matches_;
}

// optional uint32 request_id = 2;
inline bool CMsgDOTARequestMatchesResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestMatchesResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestMatchesResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestMatchesResponse::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatchesResponse::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatchesResponse.request_id)
  return request_id_;
}
inline void CMsgDOTARequestMatchesResponse::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatchesResponse.request_id)
}

// optional uint32 total_results = 3;
inline bool CMsgDOTARequestMatchesResponse::has_total_results() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestMatchesResponse::set_has_total_results() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestMatchesResponse::clear_has_total_results() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestMatchesResponse::clear_total_results() {
  total_results_ = 0u;
  clear_has_total_results();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatchesResponse::total_results() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatchesResponse.total_results)
  return total_results_;
}
inline void CMsgDOTARequestMatchesResponse::set_total_results(::google::protobuf::uint32 value) {
  set_has_total_results();
  total_results_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatchesResponse.total_results)
}

// optional uint32 results_remaining = 4;
inline bool CMsgDOTARequestMatchesResponse::has_results_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestMatchesResponse::set_has_results_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestMatchesResponse::clear_has_results_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestMatchesResponse::clear_results_remaining() {
  results_remaining_ = 0u;
  clear_has_results_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTARequestMatchesResponse::results_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestMatchesResponse.results_remaining)
  return results_remaining_;
}
inline void CMsgDOTARequestMatchesResponse::set_results_remaining(::google::protobuf::uint32 value) {
  set_has_results_remaining();
  results_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestMatchesResponse.results_remaining)
}

// -------------------------------------------------------------------

// CMsgDOTAPopup

// optional .CMsgDOTAPopup.PopupID id = 1 [default = KICKED_FROM_LOBBY];
inline bool CMsgDOTAPopup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPopup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPopup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPopup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::CMsgDOTAPopup_PopupID CMsgDOTAPopup::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPopup.id)
  return static_cast< ::CMsgDOTAPopup_PopupID >(id_);
}
inline void CMsgDOTAPopup::set_id(::CMsgDOTAPopup_PopupID value) {
  assert(::CMsgDOTAPopup_PopupID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPopup.id)
}

// optional string custom_text = 2;
inline bool CMsgDOTAPopup::has_custom_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPopup::set_has_custom_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPopup::clear_has_custom_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPopup::clear_custom_text() {
  custom_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_text();
}
inline const ::std::string& CMsgDOTAPopup::custom_text() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPopup.custom_text)
  return custom_text_.GetNoArena();
}
inline void CMsgDOTAPopup::set_custom_text(const ::std::string& value) {
  set_has_custom_text();
  custom_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPopup.custom_text)
}
#if LANG_CXX11
inline void CMsgDOTAPopup::set_custom_text(::std::string&& value) {
  set_has_custom_text();
  custom_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPopup.custom_text)
}
#endif
inline void CMsgDOTAPopup::set_custom_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_text();
  custom_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPopup.custom_text)
}
inline void CMsgDOTAPopup::set_custom_text(const char* value, size_t size) {
  set_has_custom_text();
  custom_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPopup.custom_text)
}
inline ::std::string* CMsgDOTAPopup::mutable_custom_text() {
  set_has_custom_text();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPopup.custom_text)
  return custom_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAPopup::release_custom_text() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPopup.custom_text)
  clear_has_custom_text();
  return custom_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAPopup::set_allocated_custom_text(::std::string* custom_text) {
  if (custom_text != NULL) {
    set_has_custom_text();
  } else {
    clear_has_custom_text();
  }
  custom_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_text);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPopup.custom_text)
}

// -------------------------------------------------------------------

// CMsgDOTATeamMemberSDO

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamMemberSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamMemberSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamMemberSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamMemberSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMemberSDO.account_id)
  return account_id_;
}
inline void CMsgDOTATeamMemberSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMemberSDO.account_id)
}

// repeated uint32 team_ids = 2;
inline int CMsgDOTATeamMemberSDO::team_ids_size() const {
  return team_ids_.size();
}
inline void CMsgDOTATeamMemberSDO::clear_team_ids() {
  team_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_.Get(index);
}
inline void CMsgDOTATeamMemberSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMemberSDO.team_ids)
}
inline void CMsgDOTATeamMemberSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATeamMemberSDO.team_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamMemberSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamMemberSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATeamMemberSDO.team_ids)
  return &team_ids_;
}

// optional uint32 profile_team_id = 3;
inline bool CMsgDOTATeamMemberSDO::has_profile_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamMemberSDO::set_has_profile_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamMemberSDO::clear_has_profile_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamMemberSDO::clear_profile_team_id() {
  profile_team_id_ = 0u;
  clear_has_profile_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::profile_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMemberSDO.profile_team_id)
  return profile_team_id_;
}
inline void CMsgDOTATeamMemberSDO::set_profile_team_id(::google::protobuf::uint32 value) {
  set_has_profile_team_id();
  profile_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMemberSDO.profile_team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamAdminSDO

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamAdminSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamAdminSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamAdminSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamAdminSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamAdminSDO::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamAdminSDO.account_id)
  return account_id_;
}
inline void CMsgDOTATeamAdminSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamAdminSDO.account_id)
}

// repeated uint32 team_ids = 2;
inline int CMsgDOTATeamAdminSDO::team_ids_size() const {
  return team_ids_.size();
}
inline void CMsgDOTATeamAdminSDO::clear_team_ids() {
  team_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeamAdminSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_.Get(index);
}
inline void CMsgDOTATeamAdminSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamAdminSDO.team_ids)
}
inline void CMsgDOTATeamAdminSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATeamAdminSDO.team_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamAdminSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamAdminSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATeamAdminSDO.team_ids)
  return &team_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTATeamMember

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMember.account_id)
  return account_id_;
}
inline void CMsgDOTATeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMember.account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamMember::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMember.team_id)
  return team_id_;
}
inline void CMsgDOTATeamMember::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMember.team_id)
}

// optional uint32 time_joined = 4;
inline bool CMsgDOTATeamMember::has_time_joined() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamMember::set_has_time_joined() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamMember::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamMember::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMember::time_joined() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMember.time_joined)
  return time_joined_;
}
inline void CMsgDOTATeamMember::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMember.time_joined)
}

// optional bool is_rank_factored_into_team = 5;
inline bool CMsgDOTATeamMember::has_is_rank_factored_into_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeamMember::set_has_is_rank_factored_into_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeamMember::clear_has_is_rank_factored_into_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeamMember::clear_is_rank_factored_into_team() {
  is_rank_factored_into_team_ = false;
  clear_has_is_rank_factored_into_team();
}
inline bool CMsgDOTATeamMember::is_rank_factored_into_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMember.is_rank_factored_into_team)
  return is_rank_factored_into_team_;
}
inline void CMsgDOTATeamMember::set_is_rank_factored_into_team(bool value) {
  set_has_is_rank_factored_into_team();
  is_rank_factored_into_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMember.is_rank_factored_into_team)
}

// -------------------------------------------------------------------

// CMsgDOTATeam

// repeated .CMsgDOTATeamMember members = 1;
inline int CMsgDOTATeam::members_size() const {
  return members_.size();
}
inline void CMsgDOTATeam::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTATeamMember& CMsgDOTATeam::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.members)
  return members_.Get(index);
}
inline ::CMsgDOTATeamMember* CMsgDOTATeam::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeam.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTATeamMember* CMsgDOTATeam::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTATeam.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamMember >*
CMsgDOTATeam::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATeam.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamMember >&
CMsgDOTATeam::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATeam.members)
  return members_;
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.team_id)
  return team_id_;
}
inline void CMsgDOTATeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.team_id)
}

// optional string name = 3;
inline bool CMsgDOTATeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTATeam::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.name)
  return name_.GetNoArena();
}
inline void CMsgDOTATeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.name)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeam.name)
}
#endif
inline void CMsgDOTATeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeam.name)
}
inline void CMsgDOTATeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeam.name)
}
inline ::std::string* CMsgDOTATeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeam.name)
}

// optional string tag = 4;
inline bool CMsgDOTATeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTATeam::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTATeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.tag)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeam.tag)
}
#endif
inline void CMsgDOTATeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeam.tag)
}
inline void CMsgDOTATeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeam.tag)
}
inline ::std::string* CMsgDOTATeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeam.tag)
}

// optional uint32 admin_id = 5;
inline bool CMsgDOTATeam::has_admin_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATeam::set_has_admin_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATeam::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATeam::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::admin_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.admin_id)
  return admin_id_;
}
inline void CMsgDOTATeam::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.admin_id)
}

// optional uint32 time_created = 6;
inline bool CMsgDOTATeam::has_time_created() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATeam::set_has_time_created() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATeam::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATeam::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.time_created)
  return time_created_;
}
inline void CMsgDOTATeam::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.time_created)
}

// optional bool disbanded = 7;
inline bool CMsgDOTATeam::has_disbanded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATeam::set_has_disbanded() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATeam::clear_has_disbanded() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATeam::clear_disbanded() {
  disbanded_ = false;
  clear_has_disbanded();
}
inline bool CMsgDOTATeam::disbanded() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.disbanded)
  return disbanded_;
}
inline void CMsgDOTATeam::set_disbanded(bool value) {
  set_has_disbanded();
  disbanded_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.disbanded)
}

// optional uint32 wins = 8;
inline bool CMsgDOTATeam::has_wins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATeam::set_has_wins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATeam::clear_has_wins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATeam::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.wins)
  return wins_;
}
inline void CMsgDOTATeam::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.wins)
}

// optional uint32 losses = 9;
inline bool CMsgDOTATeam::has_losses() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTATeam::set_has_losses() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTATeam::clear_has_losses() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTATeam::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.losses)
  return losses_;
}
inline void CMsgDOTATeam::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.losses)
}

// optional uint32 rank = 10;
inline bool CMsgDOTATeam::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTATeam::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTATeam::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTATeam::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.rank)
  return rank_;
}
inline void CMsgDOTATeam::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.rank)
}

// optional uint64 logo = 11;
inline bool CMsgDOTATeam::has_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTATeam::set_has_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTATeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTATeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.logo)
  return logo_;
}
inline void CMsgDOTATeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.logo)
}

// optional uint64 base_logo = 12;
inline bool CMsgDOTATeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTATeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTATeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTATeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.base_logo)
  return base_logo_;
}
inline void CMsgDOTATeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.base_logo)
}

// optional uint64 banner_logo = 13;
inline bool CMsgDOTATeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTATeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTATeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTATeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTATeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.banner_logo)
}

// optional uint64 sponsor_logo = 14;
inline bool CMsgDOTATeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTATeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTATeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTATeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTATeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.sponsor_logo)
}

// optional string country_code = 15;
inline bool CMsgDOTATeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTATeam::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTATeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.country_code)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeam.country_code)
}
#endif
inline void CMsgDOTATeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeam.country_code)
}
inline void CMsgDOTATeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeam.country_code)
}
inline ::std::string* CMsgDOTATeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeam.country_code)
}

// optional string url = 16;
inline bool CMsgDOTATeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTATeam::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.url)
  return url_.GetNoArena();
}
inline void CMsgDOTATeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.url)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeam.url)
}
#endif
inline void CMsgDOTATeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeam.url)
}
inline void CMsgDOTATeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeam.url)
}
inline ::std::string* CMsgDOTATeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeam.url)
}

// optional uint32 fullgamesplayed = 17;
inline bool CMsgDOTATeam::has_fullgamesplayed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTATeam::set_has_fullgamesplayed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTATeam::clear_has_fullgamesplayed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTATeam::clear_fullgamesplayed() {
  fullgamesplayed_ = 0u;
  clear_has_fullgamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::fullgamesplayed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.fullgamesplayed)
  return fullgamesplayed_;
}
inline void CMsgDOTATeam::set_fullgamesplayed(::google::protobuf::uint32 value) {
  set_has_fullgamesplayed();
  fullgamesplayed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.fullgamesplayed)
}

// repeated uint32 leagues = 18;
inline int CMsgDOTATeam::leagues_size() const {
  return leagues_.size();
}
inline void CMsgDOTATeam::clear_leagues() {
  leagues_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.leagues)
  return leagues_.Get(index);
}
inline void CMsgDOTATeam::set_leagues(int index, ::google::protobuf::uint32 value) {
  leagues_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.leagues)
}
inline void CMsgDOTATeam::add_leagues(::google::protobuf::uint32 value) {
  leagues_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATeam.leagues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeam::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATeam.leagues)
  return leagues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeam::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATeam.leagues)
  return &leagues_;
}

// optional uint32 gamesplayed = 19;
inline bool CMsgDOTATeam::has_gamesplayed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTATeam::set_has_gamesplayed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTATeam::clear_has_gamesplayed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTATeam::clear_gamesplayed() {
  gamesplayed_ = 0u;
  clear_has_gamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::gamesplayed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.gamesplayed)
  return gamesplayed_;
}
inline void CMsgDOTATeam::set_gamesplayed(::google::protobuf::uint32 value) {
  set_has_gamesplayed();
  gamesplayed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.gamesplayed)
}

// optional uint32 gamesplayedwithcurrentroster = 20;
inline bool CMsgDOTATeam::has_gamesplayedwithcurrentroster() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTATeam::set_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTATeam::clear_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTATeam::clear_gamesplayedwithcurrentroster() {
  gamesplayedwithcurrentroster_ = 0u;
  clear_has_gamesplayedwithcurrentroster();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::gamesplayedwithcurrentroster() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.gamesplayedwithcurrentroster)
  return gamesplayedwithcurrentroster_;
}
inline void CMsgDOTATeam::set_gamesplayedwithcurrentroster(::google::protobuf::uint32 value) {
  set_has_gamesplayedwithcurrentroster();
  gamesplayedwithcurrentroster_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.gamesplayedwithcurrentroster)
}

// optional uint32 teammatchmakinggamesplayed = 21;
inline bool CMsgDOTATeam::has_teammatchmakinggamesplayed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTATeam::set_has_teammatchmakinggamesplayed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTATeam::clear_has_teammatchmakinggamesplayed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTATeam::clear_teammatchmakinggamesplayed() {
  teammatchmakinggamesplayed_ = 0u;
  clear_has_teammatchmakinggamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::teammatchmakinggamesplayed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.teammatchmakinggamesplayed)
  return teammatchmakinggamesplayed_;
}
inline void CMsgDOTATeam::set_teammatchmakinggamesplayed(::google::protobuf::uint32 value) {
  set_has_teammatchmakinggamesplayed();
  teammatchmakinggamesplayed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.teammatchmakinggamesplayed)
}

// optional uint32 lastplayedgametime = 22;
inline bool CMsgDOTATeam::has_lastplayedgametime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTATeam::set_has_lastplayedgametime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTATeam::clear_has_lastplayedgametime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTATeam::clear_lastplayedgametime() {
  lastplayedgametime_ = 0u;
  clear_has_lastplayedgametime();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::lastplayedgametime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.lastplayedgametime)
  return lastplayedgametime_;
}
inline void CMsgDOTATeam::set_lastplayedgametime(::google::protobuf::uint32 value) {
  set_has_lastplayedgametime();
  lastplayedgametime_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.lastplayedgametime)
}

// optional uint32 lastrenametime = 23;
inline bool CMsgDOTATeam::has_lastrenametime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTATeam::set_has_lastrenametime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTATeam::clear_has_lastrenametime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTATeam::clear_lastrenametime() {
  lastrenametime_ = 0u;
  clear_has_lastrenametime();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::lastrenametime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeam.lastrenametime)
  return lastrenametime_;
}
inline void CMsgDOTATeam::set_lastrenametime(::google::protobuf::uint32 value) {
  set_has_lastrenametime();
  lastrenametime_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeam.lastrenametime)
}

// -------------------------------------------------------------------

// CMsgDOTACreateTeam

// optional string name = 1;
inline bool CMsgDOTACreateTeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACreateTeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACreateTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTACreateTeam::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.name)
  return name_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.name)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTACreateTeam.name)
}
#endif
inline void CMsgDOTACreateTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateTeam.name)
}
inline void CMsgDOTACreateTeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateTeam.name)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateTeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTACreateTeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateTeam.name)
}

// optional string tag = 2;
inline bool CMsgDOTACreateTeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACreateTeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACreateTeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTACreateTeam::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.tag)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTACreateTeam.tag)
}
#endif
inline void CMsgDOTACreateTeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateTeam.tag)
}
inline void CMsgDOTACreateTeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateTeam.tag)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateTeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTACreateTeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateTeam.tag)
}

// optional uint64 logo = 3;
inline bool CMsgDOTACreateTeam::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTACreateTeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTACreateTeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.logo)
  return logo_;
}
inline void CMsgDOTACreateTeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.logo)
}

// optional uint64 base_logo = 4;
inline bool CMsgDOTACreateTeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTACreateTeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTACreateTeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.base_logo)
  return base_logo_;
}
inline void CMsgDOTACreateTeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.base_logo)
}

// optional uint64 banner_logo = 5;
inline bool CMsgDOTACreateTeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTACreateTeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTACreateTeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTACreateTeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.banner_logo)
}

// optional uint64 sponsor_logo = 6;
inline bool CMsgDOTACreateTeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTACreateTeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTACreateTeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTACreateTeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.sponsor_logo)
}

// optional string country_code = 7;
inline bool CMsgDOTACreateTeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTACreateTeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTACreateTeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTACreateTeam::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.country_code)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTACreateTeam.country_code)
}
#endif
inline void CMsgDOTACreateTeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateTeam.country_code)
}
inline void CMsgDOTACreateTeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateTeam.country_code)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateTeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTACreateTeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateTeam.country_code)
}

// optional string url = 8;
inline bool CMsgDOTACreateTeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTACreateTeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTACreateTeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTACreateTeam::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeam.url)
  return url_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeam.url)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTACreateTeam.url)
}
#endif
inline void CMsgDOTACreateTeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateTeam.url)
}
inline void CMsgDOTACreateTeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateTeam.url)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateTeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTACreateTeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateTeam.url)
}

// -------------------------------------------------------------------

// CMsgDOTACreateTeamResponse

// repeated .CMsgDOTACreateTeamResponse.Result results = 1;
inline int CMsgDOTACreateTeamResponse::results_size() const {
  return results_.size();
}
inline void CMsgDOTACreateTeamResponse::clear_results() {
  results_.Clear();
}
inline ::CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeamResponse.results)
  return static_cast< ::CMsgDOTACreateTeamResponse_Result >(results_.Get(index));
}
inline void CMsgDOTACreateTeamResponse::set_results(int index, ::CMsgDOTACreateTeamResponse_Result value) {
  assert(::CMsgDOTACreateTeamResponse_Result_IsValid(value));
  results_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeamResponse.results)
}
inline void CMsgDOTACreateTeamResponse::add_results(::CMsgDOTACreateTeamResponse_Result value) {
  assert(::CMsgDOTACreateTeamResponse_Result_IsValid(value));
  results_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACreateTeamResponse.results)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgDOTACreateTeamResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACreateTeamResponse.results)
  return results_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgDOTACreateTeamResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACreateTeamResponse.results)
  return &results_;
}

// optional uint32 team_id = 2;
inline bool CMsgDOTACreateTeamResponse::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACreateTeamResponse::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACreateTeamResponse::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACreateTeamResponse::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTACreateTeamResponse::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeamResponse.team_id)
  return team_id_;
}
inline void CMsgDOTACreateTeamResponse::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeamResponse.team_id)
}

// optional uint32 seconds_remaining = 3;
inline bool CMsgDOTACreateTeamResponse::has_seconds_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACreateTeamResponse::set_has_seconds_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACreateTeamResponse::clear_has_seconds_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACreateTeamResponse::clear_seconds_remaining() {
  seconds_remaining_ = 0u;
  clear_has_seconds_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTACreateTeamResponse::seconds_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateTeamResponse.seconds_remaining)
  return seconds_remaining_;
}
inline void CMsgDOTACreateTeamResponse::set_seconds_remaining(::google::protobuf::uint32 value) {
  set_has_seconds_remaining();
  seconds_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateTeamResponse.seconds_remaining)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeam

// optional string name = 1;
inline bool CMsgDOTAEditTeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAEditTeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAEditTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTAEditTeam::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.name)
  return name_.GetNoArena();
}
inline void CMsgDOTAEditTeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.name)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeam.name)
}
#endif
inline void CMsgDOTAEditTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeam.name)
}
inline void CMsgDOTAEditTeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeam.name)
}
inline ::std::string* CMsgDOTAEditTeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeam::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeam.name)
}

// optional string tag = 2;
inline bool CMsgDOTAEditTeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAEditTeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAEditTeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAEditTeam::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAEditTeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.tag)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeam.tag)
}
#endif
inline void CMsgDOTAEditTeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeam.tag)
}
inline void CMsgDOTAEditTeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeam.tag)
}
inline ::std::string* CMsgDOTAEditTeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeam::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeam.tag)
}

// optional uint64 logo = 3;
inline bool CMsgDOTAEditTeam::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAEditTeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAEditTeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeam::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.logo)
  return logo_;
}
inline void CMsgDOTAEditTeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.logo)
}

// optional uint64 base_logo = 4;
inline bool CMsgDOTAEditTeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAEditTeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAEditTeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeam::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.base_logo)
  return base_logo_;
}
inline void CMsgDOTAEditTeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.base_logo)
}

// optional uint64 banner_logo = 5;
inline bool CMsgDOTAEditTeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAEditTeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAEditTeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAEditTeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.banner_logo)
}

// optional uint64 sponsor_logo = 6;
inline bool CMsgDOTAEditTeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAEditTeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAEditTeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTAEditTeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.sponsor_logo)
}

// optional string country_code = 7;
inline bool CMsgDOTAEditTeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAEditTeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAEditTeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAEditTeam::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAEditTeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeam.country_code)
}
#endif
inline void CMsgDOTAEditTeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeam.country_code)
}
inline void CMsgDOTAEditTeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeam.country_code)
}
inline ::std::string* CMsgDOTAEditTeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeam::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeam.country_code)
}

// optional string url = 8;
inline bool CMsgDOTAEditTeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAEditTeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAEditTeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTAEditTeam::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.url)
  return url_.GetNoArena();
}
inline void CMsgDOTAEditTeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.url)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeam.url)
}
#endif
inline void CMsgDOTAEditTeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeam.url)
}
inline void CMsgDOTAEditTeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeam.url)
}
inline ::std::string* CMsgDOTAEditTeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeam::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeam.url)
}

// optional uint32 team_id = 9;
inline bool CMsgDOTAEditTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAEditTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAEditTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAEditTeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAEditTeam::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeam.team_id)
  return team_id_;
}
inline void CMsgDOTAEditTeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeam.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamLogo

// optional uint64 logo = 1;
inline bool CMsgDOTAEditTeamLogo::has_logo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAEditTeamLogo::set_has_logo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAEditTeamLogo::clear_has_logo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAEditTeamLogo::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamLogo::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogo.logo)
  return logo_;
}
inline void CMsgDOTAEditTeamLogo::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogo.logo)
}

// optional uint64 base_logo = 2;
inline bool CMsgDOTAEditTeamLogo::has_base_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAEditTeamLogo::set_has_base_logo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAEditTeamLogo::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAEditTeamLogo::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamLogo::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogo.base_logo)
  return base_logo_;
}
inline void CMsgDOTAEditTeamLogo::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogo.base_logo)
}

// optional uint64 banner_logo = 3;
inline bool CMsgDOTAEditTeamLogo::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAEditTeamLogo::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAEditTeamLogo::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAEditTeamLogo::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamLogo::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogo.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAEditTeamLogo::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogo.banner_logo)
}

// optional uint64 sponsor_logo = 4;
inline bool CMsgDOTAEditTeamLogo::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAEditTeamLogo::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAEditTeamLogo::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAEditTeamLogo::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamLogo::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogo.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTAEditTeamLogo::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogo.sponsor_logo)
}

// optional uint32 team_id = 5;
inline bool CMsgDOTAEditTeamLogo::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAEditTeamLogo::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAEditTeamLogo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAEditTeamLogo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAEditTeamLogo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogo.team_id)
  return team_id_;
}
inline void CMsgDOTAEditTeamLogo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogo.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamLogoResponse

// repeated .CMsgDOTAEditTeamLogoResponse.Result results = 1;
inline int CMsgDOTAEditTeamLogoResponse::results_size() const {
  return results_.size();
}
inline void CMsgDOTAEditTeamLogoResponse::clear_results() {
  results_.Clear();
}
inline ::CMsgDOTAEditTeamLogoResponse_Result CMsgDOTAEditTeamLogoResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamLogoResponse.results)
  return static_cast< ::CMsgDOTAEditTeamLogoResponse_Result >(results_.Get(index));
}
inline void CMsgDOTAEditTeamLogoResponse::set_results(int index, ::CMsgDOTAEditTeamLogoResponse_Result value) {
  assert(::CMsgDOTAEditTeamLogoResponse_Result_IsValid(value));
  results_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamLogoResponse.results)
}
inline void CMsgDOTAEditTeamLogoResponse::add_results(::CMsgDOTAEditTeamLogoResponse_Result value) {
  assert(::CMsgDOTAEditTeamLogoResponse_Result_IsValid(value));
  results_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAEditTeamLogoResponse.results)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgDOTAEditTeamLogoResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAEditTeamLogoResponse.results)
  return results_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgDOTAEditTeamLogoResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAEditTeamLogoResponse.results)
  return &results_;
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamDetails

// optional string country_code = 1;
inline bool CMsgDOTAEditTeamDetails::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAEditTeamDetails::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamDetails.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamDetails.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeamDetails.country_code)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeamDetails.country_code)
}
inline void CMsgDOTAEditTeamDetails::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeamDetails.country_code)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeamDetails.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeamDetails.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeamDetails.country_code)
}

// optional string url = 2;
inline bool CMsgDOTAEditTeamDetails::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAEditTeamDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamDetails.url)
  return url_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamDetails.url)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditTeamDetails.url)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditTeamDetails.url)
}
inline void CMsgDOTAEditTeamDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditTeamDetails.url)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditTeamDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditTeamDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditTeamDetails.url)
}

// optional uint32 team_id = 3;
inline bool CMsgDOTAEditTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAEditTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAEditTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTAEditTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamDetails.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamDetailsResponse

// repeated .CMsgDOTAEditTeamDetailsResponse.Result results = 1;
inline int CMsgDOTAEditTeamDetailsResponse::results_size() const {
  return results_.size();
}
inline void CMsgDOTAEditTeamDetailsResponse::clear_results() {
  results_.Clear();
}
inline ::CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditTeamDetailsResponse.results)
  return static_cast< ::CMsgDOTAEditTeamDetailsResponse_Result >(results_.Get(index));
}
inline void CMsgDOTAEditTeamDetailsResponse::set_results(int index, ::CMsgDOTAEditTeamDetailsResponse_Result value) {
  assert(::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value));
  results_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditTeamDetailsResponse.results)
}
inline void CMsgDOTAEditTeamDetailsResponse::add_results(::CMsgDOTAEditTeamDetailsResponse_Result value) {
  assert(::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value));
  results_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAEditTeamDetailsResponse.results)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgDOTAEditTeamDetailsResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAEditTeamDetailsResponse.results)
  return results_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgDOTAEditTeamDetailsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAEditTeamDetailsResponse.results)
  return &results_;
}

// -------------------------------------------------------------------

// CMsgDOTADisbandTeam

// optional uint32 team_id = 1;
inline bool CMsgDOTADisbandTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADisbandTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADisbandTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADisbandTeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTADisbandTeam::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADisbandTeam.team_id)
  return team_id_;
}
inline void CMsgDOTADisbandTeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADisbandTeam.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTADisbandTeamResponse

// optional .CMsgDOTADisbandTeamResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTADisbandTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTADisbandTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTADisbandTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTADisbandTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTADisbandTeamResponse_Result CMsgDOTADisbandTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADisbandTeamResponse.result)
  return static_cast< ::CMsgDOTADisbandTeamResponse_Result >(result_);
}
inline void CMsgDOTADisbandTeamResponse::set_result(::CMsgDOTADisbandTeamResponse_Result value) {
  assert(::CMsgDOTADisbandTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADisbandTeamResponse.result)
}

// optional string team_name = 2;
inline bool CMsgDOTADisbandTeamResponse::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADisbandTeamResponse::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADisbandTeamResponse::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADisbandTeamResponse::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTADisbandTeamResponse::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADisbandTeamResponse.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTADisbandTeamResponse::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTADisbandTeamResponse.team_name)
}
#if LANG_CXX11
inline void CMsgDOTADisbandTeamResponse::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADisbandTeamResponse.team_name)
}
#endif
inline void CMsgDOTADisbandTeamResponse::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTADisbandTeamResponse.team_name)
}
inline void CMsgDOTADisbandTeamResponse::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADisbandTeamResponse.team_name)
}
inline ::std::string* CMsgDOTADisbandTeamResponse::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADisbandTeamResponse.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTADisbandTeamResponse::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADisbandTeamResponse.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTADisbandTeamResponse::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADisbandTeamResponse.team_name)
}

// -------------------------------------------------------------------

// CMsgDOTARequestTeamData

// -------------------------------------------------------------------

// CMsgDOTARequestTeamDataResponse

// optional .CMsgDOTARequestTeamDataResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTARequestTeamDataResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestTeamDataResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestTeamDataResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestTeamDataResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTARequestTeamDataResponse_Result CMsgDOTARequestTeamDataResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestTeamDataResponse.result)
  return static_cast< ::CMsgDOTARequestTeamDataResponse_Result >(result_);
}
inline void CMsgDOTARequestTeamDataResponse::set_result(::CMsgDOTARequestTeamDataResponse_Result value) {
  assert(::CMsgDOTARequestTeamDataResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestTeamDataResponse.result)
}

// repeated .CMsgDOTATeamData data = 2;
inline int CMsgDOTARequestTeamDataResponse::data_size() const {
  return data_.size();
}
inline void CMsgDOTARequestTeamDataResponse::clear_data() {
  data_.Clear();
}
inline const ::CMsgDOTATeamData& CMsgDOTARequestTeamDataResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestTeamDataResponse.data)
  return data_.Get(index);
}
inline ::CMsgDOTATeamData* CMsgDOTARequestTeamDataResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestTeamDataResponse.data)
  return data_.Mutable(index);
}
inline ::CMsgDOTATeamData* CMsgDOTARequestTeamDataResponse::add_data() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestTeamDataResponse.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamData >*
CMsgDOTARequestTeamDataResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestTeamDataResponse.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATeamData >&
CMsgDOTARequestTeamDataResponse::data() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestTeamDataResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// CMsgDOTATeamData

// optional bool on_team = 1;
inline bool CMsgDOTATeamData::has_on_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamData::set_has_on_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamData::clear_has_on_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamData::clear_on_team() {
  on_team_ = false;
  clear_has_on_team();
}
inline bool CMsgDOTATeamData::on_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamData.on_team)
  return on_team_;
}
inline void CMsgDOTATeamData::set_on_team(bool value) {
  set_has_on_team();
  on_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamData.on_team)
}

// optional bool profile_team = 2;
inline bool CMsgDOTATeamData::has_profile_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamData::set_has_profile_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamData::clear_has_profile_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamData::clear_profile_team() {
  profile_team_ = false;
  clear_has_profile_team();
}
inline bool CMsgDOTATeamData::profile_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamData.profile_team)
  return profile_team_;
}
inline void CMsgDOTATeamData::set_profile_team(bool value) {
  set_has_profile_team();
  profile_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamData.profile_team)
}

// optional .CMsgDOTATeam team = 3;
inline bool CMsgDOTATeamData::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamData::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamData::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamData::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::CMsgDOTATeam& CMsgDOTATeamData::team() const {
  const ::CMsgDOTATeam* p = team_;
  // @@protoc_insertion_point(field_get:CMsgDOTATeamData.team)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATeam*>(
      &::_CMsgDOTATeam_default_instance_);
}
inline ::CMsgDOTATeam* CMsgDOTATeamData::release_team() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamData.team)
  clear_has_team();
  ::CMsgDOTATeam* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::CMsgDOTATeam* CMsgDOTATeamData::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    team_ = new ::CMsgDOTATeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamData.team)
  return team_;
}
inline void CMsgDOTATeamData::set_allocated_team(::CMsgDOTATeam* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamData.team)
}

// -------------------------------------------------------------------

// CMsgDOTATeamProfileRequest

// optional uint32 team_id = 1;
inline bool CMsgDOTATeamProfileRequest::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamProfileRequest::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamProfileRequest::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamProfileRequest::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamProfileRequest::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamProfileRequest.team_id)
  return team_id_;
}
inline void CMsgDOTATeamProfileRequest::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamProfileRequest.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamMemberProfileRequest

// optional fixed64 steam_id = 1;
inline bool CMsgDOTATeamMemberProfileRequest::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamMemberProfileRequest::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamMemberProfileRequest::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamMemberProfileRequest::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTATeamMemberProfileRequest::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamMemberProfileRequest.steam_id)
  return steam_id_;
}
inline void CMsgDOTATeamMemberProfileRequest::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamMemberProfileRequest.steam_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamIDByNameRequest

// optional string name = 1;
inline bool CMsgDOTATeamIDByNameRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamIDByNameRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamIDByNameRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamIDByNameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTATeamIDByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamIDByNameRequest.name)
  return name_.GetNoArena();
}
inline void CMsgDOTATeamIDByNameRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamIDByNameRequest.name)
}
#if LANG_CXX11
inline void CMsgDOTATeamIDByNameRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamIDByNameRequest.name)
}
#endif
inline void CMsgDOTATeamIDByNameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamIDByNameRequest.name)
}
inline void CMsgDOTATeamIDByNameRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamIDByNameRequest.name)
}
inline ::std::string* CMsgDOTATeamIDByNameRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamIDByNameRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamIDByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamIDByNameRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamIDByNameRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamIDByNameRequest.name)
}

// -------------------------------------------------------------------

// CMsgDOTATeamIDByNameResponse

// optional uint32 eresult = 1;
inline bool CMsgDOTATeamIDByNameResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamIDByNameResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamIDByNameResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamIDByNameResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTATeamIDByNameResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamIDByNameResponse.eresult)
  return eresult_;
}
inline void CMsgDOTATeamIDByNameResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamIDByNameResponse.eresult)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamIDByNameResponse::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamIDByNameResponse::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamIDByNameResponse::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamIDByNameResponse::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamIDByNameResponse::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamIDByNameResponse.team_id)
  return team_id_;
}
inline void CMsgDOTATeamIDByNameResponse::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamIDByNameResponse.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamProfileResponse

// optional uint32 eresult = 1;
inline bool CMsgDOTATeamProfileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamProfileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamProfileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamProfileResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTATeamProfileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamProfileResponse.eresult)
  return eresult_;
}
inline void CMsgDOTATeamProfileResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamProfileResponse.eresult)
}

// optional .CMsgDOTATeam team = 2;
inline bool CMsgDOTATeamProfileResponse::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamProfileResponse::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamProfileResponse::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamProfileResponse::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::CMsgDOTATeam& CMsgDOTATeamProfileResponse::team() const {
  const ::CMsgDOTATeam* p = team_;
  // @@protoc_insertion_point(field_get:CMsgDOTATeamProfileResponse.team)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATeam*>(
      &::_CMsgDOTATeam_default_instance_);
}
inline ::CMsgDOTATeam* CMsgDOTATeamProfileResponse::release_team() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamProfileResponse.team)
  clear_has_team();
  ::CMsgDOTATeam* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::CMsgDOTATeam* CMsgDOTATeamProfileResponse::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    team_ = new ::CMsgDOTATeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamProfileResponse.team)
  return team_;
}
inline void CMsgDOTATeamProfileResponse::set_allocated_team(::CMsgDOTATeam* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamProfileResponse.team)
}

// -------------------------------------------------------------------

// CMsgDOTAProTeamListRequest

// -------------------------------------------------------------------

// CMsgDOTAProTeamListResponse_TeamEntry

// optional uint32 team_id = 1;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.team_id)
  return team_id_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.team_id)
}

// optional string tag = 2;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#if LANG_CXX11
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#endif
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProTeamListResponse.TeamEntry.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProTeamListResponse.TeamEntry.tag)
}

// optional uint32 time_created = 3;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_time_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_time_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.time_created)
  return time_created_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.time_created)
}

// optional uint64 logo = 4;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAProTeamListResponse_TeamEntry::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.logo)
  return logo_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.logo)
}

// optional string country_code = 5;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#endif
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}

// optional uint32 member_count = 6;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_member_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_member_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.TeamEntry.member_count)
  return member_count_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.TeamEntry.member_count)
}

// -------------------------------------------------------------------

// CMsgDOTAProTeamListResponse

// repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
inline int CMsgDOTAProTeamListResponse::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTAProTeamListResponse::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProTeamListResponse.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProTeamListResponse.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProTeamListResponse_TeamEntry >*
CMsgDOTAProTeamListResponse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProTeamListResponse.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProTeamListResponse_TeamEntry >&
CMsgDOTAProTeamListResponse::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProTeamListResponse.teams)
  return teams_;
}

// optional uint32 eresult = 2;
inline bool CMsgDOTAProTeamListResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProTeamListResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProTeamListResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProTeamListResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProTeamListResponse.eresult)
  return eresult_;
}
inline void CMsgDOTAProTeamListResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProTeamListResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_InviterToGC

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamInvite_InviterToGC::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_InviterToGC.account_id)
  return account_id_;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_InviterToGC.account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamInvite_InviterToGC::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_InviterToGC.team_id)
  return team_id_;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_InviterToGC.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCImmediateResponseToInviter

// optional .CMsgDOTATeamInvite_GCImmediateResponseToInviter.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result CMsgDOTATeamInvite_GCImmediateResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
  return static_cast< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result >(result_);
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_result(::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result value) {
  assert(::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
}

// optional string invitee_name = 2;
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCImmediateResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#endif
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCRequestToInvitee

// optional uint32 inviter_account_id = 1;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_inviter_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_inviter_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_inviter_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_inviter_account_id() {
  inviter_account_id_ = 0u;
  clear_has_inviter_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_GCRequestToInvitee::inviter_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
  return inviter_account_id_;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_inviter_account_id(::google::protobuf::uint32 value) {
  set_has_inviter_account_id();
  inviter_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
}

// optional string team_name = 2;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#endif
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}

// optional string team_tag = 3;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
inline const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#endif
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}

// optional uint64 logo = 4;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInvite_GCRequestToInvitee::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCRequestToInvitee.logo)
  return logo_;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCRequestToInvitee.logo)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_InviteeResponseToGC

// optional .CMsgDOTATeamInvite_InviteeResponseToGC.Result result = 1 [default = JOIN];
inline bool CMsgDOTATeamInvite_InviteeResponseToGC::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTATeamInvite_InviteeResponseToGC_Result CMsgDOTATeamInvite_InviteeResponseToGC::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_InviteeResponseToGC.result)
  return static_cast< ::CMsgDOTATeamInvite_InviteeResponseToGC_Result >(result_);
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::set_result(::CMsgDOTATeamInvite_InviteeResponseToGC_Result value) {
  assert(::CMsgDOTATeamInvite_InviteeResponseToGC_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_InviteeResponseToGC.result)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCResponseToInviter

// optional .CMsgDOTATeamInvite_GCResponseToInviter.Result result = 1 [default = JOINED];
inline bool CMsgDOTATeamInvite_GCResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTATeamInvite_GCResponseToInviter_Result CMsgDOTATeamInvite_GCResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCResponseToInviter.result)
  return static_cast< ::CMsgDOTATeamInvite_GCResponseToInviter_Result >(result_);
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_result(::CMsgDOTATeamInvite_GCResponseToInviter_Result value) {
  assert(::CMsgDOTATeamInvite_GCResponseToInviter_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCResponseToInviter.result)
}

// optional string invitee_name = 2;
inline bool CMsgDOTATeamInvite_GCResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#endif
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCResponseToInvitee

// optional .CMsgDOTATeamInvite_GCResponseToInvitee.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTATeamInvite_GCResponseToInvitee::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTATeamInvite_GCResponseToInvitee_Result CMsgDOTATeamInvite_GCResponseToInvitee::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCResponseToInvitee.result)
  return static_cast< ::CMsgDOTATeamInvite_GCResponseToInvitee_Result >(result_);
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_result(::CMsgDOTATeamInvite_GCResponseToInvitee_Result value) {
  assert(::CMsgDOTATeamInvite_GCResponseToInvitee_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCResponseToInvitee.result)
}

// optional string team_name = 2;
inline bool CMsgDOTATeamInvite_GCResponseToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#endif
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}

// -------------------------------------------------------------------

// CMsgDOTATeamOnProfile

// optional uint32 team_id = 1;
inline bool CMsgDOTATeamOnProfile::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamOnProfile::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamOnProfile::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamOnProfile::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamOnProfile::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamOnProfile.team_id)
  return team_id_;
}
inline void CMsgDOTATeamOnProfile::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamOnProfile.team_id)
}

// optional bool enabled = 2;
inline bool CMsgDOTATeamOnProfile::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamOnProfile::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamOnProfile::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamOnProfile::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool CMsgDOTATeamOnProfile::enabled() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamOnProfile.enabled)
  return enabled_;
}
inline void CMsgDOTATeamOnProfile::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATeamOnProfile.enabled)
}

// -------------------------------------------------------------------

// CMsgDOTAKickTeamMember

// optional uint32 account_id = 1;
inline bool CMsgDOTAKickTeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAKickTeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAKickTeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAKickTeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAKickTeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAKickTeamMember.account_id)
  return account_id_;
}
inline void CMsgDOTAKickTeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAKickTeamMember.account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTAKickTeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAKickTeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAKickTeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAKickTeamMember::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAKickTeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAKickTeamMember.team_id)
  return team_id_;
}
inline void CMsgDOTAKickTeamMember::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAKickTeamMember.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAKickTeamMemberResponse

// optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTAKickTeamMemberResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAKickTeamMemberResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAKickTeamMemberResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAKickTeamMemberResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAKickTeamMemberResponse.result)
  return static_cast< ::CMsgDOTAKickTeamMemberResponse_Result >(result_);
}
inline void CMsgDOTAKickTeamMemberResponse::set_result(::CMsgDOTAKickTeamMemberResponse_Result value) {
  assert(::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAKickTeamMemberResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTATransferTeamAdmin

// optional uint32 new_admin_account_id = 1;
inline bool CMsgDOTATransferTeamAdmin::has_new_admin_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATransferTeamAdmin::set_has_new_admin_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATransferTeamAdmin::clear_has_new_admin_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATransferTeamAdmin::clear_new_admin_account_id() {
  new_admin_account_id_ = 0u;
  clear_has_new_admin_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::new_admin_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATransferTeamAdmin.new_admin_account_id)
  return new_admin_account_id_;
}
inline void CMsgDOTATransferTeamAdmin::set_new_admin_account_id(::google::protobuf::uint32 value) {
  set_has_new_admin_account_id();
  new_admin_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATransferTeamAdmin.new_admin_account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATransferTeamAdmin::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATransferTeamAdmin::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATransferTeamAdmin::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATransferTeamAdmin::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATransferTeamAdmin.team_id)
  return team_id_;
}
inline void CMsgDOTATransferTeamAdmin::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATransferTeamAdmin.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATransferTeamAdminResponse

// optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTATransferTeamAdminResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATransferTeamAdminResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATransferTeamAdminResponse.result)
  return static_cast< ::CMsgDOTATransferTeamAdminResponse_Result >(result_);
}
inline void CMsgDOTATransferTeamAdminResponse::set_result(::CMsgDOTATransferTeamAdminResponse_Result value) {
  assert(::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATransferTeamAdminResponse.result)
}

// optional string invitee_name = 2;
inline bool CMsgDOTATransferTeamAdminResponse::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATransferTeamAdminResponse::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
inline const ::std::string& CMsgDOTATransferTeamAdminResponse::invitee_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATransferTeamAdminResponse.invitee_name)
  return invitee_name_.GetNoArena();
}
inline void CMsgDOTATransferTeamAdminResponse::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATransferTeamAdminResponse.invitee_name)
}
#if LANG_CXX11
inline void CMsgDOTATransferTeamAdminResponse::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTATransferTeamAdminResponse.invitee_name)
}
#endif
inline void CMsgDOTATransferTeamAdminResponse::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATransferTeamAdminResponse.invitee_name)
}
inline void CMsgDOTATransferTeamAdminResponse::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATransferTeamAdminResponse.invitee_name)
}
inline ::std::string* CMsgDOTATransferTeamAdminResponse::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATransferTeamAdminResponse.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATransferTeamAdminResponse::release_invitee_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATransferTeamAdminResponse.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATransferTeamAdminResponse::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATransferTeamAdminResponse.invitee_name)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveTeam

// optional uint32 team_id = 1;
inline bool CMsgDOTALeaveTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveTeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTALeaveTeam::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveTeam.team_id)
  return team_id_;
}
inline void CMsgDOTALeaveTeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveTeam.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveTeamResponse

// optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTALeaveTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeaveTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeaveTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeaveTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveTeamResponse.result)
  return static_cast< ::CMsgDOTALeaveTeamResponse_Result >(result_);
}
inline void CMsgDOTALeaveTeamResponse::set_result(::CMsgDOTALeaveTeamResponse_Result value) {
  assert(::CMsgDOTALeaveTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveTeamResponse.result)
}

// optional string team_name = 2;
inline bool CMsgDOTALeaveTeamResponse::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveTeamResponse::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveTeamResponse::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveTeamResponse::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTALeaveTeamResponse::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveTeamResponse.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTALeaveTeamResponse::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveTeamResponse.team_name)
}
#if LANG_CXX11
inline void CMsgDOTALeaveTeamResponse::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTALeaveTeamResponse.team_name)
}
#endif
inline void CMsgDOTALeaveTeamResponse::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTALeaveTeamResponse.team_name)
}
inline void CMsgDOTALeaveTeamResponse::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTALeaveTeamResponse.team_name)
}
inline ::std::string* CMsgDOTALeaveTeamResponse::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeaveTeamResponse.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTALeaveTeamResponse::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTALeaveTeamResponse.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTALeaveTeamResponse::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALeaveTeamResponse.team_name)
}

// -------------------------------------------------------------------

// CMsgDOTABetaParticipationRequest

// -------------------------------------------------------------------

// CMsgDOTABetaParticipation

// optional uint32 access_rights = 1;
inline bool CMsgDOTABetaParticipation::has_access_rights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABetaParticipation::set_has_access_rights() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABetaParticipation::clear_has_access_rights() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABetaParticipation::clear_access_rights() {
  access_rights_ = 0u;
  clear_has_access_rights();
}
inline ::google::protobuf::uint32 CMsgDOTABetaParticipation::access_rights() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABetaParticipation.access_rights)
  return access_rights_;
}
inline void CMsgDOTABetaParticipation::set_access_rights(::google::protobuf::uint32 value) {
  set_has_access_rights();
  access_rights_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABetaParticipation.access_rights)
}

// optional fixed32 beta_join_time = 2;
inline bool CMsgDOTABetaParticipation::has_beta_join_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTABetaParticipation::set_has_beta_join_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTABetaParticipation::clear_has_beta_join_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTABetaParticipation::clear_beta_join_time() {
  beta_join_time_ = 0u;
  clear_has_beta_join_time();
}
inline ::google::protobuf::uint32 CMsgDOTABetaParticipation::beta_join_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABetaParticipation.beta_join_time)
  return beta_join_time_;
}
inline void CMsgDOTABetaParticipation::set_beta_join_time(::google::protobuf::uint32 value) {
  set_has_beta_join_time();
  beta_join_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTABetaParticipation.beta_join_time)
}

// -------------------------------------------------------------------

// CMsgDOTAGenericResult

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDOTAGenericResult::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenericResult::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAGenericResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenericResult.eresult)
  return eresult_;
}
inline void CMsgDOTAGenericResult::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGenericResult.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastNotification.message)
  return message_.GetNoArena();
}
inline void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastNotification.message)
}
#if LANG_CXX11
inline void CMsgDOTABroadcastNotification::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTABroadcastNotification.message)
}
#endif
inline void CMsgDOTABroadcastNotification::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTABroadcastNotification.message)
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTABroadcastNotification.message)
}
inline ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastNotification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTABroadcastNotification::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTABroadcastNotification.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastNotification.message)
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team_Player

// optional uint32 player_slot = 1;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
}

// optional string player_name = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
#if LANG_CXX11
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
#endif
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}

// optional string hero_name = 3;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::hero_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return hero_name_.GetNoArena();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
#if LANG_CXX11
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
#endif
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_hero_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}

// optional uint32 hero_id = 4;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
}

// optional uint32 kills = 5;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
  return kills_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
}

// optional uint32 deaths = 6;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
  return deaths_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
}

// optional uint32 assists = 7;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
  return assists_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
}

// optional uint32 last_hits = 8;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
  return last_hits_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
}

// optional uint32 denies = 9;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_denies() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_denies() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
  return denies_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
}

// optional uint32 gold = 10;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
  return gold_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
}

// optional uint32 level = 11;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.level)
  return level_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.level)
}

// optional float gold_per_min = 12;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold_per_min() {
  gold_per_min_ = 0;
  clear_has_gold_per_min();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold_per_min(float value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
}

// optional float xp_per_min = 13;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_xp_per_min() {
  xp_per_min_ = 0;
  clear_has_xp_per_min();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
  return xp_per_min_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_xp_per_min(float value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_state() {
  ultimate_state_ = 0;
  clear_has_ultimate_state();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
  return static_cast< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(ultimate_state_);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  assert(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value));
  set_has_ultimate_state();
  ultimate_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
}

// optional float ultimate_cooldown = 15;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_cooldown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_cooldown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_cooldown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0;
  clear_has_ultimate_cooldown();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
  return ultimate_cooldown_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_cooldown(float value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
}

// optional uint32 item0 = 16;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item0() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item0() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item0() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item0() {
  item0_ = 0u;
  clear_has_item0();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
  return item0_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item0(::google::protobuf::uint32 value) {
  set_has_item0();
  item0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
}

// optional uint32 item1 = 17;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item1() {
  item1_ = 0u;
  clear_has_item1();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
  return item1_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item1(::google::protobuf::uint32 value) {
  set_has_item1();
  item1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
}

// optional uint32 item2 = 18;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item2() {
  item2_ = 0u;
  clear_has_item2();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
  return item2_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item2(::google::protobuf::uint32 value) {
  set_has_item2();
  item2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
}

// optional uint32 item3 = 19;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item3() {
  item3_ = 0u;
  clear_has_item3();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
  return item3_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item3(::google::protobuf::uint32 value) {
  set_has_item3();
  item3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
}

// optional uint32 item4 = 20;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item4() {
  item4_ = 0u;
  clear_has_item4();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
  return item4_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item4(::google::protobuf::uint32 value) {
  set_has_item4();
  item4_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
}

// optional uint32 item5 = 21;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item5() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item5() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item5() {
  item5_ = 0u;
  clear_has_item5();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
  return item5_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item5(::google::protobuf::uint32 value) {
  set_has_item5();
  item5_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
}

// optional uint32 respawn_timer = 22;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_respawn_timer() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_respawn_timer() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_respawn_timer() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_respawn_timer() {
  respawn_timer_ = 0u;
  clear_has_respawn_timer();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::respawn_timer() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
  return respawn_timer_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_respawn_timer(::google::protobuf::uint32 value) {
  set_has_respawn_timer();
  respawn_timer_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team

// repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
inline int CMsgDOTALiveScoreboardUpdate_Team::players_size() const {
  return players_.size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Get(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALiveScoreboardUpdate.Team.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
CMsgDOTALiveScoreboardUpdate_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_;
}

// optional uint32 score = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.score)
  return score_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.score)
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate

// optional uint32 tournament_id = 1;
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.tournament_id)
}

// optional uint32 tournament_game_id = 2;
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.tournament_game_id)
  return tournament_game_id_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.tournament_game_id)
}

// optional float duration = 3;
inline bool CMsgDOTALiveScoreboardUpdate::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CMsgDOTALiveScoreboardUpdate::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.duration)
  return duration_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.duration)
}

// optional int32 hltv_delay = 4;
inline bool CMsgDOTALiveScoreboardUpdate::has_hltv_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_hltv_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_hltv_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_hltv_delay() {
  hltv_delay_ = 0;
  clear_has_hltv_delay();
}
inline ::google::protobuf::int32 CMsgDOTALiveScoreboardUpdate::hltv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.hltv_delay)
  return hltv_delay_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_hltv_delay(::google::protobuf::int32 value) {
  set_has_hltv_delay();
  hltv_delay_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.hltv_delay)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
inline bool CMsgDOTALiveScoreboardUpdate::has_team_good() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_team_good() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_team_good() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_good() {
  if (team_good_ != NULL) team_good_->Clear();
  clear_has_team_good();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_good() const {
  const ::CMsgDOTALiveScoreboardUpdate_Team* p = team_good_;
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.team_good)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTALiveScoreboardUpdate_Team*>(
      &::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_good() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.team_good)
  clear_has_team_good();
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = team_good_;
  team_good_ = NULL;
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_good() {
  set_has_team_good();
  if (team_good_ == NULL) {
    team_good_ = new ::CMsgDOTALiveScoreboardUpdate_Team;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.team_good)
  return team_good_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_allocated_team_good(::CMsgDOTALiveScoreboardUpdate_Team* team_good) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_good_;
  }
  if (team_good) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_good = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_good, submessage_arena);
    }
    set_has_team_good();
  } else {
    clear_has_team_good();
  }
  team_good_ = team_good;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.team_good)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
inline bool CMsgDOTALiveScoreboardUpdate::has_team_bad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_team_bad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_team_bad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_bad() {
  if (team_bad_ != NULL) team_bad_->Clear();
  clear_has_team_bad();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_bad() const {
  const ::CMsgDOTALiveScoreboardUpdate_Team* p = team_bad_;
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.team_bad)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTALiveScoreboardUpdate_Team*>(
      &::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_bad() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.team_bad)
  clear_has_team_bad();
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = team_bad_;
  team_bad_ = NULL;
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_bad() {
  set_has_team_bad();
  if (team_bad_ == NULL) {
    team_bad_ = new ::CMsgDOTALiveScoreboardUpdate_Team;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.team_bad)
  return team_bad_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_allocated_team_bad(::CMsgDOTALiveScoreboardUpdate_Team* team_bad) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_bad_;
  }
  if (team_bad) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_bad = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_bad, submessage_arena);
    }
    set_has_team_bad();
  } else {
    clear_has_team_bad();
  }
  team_bad_ = team_bad;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.team_bad)
}

// optional uint32 roshan_respawn_timer = 7;
inline bool CMsgDOTALiveScoreboardUpdate::has_roshan_respawn_timer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_roshan_respawn_timer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_roshan_respawn_timer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_roshan_respawn_timer() {
  roshan_respawn_timer_ = 0u;
  clear_has_roshan_respawn_timer();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::roshan_respawn_timer() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
  return roshan_respawn_timer_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_roshan_respawn_timer(::google::protobuf::uint32 value) {
  set_has_roshan_respawn_timer();
  roshan_respawn_timer_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannel

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAJoinChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAJoinChatChannel::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAJoinChatChannel.channel_name)
}
#endif
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAJoinChatChannel.channel_name)
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAJoinChatChannel.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannel::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAJoinChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAJoinChatChannel.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAJoinChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannel.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAJoinChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAJoinChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveChatChannel

// optional uint64 channel_id = 1;
inline bool CMsgDOTALeaveChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTALeaveChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTALeaveChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveChatChannel.channel_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage

// optional uint32 account_id = 1;
inline bool CMsgDOTAChatMessage::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAChatMessage::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAChatMessage::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.account_id)
  return account_id_;
}
inline void CMsgDOTAChatMessage::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.account_id)
}

// optional uint64 channel_id = 2;
inline bool CMsgDOTAChatMessage::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatMessage::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatMessage::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatMessage::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.channel_id)
}

// optional string persona_name = 3;
inline bool CMsgDOTAChatMessage::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatMessage::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatMessage::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatMessage::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAChatMessage.persona_name)
}
#endif
inline void CMsgDOTAChatMessage::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.persona_name)
}
inline void CMsgDOTAChatMessage::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.persona_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.persona_name)
}

// optional string text = 4;
inline bool CMsgDOTAChatMessage::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& CMsgDOTAChatMessage::text() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.text)
  return text_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.text)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAChatMessage.text)
}
#endif
inline void CMsgDOTAChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.text)
}
inline void CMsgDOTAChatMessage::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.text)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.text)
}

// optional uint32 timestamp = 5;
inline bool CMsgDOTAChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAChatMessage::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.timestamp)
  return timestamp_;
}
inline void CMsgDOTAChatMessage::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.timestamp)
}

// optional uint32 suggest_invite_account_id = 6;
inline bool CMsgDOTAChatMessage::has_suggest_invite_account_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_invite_account_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_invite_account_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_account_id() {
  suggest_invite_account_id_ = 0u;
  clear_has_suggest_invite_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_invite_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_account_id)
  return suggest_invite_account_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_account_id(::google::protobuf::uint32 value) {
  set_has_suggest_invite_account_id();
  suggest_invite_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_account_id)
}

// optional string suggest_invite_name = 7;
inline bool CMsgDOTAChatMessage::has_suggest_invite_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_invite_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_invite_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_name() {
  suggest_invite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suggest_invite_name();
}
inline const ::std::string& CMsgDOTAChatMessage::suggest_invite_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.GetNoArena();
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const ::std::string& value) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMessage::set_suggest_invite_name(::std::string&& value) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAChatMessage.suggest_invite_name)
}
#endif
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.suggest_invite_name)
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value, size_t size) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.suggest_invite_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_suggest_invite_name() {
  set_has_suggest_invite_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMessage::release_suggest_invite_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.suggest_invite_name)
  clear_has_suggest_invite_name();
  return suggest_invite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_invite_name(::std::string* suggest_invite_name) {
  if (suggest_invite_name != NULL) {
    set_has_suggest_invite_name();
  } else {
    clear_has_suggest_invite_name();
  }
  suggest_invite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest_invite_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.suggest_invite_name)
}

// -------------------------------------------------------------------

// CMsgDOTASetChatChannelVerbosity_ChannelVerbosity

// optional fixed64 channel_id = 1;
inline bool CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity.channel_id)
  return channel_id_;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity.channel_id)
}

// optional uint32 suppression_flags = 2 [default = 0];
inline bool CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::has_suppression_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::set_has_suppression_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::clear_has_suppression_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::clear_suppression_flags() {
  suppression_flags_ = 0u;
  clear_has_suppression_flags();
}
inline ::google::protobuf::uint32 CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::suppression_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity.suppression_flags)
  return suppression_flags_;
}
inline void CMsgDOTASetChatChannelVerbosity_ChannelVerbosity::set_suppression_flags(::google::protobuf::uint32 value) {
  set_has_suppression_flags();
  suppression_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetChatChannelVerbosity.ChannelVerbosity.suppression_flags)
}

// -------------------------------------------------------------------

// CMsgDOTASetChatChannelVerbosity

// repeated .CMsgDOTASetChatChannelVerbosity.ChannelVerbosity verbosities = 1;
inline int CMsgDOTASetChatChannelVerbosity::verbosities_size() const {
  return verbosities_.size();
}
inline void CMsgDOTASetChatChannelVerbosity::clear_verbosities() {
  verbosities_.Clear();
}
inline const ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity& CMsgDOTASetChatChannelVerbosity::verbosities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetChatChannelVerbosity.verbosities)
  return verbosities_.Get(index);
}
inline ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* CMsgDOTASetChatChannelVerbosity::mutable_verbosities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASetChatChannelVerbosity.verbosities)
  return verbosities_.Mutable(index);
}
inline ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* CMsgDOTASetChatChannelVerbosity::add_verbosities() {
  // @@protoc_insertion_point(field_add:CMsgDOTASetChatChannelVerbosity.verbosities)
  return verbosities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity >*
CMsgDOTASetChatChannelVerbosity::mutable_verbosities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASetChatChannelVerbosity.verbosities)
  return &verbosities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTASetChatChannelVerbosity_ChannelVerbosity >&
CMsgDOTASetChatChannelVerbosity::verbosities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASetChatChannelVerbosity.verbosities)
  return verbosities_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMember::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatMember::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatMember::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatMember::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAChatMember::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAChatMember::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAChatMember.persona_name)
}
#endif
inline void CMsgDOTAChatMember::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMember.persona_name)
}
inline void CMsgDOTAChatMember::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMember.persona_name)
}
inline ::std::string* CMsgDOTAChatMember::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMember.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAChatMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMember.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAChatMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMember.persona_name)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannelResponse

// optional uint32 response = 1;
inline bool CMsgDOTAJoinChatChannelResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_response() {
  response_ = 0u;
  clear_has_response();
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.response)
  return response_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.response)
}

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAJoinChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAJoinChatChannelResponse.channel_name)
}
#endif
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAJoinChatChannelResponse.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannelResponse.channel_name)
}

// optional fixed64 channel_id = 3;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAJoinChatChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_id)
  return channel_id_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_id)
}

// optional uint32 max_members = 4;
inline bool CMsgDOTAJoinChatChannelResponse::has_max_members() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_max_members() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_max_members() {
  max_members_ = 0u;
  clear_has_max_members();
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.max_members)
  return max_members_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_max_members(::google::protobuf::uint32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.max_members)
}

// repeated .CMsgDOTAChatMember members = 5;
inline int CMsgDOTAJoinChatChannelResponse::members_size() const {
  return members_.size();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Get(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
CMsgDOTAJoinChatChannelResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAJoinChatChannelResponse.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
CMsgDOTAJoinChatChannelResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAJoinChatChannelResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelFullUpdate

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatChannelFullUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelFullUpdate::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatChannelFullUpdate::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatChannelFullUpdate::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelFullUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelFullUpdate.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatChannelFullUpdate::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelFullUpdate.channel_id)
}

// repeated .CMsgDOTAChatMember members = 2;
inline int CMsgDOTAChatChannelFullUpdate::members_size() const {
  return members_.size();
}
inline void CMsgDOTAChatChannelFullUpdate::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAChatMember& CMsgDOTAChatChannelFullUpdate::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Get(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
CMsgDOTAChatChannelFullUpdate::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatChannelFullUpdate.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
CMsgDOTAChatChannelFullUpdate::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatChannelFullUpdate.members)
  return members_;
}

// -------------------------------------------------------------------

// CMsgDOTAOtherJoinedChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.channel_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAOtherJoinedChatChannel::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAOtherJoinedChatChannel::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.GetNoArena();
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#if LANG_CXX11
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#endif
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAOtherJoinedChatChannel.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAOtherJoinedChatChannel::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAOtherJoinedChatChannel.persona_name)
}

// optional fixed64 steam_id = 3;
inline bool CMsgDOTAOtherJoinedChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.steam_id)
}

// -------------------------------------------------------------------

// CMsgDOTAOtherLeftChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.channel_id)
}

// optional fixed64 steam_id = 2;
inline bool CMsgDOTAOtherLeftChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.steam_id)
}

// -------------------------------------------------------------------

// CMsgDOTARequestDefaultChatChannel

// -------------------------------------------------------------------

// CMsgDOTARequestDefaultChatChannelResponse

// optional string channel_name = 1;
inline bool CMsgDOTARequestDefaultChatChannelResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestDefaultChatChannelResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestDefaultChatChannelResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestDefaultChatChannelResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTARequestDefaultChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTARequestDefaultChatChannelResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTARequestDefaultChatChannelResponse::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
}
#endif
inline void CMsgDOTARequestDefaultChatChannelResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
}
inline void CMsgDOTARequestDefaultChatChannelResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
}
inline ::std::string* CMsgDOTARequestDefaultChatChannelResponse::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestDefaultChatChannelResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestDefaultChatChannelResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestDefaultChatChannelResponse.channel_name)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelList

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse_ChatChannel

// optional string channel_name = 1;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#if LANG_CXX11
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#endif
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}

// optional uint32 num_members = 2;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_num_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_num_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_num_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_num_members() {
  num_members_ = 0u;
  clear_has_num_members();
}
inline ::google::protobuf::uint32 CMsgDOTARequestChatChannelListResponse_ChatChannel::num_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
  return num_members_;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_num_members(::google::protobuf::uint32 value) {
  set_has_num_members();
  num_members_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
}

// optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse

// repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
inline int CMsgDOTARequestChatChannelListResponse::channels_size() const {
  return channels_.size();
}
inline void CMsgDOTARequestChatChannelListResponse::clear_channels() {
  channels_.Clear();
}
inline const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Get(index);
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Mutable(index);
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::add_channels() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
CMsgDOTARequestChatChannelListResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestChatChannelListResponse.channels)
  return &channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
CMsgDOTARequestChatChannelListResponse::channels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// CMsgDOTAGuildSDO_Member

// optional uint32 account_id = 1;
inline bool CMsgDOTAGuildSDO_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildSDO_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildSDO_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildSDO_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Member.account_id)
  return account_id_;
}
inline void CMsgDOTAGuildSDO_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Member.account_id)
}

// optional uint32 time_joined = 2;
inline bool CMsgDOTAGuildSDO_Member::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildSDO_Member::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildSDO_Member::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildSDO_Member::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::time_joined() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Member.time_joined)
  return time_joined_;
}
inline void CMsgDOTAGuildSDO_Member::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Member.time_joined)
}

// optional uint32 role = 3;
inline bool CMsgDOTAGuildSDO_Member::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildSDO_Member::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildSDO_Member::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildSDO_Member::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Member.role)
  return role_;
}
inline void CMsgDOTAGuildSDO_Member::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Member.role)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildSDO_Invitation

// optional uint32 account_id = 1;
inline bool CMsgDOTAGuildSDO_Invitation::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildSDO_Invitation::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Invitation.account_id)
  return account_id_;
}
inline void CMsgDOTAGuildSDO_Invitation::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Invitation.account_id)
}

// optional uint32 time_sent = 2;
inline bool CMsgDOTAGuildSDO_Invitation::has_time_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildSDO_Invitation::set_has_time_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_has_time_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_time_sent() {
  time_sent_ = 0u;
  clear_has_time_sent();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::time_sent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Invitation.time_sent)
  return time_sent_;
}
inline void CMsgDOTAGuildSDO_Invitation::set_time_sent(::google::protobuf::uint32 value) {
  set_has_time_sent();
  time_sent_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Invitation.time_sent)
}

// optional uint32 account_id_sender = 3;
inline bool CMsgDOTAGuildSDO_Invitation::has_account_id_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildSDO_Invitation::set_has_account_id_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_has_account_id_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildSDO_Invitation::clear_account_id_sender() {
  account_id_sender_ = 0u;
  clear_has_account_id_sender();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::account_id_sender() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.Invitation.account_id_sender)
  return account_id_sender_;
}
inline void CMsgDOTAGuildSDO_Invitation::set_account_id_sender(::google::protobuf::uint32 value) {
  set_has_account_id_sender();
  account_id_sender_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.Invitation.account_id_sender)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildSDO

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildSDO::has_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAGuildSDO::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAGuildSDO::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildSDO::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.guild_id)
}

// optional string name = 2;
inline bool CMsgDOTAGuildSDO::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildSDO::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildSDO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTAGuildSDO::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.name)
  return name_.GetNoArena();
}
inline void CMsgDOTAGuildSDO::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.name)
}
#if LANG_CXX11
inline void CMsgDOTAGuildSDO::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildSDO.name)
}
#endif
inline void CMsgDOTAGuildSDO::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildSDO.name)
}
inline void CMsgDOTAGuildSDO::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildSDO.name)
}
inline ::std::string* CMsgDOTAGuildSDO::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildSDO.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildSDO::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildSDO.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildSDO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildSDO.name)
}

// optional string tag = 3;
inline bool CMsgDOTAGuildSDO::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildSDO::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildSDO::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAGuildSDO::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAGuildSDO::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.tag)
}
#if LANG_CXX11
inline void CMsgDOTAGuildSDO::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildSDO.tag)
}
#endif
inline void CMsgDOTAGuildSDO::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildSDO.tag)
}
inline void CMsgDOTAGuildSDO::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildSDO.tag)
}
inline ::std::string* CMsgDOTAGuildSDO::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildSDO.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildSDO::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildSDO.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildSDO::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildSDO.tag)
}

// optional uint32 time_created = 4;
inline bool CMsgDOTAGuildSDO::has_time_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_time_created() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAGuildSDO::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAGuildSDO::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.time_created)
  return time_created_;
}
inline void CMsgDOTAGuildSDO::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.time_created)
}

// optional uint32 time_disbanded = 5;
inline bool CMsgDOTAGuildSDO::has_time_disbanded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_time_disbanded() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAGuildSDO::clear_has_time_disbanded() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAGuildSDO::clear_time_disbanded() {
  time_disbanded_ = 0u;
  clear_has_time_disbanded();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSDO::time_disbanded() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.time_disbanded)
  return time_disbanded_;
}
inline void CMsgDOTAGuildSDO::set_time_disbanded(::google::protobuf::uint32 value) {
  set_has_time_disbanded();
  time_disbanded_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.time_disbanded)
}

// optional uint64 logo = 6;
inline bool CMsgDOTAGuildSDO::has_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAGuildSDO::clear_has_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAGuildSDO::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildSDO::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.logo)
  return logo_;
}
inline void CMsgDOTAGuildSDO::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.logo)
}

// optional uint64 base_logo = 7;
inline bool CMsgDOTAGuildSDO::has_base_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_base_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAGuildSDO::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAGuildSDO::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildSDO::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.base_logo)
  return base_logo_;
}
inline void CMsgDOTAGuildSDO::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.base_logo)
}

// optional uint64 banner_logo = 8;
inline bool CMsgDOTAGuildSDO::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAGuildSDO::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAGuildSDO::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildSDO::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAGuildSDO::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.banner_logo)
}

// repeated .CMsgDOTAGuildSDO.Member members = 9;
inline int CMsgDOTAGuildSDO::members_size() const {
  return members_.size();
}
inline void CMsgDOTAGuildSDO::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAGuildSDO_Member& CMsgDOTAGuildSDO::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.members)
  return members_.Get(index);
}
inline ::CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildSDO.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildSDO.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Member >*
CMsgDOTAGuildSDO::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildSDO.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Member >&
CMsgDOTAGuildSDO::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildSDO.members)
  return members_;
}

// repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
inline int CMsgDOTAGuildSDO::invitations_size() const {
  return invitations_.size();
}
inline void CMsgDOTAGuildSDO::clear_invitations() {
  invitations_.Clear();
}
inline const ::CMsgDOTAGuildSDO_Invitation& CMsgDOTAGuildSDO::invitations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.invitations)
  return invitations_.Get(index);
}
inline ::CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO::mutable_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildSDO.invitations)
  return invitations_.Mutable(index);
}
inline ::CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO::add_invitations() {
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildSDO.invitations)
  return invitations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Invitation >*
CMsgDOTAGuildSDO::mutable_invitations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildSDO.invitations)
  return &invitations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildSDO_Invitation >&
CMsgDOTAGuildSDO::invitations() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildSDO.invitations)
  return invitations_;
}

// optional string message = 11;
inline bool CMsgDOTAGuildSDO::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildSDO::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildSDO::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildSDO::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CMsgDOTAGuildSDO::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSDO.message)
  return message_.GetNoArena();
}
inline void CMsgDOTAGuildSDO::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSDO.message)
}
#if LANG_CXX11
inline void CMsgDOTAGuildSDO::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildSDO.message)
}
#endif
inline void CMsgDOTAGuildSDO::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildSDO.message)
}
inline void CMsgDOTAGuildSDO::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildSDO.message)
}
inline ::std::string* CMsgDOTAGuildSDO::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildSDO.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildSDO::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildSDO.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildSDO::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildSDO.message)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildAuditSDO_Entry

// optional uint32 event_index = 1;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_event_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_event_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_event_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_event_index() {
  event_index_ = 0u;
  clear_has_event_index();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::event_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.event_index)
  return event_index_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_event_index(::google::protobuf::uint32 value) {
  set_has_event_index();
  event_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.event_index)
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.timestamp)
  return timestamp_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.timestamp)
}

// optional uint32 action = 3;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::action() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.action)
  return action_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.action)
}

// optional uint32 account_id_requestor = 4;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_account_id_requestor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_account_id_requestor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_account_id_requestor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_account_id_requestor() {
  account_id_requestor_ = 0u;
  clear_has_account_id_requestor();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::account_id_requestor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.account_id_requestor)
  return account_id_requestor_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_account_id_requestor(::google::protobuf::uint32 value) {
  set_has_account_id_requestor();
  account_id_requestor_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.account_id_requestor)
}

// optional uint32 account_id_target = 5;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_account_id_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_account_id_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_account_id_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_account_id_target() {
  account_id_target_ = 0u;
  clear_has_account_id_target();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::account_id_target() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.account_id_target)
  return account_id_target_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_account_id_target(::google::protobuf::uint32 value) {
  set_has_account_id_target();
  account_id_target_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.account_id_target)
}

// optional uint32 reference_data_a = 6;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_reference_data_a() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_reference_data_a() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_reference_data_a() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_reference_data_a() {
  reference_data_a_ = 0u;
  clear_has_reference_data_a();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::reference_data_a() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.reference_data_a)
  return reference_data_a_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_reference_data_a(::google::protobuf::uint32 value) {
  set_has_reference_data_a();
  reference_data_a_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.reference_data_a)
}

// optional uint32 reference_data_b = 7;
inline bool CMsgDOTAGuildAuditSDO_Entry::has_reference_data_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_has_reference_data_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_has_reference_data_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAGuildAuditSDO_Entry::clear_reference_data_b() {
  reference_data_b_ = 0u;
  clear_has_reference_data_b();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::reference_data_b() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.Entry.reference_data_b)
  return reference_data_b_;
}
inline void CMsgDOTAGuildAuditSDO_Entry::set_reference_data_b(::google::protobuf::uint32 value) {
  set_has_reference_data_b();
  reference_data_b_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.Entry.reference_data_b)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildAuditSDO

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildAuditSDO::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildAuditSDO::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildAuditSDO::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildAuditSDO::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildAuditSDO::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildAuditSDO::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildAuditSDO.guild_id)
}

// repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
inline int CMsgDOTAGuildAuditSDO::entries_size() const {
  return entries_.size();
}
inline void CMsgDOTAGuildAuditSDO::clear_entries() {
  entries_.Clear();
}
inline const ::CMsgDOTAGuildAuditSDO_Entry& CMsgDOTAGuildAuditSDO::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildAuditSDO.entries)
  return entries_.Get(index);
}
inline ::CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildAuditSDO.entries)
  return entries_.Mutable(index);
}
inline ::CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO::add_entries() {
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildAuditSDO.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildAuditSDO_Entry >*
CMsgDOTAGuildAuditSDO::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildAuditSDO.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildAuditSDO_Entry >&
CMsgDOTAGuildAuditSDO::entries() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildAuditSDO.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CMsgDOTAAccountGuildMembershipsSDO_Membership

// optional uint32 guild_id = 1;
inline bool CMsgDOTAAccountGuildMembershipsSDO_Membership::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Membership::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.Membership.guild_id)
  return guild_id_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.Membership.guild_id)
}

// optional uint32 role = 2;
inline bool CMsgDOTAAccountGuildMembershipsSDO_Membership::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Membership::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.Membership.role)
  return role_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.Membership.role)
}

// -------------------------------------------------------------------

// CMsgDOTAAccountGuildMembershipsSDO_Invitation

// optional uint32 guild_id = 1;
inline bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.Invitation.guild_id)
  return guild_id_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.Invitation.guild_id)
}

// optional uint32 time_sent = 2;
inline bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_time_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_time_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_time_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_time_sent() {
  time_sent_ = 0u;
  clear_has_time_sent();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::time_sent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.Invitation.time_sent)
  return time_sent_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_time_sent(::google::protobuf::uint32 value) {
  set_has_time_sent();
  time_sent_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.Invitation.time_sent)
}

// optional uint32 account_id_sender = 3;
inline bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_account_id_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_account_id_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_account_id_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_account_id_sender() {
  account_id_sender_ = 0u;
  clear_has_account_id_sender();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::account_id_sender() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.Invitation.account_id_sender)
  return account_id_sender_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_account_id_sender(::google::protobuf::uint32 value) {
  set_has_account_id_sender();
  account_id_sender_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.Invitation.account_id_sender)
}

// -------------------------------------------------------------------

// CMsgDOTAAccountGuildMembershipsSDO

// optional uint32 account_id = 1;
inline bool CMsgDOTAAccountGuildMembershipsSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAAccountGuildMembershipsSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAAccountGuildMembershipsSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.account_id)
  return account_id_;
}
inline void CMsgDOTAAccountGuildMembershipsSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAAccountGuildMembershipsSDO.account_id)
}

// repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
inline int CMsgDOTAAccountGuildMembershipsSDO::memberships_size() const {
  return memberships_.size();
}
inline void CMsgDOTAAccountGuildMembershipsSDO::clear_memberships() {
  memberships_.Clear();
}
inline const ::CMsgDOTAAccountGuildMembershipsSDO_Membership& CMsgDOTAAccountGuildMembershipsSDO::memberships(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Get(index);
}
inline ::CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO::mutable_memberships(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Mutable(index);
}
inline ::CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO::add_memberships() {
  // @@protoc_insertion_point(field_add:CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Membership >*
CMsgDOTAAccountGuildMembershipsSDO::mutable_memberships() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return &memberships_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Membership >&
CMsgDOTAAccountGuildMembershipsSDO::memberships() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_;
}

// repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
inline int CMsgDOTAAccountGuildMembershipsSDO::invitations_size() const {
  return invitations_.size();
}
inline void CMsgDOTAAccountGuildMembershipsSDO::clear_invitations() {
  invitations_.Clear();
}
inline const ::CMsgDOTAAccountGuildMembershipsSDO_Invitation& CMsgDOTAAccountGuildMembershipsSDO::invitations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Get(index);
}
inline ::CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO::mutable_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Mutable(index);
}
inline ::CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO::add_invitations() {
  // @@protoc_insertion_point(field_add:CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Invitation >*
CMsgDOTAAccountGuildMembershipsSDO::mutable_invitations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return &invitations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAccountGuildMembershipsSDO_Invitation >&
CMsgDOTAAccountGuildMembershipsSDO::invitations() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_;
}

// -------------------------------------------------------------------

// CMsgDOTAGuildCreateRequest

// optional string name = 1;
inline bool CMsgDOTAGuildCreateRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildCreateRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildCreateRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildCreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTAGuildCreateRequest::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateRequest.name)
  return name_.GetNoArena();
}
inline void CMsgDOTAGuildCreateRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateRequest.name)
}
#if LANG_CXX11
inline void CMsgDOTAGuildCreateRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildCreateRequest.name)
}
#endif
inline void CMsgDOTAGuildCreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildCreateRequest.name)
}
inline void CMsgDOTAGuildCreateRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildCreateRequest.name)
}
inline ::std::string* CMsgDOTAGuildCreateRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildCreateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildCreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildCreateRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildCreateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildCreateRequest.name)
}

// optional string tag = 2;
inline bool CMsgDOTAGuildCreateRequest::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildCreateRequest::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildCreateRequest::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildCreateRequest::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAGuildCreateRequest::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateRequest.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAGuildCreateRequest::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateRequest.tag)
}
#if LANG_CXX11
inline void CMsgDOTAGuildCreateRequest::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildCreateRequest.tag)
}
#endif
inline void CMsgDOTAGuildCreateRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildCreateRequest.tag)
}
inline void CMsgDOTAGuildCreateRequest::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildCreateRequest.tag)
}
inline ::std::string* CMsgDOTAGuildCreateRequest::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildCreateRequest.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildCreateRequest::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildCreateRequest.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildCreateRequest::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildCreateRequest.tag)
}

// optional uint64 logo = 3;
inline bool CMsgDOTAGuildCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateRequest.logo)
  return logo_;
}
inline void CMsgDOTAGuildCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateRequest.logo)
}

// optional uint64 base_logo = 4;
inline bool CMsgDOTAGuildCreateRequest::has_base_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAGuildCreateRequest::set_has_base_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAGuildCreateRequest::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAGuildCreateRequest::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateRequest.base_logo)
  return base_logo_;
}
inline void CMsgDOTAGuildCreateRequest::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateRequest.base_logo)
}

// optional uint64 banner_logo = 5;
inline bool CMsgDOTAGuildCreateRequest::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAGuildCreateRequest::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAGuildCreateRequest::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAGuildCreateRequest::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateRequest.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAGuildCreateRequest::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateRequest.banner_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildCreateResponse

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildCreateResponse::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildCreateResponse::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildCreateResponse::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildCreateResponse::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildCreateResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateResponse.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildCreateResponse::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateResponse.guild_id)
}

// repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
inline int CMsgDOTAGuildCreateResponse::errors_size() const {
  return errors_.size();
}
inline void CMsgDOTAGuildCreateResponse::clear_errors() {
  errors_.Clear();
}
inline ::CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCreateResponse.errors)
  return static_cast< ::CMsgDOTAGuildCreateResponse_EError >(errors_.Get(index));
}
inline void CMsgDOTAGuildCreateResponse::set_errors(int index, ::CMsgDOTAGuildCreateResponse_EError value) {
  assert(::CMsgDOTAGuildCreateResponse_EError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCreateResponse.errors)
}
inline void CMsgDOTAGuildCreateResponse::add_errors(::CMsgDOTAGuildCreateResponse_EError value) {
  assert(::CMsgDOTAGuildCreateResponse_EError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildCreateResponse.errors)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgDOTAGuildCreateResponse::errors() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildCreateResponse.errors)
  return errors_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgDOTAGuildCreateResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildCreateResponse.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// CMsgDOTAGuildSetAccountRoleRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildSetAccountRoleRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSetAccountRoleRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSetAccountRoleRequest.guild_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgDOTAGuildSetAccountRoleRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSetAccountRoleRequest.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSetAccountRoleRequest.target_account_id)
}

// optional uint32 target_role = 3;
inline bool CMsgDOTAGuildSetAccountRoleRequest::has_target_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_has_target_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_has_target_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::clear_target_role() {
  target_role_ = 0u;
  clear_has_target_role();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::target_role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSetAccountRoleRequest.target_role)
  return target_role_;
}
inline void CMsgDOTAGuildSetAccountRoleRequest::set_target_role(::google::protobuf::uint32 value) {
  set_has_target_role();
  target_role_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSetAccountRoleRequest.target_role)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildSetAccountRoleResponse

// optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAGuildSetAccountRoleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildSetAccountRoleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildSetAccountRoleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildSetAccountRoleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildSetAccountRoleResponse.result)
  return static_cast< ::CMsgDOTAGuildSetAccountRoleResponse_EResult >(result_);
}
inline void CMsgDOTAGuildSetAccountRoleResponse::set_result(::CMsgDOTAGuildSetAccountRoleResponse_EResult value) {
  assert(::CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildSetAccountRoleResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildInviteAccountRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildInviteAccountRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildInviteAccountRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildInviteAccountRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildInviteAccountRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildInviteAccountRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteAccountRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildInviteAccountRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteAccountRequest.guild_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgDOTAGuildInviteAccountRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildInviteAccountRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildInviteAccountRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildInviteAccountRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildInviteAccountRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteAccountRequest.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAGuildInviteAccountRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteAccountRequest.target_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildInviteAccountResponse

// optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAGuildInviteAccountResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildInviteAccountResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildInviteAccountResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildInviteAccountResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteAccountResponse.result)
  return static_cast< ::CMsgDOTAGuildInviteAccountResponse_EResult >(result_);
}
inline void CMsgDOTAGuildInviteAccountResponse::set_result(::CMsgDOTAGuildInviteAccountResponse_EResult value) {
  assert(::CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteAccountResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildCancelInviteRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildCancelInviteRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildCancelInviteRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildCancelInviteRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildCancelInviteRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildCancelInviteRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCancelInviteRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildCancelInviteRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCancelInviteRequest.guild_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgDOTAGuildCancelInviteRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildCancelInviteRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildCancelInviteRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildCancelInviteRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildCancelInviteRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCancelInviteRequest.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAGuildCancelInviteRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCancelInviteRequest.target_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildCancelInviteResponse

// optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAGuildCancelInviteResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildCancelInviteResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildCancelInviteResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildCancelInviteResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildCancelInviteResponse.result)
  return static_cast< ::CMsgDOTAGuildCancelInviteResponse_EResult >(result_);
}
inline void CMsgDOTAGuildCancelInviteResponse::set_result(::CMsgDOTAGuildCancelInviteResponse_EResult value) {
  assert(::CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildCancelInviteResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildUpdateDetailsRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildUpdateDetailsRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildUpdateDetailsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateDetailsRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateDetailsRequest.guild_id)
}

// optional uint64 logo = 2;
inline bool CMsgDOTAGuildUpdateDetailsRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateDetailsRequest.logo)
  return logo_;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateDetailsRequest.logo)
}

// optional uint64 base_logo = 3;
inline bool CMsgDOTAGuildUpdateDetailsRequest::has_base_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_has_base_logo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateDetailsRequest.base_logo)
  return base_logo_;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateDetailsRequest.base_logo)
}

// optional uint64 banner_logo = 4;
inline bool CMsgDOTAGuildUpdateDetailsRequest::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::banner_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateDetailsRequest.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAGuildUpdateDetailsRequest::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateDetailsRequest.banner_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildUpdateDetailsResponse

// optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAGuildUpdateDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildUpdateDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildUpdateDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildUpdateDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateDetailsResponse.result)
  return static_cast< ::CMsgDOTAGuildUpdateDetailsResponse_EResult >(result_);
}
inline void CMsgDOTAGuildUpdateDetailsResponse::set_result(::CMsgDOTAGuildUpdateDetailsResponse_EResult value) {
  assert(::CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateDetailsResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAGCToGCUpdateOpenGuildPartyRequest

// optional uint64 party_id = 1;
inline bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.party_id)
  return party_id_;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.party_id)
}

// optional uint32 guild_id = 2;
inline bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.guild_id)
}

// repeated uint32 member_account_ids = 3;
inline int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids_size() const {
  return member_account_ids_.size();
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_member_account_ids() {
  member_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return member_account_ids_.Get(index);
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_member_account_ids(int index, ::google::protobuf::uint32 value) {
  member_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::add_member_account_ids(::google::protobuf::uint32 value) {
  member_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return member_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::mutable_member_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return &member_account_ids_;
}

// optional string description = 4;
inline bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  return description_.GetNoArena();
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
#if LANG_CXX11
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
#endif
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
inline ::std::string* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::release_description() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}

// -------------------------------------------------------------------

// CMsgDOTAGCToGCUpdateOpenGuildPartyResponse

// optional bool maintain_association = 1;
inline bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::has_maintain_association() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::set_has_maintain_association() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::clear_has_maintain_association() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::clear_maintain_association() {
  maintain_association_ = false;
  clear_has_maintain_association();
}
inline bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::maintain_association() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse.maintain_association)
  return maintain_association_;
}
inline void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::set_maintain_association(bool value) {
  set_has_maintain_association();
  maintain_association_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse.maintain_association)
}

// -------------------------------------------------------------------

// CMsgDOTAGCToGCDestroyOpenGuildPartyRequest

// optional uint64 party_id = 1;
inline bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.party_id)
  return party_id_;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.party_id)
}

// optional uint32 guild_id = 2;
inline bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.guild_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGCToGCDestroyOpenGuildPartyResponse

// -------------------------------------------------------------------

// CMsgDOTAPartySetOpenGuildRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAPartySetOpenGuildRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPartySetOpenGuildRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPartySetOpenGuildRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPartySetOpenGuildRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPartySetOpenGuildRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPartySetOpenGuildRequest.guild_id)
}

// optional string description = 2;
inline bool CMsgDOTAPartySetOpenGuildRequest::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPartySetOpenGuildRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPartySetOpenGuildRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CMsgDOTAPartySetOpenGuildRequest::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPartySetOpenGuildRequest.description)
  return description_.GetNoArena();
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPartySetOpenGuildRequest.description)
}
#if LANG_CXX11
inline void CMsgDOTAPartySetOpenGuildRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPartySetOpenGuildRequest.description)
}
#endif
inline void CMsgDOTAPartySetOpenGuildRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPartySetOpenGuildRequest.description)
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPartySetOpenGuildRequest.description)
}
inline ::std::string* CMsgDOTAPartySetOpenGuildRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPartySetOpenGuildRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAPartySetOpenGuildRequest::release_description() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPartySetOpenGuildRequest.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAPartySetOpenGuildRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPartySetOpenGuildRequest.description)
}

// -------------------------------------------------------------------

// CMsgDOTAPartySetOpenGuildResponse

// optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAPartySetOpenGuildResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPartySetOpenGuildResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPartySetOpenGuildResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPartySetOpenGuildResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPartySetOpenGuildResponse.result)
  return static_cast< ::CMsgDOTAPartySetOpenGuildResponse_EResult >(result_);
}
inline void CMsgDOTAPartySetOpenGuildResponse::set_result(::CMsgDOTAPartySetOpenGuildResponse_EResult value) {
  assert(::CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPartySetOpenGuildResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinOpenGuildPartyRequest

// optional uint64 party_id = 1;
inline bool CMsgDOTAJoinOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAJoinOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinOpenGuildPartyRequest.party_id)
  return party_id_;
}
inline void CMsgDOTAJoinOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinOpenGuildPartyRequest.party_id)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinOpenGuildPartyResponse

// optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAJoinOpenGuildPartyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinOpenGuildPartyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinOpenGuildPartyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinOpenGuildPartyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinOpenGuildPartyResponse.result)
  return static_cast< ::CMsgDOTAJoinOpenGuildPartyResponse_EResult >(result_);
}
inline void CMsgDOTAJoinOpenGuildPartyResponse::set_result(::CMsgDOTAJoinOpenGuildPartyResponse_EResult value) {
  assert(::CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinOpenGuildPartyResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildOpenPartyRefresh_OpenParty

// optional uint64 party_id = 1;
inline bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildOpenPartyRefresh_OpenParty::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.OpenParty.party_id)
  return party_id_;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildOpenPartyRefresh.OpenParty.party_id)
}

// repeated uint32 member_account_ids = 2;
inline int CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids_size() const {
  return member_account_ids_.size();
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_member_account_ids() {
  member_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return member_account_ids_.Get(index);
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_member_account_ids(int index, ::google::protobuf::uint32 value) {
  member_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::add_member_account_ids(::google::protobuf::uint32 value) {
  member_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return member_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGuildOpenPartyRefresh_OpenParty::mutable_member_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return &member_account_ids_;
}

// optional uint32 time_created = 3;
inline bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_time_created() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_time_created() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh_OpenParty::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.OpenParty.time_created)
  return time_created_;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildOpenPartyRefresh.OpenParty.time_created)
}

// optional string description = 4;
inline bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CMsgDOTAGuildOpenPartyRefresh_OpenParty::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  return description_.GetNoArena();
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
#if LANG_CXX11
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
#endif
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
inline ::std::string* CMsgDOTAGuildOpenPartyRefresh_OpenParty::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildOpenPartyRefresh_OpenParty::release_description() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildOpenPartyRefresh

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildOpenPartyRefresh::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildOpenPartyRefresh::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildOpenPartyRefresh::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildOpenPartyRefresh::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildOpenPartyRefresh::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildOpenPartyRefresh.guild_id)
}

// repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
inline int CMsgDOTAGuildOpenPartyRefresh::open_parties_size() const {
  return open_parties_.size();
}
inline void CMsgDOTAGuildOpenPartyRefresh::clear_open_parties() {
  open_parties_.Clear();
}
inline const ::CMsgDOTAGuildOpenPartyRefresh_OpenParty& CMsgDOTAGuildOpenPartyRefresh::open_parties(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Get(index);
}
inline ::CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh::mutable_open_parties(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Mutable(index);
}
inline ::CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh::add_open_parties() {
  // @@protoc_insertion_point(field_add:CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildOpenPartyRefresh_OpenParty >*
CMsgDOTAGuildOpenPartyRefresh::mutable_open_parties() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return &open_parties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAGuildOpenPartyRefresh_OpenParty >&
CMsgDOTAGuildOpenPartyRefresh::open_parties() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_;
}

// -------------------------------------------------------------------

// CMsgDOTARequestGuildData

// -------------------------------------------------------------------

// CMsgDOTAGuildData

// optional bool in_guild = 1;
inline bool CMsgDOTAGuildData::has_in_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildData::set_has_in_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildData::clear_has_in_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildData::clear_in_guild() {
  in_guild_ = false;
  clear_has_in_guild();
}
inline bool CMsgDOTAGuildData::in_guild() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildData.in_guild)
  return in_guild_;
}
inline void CMsgDOTAGuildData::set_in_guild(bool value) {
  set_has_in_guild();
  in_guild_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildData.in_guild)
}

// optional uint32 guild_id = 2;
inline bool CMsgDOTAGuildData::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildData::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildData::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildData::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildData::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildData.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildData::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildData.guild_id)
}

// optional .CMsgDOTAGuildSDO guild_data = 3;
inline bool CMsgDOTAGuildData::has_guild_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildData::set_has_guild_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildData::clear_has_guild_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildData::clear_guild_data() {
  if (guild_data_ != NULL) guild_data_->Clear();
  clear_has_guild_data();
}
inline const ::CMsgDOTAGuildSDO& CMsgDOTAGuildData::guild_data() const {
  const ::CMsgDOTAGuildSDO* p = guild_data_;
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildData.guild_data)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAGuildSDO*>(
      &::_CMsgDOTAGuildSDO_default_instance_);
}
inline ::CMsgDOTAGuildSDO* CMsgDOTAGuildData::release_guild_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildData.guild_data)
  clear_has_guild_data();
  ::CMsgDOTAGuildSDO* temp = guild_data_;
  guild_data_ = NULL;
  return temp;
}
inline ::CMsgDOTAGuildSDO* CMsgDOTAGuildData::mutable_guild_data() {
  set_has_guild_data();
  if (guild_data_ == NULL) {
    guild_data_ = new ::CMsgDOTAGuildSDO;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildData.guild_data)
  return guild_data_;
}
inline void CMsgDOTAGuildData::set_allocated_guild_data(::CMsgDOTAGuildSDO* guild_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guild_data_;
  }
  if (guild_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guild_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guild_data, submessage_arena);
    }
    set_has_guild_data();
  } else {
    clear_has_guild_data();
  }
  guild_data_ = guild_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildData.guild_data)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildInviteData

// optional bool invited_to_guild = 1;
inline bool CMsgDOTAGuildInviteData::has_invited_to_guild() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_invited_to_guild() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGuildInviteData::clear_has_invited_to_guild() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGuildInviteData::clear_invited_to_guild() {
  invited_to_guild_ = false;
  clear_has_invited_to_guild();
}
inline bool CMsgDOTAGuildInviteData::invited_to_guild() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.invited_to_guild)
  return invited_to_guild_;
}
inline void CMsgDOTAGuildInviteData::set_invited_to_guild(bool value) {
  set_has_invited_to_guild();
  invited_to_guild_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.invited_to_guild)
}

// optional uint32 guild_id = 2;
inline bool CMsgDOTAGuildInviteData::has_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAGuildInviteData::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAGuildInviteData::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildInviteData::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildInviteData::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.guild_id)
}

// optional string guild_name = 3;
inline bool CMsgDOTAGuildInviteData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildInviteData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildInviteData::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& CMsgDOTAGuildInviteData::guild_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.guild_name)
  return guild_name_.GetNoArena();
}
inline void CMsgDOTAGuildInviteData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.guild_name)
}
#if LANG_CXX11
inline void CMsgDOTAGuildInviteData::set_guild_name(::std::string&& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildInviteData.guild_name)
}
#endif
inline void CMsgDOTAGuildInviteData::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildInviteData.guild_name)
}
inline void CMsgDOTAGuildInviteData::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildInviteData.guild_name)
}
inline ::std::string* CMsgDOTAGuildInviteData::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildInviteData.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildInviteData::release_guild_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildInviteData.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildInviteData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildInviteData.guild_name)
}

// optional string guild_tag = 4;
inline bool CMsgDOTAGuildInviteData::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildInviteData::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildInviteData::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_tag();
}
inline const ::std::string& CMsgDOTAGuildInviteData::guild_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.guild_tag)
  return guild_tag_.GetNoArena();
}
inline void CMsgDOTAGuildInviteData::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.guild_tag)
}
#if LANG_CXX11
inline void CMsgDOTAGuildInviteData::set_guild_tag(::std::string&& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildInviteData.guild_tag)
}
#endif
inline void CMsgDOTAGuildInviteData::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildInviteData.guild_tag)
}
inline void CMsgDOTAGuildInviteData::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildInviteData.guild_tag)
}
inline ::std::string* CMsgDOTAGuildInviteData::mutable_guild_tag() {
  set_has_guild_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildInviteData.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildInviteData::release_guild_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildInviteData.guild_tag)
  clear_has_guild_tag();
  return guild_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildInviteData::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != NULL) {
    set_has_guild_tag();
  } else {
    clear_has_guild_tag();
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildInviteData.guild_tag)
}

// optional uint64 logo = 5;
inline bool CMsgDOTAGuildInviteData::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAGuildInviteData::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAGuildInviteData::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildInviteData::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.logo)
  return logo_;
}
inline void CMsgDOTAGuildInviteData::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.logo)
}

// optional uint32 inviter = 6;
inline bool CMsgDOTAGuildInviteData::has_inviter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAGuildInviteData::set_has_inviter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAGuildInviteData::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAGuildInviteData::clear_inviter() {
  inviter_ = 0u;
  clear_has_inviter();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildInviteData::inviter() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildInviteData.inviter)
  return inviter_;
}
inline void CMsgDOTAGuildInviteData::set_inviter(::google::protobuf::uint32 value) {
  set_has_inviter();
  inviter_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildInviteData.inviter)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildUpdateMessage

// optional string message = 1;
inline bool CMsgDOTAGuildUpdateMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildUpdateMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildUpdateMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildUpdateMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CMsgDOTAGuildUpdateMessage::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateMessage.message)
  return message_.GetNoArena();
}
inline void CMsgDOTAGuildUpdateMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateMessage.message)
}
#if LANG_CXX11
inline void CMsgDOTAGuildUpdateMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAGuildUpdateMessage.message)
}
#endif
inline void CMsgDOTAGuildUpdateMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAGuildUpdateMessage.message)
}
inline void CMsgDOTAGuildUpdateMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAGuildUpdateMessage.message)
}
inline ::std::string* CMsgDOTAGuildUpdateMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAGuildUpdateMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAGuildUpdateMessage::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAGuildUpdateMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAGuildUpdateMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAGuildUpdateMessage.message)
}

// optional uint32 guild_id = 2;
inline bool CMsgDOTAGuildUpdateMessage::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildUpdateMessage::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildUpdateMessage::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildUpdateMessage::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildUpdateMessage::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildUpdateMessage.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildUpdateMessage::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildUpdateMessage.guild_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildEditLogoRequest

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildEditLogoRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildEditLogoRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildEditLogoRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildEditLogoRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildEditLogoRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildEditLogoRequest.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildEditLogoRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildEditLogoRequest.guild_id)
}

// optional uint64 logo = 2;
inline bool CMsgDOTAGuildEditLogoRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildEditLogoRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildEditLogoRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildEditLogoRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAGuildEditLogoRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildEditLogoRequest.logo)
  return logo_;
}
inline void CMsgDOTAGuildEditLogoRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildEditLogoRequest.logo)
}

// -------------------------------------------------------------------

// CMsgDOTAGuildEditLogoResponse

// optional uint32 guild_id = 1;
inline bool CMsgDOTAGuildEditLogoResponse::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGuildEditLogoResponse::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGuildEditLogoResponse::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGuildEditLogoResponse::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGuildEditLogoResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildEditLogoResponse.guild_id)
  return guild_id_;
}
inline void CMsgDOTAGuildEditLogoResponse::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildEditLogoResponse.guild_id)
}

// optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
inline bool CMsgDOTAGuildEditLogoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGuildEditLogoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGuildEditLogoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGuildEditLogoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGuildEditLogoResponse.result)
  return static_cast< ::CMsgDOTAGuildEditLogoResponse_EResult >(result_);
}
inline void CMsgDOTAGuildEditLogoResponse::set_result(::CMsgDOTAGuildEditLogoResponse_EResult value) {
  assert(::CMsgDOTAGuildEditLogoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGuildEditLogoResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerReports_PlayerReport

// optional uint32 report_id = 1;
inline bool CMsgDOTAPlayerReports_PlayerReport::has_report_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_has_report_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_has_report_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_report_id() {
  report_id_ = 0u;
  clear_has_report_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerReports_PlayerReport::report_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.PlayerReport.report_id)
  return report_id_;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_report_id(::google::protobuf::uint32 value) {
  set_has_report_id();
  report_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerReports.PlayerReport.report_id)
}

// optional uint32 reporter_account_id = 2;
inline bool CMsgDOTAPlayerReports_PlayerReport::has_reporter_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_has_reporter_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_has_reporter_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_reporter_account_id() {
  reporter_account_id_ = 0u;
  clear_has_reporter_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerReports_PlayerReport::reporter_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.PlayerReport.reporter_account_id)
  return reporter_account_id_;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_reporter_account_id(::google::protobuf::uint32 value) {
  set_has_reporter_account_id();
  reporter_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerReports.PlayerReport.reporter_account_id)
}

// optional uint32 target_account_id = 3;
inline bool CMsgDOTAPlayerReports_PlayerReport::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerReports_PlayerReport::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.PlayerReport.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerReports.PlayerReport.target_account_id)
}

// optional uint32 report_flags = 4;
inline bool CMsgDOTAPlayerReports_PlayerReport::has_report_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_has_report_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_has_report_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_report_flags() {
  report_flags_ = 0u;
  clear_has_report_flags();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerReports_PlayerReport::report_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.PlayerReport.report_flags)
  return report_flags_;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_report_flags(::google::protobuf::uint32 value) {
  set_has_report_flags();
  report_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerReports.PlayerReport.report_flags)
}

// optional fixed32 date = 6;
inline bool CMsgDOTAPlayerReports_PlayerReport::has_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_has_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_has_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAPlayerReports_PlayerReport::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CMsgDOTAPlayerReports_PlayerReport::date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.PlayerReport.date)
  return date_;
}
inline void CMsgDOTAPlayerReports_PlayerReport::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerReports.PlayerReport.date)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerReports

// repeated .CMsgDOTAPlayerReports.PlayerReport reports = 1;
inline int CMsgDOTAPlayerReports::reports_size() const {
  return reports_.size();
}
inline void CMsgDOTAPlayerReports::clear_reports() {
  reports_.Clear();
}
inline const ::CMsgDOTAPlayerReports_PlayerReport& CMsgDOTAPlayerReports::reports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerReports.reports)
  return reports_.Get(index);
}
inline ::CMsgDOTAPlayerReports_PlayerReport* CMsgDOTAPlayerReports::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerReports.reports)
  return reports_.Mutable(index);
}
inline ::CMsgDOTAPlayerReports_PlayerReport* CMsgDOTAPlayerReports::add_reports() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerReports.reports)
  return reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPlayerReports_PlayerReport >*
CMsgDOTAPlayerReports::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerReports.reports)
  return &reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPlayerReports_PlayerReport >&
CMsgDOTAPlayerReports::reports() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerReports.reports)
  return reports_;
}

// -------------------------------------------------------------------

// CMsgDOTAReportsRemainingRequest

// -------------------------------------------------------------------

// CMsgDOTAReportsRemainingResponse

// optional uint32 num_positive_reports_remaining = 1;
inline bool CMsgDOTAReportsRemainingResponse::has_num_positive_reports_remaining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAReportsRemainingResponse::set_has_num_positive_reports_remaining() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_has_num_positive_reports_remaining() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_num_positive_reports_remaining() {
  num_positive_reports_remaining_ = 0u;
  clear_has_num_positive_reports_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTAReportsRemainingResponse::num_positive_reports_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportsRemainingResponse.num_positive_reports_remaining)
  return num_positive_reports_remaining_;
}
inline void CMsgDOTAReportsRemainingResponse::set_num_positive_reports_remaining(::google::protobuf::uint32 value) {
  set_has_num_positive_reports_remaining();
  num_positive_reports_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportsRemainingResponse.num_positive_reports_remaining)
}

// optional uint32 num_negative_reports_remaining = 2;
inline bool CMsgDOTAReportsRemainingResponse::has_num_negative_reports_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAReportsRemainingResponse::set_has_num_negative_reports_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_has_num_negative_reports_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_num_negative_reports_remaining() {
  num_negative_reports_remaining_ = 0u;
  clear_has_num_negative_reports_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTAReportsRemainingResponse::num_negative_reports_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportsRemainingResponse.num_negative_reports_remaining)
  return num_negative_reports_remaining_;
}
inline void CMsgDOTAReportsRemainingResponse::set_num_negative_reports_remaining(::google::protobuf::uint32 value) {
  set_has_num_negative_reports_remaining();
  num_negative_reports_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportsRemainingResponse.num_negative_reports_remaining)
}

// optional uint32 num_positive_reports_total = 3;
inline bool CMsgDOTAReportsRemainingResponse::has_num_positive_reports_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAReportsRemainingResponse::set_has_num_positive_reports_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_has_num_positive_reports_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_num_positive_reports_total() {
  num_positive_reports_total_ = 0u;
  clear_has_num_positive_reports_total();
}
inline ::google::protobuf::uint32 CMsgDOTAReportsRemainingResponse::num_positive_reports_total() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportsRemainingResponse.num_positive_reports_total)
  return num_positive_reports_total_;
}
inline void CMsgDOTAReportsRemainingResponse::set_num_positive_reports_total(::google::protobuf::uint32 value) {
  set_has_num_positive_reports_total();
  num_positive_reports_total_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportsRemainingResponse.num_positive_reports_total)
}

// optional uint32 num_negative_reports_total = 4;
inline bool CMsgDOTAReportsRemainingResponse::has_num_negative_reports_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAReportsRemainingResponse::set_has_num_negative_reports_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_has_num_negative_reports_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAReportsRemainingResponse::clear_num_negative_reports_total() {
  num_negative_reports_total_ = 0u;
  clear_has_num_negative_reports_total();
}
inline ::google::protobuf::uint32 CMsgDOTAReportsRemainingResponse::num_negative_reports_total() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportsRemainingResponse.num_negative_reports_total)
  return num_negative_reports_total_;
}
inline void CMsgDOTAReportsRemainingResponse::set_num_negative_reports_total(::google::protobuf::uint32 value) {
  set_has_num_negative_reports_total();
  num_negative_reports_total_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportsRemainingResponse.num_negative_reports_total)
}

// -------------------------------------------------------------------

// CMsgDOTASubmitPlayerReport

// optional uint32 target_account_id = 1;
inline bool CMsgDOTASubmitPlayerReport::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASubmitPlayerReport::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASubmitPlayerReport::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASubmitPlayerReport::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTASubmitPlayerReport::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReport.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTASubmitPlayerReport::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReport.target_account_id)
}

// optional uint32 report_flags = 2;
inline bool CMsgDOTASubmitPlayerReport::has_report_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASubmitPlayerReport::set_has_report_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASubmitPlayerReport::clear_has_report_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASubmitPlayerReport::clear_report_flags() {
  report_flags_ = 0u;
  clear_has_report_flags();
}
inline ::google::protobuf::uint32 CMsgDOTASubmitPlayerReport::report_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReport.report_flags)
  return report_flags_;
}
inline void CMsgDOTASubmitPlayerReport::set_report_flags(::google::protobuf::uint32 value) {
  set_has_report_flags();
  report_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReport.report_flags)
}

// optional string comment = 5;
inline bool CMsgDOTASubmitPlayerReport::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASubmitPlayerReport::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASubmitPlayerReport::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASubmitPlayerReport::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& CMsgDOTASubmitPlayerReport::comment() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReport.comment)
  return comment_.GetNoArena();
}
inline void CMsgDOTASubmitPlayerReport::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReport.comment)
}
#if LANG_CXX11
inline void CMsgDOTASubmitPlayerReport::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTASubmitPlayerReport.comment)
}
#endif
inline void CMsgDOTASubmitPlayerReport::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTASubmitPlayerReport.comment)
}
inline void CMsgDOTASubmitPlayerReport::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTASubmitPlayerReport.comment)
}
inline ::std::string* CMsgDOTASubmitPlayerReport::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASubmitPlayerReport.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASubmitPlayerReport::release_comment() {
  // @@protoc_insertion_point(field_release:CMsgDOTASubmitPlayerReport.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASubmitPlayerReport::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASubmitPlayerReport.comment)
}

// -------------------------------------------------------------------

// CMsgDOTASubmitPlayerReportResponse

// optional uint32 target_account_id = 1;
inline bool CMsgDOTASubmitPlayerReportResponse::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTASubmitPlayerReportResponse::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReportResponse.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReportResponse.target_account_id)
}

// optional uint32 report_flags = 2;
inline bool CMsgDOTASubmitPlayerReportResponse::has_report_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_has_report_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_has_report_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_report_flags() {
  report_flags_ = 0u;
  clear_has_report_flags();
}
inline ::google::protobuf::uint32 CMsgDOTASubmitPlayerReportResponse::report_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReportResponse.report_flags)
  return report_flags_;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_report_flags(::google::protobuf::uint32 value) {
  set_has_report_flags();
  report_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReportResponse.report_flags)
}

// optional uint32 result = 3;
inline bool CMsgDOTASubmitPlayerReportResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTASubmitPlayerReportResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgDOTASubmitPlayerReportResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASubmitPlayerReportResponse.result)
  return result_;
}
inline void CMsgDOTASubmitPlayerReportResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASubmitPlayerReportResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAReportCountsRequest

// optional uint32 target_account_id = 1;
inline bool CMsgDOTAReportCountsRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAReportCountsRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAReportCountsRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAReportCountsRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsRequest.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAReportCountsRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsRequest.target_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAReportCountsResponse

// optional uint32 target_account_id = 1;
inline bool CMsgDOTAReportCountsResponse::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAReportCountsResponse::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAReportCountsResponse::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAReportCountsResponse::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsResponse::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsResponse.target_account_id)
  return target_account_id_;
}
inline void CMsgDOTAReportCountsResponse::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsResponse.target_account_id)
}

// optional uint32 leadership_count = 2;
inline bool CMsgDOTAReportCountsResponse::has_leadership_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAReportCountsResponse::set_has_leadership_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAReportCountsResponse::clear_has_leadership_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAReportCountsResponse::clear_leadership_count() {
  leadership_count_ = 0u;
  clear_has_leadership_count();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsResponse::leadership_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsResponse.leadership_count)
  return leadership_count_;
}
inline void CMsgDOTAReportCountsResponse::set_leadership_count(::google::protobuf::uint32 value) {
  set_has_leadership_count();
  leadership_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsResponse.leadership_count)
}

// optional uint32 teaching_count = 3;
inline bool CMsgDOTAReportCountsResponse::has_teaching_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAReportCountsResponse::set_has_teaching_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAReportCountsResponse::clear_has_teaching_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAReportCountsResponse::clear_teaching_count() {
  teaching_count_ = 0u;
  clear_has_teaching_count();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsResponse::teaching_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsResponse.teaching_count)
  return teaching_count_;
}
inline void CMsgDOTAReportCountsResponse::set_teaching_count(::google::protobuf::uint32 value) {
  set_has_teaching_count();
  teaching_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsResponse.teaching_count)
}

// optional uint32 friendly_count = 4;
inline bool CMsgDOTAReportCountsResponse::has_friendly_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAReportCountsResponse::set_has_friendly_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAReportCountsResponse::clear_has_friendly_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAReportCountsResponse::clear_friendly_count() {
  friendly_count_ = 0u;
  clear_has_friendly_count();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsResponse::friendly_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsResponse.friendly_count)
  return friendly_count_;
}
inline void CMsgDOTAReportCountsResponse::set_friendly_count(::google::protobuf::uint32 value) {
  set_has_friendly_count();
  friendly_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsResponse.friendly_count)
}

// optional uint32 forgiving_count = 5;
inline bool CMsgDOTAReportCountsResponse::has_forgiving_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAReportCountsResponse::set_has_forgiving_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAReportCountsResponse::clear_has_forgiving_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAReportCountsResponse::clear_forgiving_count() {
  forgiving_count_ = 0u;
  clear_has_forgiving_count();
}
inline ::google::protobuf::uint32 CMsgDOTAReportCountsResponse::forgiving_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAReportCountsResponse.forgiving_count)
  return forgiving_count_;
}
inline void CMsgDOTAReportCountsResponse::set_forgiving_count(::google::protobuf::uint32 value) {
  set_has_forgiving_count();
  forgiving_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAReportCountsResponse.forgiving_count)
}

// -------------------------------------------------------------------

// CMsgDOTARequestPlayerResources

// optional fixed64 steam_id = 1;
inline bool CMsgDOTARequestPlayerResources::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestPlayerResources::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestPlayerResources::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestPlayerResources::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestPlayerResources::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResources.steam_id)
  return steam_id_;
}
inline void CMsgDOTARequestPlayerResources::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResources.steam_id)
}

// optional uint32 player_id = 2;
inline bool CMsgDOTARequestPlayerResources::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestPlayerResources::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestPlayerResources::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestPlayerResources::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResources::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResources.player_id)
  return player_id_;
}
inline void CMsgDOTARequestPlayerResources::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResources.player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARequestPlayerResourcesResponse

// optional fixed64 steam_id = 1;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestPlayerResourcesResponse::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.steam_id)
  return steam_id_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.steam_id)
}

// optional uint32 rank = 2;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.rank)
  return rank_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.rank)
}

// optional uint32 player_id = 3;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.player_id)
  return player_id_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.player_id)
}

// optional bool prevent_text_chat = 4;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_text_chat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_text_chat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_text_chat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_text_chat() {
  prevent_text_chat_ = false;
  clear_has_prevent_text_chat();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::prevent_text_chat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.prevent_text_chat)
  return prevent_text_chat_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_prevent_text_chat(bool value) {
  set_has_prevent_text_chat();
  prevent_text_chat_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.prevent_text_chat)
}

// optional bool prevent_voice_chat = 5;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_voice_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_voice_chat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_voice_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_voice_chat() {
  prevent_voice_chat_ = false;
  clear_has_prevent_voice_chat();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::prevent_voice_chat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.prevent_voice_chat)
  return prevent_voice_chat_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_prevent_voice_chat(bool value) {
  set_has_prevent_voice_chat();
  prevent_voice_chat_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.prevent_voice_chat)
}

// optional bool match_making_ban = 6;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_match_making_ban() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_match_making_ban() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_match_making_ban() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_match_making_ban() {
  match_making_ban_ = false;
  clear_has_match_making_ban();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::match_making_ban() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.match_making_ban)
  return match_making_ban_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_match_making_ban(bool value) {
  set_has_match_making_ban();
  match_making_ban_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.match_making_ban)
}

// optional uint32 solo_rank = 7;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_solo_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_solo_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_solo_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_solo_rank() {
  solo_rank_ = 0u;
  clear_has_solo_rank();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::solo_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestPlayerResourcesResponse.solo_rank)
  return solo_rank_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_solo_rank(::google::protobuf::uint32 value) {
  set_has_solo_rank();
  solo_rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestPlayerResourcesResponse.solo_rank)
}

// -------------------------------------------------------------------

// CMsgDOTAKickedFromMatchmakingQueue

// optional .MatchType match_type = 1 [default = MATCH_TYPE_RANKED];
inline bool CMsgDOTAKickedFromMatchmakingQueue::has_match_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAKickedFromMatchmakingQueue::set_has_match_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAKickedFromMatchmakingQueue::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAKickedFromMatchmakingQueue::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CMsgDOTAKickedFromMatchmakingQueue::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAKickedFromMatchmakingQueue.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CMsgDOTAKickedFromMatchmakingQueue::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAKickedFromMatchmakingQueue.match_type)
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGames

// optional uint32 server_region = 1;
inline bool CMsgDOTARequestSaveGames::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGames::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGames::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGames::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGames::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGames.server_region)
  return server_region_;
}
inline void CMsgDOTARequestSaveGames::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGames.server_region)
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGamesResponse_SaveGame_Player

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgDOTARequestSaveGamesResponse_SaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.team)
}

// optional string name = 2;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTARequestSaveGamesResponse_SaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
  return name_.GetNoArena();
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
}
#if LANG_CXX11
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
}
#endif
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
}
inline ::std::string* CMsgDOTARequestSaveGamesResponse_SaveGame_Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestSaveGamesResponse_SaveGame_Player::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.name)
}

// optional string hero = 3;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::clear_hero() {
  hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero();
}
inline const ::std::string& CMsgDOTARequestSaveGamesResponse_SaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
  return hero_.GetNoArena();
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
}
#if LANG_CXX11
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_hero(::std::string&& value) {
  set_has_hero();
  hero_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
}
#endif
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_hero(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
}
inline ::std::string* CMsgDOTARequestSaveGamesResponse_SaveGame_Player::mutable_hero() {
  set_has_hero();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
  return hero_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTARequestSaveGamesResponse_SaveGame_Player::release_hero() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
  clear_has_hero();
  return hero_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero != NULL) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  hero_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestSaveGamesResponse.SaveGame.Player.hero)
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions.y)
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance

// optional uint32 save_number = 1;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::has_save_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_has_save_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_has_save_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_save_number() {
  save_number_ = 0u;
  clear_has_save_number();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::save_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.save_number)
  return save_number_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_save_number(::google::protobuf::uint32 value) {
  set_has_save_number();
  save_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.save_number)
}

// optional uint32 game_time = 2;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.game_time)
  return game_time_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.team1_score)
  return team1_score_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.team2_score)
  return team2_score_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.team2_score)
}

// repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions player_positions = 5;
inline int CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
inline const ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions& CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions >*
CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.player_positions)
  return &player_positions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions >&
CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.player_positions)
  return player_positions_;
}

// optional uint32 save_id = 6;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.save_id)
  return save_id_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.save_id)
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGamesResponse_SaveGame

// optional fixed64 lobby_id = 1;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestSaveGamesResponse_SaveGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.lobby_id)
  return lobby_id_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.lobby_id)
}

// optional uint32 save_time = 2;
inline bool CMsgDOTARequestSaveGamesResponse_SaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CMsgDOTARequestSaveGamesResponse_SaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.save_time)
  return save_time_;
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.SaveGame.save_time)
}

// repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.Player players = 3;
inline int CMsgDOTARequestSaveGamesResponse_SaveGame::players_size() const {
  return players_.size();
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player& CMsgDOTARequestSaveGamesResponse_SaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.players)
  return players_.Get(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player* CMsgDOTARequestSaveGamesResponse_SaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.SaveGame.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player* CMsgDOTARequestSaveGamesResponse_SaveGame::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestSaveGamesResponse.SaveGame.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player >*
CMsgDOTARequestSaveGamesResponse_SaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestSaveGamesResponse.SaveGame.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_Player >&
CMsgDOTARequestSaveGamesResponse_SaveGame::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestSaveGamesResponse.SaveGame.players)
  return players_;
}

// repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance save_instances = 4;
inline int CMsgDOTARequestSaveGamesResponse_SaveGame::save_instances_size() const {
  return save_instances_.size();
}
inline void CMsgDOTARequestSaveGamesResponse_SaveGame::clear_save_instances() {
  save_instances_.Clear();
}
inline const ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance& CMsgDOTARequestSaveGamesResponse_SaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.SaveGame.save_instances)
  return save_instances_.Get(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* CMsgDOTARequestSaveGamesResponse_SaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.SaveGame.save_instances)
  return save_instances_.Mutable(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* CMsgDOTARequestSaveGamesResponse_SaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestSaveGamesResponse.SaveGame.save_instances)
  return save_instances_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance >*
CMsgDOTARequestSaveGamesResponse_SaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestSaveGamesResponse.SaveGame.save_instances)
  return &save_instances_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance >&
CMsgDOTARequestSaveGamesResponse_SaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestSaveGamesResponse.SaveGame.save_instances)
  return save_instances_;
}

// -------------------------------------------------------------------

// CMsgDOTARequestSaveGamesResponse

// optional fixed64 steam_id = 1;
inline bool CMsgDOTARequestSaveGamesResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestSaveGamesResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestSaveGamesResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestSaveGamesResponse::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.steam_id)
  return steam_id_;
}
inline void CMsgDOTARequestSaveGamesResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestSaveGamesResponse.steam_id)
}

// repeated .CMsgDOTARequestSaveGamesResponse.SaveGame save_games = 2;
inline int CMsgDOTARequestSaveGamesResponse::save_games_size() const {
  return save_games_.size();
}
inline void CMsgDOTARequestSaveGamesResponse::clear_save_games() {
  save_games_.Clear();
}
inline const ::CMsgDOTARequestSaveGamesResponse_SaveGame& CMsgDOTARequestSaveGamesResponse::save_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestSaveGamesResponse.save_games)
  return save_games_.Get(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame* CMsgDOTARequestSaveGamesResponse::mutable_save_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestSaveGamesResponse.save_games)
  return save_games_.Mutable(index);
}
inline ::CMsgDOTARequestSaveGamesResponse_SaveGame* CMsgDOTARequestSaveGamesResponse::add_save_games() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestSaveGamesResponse.save_games)
  return save_games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame >*
CMsgDOTARequestSaveGamesResponse::mutable_save_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestSaveGamesResponse.save_games)
  return &save_games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestSaveGamesResponse_SaveGame >&
CMsgDOTARequestSaveGamesResponse::save_games() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestSaveGamesResponse.save_games)
  return save_games_;
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerFailedToConnect

// repeated fixed64 failed_loaders = 1;
inline int CMsgDOTAPlayerFailedToConnect::failed_loaders_size() const {
  return failed_loaders_.size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_failed_loaders() {
  failed_loaders_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::failed_loaders(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return failed_loaders_.Get(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_failed_loaders(int index, ::google::protobuf::uint64 value) {
  failed_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
inline void CMsgDOTAPlayerFailedToConnect::add_failed_loaders(::google::protobuf::uint64 value) {
  failed_loaders_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::failed_loaders() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return failed_loaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_failed_loaders() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return &failed_loaders_;
}

// repeated fixed64 abandoned_loaders = 2;
inline int CMsgDOTAPlayerFailedToConnect::abandoned_loaders_size() const {
  return abandoned_loaders_.size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_abandoned_loaders() {
  abandoned_loaders_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::abandoned_loaders(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return abandoned_loaders_.Get(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_abandoned_loaders(int index, ::google::protobuf::uint64 value) {
  abandoned_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
inline void CMsgDOTAPlayerFailedToConnect::add_abandoned_loaders(::google::protobuf::uint64 value) {
  abandoned_loaders_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::abandoned_loaders() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return abandoned_loaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_abandoned_loaders() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return &abandoned_loaders_;
}

// -------------------------------------------------------------------

// CMsgGCToRelayConnect

// optional uint32 source_tv_public_addr = 1;
inline bool CMsgGCToRelayConnect::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CMsgGCToRelayConnect::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 2;
inline bool CMsgGCToRelayConnect::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CMsgGCToRelayConnect::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_private_addr)
}

// optional uint32 source_tv_port = 3;
inline bool CMsgGCToRelayConnect::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_port)
  return source_tv_port_;
}
inline void CMsgGCToRelayConnect::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_port)
}

// optional uint64 game_server_steam_id = 4;
inline bool CMsgGCToRelayConnect::has_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_game_server_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToRelayConnect::clear_has_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToRelayConnect::clear_game_server_steam_id() {
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgGCToRelayConnect::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.game_server_steam_id)
  return game_server_steam_id_;
}
inline void CMsgGCToRelayConnect::set_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_game_server_steam_id();
  game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.game_server_steam_id)
}

// optional uint32 parent_count = 5;
inline bool CMsgGCToRelayConnect::has_parent_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_parent_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToRelayConnect::clear_has_parent_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToRelayConnect::clear_parent_count() {
  parent_count_ = 0u;
  clear_has_parent_count();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::parent_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.parent_count)
  return parent_count_;
}
inline void CMsgGCToRelayConnect::set_parent_count(::google::protobuf::uint32 value) {
  set_has_parent_count();
  parent_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.parent_count)
}

// optional fixed64 tv_unique_secret_code = 6;
inline bool CMsgGCToRelayConnect::has_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCToRelayConnect::clear_has_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCToRelayConnect::clear_tv_unique_secret_code() {
  tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_unique_secret_code();
}
inline ::google::protobuf::uint64 CMsgGCToRelayConnect::tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.tv_unique_secret_code)
  return tv_unique_secret_code_;
}
inline void CMsgGCToRelayConnect::set_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_unique_secret_code();
  tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgGCToRelayConnectResponse

// -------------------------------------------------------------------

// CMsgWatchGame

// optional fixed64 server_steamid = 1;
inline bool CMsgWatchGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGame::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGame::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGame::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.server_steamid)
  return server_steamid_;
}
inline void CMsgWatchGame::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
inline bool CMsgWatchGame::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGame::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGame::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGame::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.client_version)
  return client_version_;
}
inline void CMsgWatchGame::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
inline bool CMsgWatchGame::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGame::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGame::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGame::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGame::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
inline bool CMsgWatchGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.lobby_id)
  return lobby_id_;
}
inline void CMsgWatchGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.lobby_id)
}

// -------------------------------------------------------------------

// CMsgCancelWatchGame

// -------------------------------------------------------------------

// CMsgWatchGameResponse

// optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
inline bool CMsgWatchGameResponse::has_watch_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGameResponse::clear_has_watch_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGameResponse::clear_watch_game_result() {
  watch_game_result_ = 0;
  clear_has_watch_game_result();
}
inline ::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_game_result)
  return static_cast< ::CMsgWatchGameResponse_WatchGameResult >(watch_game_result_);
}
inline void CMsgWatchGameResponse::set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  set_has_watch_game_result();
  watch_game_result_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
inline bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
inline bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
inline bool CMsgWatchGameResponse::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGameResponse::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_port)
  return source_tv_port_;
}
inline void CMsgWatchGameResponse::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
inline bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWatchGameResponse::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWatchGameResponse::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWatchGameResponse::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgWatchGameResponse::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
inline bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgWatchGameResponse::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgWatchGameResponse::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGameResponse::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
inline bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgWatchGameResponse::clear_has_watch_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  watch_tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_tv_unique_secret_code();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return watch_tv_unique_secret_code_;
}
inline void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_watch_tv_unique_secret_code();
  watch_tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgGCBanStatusRequest

// optional uint32 account_id = 1;
inline bool CMsgGCBanStatusRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCBanStatusRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCBanStatusRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCBanStatusRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCBanStatusRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusRequest.account_id)
  return account_id_;
}
inline void CMsgGCBanStatusRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusRequest.account_id)
}

// -------------------------------------------------------------------

// CMsgGCBanStatusResponse

// optional uint32 result = 1;
inline bool CMsgGCBanStatusResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCBanStatusResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCBanStatusResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgGCBanStatusResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.result)
  return result_;
}
inline void CMsgGCBanStatusResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.result)
}

// optional bool match_banned = 2;
inline bool CMsgGCBanStatusResponse::has_match_banned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_match_banned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCBanStatusResponse::clear_has_match_banned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCBanStatusResponse::clear_match_banned() {
  match_banned_ = false;
  clear_has_match_banned();
}
inline bool CMsgGCBanStatusResponse::match_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.match_banned)
  return match_banned_;
}
inline void CMsgGCBanStatusResponse::set_match_banned(bool value) {
  set_has_match_banned();
  match_banned_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.match_banned)
}

// optional bool text_chat_banned = 3;
inline bool CMsgGCBanStatusResponse::has_text_chat_banned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_text_chat_banned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCBanStatusResponse::clear_has_text_chat_banned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCBanStatusResponse::clear_text_chat_banned() {
  text_chat_banned_ = false;
  clear_has_text_chat_banned();
}
inline bool CMsgGCBanStatusResponse::text_chat_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.text_chat_banned)
  return text_chat_banned_;
}
inline void CMsgGCBanStatusResponse::set_text_chat_banned(bool value) {
  set_has_text_chat_banned();
  text_chat_banned_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.text_chat_banned)
}

// optional bool voice_chat_banned = 4;
inline bool CMsgGCBanStatusResponse::has_voice_chat_banned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_voice_chat_banned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCBanStatusResponse::clear_has_voice_chat_banned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCBanStatusResponse::clear_voice_chat_banned() {
  voice_chat_banned_ = false;
  clear_has_voice_chat_banned();
}
inline bool CMsgGCBanStatusResponse::voice_chat_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.voice_chat_banned)
  return voice_chat_banned_;
}
inline void CMsgGCBanStatusResponse::set_voice_chat_banned(bool value) {
  set_has_voice_chat_banned();
  voice_chat_banned_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.voice_chat_banned)
}

// -------------------------------------------------------------------

// CMsgDOTADailyStats

// optional fixed32 date = 1;
inline bool CMsgDOTADailyStats::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADailyStats::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADailyStats::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADailyStats::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CMsgDOTADailyStats::date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADailyStats.date)
  return date_;
}
inline void CMsgDOTADailyStats::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADailyStats.date)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTADailyStats::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTADailyStats::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTADailyStats::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTADailyStats::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTADailyStats::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADailyStats.hero_id)
  return hero_id_;
}
inline void CMsgDOTADailyStats::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADailyStats.hero_id)
}

// optional uint32 popularity = 3;
inline bool CMsgDOTADailyStats::has_popularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTADailyStats::set_has_popularity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTADailyStats::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTADailyStats::clear_popularity() {
  popularity_ = 0u;
  clear_has_popularity();
}
inline ::google::protobuf::uint32 CMsgDOTADailyStats::popularity() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADailyStats.popularity)
  return popularity_;
}
inline void CMsgDOTADailyStats::set_popularity(::google::protobuf::uint32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADailyStats.popularity)
}

// -------------------------------------------------------------------

// CMsgDOTARequestDailyStats

// -------------------------------------------------------------------

// CMsgGCMatchDetailsRequest

// optional uint32 match_id = 1;
inline bool CMsgGCMatchDetailsRequest::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCMatchDetailsRequest::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCMatchDetailsRequest::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCMatchDetailsRequest::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGCMatchDetailsRequest::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchDetailsRequest.match_id)
  return match_id_;
}
inline void CMsgGCMatchDetailsRequest::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCMatchDetailsRequest.match_id)
}

// -------------------------------------------------------------------

// CMsgGCMatchDetailsResponse

// optional uint32 result = 1;
inline bool CMsgGCMatchDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCMatchDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCMatchDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCMatchDetailsResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgGCMatchDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchDetailsResponse.result)
  return result_;
}
inline void CMsgGCMatchDetailsResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCMatchDetailsResponse.result)
}

// optional .CMsgDOTAMatch match = 2;
inline bool CMsgGCMatchDetailsResponse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCMatchDetailsResponse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCMatchDetailsResponse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCMatchDetailsResponse::clear_match() {
  if (match_ != NULL) match_->Clear();
  clear_has_match();
}
inline const ::CMsgDOTAMatch& CMsgGCMatchDetailsResponse::match() const {
  const ::CMsgDOTAMatch* p = match_;
  // @@protoc_insertion_point(field_get:CMsgGCMatchDetailsResponse.match)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAMatch*>(
      &::_CMsgDOTAMatch_default_instance_);
}
inline ::CMsgDOTAMatch* CMsgGCMatchDetailsResponse::release_match() {
  // @@protoc_insertion_point(field_release:CMsgGCMatchDetailsResponse.match)
  clear_has_match();
  ::CMsgDOTAMatch* temp = match_;
  match_ = NULL;
  return temp;
}
inline ::CMsgDOTAMatch* CMsgGCMatchDetailsResponse::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::CMsgDOTAMatch;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCMatchDetailsResponse.match)
  return match_;
}
inline void CMsgGCMatchDetailsResponse::set_allocated_match(::CMsgDOTAMatch* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_;
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
  } else {
    clear_has_match();
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMatchDetailsResponse.match)
}

// optional .DOTAMatchVote vote = 3 [default = DOTAMatchVote_INVALID];
inline bool CMsgGCMatchDetailsResponse::has_vote() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCMatchDetailsResponse::set_has_vote() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCMatchDetailsResponse::clear_has_vote() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCMatchDetailsResponse::clear_vote() {
  vote_ = 0;
  clear_has_vote();
}
inline ::DOTAMatchVote CMsgGCMatchDetailsResponse::vote() const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchDetailsResponse.vote)
  return static_cast< ::DOTAMatchVote >(vote_);
}
inline void CMsgGCMatchDetailsResponse::set_vote(::DOTAMatchVote value) {
  assert(::DOTAMatchVote_IsValid(value));
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCMatchDetailsResponse.vote)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileRequest

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileRequest.account_id)
  return account_id_;
}
inline void CMsgDOTAProfileRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileRequest.account_id)
}

// optional bool request_name = 2;
inline bool CMsgDOTAProfileRequest::has_request_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileRequest::set_has_request_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileRequest::clear_has_request_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileRequest::clear_request_name() {
  request_name_ = false;
  clear_has_request_name();
}
inline bool CMsgDOTAProfileRequest::request_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileRequest.request_name)
  return request_name_;
}
inline void CMsgDOTAProfileRequest::set_request_name(bool value) {
  set_has_request_name();
  request_name_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileRequest.request_name)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileResponse_PlayedHero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileResponse_PlayedHero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileResponse_PlayedHero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileResponse_PlayedHero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileResponse_PlayedHero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_PlayedHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.PlayedHero.hero_id)
  return hero_id_;
}
inline void CMsgDOTAProfileResponse_PlayedHero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.PlayedHero.hero_id)
}

// optional uint32 wins = 2;
inline bool CMsgDOTAProfileResponse_PlayedHero::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileResponse_PlayedHero::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileResponse_PlayedHero::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileResponse_PlayedHero::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_PlayedHero::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.PlayedHero.wins)
  return wins_;
}
inline void CMsgDOTAProfileResponse_PlayedHero::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.PlayedHero.wins)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileResponse_ShowcaseHero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileResponse_ShowcaseHero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_ShowcaseHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.ShowcaseHero.hero_id)
  return hero_id_;
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.ShowcaseHero.hero_id)
}

// repeated bytes object_data = 2;
inline int CMsgDOTAProfileResponse_ShowcaseHero::object_data_size() const {
  return object_data_.size();
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::clear_object_data() {
  object_data_.Clear();
}
inline const ::std::string& CMsgDOTAProfileResponse_ShowcaseHero::object_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  return object_data_.Get(index);
}
inline ::std::string* CMsgDOTAProfileResponse_ShowcaseHero::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  return object_data_.Mutable(index);
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_object_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  object_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_object_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  object_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_object_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
inline ::std::string* CMsgDOTAProfileResponse_ShowcaseHero::add_object_data() {
  // @@protoc_insertion_point(field_add_mutable:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  return object_data_.Add();
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::add_object_data(const ::std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
#if LANG_CXX11
inline void CMsgDOTAProfileResponse_ShowcaseHero::add_object_data(::std::string&& value) {
  object_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
#endif
inline void CMsgDOTAProfileResponse_ShowcaseHero::add_object_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
inline void CMsgDOTAProfileResponse_ShowcaseHero::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgDOTAProfileResponse_ShowcaseHero::object_data() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  return object_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgDOTAProfileResponse_ShowcaseHero::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileResponse.ShowcaseHero.object_data)
  return &object_data_;
}

// -------------------------------------------------------------------

// CMsgDOTAProfileResponse_LeaguePass

// optional uint32 league_id = 1;
inline bool CMsgDOTAProfileResponse_LeaguePass::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileResponse_LeaguePass::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileResponse_LeaguePass::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileResponse_LeaguePass::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_LeaguePass::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.LeaguePass.league_id)
  return league_id_;
}
inline void CMsgDOTAProfileResponse_LeaguePass::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.LeaguePass.league_id)
}

// optional uint32 item_def = 2;
inline bool CMsgDOTAProfileResponse_LeaguePass::has_item_def() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileResponse_LeaguePass::set_has_item_def() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileResponse_LeaguePass::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileResponse_LeaguePass::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_LeaguePass::item_def() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.LeaguePass.item_def)
  return item_def_;
}
inline void CMsgDOTAProfileResponse_LeaguePass::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.LeaguePass.item_def)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileResponse_EventTicket

// optional uint32 event_id = 1;
inline bool CMsgDOTAProfileResponse_EventTicket::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileResponse_EventTicket::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileResponse_EventTicket::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileResponse_EventTicket::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse_EventTicket::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.EventTicket.event_id)
  return event_id_;
}
inline void CMsgDOTAProfileResponse_EventTicket::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.EventTicket.event_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileResponse

// optional uint32 result = 1;
inline bool CMsgDOTAProfileResponse::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProfileResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProfileResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.result)
  return result_;
}
inline void CMsgDOTAProfileResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.result)
}

// optional .CSODOTAGameAccountClient game_account_client = 2;
inline bool CMsgDOTAProfileResponse::has_game_account_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_game_account_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProfileResponse::clear_has_game_account_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProfileResponse::clear_game_account_client() {
  if (game_account_client_ != NULL) game_account_client_->Clear();
  clear_has_game_account_client();
}
inline const ::CSODOTAGameAccountClient& CMsgDOTAProfileResponse::game_account_client() const {
  const ::CSODOTAGameAccountClient* p = game_account_client_;
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.game_account_client)
  return p != NULL ? *p : *reinterpret_cast<const ::CSODOTAGameAccountClient*>(
      &::_CSODOTAGameAccountClient_default_instance_);
}
inline ::CSODOTAGameAccountClient* CMsgDOTAProfileResponse::release_game_account_client() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileResponse.game_account_client)
  clear_has_game_account_client();
  ::CSODOTAGameAccountClient* temp = game_account_client_;
  game_account_client_ = NULL;
  return temp;
}
inline ::CSODOTAGameAccountClient* CMsgDOTAProfileResponse::mutable_game_account_client() {
  set_has_game_account_client();
  if (game_account_client_ == NULL) {
    game_account_client_ = new ::CSODOTAGameAccountClient;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.game_account_client)
  return game_account_client_;
}
inline void CMsgDOTAProfileResponse::set_allocated_game_account_client(::CSODOTAGameAccountClient* game_account_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete game_account_client_;
  }
  if (game_account_client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_account_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_account_client, submessage_arena);
    }
    set_has_game_account_client();
  } else {
    clear_has_game_account_client();
  }
  game_account_client_ = game_account_client;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileResponse.game_account_client)
}

// repeated .CMsgDOTAMatch latest_matches = 3;
inline int CMsgDOTAProfileResponse::latest_matches_size() const {
  return latest_matches_.size();
}
inline void CMsgDOTAProfileResponse::clear_latest_matches() {
  latest_matches_.Clear();
}
inline const ::CMsgDOTAMatch& CMsgDOTAProfileResponse::latest_matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.latest_matches)
  return latest_matches_.Get(index);
}
inline ::CMsgDOTAMatch* CMsgDOTAProfileResponse::mutable_latest_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.latest_matches)
  return latest_matches_.Mutable(index);
}
inline ::CMsgDOTAMatch* CMsgDOTAProfileResponse::add_latest_matches() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.latest_matches)
  return latest_matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
CMsgDOTAProfileResponse::mutable_latest_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileResponse.latest_matches)
  return &latest_matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
CMsgDOTAProfileResponse::latest_matches() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileResponse.latest_matches)
  return latest_matches_;
}

// repeated .CMsgDOTAProfileResponse.PlayedHero heroes = 4;
inline int CMsgDOTAProfileResponse::heroes_size() const {
  return heroes_.size();
}
inline void CMsgDOTAProfileResponse::clear_heroes() {
  heroes_.Clear();
}
inline const ::CMsgDOTAProfileResponse_PlayedHero& CMsgDOTAProfileResponse::heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.heroes)
  return heroes_.Get(index);
}
inline ::CMsgDOTAProfileResponse_PlayedHero* CMsgDOTAProfileResponse::mutable_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.heroes)
  return heroes_.Mutable(index);
}
inline ::CMsgDOTAProfileResponse_PlayedHero* CMsgDOTAProfileResponse::add_heroes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.heroes)
  return heroes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_PlayedHero >*
CMsgDOTAProfileResponse::mutable_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileResponse.heroes)
  return &heroes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_PlayedHero >&
CMsgDOTAProfileResponse::heroes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileResponse.heroes)
  return heroes_;
}

// optional string player_name = 5;
inline bool CMsgDOTAProfileResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProfileResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProfileResponse::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTAProfileResponse::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.player_name)
  return player_name_.GetNoArena();
}
inline void CMsgDOTAProfileResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.player_name)
}
#if LANG_CXX11
inline void CMsgDOTAProfileResponse::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAProfileResponse.player_name)
}
#endif
inline void CMsgDOTAProfileResponse::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileResponse.player_name)
}
inline void CMsgDOTAProfileResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileResponse.player_name)
}
inline ::std::string* CMsgDOTAProfileResponse::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProfileResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileResponse.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProfileResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileResponse.player_name)
}

// optional string team_name = 6;
inline bool CMsgDOTAProfileResponse::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProfileResponse::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProfileResponse::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTAProfileResponse::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTAProfileResponse::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.team_name)
}
#if LANG_CXX11
inline void CMsgDOTAProfileResponse::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAProfileResponse.team_name)
}
#endif
inline void CMsgDOTAProfileResponse::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileResponse.team_name)
}
inline void CMsgDOTAProfileResponse::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileResponse.team_name)
}
inline ::std::string* CMsgDOTAProfileResponse::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProfileResponse::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileResponse.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProfileResponse::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileResponse.team_name)
}

// optional string team_tag = 7;
inline bool CMsgDOTAProfileResponse::has_team_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_team_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProfileResponse::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProfileResponse::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
inline const ::std::string& CMsgDOTAProfileResponse::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.team_tag)
  return team_tag_.GetNoArena();
}
inline void CMsgDOTAProfileResponse::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.team_tag)
}
#if LANG_CXX11
inline void CMsgDOTAProfileResponse::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAProfileResponse.team_tag)
}
#endif
inline void CMsgDOTAProfileResponse::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAProfileResponse.team_tag)
}
inline void CMsgDOTAProfileResponse::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAProfileResponse.team_tag)
}
inline ::std::string* CMsgDOTAProfileResponse::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProfileResponse::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileResponse.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProfileResponse::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileResponse.team_tag)
}

// optional uint64 team_logo = 8;
inline bool CMsgDOTAProfileResponse::has_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAProfileResponse::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAProfileResponse::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAProfileResponse::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.team_logo)
  return team_logo_;
}
inline void CMsgDOTAProfileResponse::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.team_logo)
}

// optional .CMsgDOTAProfileResponse.ShowcaseHero showcase_hero = 9;
inline bool CMsgDOTAProfileResponse::has_showcase_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_showcase_hero() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProfileResponse::clear_has_showcase_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProfileResponse::clear_showcase_hero() {
  if (showcase_hero_ != NULL) showcase_hero_->Clear();
  clear_has_showcase_hero();
}
inline const ::CMsgDOTAProfileResponse_ShowcaseHero& CMsgDOTAProfileResponse::showcase_hero() const {
  const ::CMsgDOTAProfileResponse_ShowcaseHero* p = showcase_hero_;
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.showcase_hero)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAProfileResponse_ShowcaseHero*>(
      &::_CMsgDOTAProfileResponse_ShowcaseHero_default_instance_);
}
inline ::CMsgDOTAProfileResponse_ShowcaseHero* CMsgDOTAProfileResponse::release_showcase_hero() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileResponse.showcase_hero)
  clear_has_showcase_hero();
  ::CMsgDOTAProfileResponse_ShowcaseHero* temp = showcase_hero_;
  showcase_hero_ = NULL;
  return temp;
}
inline ::CMsgDOTAProfileResponse_ShowcaseHero* CMsgDOTAProfileResponse::mutable_showcase_hero() {
  set_has_showcase_hero();
  if (showcase_hero_ == NULL) {
    showcase_hero_ = new ::CMsgDOTAProfileResponse_ShowcaseHero;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.showcase_hero)
  return showcase_hero_;
}
inline void CMsgDOTAProfileResponse::set_allocated_showcase_hero(::CMsgDOTAProfileResponse_ShowcaseHero* showcase_hero) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete showcase_hero_;
  }
  if (showcase_hero) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      showcase_hero = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, showcase_hero, submessage_arena);
    }
    set_has_showcase_hero();
  } else {
    clear_has_showcase_hero();
  }
  showcase_hero_ = showcase_hero;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileResponse.showcase_hero)
}

// repeated .CMsgDOTAProfileResponse.LeaguePass league_passes = 10;
inline int CMsgDOTAProfileResponse::league_passes_size() const {
  return league_passes_.size();
}
inline void CMsgDOTAProfileResponse::clear_league_passes() {
  league_passes_.Clear();
}
inline const ::CMsgDOTAProfileResponse_LeaguePass& CMsgDOTAProfileResponse::league_passes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.league_passes)
  return league_passes_.Get(index);
}
inline ::CMsgDOTAProfileResponse_LeaguePass* CMsgDOTAProfileResponse::mutable_league_passes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.league_passes)
  return league_passes_.Mutable(index);
}
inline ::CMsgDOTAProfileResponse_LeaguePass* CMsgDOTAProfileResponse::add_league_passes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.league_passes)
  return league_passes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_LeaguePass >*
CMsgDOTAProfileResponse::mutable_league_passes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileResponse.league_passes)
  return &league_passes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_LeaguePass >&
CMsgDOTAProfileResponse::league_passes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileResponse.league_passes)
  return league_passes_;
}

// repeated .CMsgDOTAProfileResponse.EventTicket event_tickets = 11;
inline int CMsgDOTAProfileResponse::event_tickets_size() const {
  return event_tickets_.size();
}
inline void CMsgDOTAProfileResponse::clear_event_tickets() {
  event_tickets_.Clear();
}
inline const ::CMsgDOTAProfileResponse_EventTicket& CMsgDOTAProfileResponse::event_tickets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.event_tickets)
  return event_tickets_.Get(index);
}
inline ::CMsgDOTAProfileResponse_EventTicket* CMsgDOTAProfileResponse::mutable_event_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileResponse.event_tickets)
  return event_tickets_.Mutable(index);
}
inline ::CMsgDOTAProfileResponse_EventTicket* CMsgDOTAProfileResponse::add_event_tickets() {
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileResponse.event_tickets)
  return event_tickets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_EventTicket >*
CMsgDOTAProfileResponse::mutable_event_tickets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileResponse.event_tickets)
  return &event_tickets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAProfileResponse_EventTicket >&
CMsgDOTAProfileResponse::event_tickets() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileResponse.event_tickets)
  return event_tickets_;
}

// optional uint32 team_id = 12;
inline bool CMsgDOTAProfileResponse::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAProfileResponse::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAProfileResponse::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProfileResponse::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.team_id)
  return team_id_;
}
inline void CMsgDOTAProfileResponse::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.team_id)
}

// optional bool has_passport = 13;
inline bool CMsgDOTAProfileResponse::has_has_passport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAProfileResponse::set_has_has_passport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAProfileResponse::clear_has_has_passport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAProfileResponse::clear_has_passport() {
  has_passport_ = false;
  clear_has_has_passport();
}
inline bool CMsgDOTAProfileResponse::has_passport() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileResponse.has_passport)
  return has_passport_;
}
inline void CMsgDOTAProfileResponse::set_has_passport(bool value) {
  set_has_has_passport();
  has_passport_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileResponse.has_passport)
}

// -------------------------------------------------------------------

// CMsgDOTAClearNotifySuccessfulReport

// -------------------------------------------------------------------

// CItemDropEvent

// optional uint32 account_id = 1;
inline bool CItemDropEvent::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CItemDropEvent::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CItemDropEvent::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CItemDropEvent::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CItemDropEvent::account_id() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.account_id)
  return account_id_;
}
inline void CItemDropEvent::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.account_id)
}

// optional uint32 time_stamp = 2;
inline bool CItemDropEvent::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CItemDropEvent::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CItemDropEvent::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CItemDropEvent::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 CItemDropEvent::time_stamp() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.time_stamp)
  return time_stamp_;
}
inline void CItemDropEvent::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.time_stamp)
}

// optional uint32 def_index = 3;
inline bool CItemDropEvent::has_def_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CItemDropEvent::set_has_def_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CItemDropEvent::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CItemDropEvent::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CItemDropEvent::def_index() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.def_index)
  return def_index_;
}
inline void CItemDropEvent::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.def_index)
}

// optional uint64 item_id = 4;
inline bool CItemDropEvent::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CItemDropEvent::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CItemDropEvent::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CItemDropEvent::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CItemDropEvent::item_id() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.item_id)
  return item_id_;
}
inline void CItemDropEvent::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.item_id)
}

// optional uint32 games_played_since_last_drop = 5;
inline bool CItemDropEvent::has_games_played_since_last_drop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CItemDropEvent::set_has_games_played_since_last_drop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CItemDropEvent::clear_has_games_played_since_last_drop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CItemDropEvent::clear_games_played_since_last_drop() {
  games_played_since_last_drop_ = 0u;
  clear_has_games_played_since_last_drop();
}
inline ::google::protobuf::uint32 CItemDropEvent::games_played_since_last_drop() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.games_played_since_last_drop)
  return games_played_since_last_drop_;
}
inline void CItemDropEvent::set_games_played_since_last_drop(::google::protobuf::uint32 value) {
  set_has_games_played_since_last_drop();
  games_played_since_last_drop_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.games_played_since_last_drop)
}

// optional uint32 time_played_since_last_drop = 6;
inline bool CItemDropEvent::has_time_played_since_last_drop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CItemDropEvent::set_has_time_played_since_last_drop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CItemDropEvent::clear_has_time_played_since_last_drop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CItemDropEvent::clear_time_played_since_last_drop() {
  time_played_since_last_drop_ = 0u;
  clear_has_time_played_since_last_drop();
}
inline ::google::protobuf::uint32 CItemDropEvent::time_played_since_last_drop() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.time_played_since_last_drop)
  return time_played_since_last_drop_;
}
inline void CItemDropEvent::set_time_played_since_last_drop(::google::protobuf::uint32 value) {
  set_has_time_played_since_last_drop();
  time_played_since_last_drop_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.time_played_since_last_drop)
}

// optional float drop_bonus = 7;
inline bool CItemDropEvent::has_drop_bonus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CItemDropEvent::set_has_drop_bonus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CItemDropEvent::clear_has_drop_bonus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CItemDropEvent::clear_drop_bonus() {
  drop_bonus_ = 0;
  clear_has_drop_bonus();
}
inline float CItemDropEvent::drop_bonus() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.drop_bonus)
  return drop_bonus_;
}
inline void CItemDropEvent::set_drop_bonus(float value) {
  set_has_drop_bonus();
  drop_bonus_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.drop_bonus)
}

// optional uint32 rarity = 8;
inline bool CItemDropEvent::has_rarity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CItemDropEvent::set_has_rarity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CItemDropEvent::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CItemDropEvent::clear_rarity() {
  rarity_ = 0u;
  clear_has_rarity();
}
inline ::google::protobuf::uint32 CItemDropEvent::rarity() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.rarity)
  return rarity_;
}
inline void CItemDropEvent::set_rarity(::google::protobuf::uint32 value) {
  set_has_rarity();
  rarity_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.rarity)
}

// optional uint32 current_score = 9;
inline bool CItemDropEvent::has_current_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CItemDropEvent::set_has_current_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CItemDropEvent::clear_has_current_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CItemDropEvent::clear_current_score() {
  current_score_ = 0u;
  clear_has_current_score();
}
inline ::google::protobuf::uint32 CItemDropEvent::current_score() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.current_score)
  return current_score_;
}
inline void CItemDropEvent::set_current_score(::google::protobuf::uint32 value) {
  set_has_current_score();
  current_score_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.current_score)
}

// optional uint32 next_drop_at = 10;
inline bool CItemDropEvent::has_next_drop_at() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CItemDropEvent::set_has_next_drop_at() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CItemDropEvent::clear_has_next_drop_at() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CItemDropEvent::clear_next_drop_at() {
  next_drop_at_ = 0u;
  clear_has_next_drop_at();
}
inline ::google::protobuf::uint32 CItemDropEvent::next_drop_at() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.next_drop_at)
  return next_drop_at_;
}
inline void CItemDropEvent::set_next_drop_at(::google::protobuf::uint32 value) {
  set_has_next_drop_at();
  next_drop_at_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.next_drop_at)
}

// optional bool is_crate = 11;
inline bool CItemDropEvent::has_is_crate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CItemDropEvent::set_has_is_crate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CItemDropEvent::clear_has_is_crate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CItemDropEvent::clear_is_crate() {
  is_crate_ = false;
  clear_has_is_crate();
}
inline bool CItemDropEvent::is_crate() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.is_crate)
  return is_crate_;
}
inline void CItemDropEvent::set_is_crate(bool value) {
  set_has_is_crate();
  is_crate_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.is_crate)
}

// optional bool is_level_reward = 12;
inline bool CItemDropEvent::has_is_level_reward() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CItemDropEvent::set_has_is_level_reward() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CItemDropEvent::clear_has_is_level_reward() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CItemDropEvent::clear_is_level_reward() {
  is_level_reward_ = false;
  clear_has_is_level_reward();
}
inline bool CItemDropEvent::is_level_reward() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.is_level_reward)
  return is_level_reward_;
}
inline void CItemDropEvent::set_is_level_reward(bool value) {
  set_has_is_level_reward();
  is_level_reward_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.is_level_reward)
}

// optional uint32 xp = 13;
inline bool CItemDropEvent::has_xp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CItemDropEvent::set_has_xp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CItemDropEvent::clear_has_xp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CItemDropEvent::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
inline ::google::protobuf::uint32 CItemDropEvent::xp() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.xp)
  return xp_;
}
inline void CItemDropEvent::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.xp)
}

// optional uint32 level = 14;
inline bool CItemDropEvent::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CItemDropEvent::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CItemDropEvent::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CItemDropEvent::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CItemDropEvent::level() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.level)
  return level_;
}
inline void CItemDropEvent::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.level)
}

// optional uint32 match_id = 15;
inline bool CItemDropEvent::has_match_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CItemDropEvent::set_has_match_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CItemDropEvent::clear_has_match_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CItemDropEvent::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CItemDropEvent::match_id() const {
  // @@protoc_insertion_point(field_get:CItemDropEvent.match_id)
  return match_id_;
}
inline void CItemDropEvent::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CItemDropEvent.match_id)
}

// -------------------------------------------------------------------

// CXPGainEvent

// optional uint32 match_id = 1;
inline bool CXPGainEvent::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CXPGainEvent::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CXPGainEvent::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CXPGainEvent::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CXPGainEvent::match_id() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.match_id)
  return match_id_;
}
inline void CXPGainEvent::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.match_id)
}

// optional uint32 account_id = 2;
inline bool CXPGainEvent::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CXPGainEvent::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CXPGainEvent::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CXPGainEvent::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CXPGainEvent::account_id() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.account_id)
  return account_id_;
}
inline void CXPGainEvent::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.account_id)
}

// optional uint32 time_stamp = 3;
inline bool CXPGainEvent::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CXPGainEvent::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CXPGainEvent::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CXPGainEvent::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 CXPGainEvent::time_stamp() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.time_stamp)
  return time_stamp_;
}
inline void CXPGainEvent::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.time_stamp)
}

// optional uint32 duration = 4;
inline bool CXPGainEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CXPGainEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CXPGainEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CXPGainEvent::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CXPGainEvent::duration() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.duration)
  return duration_;
}
inline void CXPGainEvent::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.duration)
}

// optional uint32 base_xp = 5;
inline bool CXPGainEvent::has_base_xp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CXPGainEvent::set_has_base_xp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CXPGainEvent::clear_has_base_xp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CXPGainEvent::clear_base_xp() {
  base_xp_ = 0u;
  clear_has_base_xp();
}
inline ::google::protobuf::uint32 CXPGainEvent::base_xp() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.base_xp)
  return base_xp_;
}
inline void CXPGainEvent::set_base_xp(::google::protobuf::uint32 value) {
  set_has_base_xp();
  base_xp_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.base_xp)
}

// optional uint32 time_reward_xp = 6;
inline bool CXPGainEvent::has_time_reward_xp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CXPGainEvent::set_has_time_reward_xp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CXPGainEvent::clear_has_time_reward_xp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CXPGainEvent::clear_time_reward_xp() {
  time_reward_xp_ = 0u;
  clear_has_time_reward_xp();
}
inline ::google::protobuf::uint32 CXPGainEvent::time_reward_xp() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.time_reward_xp)
  return time_reward_xp_;
}
inline void CXPGainEvent::set_time_reward_xp(::google::protobuf::uint32 value) {
  set_has_time_reward_xp();
  time_reward_xp_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.time_reward_xp)
}

// optional uint32 drop_rate_bonus_xp = 7;
inline bool CXPGainEvent::has_drop_rate_bonus_xp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CXPGainEvent::set_has_drop_rate_bonus_xp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CXPGainEvent::clear_has_drop_rate_bonus_xp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CXPGainEvent::clear_drop_rate_bonus_xp() {
  drop_rate_bonus_xp_ = 0u;
  clear_has_drop_rate_bonus_xp();
}
inline ::google::protobuf::uint32 CXPGainEvent::drop_rate_bonus_xp() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.drop_rate_bonus_xp)
  return drop_rate_bonus_xp_;
}
inline void CXPGainEvent::set_drop_rate_bonus_xp(::google::protobuf::uint32 value) {
  set_has_drop_rate_bonus_xp();
  drop_rate_bonus_xp_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.drop_rate_bonus_xp)
}

// optional uint32 final_xp = 8;
inline bool CXPGainEvent::has_final_xp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CXPGainEvent::set_has_final_xp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CXPGainEvent::clear_has_final_xp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CXPGainEvent::clear_final_xp() {
  final_xp_ = 0u;
  clear_has_final_xp();
}
inline ::google::protobuf::uint32 CXPGainEvent::final_xp() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.final_xp)
  return final_xp_;
}
inline void CXPGainEvent::set_final_xp(::google::protobuf::uint32 value) {
  set_has_final_xp();
  final_xp_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.final_xp)
}

// optional float drop_rate_bonus = 9;
inline bool CXPGainEvent::has_drop_rate_bonus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CXPGainEvent::set_has_drop_rate_bonus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CXPGainEvent::clear_has_drop_rate_bonus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CXPGainEvent::clear_drop_rate_bonus() {
  drop_rate_bonus_ = 0;
  clear_has_drop_rate_bonus();
}
inline float CXPGainEvent::drop_rate_bonus() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.drop_rate_bonus)
  return drop_rate_bonus_;
}
inline void CXPGainEvent::set_drop_rate_bonus(float value) {
  set_has_drop_rate_bonus();
  drop_rate_bonus_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.drop_rate_bonus)
}

// optional bool leveled_up = 10;
inline bool CXPGainEvent::has_leveled_up() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CXPGainEvent::set_has_leveled_up() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CXPGainEvent::clear_has_leveled_up() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CXPGainEvent::clear_leveled_up() {
  leveled_up_ = false;
  clear_has_leveled_up();
}
inline bool CXPGainEvent::leveled_up() const {
  // @@protoc_insertion_point(field_get:CXPGainEvent.leveled_up)
  return leveled_up_;
}
inline void CXPGainEvent::set_leveled_up(bool value) {
  set_has_leveled_up();
  leveled_up_ = value;
  // @@protoc_insertion_point(field_set:CXPGainEvent.leveled_up)
}

// -------------------------------------------------------------------

// CLowPriPenalty

// optional uint32 match_id = 1;
inline bool CLowPriPenalty::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLowPriPenalty::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLowPriPenalty::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLowPriPenalty::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CLowPriPenalty::match_id() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.match_id)
  return match_id_;
}
inline void CLowPriPenalty::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.match_id)
}

// optional uint32 account_id = 2;
inline bool CLowPriPenalty::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLowPriPenalty::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLowPriPenalty::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLowPriPenalty::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLowPriPenalty::account_id() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.account_id)
  return account_id_;
}
inline void CLowPriPenalty::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.account_id)
}

// optional uint32 time_stamp = 3;
inline bool CLowPriPenalty::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLowPriPenalty::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLowPriPenalty::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLowPriPenalty::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 CLowPriPenalty::time_stamp() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.time_stamp)
  return time_stamp_;
}
inline void CLowPriPenalty::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.time_stamp)
}

// optional uint32 games_since_report_penalty = 4;
inline bool CLowPriPenalty::has_games_since_report_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLowPriPenalty::set_has_games_since_report_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLowPriPenalty::clear_has_games_since_report_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLowPriPenalty::clear_games_since_report_penalty() {
  games_since_report_penalty_ = 0u;
  clear_has_games_since_report_penalty();
}
inline ::google::protobuf::uint32 CLowPriPenalty::games_since_report_penalty() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.games_since_report_penalty)
  return games_since_report_penalty_;
}
inline void CLowPriPenalty::set_games_since_report_penalty(::google::protobuf::uint32 value) {
  set_has_games_since_report_penalty();
  games_since_report_penalty_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.games_since_report_penalty)
}

// optional uint32 pending_in_game_reports = 5;
inline bool CLowPriPenalty::has_pending_in_game_reports() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLowPriPenalty::set_has_pending_in_game_reports() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLowPriPenalty::clear_has_pending_in_game_reports() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLowPriPenalty::clear_pending_in_game_reports() {
  pending_in_game_reports_ = 0u;
  clear_has_pending_in_game_reports();
}
inline ::google::protobuf::uint32 CLowPriPenalty::pending_in_game_reports() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.pending_in_game_reports)
  return pending_in_game_reports_;
}
inline void CLowPriPenalty::set_pending_in_game_reports(::google::protobuf::uint32 value) {
  set_has_pending_in_game_reports();
  pending_in_game_reports_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.pending_in_game_reports)
}

// optional uint32 pending_out_of_game_reports = 6;
inline bool CLowPriPenalty::has_pending_out_of_game_reports() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLowPriPenalty::set_has_pending_out_of_game_reports() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLowPriPenalty::clear_has_pending_out_of_game_reports() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLowPriPenalty::clear_pending_out_of_game_reports() {
  pending_out_of_game_reports_ = 0u;
  clear_has_pending_out_of_game_reports();
}
inline ::google::protobuf::uint32 CLowPriPenalty::pending_out_of_game_reports() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.pending_out_of_game_reports)
  return pending_out_of_game_reports_;
}
inline void CLowPriPenalty::set_pending_out_of_game_reports(::google::protobuf::uint32 value) {
  set_has_pending_out_of_game_reports();
  pending_out_of_game_reports_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.pending_out_of_game_reports)
}

// optional uint32 pending_detected_reports = 7;
inline bool CLowPriPenalty::has_pending_detected_reports() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLowPriPenalty::set_has_pending_detected_reports() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLowPriPenalty::clear_has_pending_detected_reports() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLowPriPenalty::clear_pending_detected_reports() {
  pending_detected_reports_ = 0u;
  clear_has_pending_detected_reports();
}
inline ::google::protobuf::uint32 CLowPriPenalty::pending_detected_reports() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.pending_detected_reports)
  return pending_detected_reports_;
}
inline void CLowPriPenalty::set_pending_detected_reports(::google::protobuf::uint32 value) {
  set_has_pending_detected_reports();
  pending_detected_reports_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.pending_detected_reports)
}

// optional uint32 report_penalty_count = 8;
inline bool CLowPriPenalty::has_report_penalty_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLowPriPenalty::set_has_report_penalty_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CLowPriPenalty::clear_has_report_penalty_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CLowPriPenalty::clear_report_penalty_count() {
  report_penalty_count_ = 0u;
  clear_has_report_penalty_count();
}
inline ::google::protobuf::uint32 CLowPriPenalty::report_penalty_count() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.report_penalty_count)
  return report_penalty_count_;
}
inline void CLowPriPenalty::set_report_penalty_count(::google::protobuf::uint32 value) {
  set_has_report_penalty_count();
  report_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.report_penalty_count)
}

// optional uint32 last_penalty_date = 9;
inline bool CLowPriPenalty::has_last_penalty_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLowPriPenalty::set_has_last_penalty_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CLowPriPenalty::clear_has_last_penalty_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CLowPriPenalty::clear_last_penalty_date() {
  last_penalty_date_ = 0u;
  clear_has_last_penalty_date();
}
inline ::google::protobuf::uint32 CLowPriPenalty::last_penalty_date() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.last_penalty_date)
  return last_penalty_date_;
}
inline void CLowPriPenalty::set_last_penalty_date(::google::protobuf::uint32 value) {
  set_has_last_penalty_date();
  last_penalty_date_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.last_penalty_date)
}

// optional uint32 last_abandon_date = 10;
inline bool CLowPriPenalty::has_last_abandon_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLowPriPenalty::set_has_last_abandon_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CLowPriPenalty::clear_has_last_abandon_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CLowPriPenalty::clear_last_abandon_date() {
  last_abandon_date_ = 0u;
  clear_has_last_abandon_date();
}
inline ::google::protobuf::uint32 CLowPriPenalty::last_abandon_date() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.last_abandon_date)
  return last_abandon_date_;
}
inline void CLowPriPenalty::set_last_abandon_date(::google::protobuf::uint32 value) {
  set_has_last_abandon_date();
  last_abandon_date_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.last_abandon_date)
}

// optional uint32 abandon_penalty_count = 11;
inline bool CLowPriPenalty::has_abandon_penalty_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLowPriPenalty::set_has_abandon_penalty_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CLowPriPenalty::clear_has_abandon_penalty_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CLowPriPenalty::clear_abandon_penalty_count() {
  abandon_penalty_count_ = 0u;
  clear_has_abandon_penalty_count();
}
inline ::google::protobuf::uint32 CLowPriPenalty::abandon_penalty_count() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.abandon_penalty_count)
  return abandon_penalty_count_;
}
inline void CLowPriPenalty::set_abandon_penalty_count(::google::protobuf::uint32 value) {
  set_has_abandon_penalty_count();
  abandon_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.abandon_penalty_count)
}

// optional uint32 completed_game_streak = 12;
inline bool CLowPriPenalty::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLowPriPenalty::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CLowPriPenalty::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CLowPriPenalty::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
inline ::google::protobuf::uint32 CLowPriPenalty::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.completed_game_streak)
  return completed_game_streak_;
}
inline void CLowPriPenalty::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.completed_game_streak)
}

// optional uint32 abandon_time_given = 13;
inline bool CLowPriPenalty::has_abandon_time_given() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLowPriPenalty::set_has_abandon_time_given() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CLowPriPenalty::clear_has_abandon_time_given() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CLowPriPenalty::clear_abandon_time_given() {
  abandon_time_given_ = 0u;
  clear_has_abandon_time_given();
}
inline ::google::protobuf::uint32 CLowPriPenalty::abandon_time_given() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.abandon_time_given)
  return abandon_time_given_;
}
inline void CLowPriPenalty::set_abandon_time_given(::google::protobuf::uint32 value) {
  set_has_abandon_time_given();
  abandon_time_given_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.abandon_time_given)
}

// optional uint32 report_time_given = 14;
inline bool CLowPriPenalty::has_report_time_given() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CLowPriPenalty::set_has_report_time_given() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CLowPriPenalty::clear_has_report_time_given() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CLowPriPenalty::clear_report_time_given() {
  report_time_given_ = 0u;
  clear_has_report_time_given();
}
inline ::google::protobuf::uint32 CLowPriPenalty::report_time_given() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.report_time_given)
  return report_time_given_;
}
inline void CLowPriPenalty::set_report_time_given(::google::protobuf::uint32 value) {
  set_has_report_time_given();
  report_time_given_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.report_time_given)
}

// optional uint32 rank = 15;
inline bool CLowPriPenalty::has_rank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CLowPriPenalty::set_has_rank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CLowPriPenalty::clear_has_rank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CLowPriPenalty::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CLowPriPenalty::rank() const {
  // @@protoc_insertion_point(field_get:CLowPriPenalty.rank)
  return rank_;
}
inline void CLowPriPenalty::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CLowPriPenalty.rank)
}

// -------------------------------------------------------------------

// CMsgDOTAWelcome

// optional bool spectator_only = 1;
inline bool CMsgDOTAWelcome::has_spectator_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWelcome::set_has_spectator_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWelcome::clear_has_spectator_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWelcome::clear_spectator_only() {
  spectator_only_ = false;
  clear_has_spectator_only();
}
inline bool CMsgDOTAWelcome::spectator_only() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.spectator_only)
  return spectator_only_;
}
inline void CMsgDOTAWelcome::set_spectator_only(bool value) {
  set_has_spectator_only();
  spectator_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.spectator_only)
}

// optional bool allow_team_creation = 2;
inline bool CMsgDOTAWelcome::has_allow_team_creation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWelcome::set_has_allow_team_creation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWelcome::clear_has_allow_team_creation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWelcome::clear_allow_team_creation() {
  allow_team_creation_ = false;
  clear_has_allow_team_creation();
}
inline bool CMsgDOTAWelcome::allow_team_creation() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.allow_team_creation)
  return allow_team_creation_;
}
inline void CMsgDOTAWelcome::set_allow_team_creation(bool value) {
  set_has_allow_team_creation();
  allow_team_creation_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.allow_team_creation)
}

// optional bool tournament_admin = 3;
inline bool CMsgDOTAWelcome::has_tournament_admin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAWelcome::set_has_tournament_admin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAWelcome::clear_has_tournament_admin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAWelcome::clear_tournament_admin() {
  tournament_admin_ = false;
  clear_has_tournament_admin();
}
inline bool CMsgDOTAWelcome::tournament_admin() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.tournament_admin)
  return tournament_admin_;
}
inline void CMsgDOTAWelcome::set_tournament_admin(bool value) {
  set_has_tournament_admin();
  tournament_admin_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.tournament_admin)
}

// optional bool tournament_broadcaster = 4;
inline bool CMsgDOTAWelcome::has_tournament_broadcaster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAWelcome::set_has_tournament_broadcaster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAWelcome::clear_has_tournament_broadcaster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAWelcome::clear_tournament_broadcaster() {
  tournament_broadcaster_ = false;
  clear_has_tournament_broadcaster();
}
inline bool CMsgDOTAWelcome::tournament_broadcaster() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.tournament_broadcaster)
  return tournament_broadcaster_;
}
inline void CMsgDOTAWelcome::set_tournament_broadcaster(bool value) {
  set_has_tournament_broadcaster();
  tournament_broadcaster_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.tournament_broadcaster)
}

// optional uint32 store_item_hash = 5;
inline bool CMsgDOTAWelcome::has_store_item_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAWelcome::set_has_store_item_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAWelcome::clear_has_store_item_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAWelcome::clear_store_item_hash() {
  store_item_hash_ = 0u;
  clear_has_store_item_hash();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::store_item_hash() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.store_item_hash)
  return store_item_hash_;
}
inline void CMsgDOTAWelcome::set_store_item_hash(::google::protobuf::uint32 value) {
  set_has_store_item_hash();
  store_item_hash_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.store_item_hash)
}

// optional uint32 timeplayedconsecutively = 6;
inline bool CMsgDOTAWelcome::has_timeplayedconsecutively() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAWelcome::set_has_timeplayedconsecutively() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAWelcome::clear_has_timeplayedconsecutively() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAWelcome::clear_timeplayedconsecutively() {
  timeplayedconsecutively_ = 0u;
  clear_has_timeplayedconsecutively();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::timeplayedconsecutively() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.timeplayedconsecutively)
  return timeplayedconsecutively_;
}
inline void CMsgDOTAWelcome::set_timeplayedconsecutively(::google::protobuf::uint32 value) {
  set_has_timeplayedconsecutively();
  timeplayedconsecutively_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.timeplayedconsecutively)
}

// optional bool allow_3rd_party_match_history = 7;
inline bool CMsgDOTAWelcome::has_allow_3rd_party_match_history() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAWelcome::set_has_allow_3rd_party_match_history() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAWelcome::clear_has_allow_3rd_party_match_history() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAWelcome::clear_allow_3rd_party_match_history() {
  allow_3rd_party_match_history_ = false;
  clear_has_allow_3rd_party_match_history();
}
inline bool CMsgDOTAWelcome::allow_3rd_party_match_history() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.allow_3rd_party_match_history)
  return allow_3rd_party_match_history_;
}
inline void CMsgDOTAWelcome::set_allow_3rd_party_match_history(bool value) {
  set_has_allow_3rd_party_match_history();
  allow_3rd_party_match_history_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.allow_3rd_party_match_history)
}

// optional .DOTA_PartnerAccountType partner_account_type = 8 [default = DOTA_PARTNER_NONE];
inline bool CMsgDOTAWelcome::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAWelcome::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAWelcome::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAWelcome::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline ::DOTA_PartnerAccountType CMsgDOTAWelcome::partner_account_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.partner_account_type)
  return static_cast< ::DOTA_PartnerAccountType >(partner_account_type_);
}
inline void CMsgDOTAWelcome::set_partner_account_type(::DOTA_PartnerAccountType value) {
  assert(::DOTA_PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.partner_account_type)
}

// optional uint32 banned_word_list_word_id = 9;
inline bool CMsgDOTAWelcome::has_banned_word_list_word_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAWelcome::set_has_banned_word_list_word_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAWelcome::clear_has_banned_word_list_word_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAWelcome::clear_banned_word_list_word_id() {
  banned_word_list_word_id_ = 0u;
  clear_has_banned_word_list_word_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::banned_word_list_word_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.banned_word_list_word_id)
  return banned_word_list_word_id_;
}
inline void CMsgDOTAWelcome::set_banned_word_list_word_id(::google::protobuf::uint32 value) {
  set_has_banned_word_list_word_id();
  banned_word_list_word_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.banned_word_list_word_id)
}

// optional uint32 time_first_played = 10;
inline bool CMsgDOTAWelcome::has_time_first_played() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAWelcome::set_has_time_first_played() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAWelcome::clear_has_time_first_played() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAWelcome::clear_time_first_played() {
  time_first_played_ = 0u;
  clear_has_time_first_played();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::time_first_played() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.time_first_played)
  return time_first_played_;
}
inline void CMsgDOTAWelcome::set_time_first_played(::google::protobuf::uint32 value) {
  set_has_time_first_played();
  time_first_played_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.time_first_played)
}

// optional uint32 partner_account_state = 11;
inline bool CMsgDOTAWelcome::has_partner_account_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAWelcome::set_has_partner_account_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAWelcome::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAWelcome::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::partner_account_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.partner_account_state)
  return partner_account_state_;
}
inline void CMsgDOTAWelcome::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.partner_account_state)
}

// optional uint32 last_time_played = 12;
inline bool CMsgDOTAWelcome::has_last_time_played() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAWelcome::set_has_last_time_played() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAWelcome::clear_has_last_time_played() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAWelcome::clear_last_time_played() {
  last_time_played_ = 0u;
  clear_has_last_time_played();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::last_time_played() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.last_time_played)
  return last_time_played_;
}
inline void CMsgDOTAWelcome::set_last_time_played(::google::protobuf::uint32 value) {
  set_has_last_time_played();
  last_time_played_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.last_time_played)
}

// optional uint32 last_ip_address = 13;
inline bool CMsgDOTAWelcome::has_last_ip_address() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAWelcome::set_has_last_ip_address() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAWelcome::clear_has_last_ip_address() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAWelcome::clear_last_ip_address() {
  last_ip_address_ = 0u;
  clear_has_last_ip_address();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::last_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.last_ip_address)
  return last_ip_address_;
}
inline void CMsgDOTAWelcome::set_last_ip_address(::google::protobuf::uint32 value) {
  set_has_last_ip_address();
  last_ip_address_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.last_ip_address)
}

// optional uint32 notify_successful_report = 14;
inline bool CMsgDOTAWelcome::has_notify_successful_report() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAWelcome::set_has_notify_successful_report() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAWelcome::clear_has_notify_successful_report() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAWelcome::clear_notify_successful_report() {
  notify_successful_report_ = 0u;
  clear_has_notify_successful_report();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::notify_successful_report() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.notify_successful_report)
  return notify_successful_report_;
}
inline void CMsgDOTAWelcome::set_notify_successful_report(::google::protobuf::uint32 value) {
  set_has_notify_successful_report();
  notify_successful_report_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.notify_successful_report)
}

// optional uint32 shutdownlawterminatetime = 15;
inline bool CMsgDOTAWelcome::has_shutdownlawterminatetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAWelcome::set_has_shutdownlawterminatetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAWelcome::clear_has_shutdownlawterminatetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAWelcome::clear_shutdownlawterminatetime() {
  shutdownlawterminatetime_ = 0u;
  clear_has_shutdownlawterminatetime();
}
inline ::google::protobuf::uint32 CMsgDOTAWelcome::shutdownlawterminatetime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWelcome.shutdownlawterminatetime)
  return shutdownlawterminatetime_;
}
inline void CMsgDOTAWelcome::set_shutdownlawterminatetime(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetime();
  shutdownlawterminatetime_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWelcome.shutdownlawterminatetime)
}

// -------------------------------------------------------------------

// CSODOTAGameHeroFavorites

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAGameHeroFavorites::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameHeroFavorites::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameHeroFavorites::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameHeroFavorites::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAGameHeroFavorites::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameHeroFavorites.account_id)
  return account_id_;
}
inline void CSODOTAGameHeroFavorites::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameHeroFavorites.account_id)
}

// optional uint32 hero_id = 2 [(.key_field) = true];
inline bool CSODOTAGameHeroFavorites::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameHeroFavorites::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameHeroFavorites::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameHeroFavorites::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CSODOTAGameHeroFavorites::hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameHeroFavorites.hero_id)
  return hero_id_;
}
inline void CSODOTAGameHeroFavorites::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAGameHeroFavorites.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHeroFavoritesAdd

// optional uint32 hero_id = 1;
inline bool CMsgDOTAHeroFavoritesAdd::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHeroFavoritesAdd::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHeroFavoritesAdd::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHeroFavoritesAdd::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHeroFavoritesAdd::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHeroFavoritesAdd.hero_id)
  return hero_id_;
}
inline void CMsgDOTAHeroFavoritesAdd::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHeroFavoritesAdd.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHeroFavoritesRemove

// optional uint32 hero_id = 1;
inline bool CMsgDOTAHeroFavoritesRemove::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHeroFavoritesRemove::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHeroFavoritesRemove::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHeroFavoritesRemove::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHeroFavoritesRemove::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHeroFavoritesRemove.hero_id)
  return hero_id_;
}
inline void CMsgDOTAHeroFavoritesRemove::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHeroFavoritesRemove.hero_id)
}

// -------------------------------------------------------------------

// CDOTAOverview_PlayersByRegion

// optional int32 region = 1;
inline bool CDOTAOverview_PlayersByRegion::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAOverview_PlayersByRegion::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::region() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.region)
  return region_;
}
inline void CDOTAOverview_PlayersByRegion::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.region)
}

// optional int32 total = 2;
inline bool CDOTAOverview_PlayersByRegion::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAOverview_PlayersByRegion::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::total() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.total)
  return total_;
}
inline void CDOTAOverview_PlayersByRegion::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.total)
}

// optional int32 in_queue = 3;
inline bool CDOTAOverview_PlayersByRegion::has_in_queue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_queue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_queue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_queue() {
  in_queue_ = 0;
  clear_has_in_queue();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_queue() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_queue)
  return in_queue_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_queue(::google::protobuf::int32 value) {
  set_has_in_queue();
  in_queue_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_queue)
}

// optional int32 in_match = 4;
inline bool CDOTAOverview_PlayersByRegion::has_in_match() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_match() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_match() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_match() {
  in_match_ = 0;
  clear_has_in_match();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_match() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_match)
  return in_match_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_match(::google::protobuf::int32 value) {
  set_has_in_match();
  in_match_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_match)
}

// optional int32 in_practice = 5;
inline bool CDOTAOverview_PlayersByRegion::has_in_practice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_practice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_practice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_practice() {
  in_practice_ = 0;
  clear_has_in_practice();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_practice() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_practice)
  return in_practice_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_practice(::google::protobuf::int32 value) {
  set_has_in_practice();
  in_practice_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_practice)
}

// optional int32 in_tournament = 6;
inline bool CDOTAOverview_PlayersByRegion::has_in_tournament() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_tournament() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_tournament() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_tournament() {
  in_tournament_ = 0;
  clear_has_in_tournament();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_tournament() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_tournament)
  return in_tournament_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_tournament(::google::protobuf::int32 value) {
  set_has_in_tournament();
  in_tournament_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_tournament)
}

// optional int32 in_coop = 8;
inline bool CDOTAOverview_PlayersByRegion::has_in_coop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_coop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_coop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_coop() {
  in_coop_ = 0;
  clear_has_in_coop();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_coop() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_coop)
  return in_coop_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_coop(::google::protobuf::int32 value) {
  set_has_in_coop();
  in_coop_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_coop)
}

// optional int32 in_team_match = 9;
inline bool CDOTAOverview_PlayersByRegion::has_in_team_match() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_team_match() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_team_match() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_team_match() {
  in_team_match_ = 0;
  clear_has_in_team_match();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_team_match() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_team_match)
  return in_team_match_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_team_match(::google::protobuf::int32 value) {
  set_has_in_team_match();
  in_team_match_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_team_match)
}

// optional int32 spectating = 10;
inline bool CDOTAOverview_PlayersByRegion::has_spectating() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_spectating() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_spectating() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTAOverview_PlayersByRegion::clear_spectating() {
  spectating_ = 0;
  clear_has_spectating();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::spectating() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.spectating)
  return spectating_;
}
inline void CDOTAOverview_PlayersByRegion::set_spectating(::google::protobuf::int32 value) {
  set_has_spectating();
  spectating_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.spectating)
}

// optional int32 idle = 11;
inline bool CDOTAOverview_PlayersByRegion::has_idle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_idle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_idle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTAOverview_PlayersByRegion::clear_idle() {
  idle_ = 0;
  clear_has_idle();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::idle() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.idle)
  return idle_;
}
inline void CDOTAOverview_PlayersByRegion::set_idle(::google::protobuf::int32 value) {
  set_has_idle();
  idle_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.idle)
}

// optional int32 in_solo_queue_match = 12;
inline bool CDOTAOverview_PlayersByRegion::has_in_solo_queue_match() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTAOverview_PlayersByRegion::set_has_in_solo_queue_match() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTAOverview_PlayersByRegion::clear_has_in_solo_queue_match() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTAOverview_PlayersByRegion::clear_in_solo_queue_match() {
  in_solo_queue_match_ = 0;
  clear_has_in_solo_queue_match();
}
inline ::google::protobuf::int32 CDOTAOverview_PlayersByRegion::in_solo_queue_match() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.PlayersByRegion.in_solo_queue_match)
  return in_solo_queue_match_;
}
inline void CDOTAOverview_PlayersByRegion::set_in_solo_queue_match(::google::protobuf::int32 value) {
  set_has_in_solo_queue_match();
  in_solo_queue_match_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.PlayersByRegion.in_solo_queue_match)
}

// -------------------------------------------------------------------

// CDOTAOverview_ServersByRegion_Host_Server

// optional fixed64 steam_id = 1;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CDOTAOverview_ServersByRegion_Host_Server::steam_id() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.steam_id)
  return steam_id_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.steam_id)
}

// optional bool is_relay = 2;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_is_relay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_is_relay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_is_relay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_is_relay() {
  is_relay_ = false;
  clear_has_is_relay();
}
inline bool CDOTAOverview_ServersByRegion_Host_Server::is_relay() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.is_relay)
  return is_relay_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_is_relay(bool value) {
  set_has_is_relay();
  is_relay_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.is_relay)
}

// optional uint32 port = 3;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CDOTAOverview_ServersByRegion_Host_Server::port() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.port)
  return port_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.port)
}

// optional bool in_use = 4;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_in_use() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_in_use() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_in_use() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_in_use() {
  in_use_ = false;
  clear_has_in_use();
}
inline bool CDOTAOverview_ServersByRegion_Host_Server::in_use() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.in_use)
  return in_use_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_in_use(bool value) {
  set_has_in_use();
  in_use_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.in_use)
}

// optional uint32 match_id = 5;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_match_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_match_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CDOTAOverview_ServersByRegion_Host_Server::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.match_id)
  return match_id_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.match_id)
}

// optional fixed64 lobby_id = 6;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CDOTAOverview_ServersByRegion_Host_Server::lobby_id() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.lobby_id)
  return lobby_id_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.lobby_id)
}

// optional fixed64 relayed_game_server_steam_id = 7;
inline bool CDOTAOverview_ServersByRegion_Host_Server::has_relayed_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_has_relayed_game_server_steam_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_has_relayed_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_relayed_game_server_steam_id() {
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_relayed_game_server_steam_id();
}
inline ::google::protobuf::uint64 CDOTAOverview_ServersByRegion_Host_Server::relayed_game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.relayed_game_server_steam_id)
  return relayed_game_server_steam_id_;
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_relayed_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_relayed_game_server_steam_id();
  relayed_game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.relayed_game_server_steam_id)
}

// repeated fixed64 user_steam_ids = 8;
inline int CDOTAOverview_ServersByRegion_Host_Server::user_steam_ids_size() const {
  return user_steam_ids_.size();
}
inline void CDOTAOverview_ServersByRegion_Host_Server::clear_user_steam_ids() {
  user_steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CDOTAOverview_ServersByRegion_Host_Server::user_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.Server.user_steam_ids)
  return user_steam_ids_.Get(index);
}
inline void CDOTAOverview_ServersByRegion_Host_Server::set_user_steam_ids(int index, ::google::protobuf::uint64 value) {
  user_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.Server.user_steam_ids)
}
inline void CDOTAOverview_ServersByRegion_Host_Server::add_user_steam_ids(::google::protobuf::uint64 value) {
  user_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAOverview.ServersByRegion.Host.Server.user_steam_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CDOTAOverview_ServersByRegion_Host_Server::user_steam_ids() const {
  // @@protoc_insertion_point(field_list:CDOTAOverview.ServersByRegion.Host.Server.user_steam_ids)
  return user_steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CDOTAOverview_ServersByRegion_Host_Server::mutable_user_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAOverview.ServersByRegion.Host.Server.user_steam_ids)
  return &user_steam_ids_;
}

// -------------------------------------------------------------------

// CDOTAOverview_ServersByRegion_Host

// optional uint32 ip = 1;
inline bool CDOTAOverview_ServersByRegion_Host::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAOverview_ServersByRegion_Host::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAOverview_ServersByRegion_Host::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAOverview_ServersByRegion_Host::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 CDOTAOverview_ServersByRegion_Host::ip() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.ip)
  return ip_;
}
inline void CDOTAOverview_ServersByRegion_Host::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.Host.ip)
}

// repeated .CDOTAOverview.ServersByRegion.Host.Server servers = 2;
inline int CDOTAOverview_ServersByRegion_Host::servers_size() const {
  return servers_.size();
}
inline void CDOTAOverview_ServersByRegion_Host::clear_servers() {
  servers_.Clear();
}
inline const ::CDOTAOverview_ServersByRegion_Host_Server& CDOTAOverview_ServersByRegion_Host::servers(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.Host.servers)
  return servers_.Get(index);
}
inline ::CDOTAOverview_ServersByRegion_Host_Server* CDOTAOverview_ServersByRegion_Host::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAOverview.ServersByRegion.Host.servers)
  return servers_.Mutable(index);
}
inline ::CDOTAOverview_ServersByRegion_Host_Server* CDOTAOverview_ServersByRegion_Host::add_servers() {
  // @@protoc_insertion_point(field_add:CDOTAOverview.ServersByRegion.Host.servers)
  return servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host_Server >*
CDOTAOverview_ServersByRegion_Host::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAOverview.ServersByRegion.Host.servers)
  return &servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host_Server >&
CDOTAOverview_ServersByRegion_Host::servers() const {
  // @@protoc_insertion_point(field_list:CDOTAOverview.ServersByRegion.Host.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CDOTAOverview_ServersByRegion

// optional int32 region = 1;
inline bool CDOTAOverview_ServersByRegion::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAOverview_ServersByRegion::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAOverview_ServersByRegion::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAOverview_ServersByRegion::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 CDOTAOverview_ServersByRegion::region() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.region)
  return region_;
}
inline void CDOTAOverview_ServersByRegion::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.region)
}

// optional int32 game_servers_in_use = 2;
inline bool CDOTAOverview_ServersByRegion::has_game_servers_in_use() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAOverview_ServersByRegion::set_has_game_servers_in_use() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAOverview_ServersByRegion::clear_has_game_servers_in_use() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAOverview_ServersByRegion::clear_game_servers_in_use() {
  game_servers_in_use_ = 0;
  clear_has_game_servers_in_use();
}
inline ::google::protobuf::int32 CDOTAOverview_ServersByRegion::game_servers_in_use() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.game_servers_in_use)
  return game_servers_in_use_;
}
inline void CDOTAOverview_ServersByRegion::set_game_servers_in_use(::google::protobuf::int32 value) {
  set_has_game_servers_in_use();
  game_servers_in_use_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.game_servers_in_use)
}

// optional int32 game_servers_available = 3;
inline bool CDOTAOverview_ServersByRegion::has_game_servers_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAOverview_ServersByRegion::set_has_game_servers_available() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAOverview_ServersByRegion::clear_has_game_servers_available() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAOverview_ServersByRegion::clear_game_servers_available() {
  game_servers_available_ = 0;
  clear_has_game_servers_available();
}
inline ::google::protobuf::int32 CDOTAOverview_ServersByRegion::game_servers_available() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.game_servers_available)
  return game_servers_available_;
}
inline void CDOTAOverview_ServersByRegion::set_game_servers_available(::google::protobuf::int32 value) {
  set_has_game_servers_available();
  game_servers_available_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.game_servers_available)
}

// optional int32 proxy_servers_in_use = 4;
inline bool CDOTAOverview_ServersByRegion::has_proxy_servers_in_use() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAOverview_ServersByRegion::set_has_proxy_servers_in_use() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAOverview_ServersByRegion::clear_has_proxy_servers_in_use() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAOverview_ServersByRegion::clear_proxy_servers_in_use() {
  proxy_servers_in_use_ = 0;
  clear_has_proxy_servers_in_use();
}
inline ::google::protobuf::int32 CDOTAOverview_ServersByRegion::proxy_servers_in_use() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.proxy_servers_in_use)
  return proxy_servers_in_use_;
}
inline void CDOTAOverview_ServersByRegion::set_proxy_servers_in_use(::google::protobuf::int32 value) {
  set_has_proxy_servers_in_use();
  proxy_servers_in_use_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.proxy_servers_in_use)
}

// optional int32 proxy_servers_available = 5;
inline bool CDOTAOverview_ServersByRegion::has_proxy_servers_available() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAOverview_ServersByRegion::set_has_proxy_servers_available() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAOverview_ServersByRegion::clear_has_proxy_servers_available() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAOverview_ServersByRegion::clear_proxy_servers_available() {
  proxy_servers_available_ = 0;
  clear_has_proxy_servers_available();
}
inline ::google::protobuf::int32 CDOTAOverview_ServersByRegion::proxy_servers_available() const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.proxy_servers_available)
  return proxy_servers_available_;
}
inline void CDOTAOverview_ServersByRegion::set_proxy_servers_available(::google::protobuf::int32 value) {
  set_has_proxy_servers_available();
  proxy_servers_available_ = value;
  // @@protoc_insertion_point(field_set:CDOTAOverview.ServersByRegion.proxy_servers_available)
}

// repeated .CDOTAOverview.ServersByRegion.Host hosts = 6;
inline int CDOTAOverview_ServersByRegion::hosts_size() const {
  return hosts_.size();
}
inline void CDOTAOverview_ServersByRegion::clear_hosts() {
  hosts_.Clear();
}
inline const ::CDOTAOverview_ServersByRegion_Host& CDOTAOverview_ServersByRegion::hosts(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.ServersByRegion.hosts)
  return hosts_.Get(index);
}
inline ::CDOTAOverview_ServersByRegion_Host* CDOTAOverview_ServersByRegion::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAOverview.ServersByRegion.hosts)
  return hosts_.Mutable(index);
}
inline ::CDOTAOverview_ServersByRegion_Host* CDOTAOverview_ServersByRegion::add_hosts() {
  // @@protoc_insertion_point(field_add:CDOTAOverview.ServersByRegion.hosts)
  return hosts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host >*
CDOTAOverview_ServersByRegion::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAOverview.ServersByRegion.hosts)
  return &hosts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion_Host >&
CDOTAOverview_ServersByRegion::hosts() const {
  // @@protoc_insertion_point(field_list:CDOTAOverview.ServersByRegion.hosts)
  return hosts_;
}

// -------------------------------------------------------------------

// CDOTAOverview

// repeated .CDOTAOverview.PlayersByRegion players_by_region = 1;
inline int CDOTAOverview::players_by_region_size() const {
  return players_by_region_.size();
}
inline void CDOTAOverview::clear_players_by_region() {
  players_by_region_.Clear();
}
inline const ::CDOTAOverview_PlayersByRegion& CDOTAOverview::players_by_region(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.players_by_region)
  return players_by_region_.Get(index);
}
inline ::CDOTAOverview_PlayersByRegion* CDOTAOverview::mutable_players_by_region(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAOverview.players_by_region)
  return players_by_region_.Mutable(index);
}
inline ::CDOTAOverview_PlayersByRegion* CDOTAOverview::add_players_by_region() {
  // @@protoc_insertion_point(field_add:CDOTAOverview.players_by_region)
  return players_by_region_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_PlayersByRegion >*
CDOTAOverview::mutable_players_by_region() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAOverview.players_by_region)
  return &players_by_region_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_PlayersByRegion >&
CDOTAOverview::players_by_region() const {
  // @@protoc_insertion_point(field_list:CDOTAOverview.players_by_region)
  return players_by_region_;
}

// repeated .CDOTAOverview.ServersByRegion game_servers_by_region = 2;
inline int CDOTAOverview::game_servers_by_region_size() const {
  return game_servers_by_region_.size();
}
inline void CDOTAOverview::clear_game_servers_by_region() {
  game_servers_by_region_.Clear();
}
inline const ::CDOTAOverview_ServersByRegion& CDOTAOverview::game_servers_by_region(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAOverview.game_servers_by_region)
  return game_servers_by_region_.Get(index);
}
inline ::CDOTAOverview_ServersByRegion* CDOTAOverview::mutable_game_servers_by_region(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAOverview.game_servers_by_region)
  return game_servers_by_region_.Mutable(index);
}
inline ::CDOTAOverview_ServersByRegion* CDOTAOverview::add_game_servers_by_region() {
  // @@protoc_insertion_point(field_add:CDOTAOverview.game_servers_by_region)
  return game_servers_by_region_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion >*
CDOTAOverview::mutable_game_servers_by_region() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAOverview.game_servers_by_region)
  return &game_servers_by_region_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAOverview_ServersByRegion >&
CDOTAOverview::game_servers_by_region() const {
  // @@protoc_insertion_point(field_list:CDOTAOverview.game_servers_by_region)
  return game_servers_by_region_;
}

// -------------------------------------------------------------------

// CMsgSetShowcaseHero

// optional uint32 showcase_hero_id = 1;
inline bool CMsgSetShowcaseHero::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSetShowcaseHero::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSetShowcaseHero::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSetShowcaseHero::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
inline ::google::protobuf::uint32 CMsgSetShowcaseHero::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetShowcaseHero.showcase_hero_id)
  return showcase_hero_id_;
}
inline void CMsgSetShowcaseHero::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSetShowcaseHero.showcase_hero_id)
}

// -------------------------------------------------------------------

// CMsgSetFeaturedItems

// repeated uint64 featured_item_id = 1;
inline int CMsgSetFeaturedItems::featured_item_id_size() const {
  return featured_item_id_.size();
}
inline void CMsgSetFeaturedItems::clear_featured_item_id() {
  featured_item_id_.Clear();
}
inline ::google::protobuf::uint64 CMsgSetFeaturedItems::featured_item_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSetFeaturedItems.featured_item_id)
  return featured_item_id_.Get(index);
}
inline void CMsgSetFeaturedItems::set_featured_item_id(int index, ::google::protobuf::uint64 value) {
  featured_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSetFeaturedItems.featured_item_id)
}
inline void CMsgSetFeaturedItems::add_featured_item_id(::google::protobuf::uint64 value) {
  featured_item_id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgSetFeaturedItems.featured_item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgSetFeaturedItems::featured_item_id() const {
  // @@protoc_insertion_point(field_list:CMsgSetFeaturedItems.featured_item_id)
  return featured_item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgSetFeaturedItems::mutable_featured_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSetFeaturedItems.featured_item_id)
  return &featured_item_id_;
}

// -------------------------------------------------------------------

// CMsgDOTAFeaturedItems

// optional uint32 account_id = 1;
inline bool CMsgDOTAFeaturedItems::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFeaturedItems::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFeaturedItems::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFeaturedItems::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFeaturedItems::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItems.account_id)
  return account_id_;
}
inline void CMsgDOTAFeaturedItems::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItems.account_id)
}

// repeated uint64 featured_item_id = 2;
inline int CMsgDOTAFeaturedItems::featured_item_id_size() const {
  return featured_item_id_.size();
}
inline void CMsgDOTAFeaturedItems::clear_featured_item_id() {
  featured_item_id_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAFeaturedItems::featured_item_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItems.featured_item_id)
  return featured_item_id_.Get(index);
}
inline void CMsgDOTAFeaturedItems::set_featured_item_id(int index, ::google::protobuf::uint64 value) {
  featured_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItems.featured_item_id)
}
inline void CMsgDOTAFeaturedItems::add_featured_item_id(::google::protobuf::uint64 value) {
  featured_item_id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFeaturedItems.featured_item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAFeaturedItems::featured_item_id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFeaturedItems.featured_item_id)
  return featured_item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAFeaturedItems::mutable_featured_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFeaturedItems.featured_item_id)
  return &featured_item_id_;
}

// repeated bytes object_data = 3;
inline int CMsgDOTAFeaturedItems::object_data_size() const {
  return object_data_.size();
}
inline void CMsgDOTAFeaturedItems::clear_object_data() {
  object_data_.Clear();
}
inline const ::std::string& CMsgDOTAFeaturedItems::object_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItems.object_data)
  return object_data_.Get(index);
}
inline ::std::string* CMsgDOTAFeaturedItems::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFeaturedItems.object_data)
  return object_data_.Mutable(index);
}
inline void CMsgDOTAFeaturedItems::set_object_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItems.object_data)
  object_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CMsgDOTAFeaturedItems::set_object_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItems.object_data)
  object_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CMsgDOTAFeaturedItems::set_object_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFeaturedItems.object_data)
}
inline void CMsgDOTAFeaturedItems::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFeaturedItems.object_data)
}
inline ::std::string* CMsgDOTAFeaturedItems::add_object_data() {
  // @@protoc_insertion_point(field_add_mutable:CMsgDOTAFeaturedItems.object_data)
  return object_data_.Add();
}
inline void CMsgDOTAFeaturedItems::add_object_data(const ::std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFeaturedItems.object_data)
}
#if LANG_CXX11
inline void CMsgDOTAFeaturedItems::add_object_data(::std::string&& value) {
  object_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgDOTAFeaturedItems.object_data)
}
#endif
inline void CMsgDOTAFeaturedItems::add_object_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgDOTAFeaturedItems.object_data)
}
inline void CMsgDOTAFeaturedItems::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgDOTAFeaturedItems.object_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgDOTAFeaturedItems::object_data() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFeaturedItems.object_data)
  return object_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgDOTAFeaturedItems::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFeaturedItems.object_data)
  return &object_data_;
}

// -------------------------------------------------------------------

// CMsgDOTAFeaturedItemsRequest

// optional uint32 account_id = 1;
inline bool CMsgDOTAFeaturedItemsRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFeaturedItemsRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFeaturedItemsRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFeaturedItemsRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFeaturedItemsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItemsRequest.account_id)
  return account_id_;
}
inline void CMsgDOTAFeaturedItemsRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItemsRequest.account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFeaturedItemsResponse

// optional .CMsgDOTAFeaturedItems featured_items = 1;
inline bool CMsgDOTAFeaturedItemsResponse::has_featured_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFeaturedItemsResponse::set_has_featured_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFeaturedItemsResponse::clear_has_featured_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFeaturedItemsResponse::clear_featured_items() {
  if (featured_items_ != NULL) featured_items_->Clear();
  clear_has_featured_items();
}
inline const ::CMsgDOTAFeaturedItems& CMsgDOTAFeaturedItemsResponse::featured_items() const {
  const ::CMsgDOTAFeaturedItems* p = featured_items_;
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItemsResponse.featured_items)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAFeaturedItems*>(
      &::_CMsgDOTAFeaturedItems_default_instance_);
}
inline ::CMsgDOTAFeaturedItems* CMsgDOTAFeaturedItemsResponse::release_featured_items() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFeaturedItemsResponse.featured_items)
  clear_has_featured_items();
  ::CMsgDOTAFeaturedItems* temp = featured_items_;
  featured_items_ = NULL;
  return temp;
}
inline ::CMsgDOTAFeaturedItems* CMsgDOTAFeaturedItemsResponse::mutable_featured_items() {
  set_has_featured_items();
  if (featured_items_ == NULL) {
    featured_items_ = new ::CMsgDOTAFeaturedItems;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFeaturedItemsResponse.featured_items)
  return featured_items_;
}
inline void CMsgDOTAFeaturedItemsResponse::set_allocated_featured_items(::CMsgDOTAFeaturedItems* featured_items) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete featured_items_;
  }
  if (featured_items) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      featured_items = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, featured_items, submessage_arena);
    }
    set_has_featured_items();
  } else {
    clear_has_featured_items();
  }
  featured_items_ = featured_items;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFeaturedItemsResponse.featured_items)
}

// optional uint32 result = 2 [default = 2];
inline bool CMsgDOTAFeaturedItemsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAFeaturedItemsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAFeaturedItemsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAFeaturedItemsResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgDOTAFeaturedItemsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFeaturedItemsResponse.result)
  return result_;
}
inline void CMsgDOTAFeaturedItemsResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFeaturedItemsResponse.result)
}

// -------------------------------------------------------------------

// CMsgRequestLeagueInfo

// -------------------------------------------------------------------

// CLeague

// optional uint32 leagueid = 1;
inline bool CLeague::has_leagueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLeague::set_has_leagueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLeague::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLeague::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CLeague::leagueid() const {
  // @@protoc_insertion_point(field_get:CLeague.leagueid)
  return leagueid_;
}
inline void CLeague::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CLeague.leagueid)
}

// optional bool live = 2;
inline bool CLeague::has_live() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLeague::set_has_live() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLeague::clear_has_live() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLeague::clear_live() {
  live_ = false;
  clear_has_live();
}
inline bool CLeague::live() const {
  // @@protoc_insertion_point(field_get:CLeague.live)
  return live_;
}
inline void CLeague::set_live(bool value) {
  set_has_live();
  live_ = value;
  // @@protoc_insertion_point(field_set:CLeague.live)
}

// optional bool freeleague = 3;
inline bool CLeague::has_freeleague() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLeague::set_has_freeleague() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLeague::clear_has_freeleague() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLeague::clear_freeleague() {
  freeleague_ = false;
  clear_has_freeleague();
}
inline bool CLeague::freeleague() const {
  // @@protoc_insertion_point(field_get:CLeague.freeleague)
  return freeleague_;
}
inline void CLeague::set_freeleague(bool value) {
  set_has_freeleague();
  freeleague_ = value;
  // @@protoc_insertion_point(field_set:CLeague.freeleague)
}

// optional fixed32 lastgametime = 4;
inline bool CLeague::has_lastgametime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLeague::set_has_lastgametime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLeague::clear_has_lastgametime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLeague::clear_lastgametime() {
  lastgametime_ = 0u;
  clear_has_lastgametime();
}
inline ::google::protobuf::uint32 CLeague::lastgametime() const {
  // @@protoc_insertion_point(field_get:CLeague.lastgametime)
  return lastgametime_;
}
inline void CLeague::set_lastgametime(::google::protobuf::uint32 value) {
  set_has_lastgametime();
  lastgametime_ = value;
  // @@protoc_insertion_point(field_set:CLeague.lastgametime)
}

// -------------------------------------------------------------------

// CMsgResponseLeagueInfo

// repeated .CLeague leagues = 1;
inline int CMsgResponseLeagueInfo::leagues_size() const {
  return leagues_.size();
}
inline void CMsgResponseLeagueInfo::clear_leagues() {
  leagues_.Clear();
}
inline const ::CLeague& CMsgResponseLeagueInfo::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgResponseLeagueInfo.leagues)
  return leagues_.Get(index);
}
inline ::CLeague* CMsgResponseLeagueInfo::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgResponseLeagueInfo.leagues)
  return leagues_.Mutable(index);
}
inline ::CLeague* CMsgResponseLeagueInfo::add_leagues() {
  // @@protoc_insertion_point(field_add:CMsgResponseLeagueInfo.leagues)
  return leagues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CLeague >*
CMsgResponseLeagueInfo::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgResponseLeagueInfo.leagues)
  return &leagues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLeague >&
CMsgResponseLeagueInfo::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgResponseLeagueInfo.leagues)
  return leagues_;
}

// -------------------------------------------------------------------

// CMsgTournamentItemEvent

// optional fixed32 killer_account_id = 1;
inline bool CMsgTournamentItemEvent::has_killer_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_killer_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTournamentItemEvent::clear_has_killer_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTournamentItemEvent::clear_killer_account_id() {
  killer_account_id_ = 0u;
  clear_has_killer_account_id();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::killer_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.killer_account_id)
  return killer_account_id_;
}
inline void CMsgTournamentItemEvent::set_killer_account_id(::google::protobuf::uint32 value) {
  set_has_killer_account_id();
  killer_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.killer_account_id)
}

// optional fixed32 victim_account_id = 2;
inline bool CMsgTournamentItemEvent::has_victim_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_victim_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTournamentItemEvent::clear_has_victim_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTournamentItemEvent::clear_victim_account_id() {
  victim_account_id_ = 0u;
  clear_has_victim_account_id();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::victim_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.victim_account_id)
  return victim_account_id_;
}
inline void CMsgTournamentItemEvent::set_victim_account_id(::google::protobuf::uint32 value) {
  set_has_victim_account_id();
  victim_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.victim_account_id)
}

// optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTournamentItemEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTournamentItemEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.event_type)
  return static_cast< ::DOTA_TournamentEvents >(event_type_);
}
inline void CMsgTournamentItemEvent::set_event_type(::DOTA_TournamentEvents value) {
  assert(::DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.event_type)
}

// optional int32 tv_delay = 4;
inline bool CMsgTournamentItemEvent::has_tv_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_tv_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTournamentItemEvent::clear_has_tv_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTournamentItemEvent::clear_tv_delay() {
  tv_delay_ = 0;
  clear_has_tv_delay();
}
inline ::google::protobuf::int32 CMsgTournamentItemEvent::tv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.tv_delay)
  return tv_delay_;
}
inline void CMsgTournamentItemEvent::set_tv_delay(::google::protobuf::int32 value) {
  set_has_tv_delay();
  tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.tv_delay)
}

// optional int32 dota_time = 5;
inline bool CMsgTournamentItemEvent::has_dota_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_dota_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTournamentItemEvent::clear_has_dota_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTournamentItemEvent::clear_dota_time() {
  dota_time_ = 0;
  clear_has_dota_time();
}
inline ::google::protobuf::int32 CMsgTournamentItemEvent::dota_time() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.dota_time)
  return dota_time_;
}
inline void CMsgTournamentItemEvent::set_dota_time(::google::protobuf::int32 value) {
  set_has_dota_time();
  dota_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.dota_time)
}

// optional float replay_time = 6;
inline bool CMsgTournamentItemEvent::has_replay_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_replay_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTournamentItemEvent::clear_has_replay_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTournamentItemEvent::clear_replay_time() {
  replay_time_ = 0;
  clear_has_replay_time();
}
inline float CMsgTournamentItemEvent::replay_time() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.replay_time)
  return replay_time_;
}
inline void CMsgTournamentItemEvent::set_replay_time(float value) {
  set_has_replay_time();
  replay_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.replay_time)
}

// optional string loot_list = 7;
inline bool CMsgTournamentItemEvent::has_loot_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_loot_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTournamentItemEvent::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTournamentItemEvent::clear_loot_list() {
  loot_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loot_list();
}
inline const ::std::string& CMsgTournamentItemEvent::loot_list() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.loot_list)
  return loot_list_.GetNoArena();
}
inline void CMsgTournamentItemEvent::set_loot_list(const ::std::string& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.loot_list)
}
#if LANG_CXX11
inline void CMsgTournamentItemEvent::set_loot_list(::std::string&& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgTournamentItemEvent.loot_list)
}
#endif
inline void CMsgTournamentItemEvent::set_loot_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgTournamentItemEvent.loot_list)
}
inline void CMsgTournamentItemEvent::set_loot_list(const char* value, size_t size) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgTournamentItemEvent.loot_list)
}
inline ::std::string* CMsgTournamentItemEvent::mutable_loot_list() {
  set_has_loot_list();
  // @@protoc_insertion_point(field_mutable:CMsgTournamentItemEvent.loot_list)
  return loot_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgTournamentItemEvent::release_loot_list() {
  // @@protoc_insertion_point(field_release:CMsgTournamentItemEvent.loot_list)
  clear_has_loot_list();
  return loot_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgTournamentItemEvent::set_allocated_loot_list(::std::string* loot_list) {
  if (loot_list != NULL) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
  loot_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loot_list);
  // @@protoc_insertion_point(field_set_allocated:CMsgTournamentItemEvent.loot_list)
}

// optional uint32 event_team = 8;
inline bool CMsgTournamentItemEvent::has_event_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_event_team() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTournamentItemEvent::clear_has_event_team() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTournamentItemEvent::clear_event_team() {
  event_team_ = 0u;
  clear_has_event_team();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::event_team() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.event_team)
  return event_team_;
}
inline void CMsgTournamentItemEvent::set_event_team(::google::protobuf::uint32 value) {
  set_has_event_team();
  event_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.event_team)
}

// optional uint32 multi_kill_count = 9;
inline bool CMsgTournamentItemEvent::has_multi_kill_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_multi_kill_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTournamentItemEvent::clear_has_multi_kill_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTournamentItemEvent::clear_multi_kill_count() {
  multi_kill_count_ = 0u;
  clear_has_multi_kill_count();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::multi_kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.multi_kill_count)
  return multi_kill_count_;
}
inline void CMsgTournamentItemEvent::set_multi_kill_count(::google::protobuf::uint32 value) {
  set_has_multi_kill_count();
  multi_kill_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.multi_kill_count)
}

// optional uint32 winner_score = 10;
inline bool CMsgTournamentItemEvent::has_winner_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_winner_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgTournamentItemEvent::clear_has_winner_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgTournamentItemEvent::clear_winner_score() {
  winner_score_ = 0u;
  clear_has_winner_score();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::winner_score() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.winner_score)
  return winner_score_;
}
inline void CMsgTournamentItemEvent::set_winner_score(::google::protobuf::uint32 value) {
  set_has_winner_score();
  winner_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.winner_score)
}

// optional uint32 loser_score = 11;
inline bool CMsgTournamentItemEvent::has_loser_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_loser_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgTournamentItemEvent::clear_has_loser_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgTournamentItemEvent::clear_loser_score() {
  loser_score_ = 0u;
  clear_has_loser_score();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::loser_score() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.loser_score)
  return loser_score_;
}
inline void CMsgTournamentItemEvent::set_loser_score(::google::protobuf::uint32 value) {
  set_has_loser_score();
  loser_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.loser_score)
}

// -------------------------------------------------------------------

// CMsgTournamentItemEventResponse

// optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEventResponse::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTournamentItemEventResponse::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTournamentItemEventResponse::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEventResponse::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEventResponse.event_type)
  return static_cast< ::DOTA_TournamentEvents >(event_type_);
}
inline void CMsgTournamentItemEventResponse::set_event_type(::DOTA_TournamentEvents value) {
  assert(::DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEventResponse.event_type)
}

// optional string winner_name = 2;
inline bool CMsgTournamentItemEventResponse::has_winner_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_winner_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTournamentItemEventResponse::clear_has_winner_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTournamentItemEventResponse::clear_winner_name() {
  winner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winner_name();
}
inline const ::std::string& CMsgTournamentItemEventResponse::winner_name() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEventResponse.winner_name)
  return winner_name_.GetNoArena();
}
inline void CMsgTournamentItemEventResponse::set_winner_name(const ::std::string& value) {
  set_has_winner_name();
  winner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEventResponse.winner_name)
}
#if LANG_CXX11
inline void CMsgTournamentItemEventResponse::set_winner_name(::std::string&& value) {
  set_has_winner_name();
  winner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgTournamentItemEventResponse.winner_name)
}
#endif
inline void CMsgTournamentItemEventResponse::set_winner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_winner_name();
  winner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgTournamentItemEventResponse.winner_name)
}
inline void CMsgTournamentItemEventResponse::set_winner_name(const char* value, size_t size) {
  set_has_winner_name();
  winner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgTournamentItemEventResponse.winner_name)
}
inline ::std::string* CMsgTournamentItemEventResponse::mutable_winner_name() {
  set_has_winner_name();
  // @@protoc_insertion_point(field_mutable:CMsgTournamentItemEventResponse.winner_name)
  return winner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgTournamentItemEventResponse::release_winner_name() {
  // @@protoc_insertion_point(field_release:CMsgTournamentItemEventResponse.winner_name)
  clear_has_winner_name();
  return winner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgTournamentItemEventResponse::set_allocated_winner_name(::std::string* winner_name) {
  if (winner_name != NULL) {
    set_has_winner_name();
  } else {
    clear_has_winner_name();
  }
  winner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winner_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgTournamentItemEventResponse.winner_name)
}

// optional bool tv_delayed = 3;
inline bool CMsgTournamentItemEventResponse::has_tv_delayed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_tv_delayed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTournamentItemEventResponse::clear_has_tv_delayed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTournamentItemEventResponse::clear_tv_delayed() {
  tv_delayed_ = false;
  clear_has_tv_delayed();
}
inline bool CMsgTournamentItemEventResponse::tv_delayed() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEventResponse.tv_delayed)
  return tv_delayed_;
}
inline void CMsgTournamentItemEventResponse::set_tv_delayed(bool value) {
  set_has_tv_delayed();
  tv_delayed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEventResponse.tv_delayed)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchVotes_PlayerVote

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatchVotes_PlayerVote::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchVotes_PlayerVote::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchVotes_PlayerVote::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchVotes_PlayerVote::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchVotes_PlayerVote::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchVotes.PlayerVote.account_id)
  return account_id_;
}
inline void CMsgDOTAMatchVotes_PlayerVote::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchVotes.PlayerVote.account_id)
}

// optional uint32 vote = 2;
inline bool CMsgDOTAMatchVotes_PlayerVote::has_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchVotes_PlayerVote::set_has_vote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchVotes_PlayerVote::clear_has_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchVotes_PlayerVote::clear_vote() {
  vote_ = 0u;
  clear_has_vote();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchVotes_PlayerVote::vote() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchVotes.PlayerVote.vote)
  return vote_;
}
inline void CMsgDOTAMatchVotes_PlayerVote::set_vote(::google::protobuf::uint32 value) {
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchVotes.PlayerVote.vote)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchVotes

// optional uint32 match_id = 1;
inline bool CMsgDOTAMatchVotes::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchVotes::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchVotes::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchVotes::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchVotes::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchVotes.match_id)
  return match_id_;
}
inline void CMsgDOTAMatchVotes::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchVotes.match_id)
}

// repeated .CMsgDOTAMatchVotes.PlayerVote votes = 2;
inline int CMsgDOTAMatchVotes::votes_size() const {
  return votes_.size();
}
inline void CMsgDOTAMatchVotes::clear_votes() {
  votes_.Clear();
}
inline const ::CMsgDOTAMatchVotes_PlayerVote& CMsgDOTAMatchVotes::votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchVotes.votes)
  return votes_.Get(index);
}
inline ::CMsgDOTAMatchVotes_PlayerVote* CMsgDOTAMatchVotes::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchVotes.votes)
  return votes_.Mutable(index);
}
inline ::CMsgDOTAMatchVotes_PlayerVote* CMsgDOTAMatchVotes::add_votes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchVotes.votes)
  return votes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchVotes_PlayerVote >*
CMsgDOTAMatchVotes::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchVotes.votes)
  return &votes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchVotes_PlayerVote >&
CMsgDOTAMatchVotes::votes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchVotes.votes)
  return votes_;
}

// -------------------------------------------------------------------

// CMsgCastMatchVote

// optional uint32 match_id = 1;
inline bool CMsgCastMatchVote::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgCastMatchVote::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgCastMatchVote::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgCastMatchVote::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgCastMatchVote::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgCastMatchVote.match_id)
  return match_id_;
}
inline void CMsgCastMatchVote::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgCastMatchVote.match_id)
}

// optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
inline bool CMsgCastMatchVote::has_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgCastMatchVote::set_has_vote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgCastMatchVote::clear_has_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgCastMatchVote::clear_vote() {
  vote_ = 0;
  clear_has_vote();
}
inline ::DOTAMatchVote CMsgCastMatchVote::vote() const {
  // @@protoc_insertion_point(field_get:CMsgCastMatchVote.vote)
  return static_cast< ::DOTAMatchVote >(vote_);
}
inline void CMsgCastMatchVote::set_vote(::DOTAMatchVote value) {
  assert(::DOTAMatchVote_IsValid(value));
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:CMsgCastMatchVote.vote)
}

// -------------------------------------------------------------------

// CMsgRetrieveMatchVote

// optional uint32 match_id = 1;
inline bool CMsgRetrieveMatchVote::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRetrieveMatchVote::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRetrieveMatchVote::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRetrieveMatchVote::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgRetrieveMatchVote::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgRetrieveMatchVote.match_id)
  return match_id_;
}
inline void CMsgRetrieveMatchVote::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgRetrieveMatchVote.match_id)
}

// optional uint32 incremental = 2;
inline bool CMsgRetrieveMatchVote::has_incremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRetrieveMatchVote::set_has_incremental() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRetrieveMatchVote::clear_has_incremental() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRetrieveMatchVote::clear_incremental() {
  incremental_ = 0u;
  clear_has_incremental();
}
inline ::google::protobuf::uint32 CMsgRetrieveMatchVote::incremental() const {
  // @@protoc_insertion_point(field_get:CMsgRetrieveMatchVote.incremental)
  return incremental_;
}
inline void CMsgRetrieveMatchVote::set_incremental(::google::protobuf::uint32 value) {
  set_has_incremental();
  incremental_ = value;
  // @@protoc_insertion_point(field_set:CMsgRetrieveMatchVote.incremental)
}

// -------------------------------------------------------------------

// CMsgMatchVoteResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgMatchVoteResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgMatchVoteResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgMatchVoteResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgMatchVoteResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgMatchVoteResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgMatchVoteResponse.eresult)
  return eresult_;
}
inline void CMsgMatchVoteResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgMatchVoteResponse.eresult)
}

// optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
inline bool CMsgMatchVoteResponse::has_vote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMatchVoteResponse::set_has_vote() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMatchVoteResponse::clear_has_vote() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMatchVoteResponse::clear_vote() {
  vote_ = 0;
  clear_has_vote();
}
inline ::DOTAMatchVote CMsgMatchVoteResponse::vote() const {
  // @@protoc_insertion_point(field_get:CMsgMatchVoteResponse.vote)
  return static_cast< ::DOTAMatchVote >(vote_);
}
inline void CMsgMatchVoteResponse::set_vote(::DOTAMatchVote value) {
  assert(::DOTAMatchVote_IsValid(value));
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:CMsgMatchVoteResponse.vote)
}

// optional uint32 positive_votes = 3;
inline bool CMsgMatchVoteResponse::has_positive_votes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgMatchVoteResponse::set_has_positive_votes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgMatchVoteResponse::clear_has_positive_votes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgMatchVoteResponse::clear_positive_votes() {
  positive_votes_ = 0u;
  clear_has_positive_votes();
}
inline ::google::protobuf::uint32 CMsgMatchVoteResponse::positive_votes() const {
  // @@protoc_insertion_point(field_get:CMsgMatchVoteResponse.positive_votes)
  return positive_votes_;
}
inline void CMsgMatchVoteResponse::set_positive_votes(::google::protobuf::uint32 value) {
  set_has_positive_votes();
  positive_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgMatchVoteResponse.positive_votes)
}

// optional uint32 negative_votes = 4;
inline bool CMsgMatchVoteResponse::has_negative_votes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgMatchVoteResponse::set_has_negative_votes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgMatchVoteResponse::clear_has_negative_votes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgMatchVoteResponse::clear_negative_votes() {
  negative_votes_ = 0u;
  clear_has_negative_votes();
}
inline ::google::protobuf::uint32 CMsgMatchVoteResponse::negative_votes() const {
  // @@protoc_insertion_point(field_get:CMsgMatchVoteResponse.negative_votes)
  return negative_votes_;
}
inline void CMsgMatchVoteResponse::set_negative_votes(::google::protobuf::uint32 value) {
  set_has_negative_votes();
  negative_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgMatchVoteResponse.negative_votes)
}

// -------------------------------------------------------------------

// CMsgTeamFanfare

// optional uint32 match_id = 1;
inline bool CMsgTeamFanfare::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTeamFanfare::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTeamFanfare::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTeamFanfare::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgTeamFanfare::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanfare.match_id)
  return match_id_;
}
inline void CMsgTeamFanfare::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgTeamFanfare.match_id)
}

// -------------------------------------------------------------------

// CMsgResponseTeamFanfare

// optional uint32 fanfare_goodguys = 1;
inline bool CMsgResponseTeamFanfare::has_fanfare_goodguys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgResponseTeamFanfare::set_has_fanfare_goodguys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgResponseTeamFanfare::clear_has_fanfare_goodguys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgResponseTeamFanfare::clear_fanfare_goodguys() {
  fanfare_goodguys_ = 0u;
  clear_has_fanfare_goodguys();
}
inline ::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_goodguys() const {
  // @@protoc_insertion_point(field_get:CMsgResponseTeamFanfare.fanfare_goodguys)
  return fanfare_goodguys_;
}
inline void CMsgResponseTeamFanfare::set_fanfare_goodguys(::google::protobuf::uint32 value) {
  set_has_fanfare_goodguys();
  fanfare_goodguys_ = value;
  // @@protoc_insertion_point(field_set:CMsgResponseTeamFanfare.fanfare_goodguys)
}

// optional uint32 fanfare_badguys = 2;
inline bool CMsgResponseTeamFanfare::has_fanfare_badguys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgResponseTeamFanfare::set_has_fanfare_badguys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgResponseTeamFanfare::clear_has_fanfare_badguys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgResponseTeamFanfare::clear_fanfare_badguys() {
  fanfare_badguys_ = 0u;
  clear_has_fanfare_badguys();
}
inline ::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_badguys() const {
  // @@protoc_insertion_point(field_get:CMsgResponseTeamFanfare.fanfare_badguys)
  return fanfare_badguys_;
}
inline void CMsgResponseTeamFanfare::set_fanfare_badguys(::google::protobuf::uint32 value) {
  set_has_fanfare_badguys();
  fanfare_badguys_ = value;
  // @@protoc_insertion_point(field_set:CMsgResponseTeamFanfare.fanfare_badguys)
}

// -------------------------------------------------------------------

// CMsgSpectatorConnect

// optional fixed64 spectator_id = 1;
inline bool CMsgSpectatorConnect::has_spectator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectatorConnect::set_has_spectator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectatorConnect::clear_has_spectator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectatorConnect::clear_spectator_id() {
  spectator_id_ = GOOGLE_ULONGLONG(0);
  clear_has_spectator_id();
}
inline ::google::protobuf::uint64 CMsgSpectatorConnect::spectator_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorConnect.spectator_id)
  return spectator_id_;
}
inline void CMsgSpectatorConnect::set_spectator_id(::google::protobuf::uint64 value) {
  set_has_spectator_id();
  spectator_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorConnect.spectator_id)
}

// -------------------------------------------------------------------

// CMsgSpectatorDisconnect

// optional fixed64 spectator_id = 1;
inline bool CMsgSpectatorDisconnect::has_spectator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectatorDisconnect::set_has_spectator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectatorDisconnect::clear_has_spectator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectatorDisconnect::clear_spectator_id() {
  spectator_id_ = GOOGLE_ULONGLONG(0);
  clear_has_spectator_id();
}
inline ::google::protobuf::uint64 CMsgSpectatorDisconnect::spectator_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorDisconnect.spectator_id)
  return spectator_id_;
}
inline void CMsgSpectatorDisconnect::set_spectator_id(::google::protobuf::uint64 value) {
  set_has_spectator_id();
  spectator_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorDisconnect.spectator_id)
}

// -------------------------------------------------------------------

// CMsgGameServerUploadSaveGame

// optional uint32 game_time = 1;
inline bool CMsgGameServerUploadSaveGame::has_game_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_game_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameServerUploadSaveGame::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CMsgGameServerUploadSaveGame::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.game_time)
  return game_time_;
}
inline void CMsgGameServerUploadSaveGame::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.game_time)
}

// optional bytes save_game_data = 2;
inline bool CMsgGameServerUploadSaveGame::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerUploadSaveGame::clear_save_game_data() {
  save_game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_data();
}
inline const ::std::string& CMsgGameServerUploadSaveGame::save_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.save_game_data)
  return save_game_data_.GetNoArena();
}
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.save_game_data)
}
#if LANG_CXX11
inline void CMsgGameServerUploadSaveGame::set_save_game_data(::std::string&& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameServerUploadSaveGame.save_game_data)
}
#endif
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameServerUploadSaveGame.save_game_data)
}
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameServerUploadSaveGame.save_game_data)
}
inline ::std::string* CMsgGameServerUploadSaveGame::mutable_save_game_data() {
  set_has_save_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerUploadSaveGame.save_game_data)
  return save_game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameServerUploadSaveGame::release_save_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameServerUploadSaveGame.save_game_data)
  clear_has_save_game_data();
  return save_game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameServerUploadSaveGame::set_allocated_save_game_data(::std::string* save_game_data) {
  if (save_game_data != NULL) {
    set_has_save_game_data();
  } else {
    clear_has_save_game_data();
  }
  save_game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerUploadSaveGame.save_game_data)
}

// optional uint64 lobby_id = 3;
inline bool CMsgGameServerUploadSaveGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameServerUploadSaveGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgGameServerUploadSaveGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.lobby_id)
  return lobby_id_;
}
inline void CMsgGameServerUploadSaveGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.lobby_id)
}

// repeated uint64 player_steam_ids = 4;
inline int CMsgGameServerUploadSaveGame::player_steam_ids_size() const {
  return player_steam_ids_.size();
}
inline void CMsgGameServerUploadSaveGame::clear_player_steam_ids() {
  player_steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgGameServerUploadSaveGame::player_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.player_steam_ids)
  return player_steam_ids_.Get(index);
}
inline void CMsgGameServerUploadSaveGame::set_player_steam_ids(int index, ::google::protobuf::uint64 value) {
  player_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.player_steam_ids)
}
inline void CMsgGameServerUploadSaveGame::add_player_steam_ids(::google::protobuf::uint64 value) {
  player_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGameServerUploadSaveGame.player_steam_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGameServerUploadSaveGame::player_steam_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerUploadSaveGame.player_steam_ids)
  return player_steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGameServerUploadSaveGame::mutable_player_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerUploadSaveGame.player_steam_ids)
  return &player_steam_ids_;
}

// -------------------------------------------------------------------

// CMsgGameServerSaveGameResult

// optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
inline bool CMsgGameServerSaveGameResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerSaveGameResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerSaveGameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerSaveGameResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::result() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerSaveGameResult.result)
  return static_cast< ::CMsgGameServerSaveGameResult_Result >(result_);
}
inline void CMsgGameServerSaveGameResult::set_result(::CMsgGameServerSaveGameResult_Result value) {
  assert(::CMsgGameServerSaveGameResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerSaveGameResult.result)
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGame

// optional uint32 save_id = 1;
inline bool CMsgGameServerGetLoadGame::has_save_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerGetLoadGame::set_has_save_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerGetLoadGame::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerGetLoadGame::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CMsgGameServerGetLoadGame::save_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerGetLoadGame.save_id)
  return save_id_;
}
inline void CMsgGameServerGetLoadGame::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGameServerGetLoadGame.save_id)
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGameResult

// optional bytes save_game_data = 1;
inline bool CMsgGameServerGetLoadGameResult::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerGetLoadGameResult::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerGetLoadGameResult::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerGetLoadGameResult::clear_save_game_data() {
  save_game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_data();
}
inline const ::std::string& CMsgGameServerGetLoadGameResult::save_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerGetLoadGameResult.save_game_data)
  return save_game_data_.GetNoArena();
}
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGameServerGetLoadGameResult.save_game_data)
}
#if LANG_CXX11
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(::std::string&& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGameServerGetLoadGameResult.save_game_data)
}
#endif
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGameServerGetLoadGameResult.save_game_data)
}
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGameServerGetLoadGameResult.save_game_data)
}
inline ::std::string* CMsgGameServerGetLoadGameResult::mutable_save_game_data() {
  set_has_save_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerGetLoadGameResult.save_game_data)
  return save_game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGameServerGetLoadGameResult::release_save_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameServerGetLoadGameResult.save_game_data)
  clear_has_save_game_data();
  return save_game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGameServerGetLoadGameResult::set_allocated_save_game_data(::std::string* save_game_data) {
  if (save_game_data != NULL) {
    set_has_save_game_data();
  } else {
    clear_has_save_game_data();
  }
  save_game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerGetLoadGameResult.save_game_data)
}

// -------------------------------------------------------------------

// CMsgCheckSpectatorOnly

// -------------------------------------------------------------------

// CMsgCheckSpectatorOnlyResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgCheckSpectatorOnlyResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgCheckSpectatorOnlyResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgCheckSpectatorOnlyResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgCheckSpectatorOnlyResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgCheckSpectatorOnlyResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgCheckSpectatorOnlyResponse.eresult)
  return eresult_;
}
inline void CMsgCheckSpectatorOnlyResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgCheckSpectatorOnlyResponse.eresult)
}

// optional bool spectator_only = 2;
inline bool CMsgCheckSpectatorOnlyResponse::has_spectator_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgCheckSpectatorOnlyResponse::set_has_spectator_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgCheckSpectatorOnlyResponse::clear_has_spectator_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgCheckSpectatorOnlyResponse::clear_spectator_only() {
  spectator_only_ = false;
  clear_has_spectator_only();
}
inline bool CMsgCheckSpectatorOnlyResponse::spectator_only() const {
  // @@protoc_insertion_point(field_get:CMsgCheckSpectatorOnlyResponse.spectator_only)
  return spectator_only_;
}
inline void CMsgCheckSpectatorOnlyResponse::set_spectator_only(bool value) {
  set_has_spectator_only();
  spectator_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgCheckSpectatorOnlyResponse.spectator_only)
}

// -------------------------------------------------------------------

// CMsgDOTAHallOfFame_FeaturedPlayer

// optional uint32 account_id = 1;
inline bool CMsgDOTAHallOfFame_FeaturedPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedPlayer.account_id)
  return account_id_;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedPlayer.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAHallOfFame_FeaturedPlayer::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedPlayer::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedPlayer.hero_id)
  return hero_id_;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedPlayer.hero_id)
}

// optional float average_scaled_metric = 3;
inline bool CMsgDOTAHallOfFame_FeaturedPlayer::has_average_scaled_metric() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_has_average_scaled_metric() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_has_average_scaled_metric() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_average_scaled_metric() {
  average_scaled_metric_ = 0;
  clear_has_average_scaled_metric();
}
inline float CMsgDOTAHallOfFame_FeaturedPlayer::average_scaled_metric() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedPlayer.average_scaled_metric)
  return average_scaled_metric_;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_average_scaled_metric(float value) {
  set_has_average_scaled_metric();
  average_scaled_metric_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedPlayer.average_scaled_metric)
}

// optional uint32 num_games = 4;
inline bool CMsgDOTAHallOfFame_FeaturedPlayer::has_num_games() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_has_num_games() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_has_num_games() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::clear_num_games() {
  num_games_ = 0u;
  clear_has_num_games();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedPlayer::num_games() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedPlayer.num_games)
  return num_games_;
}
inline void CMsgDOTAHallOfFame_FeaturedPlayer::set_num_games(::google::protobuf::uint32 value) {
  set_has_num_games();
  num_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedPlayer.num_games)
}

// -------------------------------------------------------------------

// CMsgDOTAHallOfFame_FeaturedFarmer

// optional uint32 account_id = 1;
inline bool CMsgDOTAHallOfFame_FeaturedFarmer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedFarmer::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedFarmer.account_id)
  return account_id_;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedFarmer.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAHallOfFame_FeaturedFarmer::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedFarmer::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedFarmer.hero_id)
  return hero_id_;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedFarmer.hero_id)
}

// optional uint32 gold_per_min = 3;
inline bool CMsgDOTAHallOfFame_FeaturedFarmer::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedFarmer::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedFarmer.gold_per_min)
  return gold_per_min_;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedFarmer.gold_per_min)
}

// optional uint32 match_id = 4;
inline bool CMsgDOTAHallOfFame_FeaturedFarmer::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame_FeaturedFarmer::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.FeaturedFarmer.match_id)
  return match_id_;
}
inline void CMsgDOTAHallOfFame_FeaturedFarmer::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.FeaturedFarmer.match_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHallOfFame

// optional uint32 week = 1;
inline bool CMsgDOTAHallOfFame::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHallOfFame::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHallOfFame::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHallOfFame::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFame::week() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.week)
  return week_;
}
inline void CMsgDOTAHallOfFame::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFame.week)
}

// repeated .CMsgDOTAHallOfFame.FeaturedPlayer featured_players = 2;
inline int CMsgDOTAHallOfFame::featured_players_size() const {
  return featured_players_.size();
}
inline void CMsgDOTAHallOfFame::clear_featured_players() {
  featured_players_.Clear();
}
inline const ::CMsgDOTAHallOfFame_FeaturedPlayer& CMsgDOTAHallOfFame::featured_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.featured_players)
  return featured_players_.Get(index);
}
inline ::CMsgDOTAHallOfFame_FeaturedPlayer* CMsgDOTAHallOfFame::mutable_featured_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAHallOfFame.featured_players)
  return featured_players_.Mutable(index);
}
inline ::CMsgDOTAHallOfFame_FeaturedPlayer* CMsgDOTAHallOfFame::add_featured_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAHallOfFame.featured_players)
  return featured_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAHallOfFame_FeaturedPlayer >*
CMsgDOTAHallOfFame::mutable_featured_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAHallOfFame.featured_players)
  return &featured_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAHallOfFame_FeaturedPlayer >&
CMsgDOTAHallOfFame::featured_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAHallOfFame.featured_players)
  return featured_players_;
}

// optional .CMsgDOTAHallOfFame.FeaturedFarmer featured_farmer = 3;
inline bool CMsgDOTAHallOfFame::has_featured_farmer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHallOfFame::set_has_featured_farmer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHallOfFame::clear_has_featured_farmer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHallOfFame::clear_featured_farmer() {
  if (featured_farmer_ != NULL) featured_farmer_->Clear();
  clear_has_featured_farmer();
}
inline const ::CMsgDOTAHallOfFame_FeaturedFarmer& CMsgDOTAHallOfFame::featured_farmer() const {
  const ::CMsgDOTAHallOfFame_FeaturedFarmer* p = featured_farmer_;
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFame.featured_farmer)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAHallOfFame_FeaturedFarmer*>(
      &::_CMsgDOTAHallOfFame_FeaturedFarmer_default_instance_);
}
inline ::CMsgDOTAHallOfFame_FeaturedFarmer* CMsgDOTAHallOfFame::release_featured_farmer() {
  // @@protoc_insertion_point(field_release:CMsgDOTAHallOfFame.featured_farmer)
  clear_has_featured_farmer();
  ::CMsgDOTAHallOfFame_FeaturedFarmer* temp = featured_farmer_;
  featured_farmer_ = NULL;
  return temp;
}
inline ::CMsgDOTAHallOfFame_FeaturedFarmer* CMsgDOTAHallOfFame::mutable_featured_farmer() {
  set_has_featured_farmer();
  if (featured_farmer_ == NULL) {
    featured_farmer_ = new ::CMsgDOTAHallOfFame_FeaturedFarmer;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAHallOfFame.featured_farmer)
  return featured_farmer_;
}
inline void CMsgDOTAHallOfFame::set_allocated_featured_farmer(::CMsgDOTAHallOfFame_FeaturedFarmer* featured_farmer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete featured_farmer_;
  }
  if (featured_farmer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      featured_farmer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, featured_farmer, submessage_arena);
    }
    set_has_featured_farmer();
  } else {
    clear_has_featured_farmer();
  }
  featured_farmer_ = featured_farmer;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAHallOfFame.featured_farmer)
}

// -------------------------------------------------------------------

// CMsgDOTAHallOfFameRequest

// optional uint32 week = 1;
inline bool CMsgDOTAHallOfFameRequest::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHallOfFameRequest::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHallOfFameRequest::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHallOfFameRequest::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFameRequest::week() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFameRequest.week)
  return week_;
}
inline void CMsgDOTAHallOfFameRequest::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFameRequest.week)
}

// -------------------------------------------------------------------

// CMsgDOTAHallOfFameResponse

// optional .CMsgDOTAHallOfFame hall_of_fame = 1;
inline bool CMsgDOTAHallOfFameResponse::has_hall_of_fame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHallOfFameResponse::set_has_hall_of_fame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHallOfFameResponse::clear_has_hall_of_fame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHallOfFameResponse::clear_hall_of_fame() {
  if (hall_of_fame_ != NULL) hall_of_fame_->Clear();
  clear_has_hall_of_fame();
}
inline const ::CMsgDOTAHallOfFame& CMsgDOTAHallOfFameResponse::hall_of_fame() const {
  const ::CMsgDOTAHallOfFame* p = hall_of_fame_;
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFameResponse.hall_of_fame)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAHallOfFame*>(
      &::_CMsgDOTAHallOfFame_default_instance_);
}
inline ::CMsgDOTAHallOfFame* CMsgDOTAHallOfFameResponse::release_hall_of_fame() {
  // @@protoc_insertion_point(field_release:CMsgDOTAHallOfFameResponse.hall_of_fame)
  clear_has_hall_of_fame();
  ::CMsgDOTAHallOfFame* temp = hall_of_fame_;
  hall_of_fame_ = NULL;
  return temp;
}
inline ::CMsgDOTAHallOfFame* CMsgDOTAHallOfFameResponse::mutable_hall_of_fame() {
  set_has_hall_of_fame();
  if (hall_of_fame_ == NULL) {
    hall_of_fame_ = new ::CMsgDOTAHallOfFame;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAHallOfFameResponse.hall_of_fame)
  return hall_of_fame_;
}
inline void CMsgDOTAHallOfFameResponse::set_allocated_hall_of_fame(::CMsgDOTAHallOfFame* hall_of_fame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hall_of_fame_;
  }
  if (hall_of_fame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hall_of_fame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hall_of_fame, submessage_arena);
    }
    set_has_hall_of_fame();
  } else {
    clear_has_hall_of_fame();
  }
  hall_of_fame_ = hall_of_fame;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAHallOfFameResponse.hall_of_fame)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgDOTAHallOfFameResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHallOfFameResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHallOfFameResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHallOfFameResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAHallOfFameResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHallOfFameResponse.eresult)
  return eresult_;
}
inline void CMsgDOTAHallOfFameResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHallOfFameResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTAGenerateDiretidePrizeList

// optional uint32 prize_list = 1;
inline bool CMsgDOTAGenerateDiretidePrizeList::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeList::prize_list() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenerateDiretidePrizeList.prize_list)
  return prize_list_;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGenerateDiretidePrizeList.prize_list)
}

// -------------------------------------------------------------------

// CMsgDOTAGenerateDiretidePrizeListResponse

// repeated uint32 item_defs = 1;
inline int CMsgDOTAGenerateDiretidePrizeListResponse::item_defs_size() const {
  return item_defs_.size();
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_item_defs() {
  item_defs_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return item_defs_.Get(index);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGenerateDiretidePrizeListResponse::item_defs() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return item_defs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return &item_defs_;
}

// repeated fixed64 steam_ids = 2;
inline int CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids_size() const {
  return steam_ids_.size();
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_steam_ids() {
  steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return steam_ids_.Get(index);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_steam_ids(int index, ::google::protobuf::uint64 value) {
  steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::add_steam_ids(::google::protobuf::uint64 value) {
  steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return &steam_ids_;
}

// optional uint32 prize_list = 3;
inline bool CMsgDOTAGenerateDiretidePrizeListResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::prize_list() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGenerateDiretidePrizeListResponse.prize_list)
  return prize_list_;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGenerateDiretidePrizeListResponse.prize_list)
}

// -------------------------------------------------------------------

// CMsgDOTARewardDiretidePrizes

// optional uint32 team = 1;
inline bool CMsgDOTARewardDiretidePrizes::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARewardDiretidePrizes::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARewardDiretidePrizes.team)
  return team_;
}
inline void CMsgDOTARewardDiretidePrizes::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARewardDiretidePrizes.team)
}

// optional uint32 prize_list = 2;
inline bool CMsgDOTARewardDiretidePrizes::has_prize_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARewardDiretidePrizes::set_has_prize_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::prize_list() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARewardDiretidePrizes.prize_list)
  return prize_list_;
}
inline void CMsgDOTARewardDiretidePrizes::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARewardDiretidePrizes.prize_list)
}

// -------------------------------------------------------------------

// CMsgDOTADiretidePrizesRewardedResponse

// optional uint32 prize_list = 1;
inline bool CMsgDOTADiretidePrizesRewardedResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTADiretidePrizesRewardedResponse::prize_list() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADiretidePrizesRewardedResponse.prize_list)
  return prize_list_;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADiretidePrizesRewardedResponse.prize_list)
}

// -------------------------------------------------------------------

// CMsgDOTADiretidePrizeResponse

// optional uint32 item_def = 1;
inline bool CMsgDOTADiretidePrizeResponse::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADiretidePrizeResponse::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADiretidePrizeResponse::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADiretidePrizeResponse::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
inline ::google::protobuf::uint32 CMsgDOTADiretidePrizeResponse::item_def() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADiretidePrizeResponse.item_def)
  return item_def_;
}
inline void CMsgDOTADiretidePrizeResponse::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADiretidePrizeResponse.item_def)
}

// optional uint32 prize_list = 2;
inline bool CMsgDOTADiretidePrizeResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTADiretidePrizeResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTADiretidePrizeResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTADiretidePrizeResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTADiretidePrizeResponse::prize_list() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADiretidePrizeResponse.prize_list)
  return prize_list_;
}
inline void CMsgDOTADiretidePrizeResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTADiretidePrizeResponse.prize_list)
}

// -------------------------------------------------------------------

// CMsgDOTAHalloweenHighScoreRequest

// optional int32 round = 1 [default = -1];
inline bool CMsgDOTAHalloweenHighScoreRequest::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHalloweenHighScoreRequest::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHalloweenHighScoreRequest::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHalloweenHighScoreRequest::clear_round() {
  round_ = -1;
  clear_has_round();
}
inline ::google::protobuf::int32 CMsgDOTAHalloweenHighScoreRequest::round() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHalloweenHighScoreRequest.round)
  return round_;
}
inline void CMsgDOTAHalloweenHighScoreRequest::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHalloweenHighScoreRequest.round)
}

// -------------------------------------------------------------------

// CMsgDOTAHalloweenHighScoreResponse

// optional uint32 score = 1;
inline bool CMsgDOTAHalloweenHighScoreResponse::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTAHalloweenHighScoreResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHalloweenHighScoreResponse.score)
  return score_;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHalloweenHighScoreResponse.score)
}

// optional .CMsgDOTAMatch match = 2;
inline bool CMsgDOTAHalloweenHighScoreResponse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_match() {
  if (match_ != NULL) match_->Clear();
  clear_has_match();
}
inline const ::CMsgDOTAMatch& CMsgDOTAHalloweenHighScoreResponse::match() const {
  const ::CMsgDOTAMatch* p = match_;
  // @@protoc_insertion_point(field_get:CMsgDOTAHalloweenHighScoreResponse.match)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAMatch*>(
      &::_CMsgDOTAMatch_default_instance_);
}
inline ::CMsgDOTAMatch* CMsgDOTAHalloweenHighScoreResponse::release_match() {
  // @@protoc_insertion_point(field_release:CMsgDOTAHalloweenHighScoreResponse.match)
  clear_has_match();
  ::CMsgDOTAMatch* temp = match_;
  match_ = NULL;
  return temp;
}
inline ::CMsgDOTAMatch* CMsgDOTAHalloweenHighScoreResponse::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::CMsgDOTAMatch;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAHalloweenHighScoreResponse.match)
  return match_;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_allocated_match(::CMsgDOTAMatch* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_;
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
  } else {
    clear_has_match();
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAHalloweenHighScoreResponse.match)
}

// optional uint32 eresult = 3;
inline bool CMsgDOTAHalloweenHighScoreResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAHalloweenHighScoreResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHalloweenHighScoreResponse.eresult)
  return eresult_;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHalloweenHighScoreResponse.eresult)
}

// optional int32 round = 4;
inline bool CMsgDOTAHalloweenHighScoreResponse::has_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_has_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_has_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAHalloweenHighScoreResponse::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 CMsgDOTAHalloweenHighScoreResponse::round() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHalloweenHighScoreResponse.round)
  return round_;
}
inline void CMsgDOTAHalloweenHighScoreResponse::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAHalloweenHighScoreResponse.round)
}

// -------------------------------------------------------------------

// CMsgDOTANotifyResetKeybindings

// optional uint32 keybind_template = 1;
inline bool CMsgDOTANotifyResetKeybindings::has_keybind_template() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTANotifyResetKeybindings::set_has_keybind_template() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTANotifyResetKeybindings::clear_has_keybind_template() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTANotifyResetKeybindings::clear_keybind_template() {
  keybind_template_ = 0u;
  clear_has_keybind_template();
}
inline ::google::protobuf::uint32 CMsgDOTANotifyResetKeybindings::keybind_template() const {
  // @@protoc_insertion_point(field_get:CMsgDOTANotifyResetKeybindings.keybind_template)
  return keybind_template_;
}
inline void CMsgDOTANotifyResetKeybindings::set_keybind_template(::google::protobuf::uint32 value) {
  set_has_keybind_template();
  keybind_template_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTANotifyResetKeybindings.keybind_template)
}

// -------------------------------------------------------------------

// CMsgDOTAStorePromoPagesRequest

// optional uint32 version_seen = 1;
inline bool CMsgDOTAStorePromoPagesRequest::has_version_seen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAStorePromoPagesRequest::set_has_version_seen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAStorePromoPagesRequest::clear_has_version_seen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAStorePromoPagesRequest::clear_version_seen() {
  version_seen_ = 0u;
  clear_has_version_seen();
}
inline ::google::protobuf::uint32 CMsgDOTAStorePromoPagesRequest::version_seen() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAStorePromoPagesRequest.version_seen)
  return version_seen_;
}
inline void CMsgDOTAStorePromoPagesRequest::set_version_seen(::google::protobuf::uint32 value) {
  set_has_version_seen();
  version_seen_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAStorePromoPagesRequest.version_seen)
}

// -------------------------------------------------------------------

// CMsgDOTAStorePromoPagesResponse_PromoPage

// optional uint32 promo_id = 1;
inline bool CMsgDOTAStorePromoPagesResponse_PromoPage::has_promo_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_has_promo_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_has_promo_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_promo_id() {
  promo_id_ = 0u;
  clear_has_promo_id();
}
inline ::google::protobuf::uint32 CMsgDOTAStorePromoPagesResponse_PromoPage::promo_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAStorePromoPagesResponse.PromoPage.promo_id)
  return promo_id_;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_promo_id(::google::protobuf::uint32 value) {
  set_has_promo_id();
  promo_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAStorePromoPagesResponse.PromoPage.promo_id)
}

// optional string title = 2;
inline bool CMsgDOTAStorePromoPagesResponse_PromoPage::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CMsgDOTAStorePromoPagesResponse_PromoPage::title() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
  return title_.GetNoArena();
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
}
#if LANG_CXX11
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
}
#endif
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
}
inline ::std::string* CMsgDOTAStorePromoPagesResponse_PromoPage::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAStorePromoPagesResponse_PromoPage::release_title() {
  // @@protoc_insertion_point(field_release:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAStorePromoPagesResponse.PromoPage.title)
}

// optional string url = 3;
inline bool CMsgDOTAStorePromoPagesResponse_PromoPage::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTAStorePromoPagesResponse_PromoPage::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
  return url_.GetNoArena();
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
}
#if LANG_CXX11
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
}
#endif
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
}
inline ::std::string* CMsgDOTAStorePromoPagesResponse_PromoPage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAStorePromoPagesResponse_PromoPage::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAStorePromoPagesResponse_PromoPage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAStorePromoPagesResponse.PromoPage.url)
}

// -------------------------------------------------------------------

// CMsgDOTAStorePromoPagesResponse

// repeated .CMsgDOTAStorePromoPagesResponse.PromoPage pages = 1;
inline int CMsgDOTAStorePromoPagesResponse::pages_size() const {
  return pages_.size();
}
inline void CMsgDOTAStorePromoPagesResponse::clear_pages() {
  pages_.Clear();
}
inline const ::CMsgDOTAStorePromoPagesResponse_PromoPage& CMsgDOTAStorePromoPagesResponse::pages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAStorePromoPagesResponse.pages)
  return pages_.Get(index);
}
inline ::CMsgDOTAStorePromoPagesResponse_PromoPage* CMsgDOTAStorePromoPagesResponse::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAStorePromoPagesResponse.pages)
  return pages_.Mutable(index);
}
inline ::CMsgDOTAStorePromoPagesResponse_PromoPage* CMsgDOTAStorePromoPagesResponse::add_pages() {
  // @@protoc_insertion_point(field_add:CMsgDOTAStorePromoPagesResponse.pages)
  return pages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAStorePromoPagesResponse_PromoPage >*
CMsgDOTAStorePromoPagesResponse::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAStorePromoPagesResponse.pages)
  return &pages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAStorePromoPagesResponse_PromoPage >&
CMsgDOTAStorePromoPagesResponse::pages() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAStorePromoPagesResponse.pages)
  return pages_;
}

// -------------------------------------------------------------------

// CMsgDOTAGCToGCMatchCompleted

// optional uint32 match_id = 1;
inline bool CMsgDOTAGCToGCMatchCompleted::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGCToGCMatchCompleted::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGCToGCMatchCompleted::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGCToGCMatchCompleted::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTAGCToGCMatchCompleted::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGCToGCMatchCompleted.match_id)
  return match_id_;
}
inline void CMsgDOTAGCToGCMatchCompleted::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGCToGCMatchCompleted.match_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCCheckLeaguePermission

// optional fixed64 user_id = 1;
inline bool CMsgGCToGCCheckLeaguePermission::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCCheckLeaguePermission::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCCheckLeaguePermission::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCCheckLeaguePermission::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 CMsgGCToGCCheckLeaguePermission::user_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCheckLeaguePermission.user_id)
  return user_id_;
}
inline void CMsgGCToGCCheckLeaguePermission::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCCheckLeaguePermission.user_id)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToGCCheckLeaguePermission::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCCheckLeaguePermission::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCCheckLeaguePermission::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCCheckLeaguePermission::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCCheckLeaguePermission::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCheckLeaguePermission.league_id)
  return league_id_;
}
inline void CMsgGCToGCCheckLeaguePermission::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCCheckLeaguePermission.league_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCCheckLeaguePermissionResponse

// optional bool has_access = 1;
inline bool CMsgGCToGCCheckLeaguePermissionResponse::has_has_access() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCCheckLeaguePermissionResponse::set_has_has_access() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCCheckLeaguePermissionResponse::clear_has_has_access() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCCheckLeaguePermissionResponse::clear_has_access() {
  has_access_ = false;
  clear_has_has_access();
}
inline bool CMsgGCToGCCheckLeaguePermissionResponse::has_access() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCheckLeaguePermissionResponse.has_access)
  return has_access_;
}
inline void CMsgGCToGCCheckLeaguePermissionResponse::set_has_access(bool value) {
  set_has_has_access();
  has_access_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCCheckLeaguePermissionResponse.has_access)
}

// -------------------------------------------------------------------

// CMsgLeagueScheduleBlockTeamInfo

// optional uint32 team_id = 1;
inline bool CMsgLeagueScheduleBlockTeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgLeagueScheduleBlockTeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlockTeamInfo.team_id)
  return team_id_;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlockTeamInfo.team_id)
}

// optional string name = 2;
inline bool CMsgLeagueScheduleBlockTeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgLeagueScheduleBlockTeamInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlockTeamInfo.name)
  return name_.GetNoArena();
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlockTeamInfo.name)
}
#if LANG_CXX11
inline void CMsgLeagueScheduleBlockTeamInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgLeagueScheduleBlockTeamInfo.name)
}
#endif
inline void CMsgLeagueScheduleBlockTeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgLeagueScheduleBlockTeamInfo.name)
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgLeagueScheduleBlockTeamInfo.name)
}
inline ::std::string* CMsgLeagueScheduleBlockTeamInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgLeagueScheduleBlockTeamInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgLeagueScheduleBlockTeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgLeagueScheduleBlockTeamInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgLeagueScheduleBlockTeamInfo.name)
}

// optional string tag = 3;
inline bool CMsgLeagueScheduleBlockTeamInfo::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgLeagueScheduleBlockTeamInfo::tag() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlockTeamInfo.tag)
  return tag_.GetNoArena();
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlockTeamInfo.tag)
}
#if LANG_CXX11
inline void CMsgLeagueScheduleBlockTeamInfo::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgLeagueScheduleBlockTeamInfo.tag)
}
#endif
inline void CMsgLeagueScheduleBlockTeamInfo::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgLeagueScheduleBlockTeamInfo.tag)
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgLeagueScheduleBlockTeamInfo.tag)
}
inline ::std::string* CMsgLeagueScheduleBlockTeamInfo::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:CMsgLeagueScheduleBlockTeamInfo.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgLeagueScheduleBlockTeamInfo::release_tag() {
  // @@protoc_insertion_point(field_release:CMsgLeagueScheduleBlockTeamInfo.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgLeagueScheduleBlockTeamInfo.tag)
}

// optional uint64 logo = 4;
inline bool CMsgLeagueScheduleBlockTeamInfo::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeagueScheduleBlockTeamInfo::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgLeagueScheduleBlockTeamInfo::logo() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlockTeamInfo.logo)
  return logo_;
}
inline void CMsgLeagueScheduleBlockTeamInfo::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlockTeamInfo.logo)
}

// -------------------------------------------------------------------

// CMsgLeagueScheduleBlock

// optional uint32 block_id = 1;
inline bool CMsgLeagueScheduleBlock::has_block_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeagueScheduleBlock::set_has_block_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeagueScheduleBlock::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeagueScheduleBlock::clear_block_id() {
  block_id_ = 0u;
  clear_has_block_id();
}
inline ::google::protobuf::uint32 CMsgLeagueScheduleBlock::block_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlock.block_id)
  return block_id_;
}
inline void CMsgLeagueScheduleBlock::set_block_id(::google::protobuf::uint32 value) {
  set_has_block_id();
  block_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlock.block_id)
}

// optional uint32 start_time = 2;
inline bool CMsgLeagueScheduleBlock::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeagueScheduleBlock::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeagueScheduleBlock::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeagueScheduleBlock::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgLeagueScheduleBlock::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlock.start_time)
  return start_time_;
}
inline void CMsgLeagueScheduleBlock::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlock.start_time)
}

// optional bool finals = 4;
inline bool CMsgLeagueScheduleBlock::has_finals() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeagueScheduleBlock::set_has_finals() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeagueScheduleBlock::clear_has_finals() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeagueScheduleBlock::clear_finals() {
  finals_ = false;
  clear_has_finals();
}
inline bool CMsgLeagueScheduleBlock::finals() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlock.finals)
  return finals_;
}
inline void CMsgLeagueScheduleBlock::set_finals(bool value) {
  set_has_finals();
  finals_ = value;
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlock.finals)
}

// optional string comment = 5;
inline bool CMsgLeagueScheduleBlock::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeagueScheduleBlock::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeagueScheduleBlock::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeagueScheduleBlock::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& CMsgLeagueScheduleBlock::comment() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlock.comment)
  return comment_.GetNoArena();
}
inline void CMsgLeagueScheduleBlock::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgLeagueScheduleBlock.comment)
}
#if LANG_CXX11
inline void CMsgLeagueScheduleBlock::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgLeagueScheduleBlock.comment)
}
#endif
inline void CMsgLeagueScheduleBlock::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgLeagueScheduleBlock.comment)
}
inline void CMsgLeagueScheduleBlock::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgLeagueScheduleBlock.comment)
}
inline ::std::string* CMsgLeagueScheduleBlock::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:CMsgLeagueScheduleBlock.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgLeagueScheduleBlock::release_comment() {
  // @@protoc_insertion_point(field_release:CMsgLeagueScheduleBlock.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgLeagueScheduleBlock::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CMsgLeagueScheduleBlock.comment)
}

// repeated .CMsgLeagueScheduleBlockTeamInfo teams = 6;
inline int CMsgLeagueScheduleBlock::teams_size() const {
  return teams_.size();
}
inline void CMsgLeagueScheduleBlock::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgLeagueScheduleBlockTeamInfo& CMsgLeagueScheduleBlock::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueScheduleBlock.teams)
  return teams_.Get(index);
}
inline ::CMsgLeagueScheduleBlockTeamInfo* CMsgLeagueScheduleBlock::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLeagueScheduleBlock.teams)
  return teams_.Mutable(index);
}
inline ::CMsgLeagueScheduleBlockTeamInfo* CMsgLeagueScheduleBlock::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgLeagueScheduleBlock.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlockTeamInfo >*
CMsgLeagueScheduleBlock::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueScheduleBlock.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlockTeamInfo >&
CMsgLeagueScheduleBlock::teams() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueScheduleBlock.teams)
  return teams_;
}

// -------------------------------------------------------------------

// CMsgDOTALeague

// optional uint32 league_id = 1;
inline bool CMsgDOTALeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeague::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTALeague::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeague.league_id)
  return league_id_;
}
inline void CMsgDOTALeague::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeague.league_id)
}

// repeated .CMsgLeagueScheduleBlock schedule = 2;
inline int CMsgDOTALeague::schedule_size() const {
  return schedule_.size();
}
inline void CMsgDOTALeague::clear_schedule() {
  schedule_.Clear();
}
inline const ::CMsgLeagueScheduleBlock& CMsgDOTALeague::schedule(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeague.schedule)
  return schedule_.Get(index);
}
inline ::CMsgLeagueScheduleBlock* CMsgDOTALeague::mutable_schedule(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeague.schedule)
  return schedule_.Mutable(index);
}
inline ::CMsgLeagueScheduleBlock* CMsgDOTALeague::add_schedule() {
  // @@protoc_insertion_point(field_add:CMsgDOTALeague.schedule)
  return schedule_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlock >*
CMsgDOTALeague::mutable_schedule() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeague.schedule)
  return &schedule_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgLeagueScheduleBlock >&
CMsgDOTALeague::schedule() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeague.schedule)
  return schedule_;
}

// -------------------------------------------------------------------

// CMsgDOTALeagueScheduleRequest

// optional uint32 league_id = 1;
inline bool CMsgDOTALeagueScheduleRequest::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeagueScheduleRequest::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeagueScheduleRequest::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeagueScheduleRequest::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTALeagueScheduleRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleRequest.league_id)
  return league_id_;
}
inline void CMsgDOTALeagueScheduleRequest::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeagueScheduleRequest.league_id)
}

// -------------------------------------------------------------------

// CMsgDOTALeagueScheduleResponse

// optional .CMsgDOTALeague league = 1;
inline bool CMsgDOTALeagueScheduleResponse::has_league() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeagueScheduleResponse::set_has_league() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeagueScheduleResponse::clear_has_league() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeagueScheduleResponse::clear_league() {
  if (league_ != NULL) league_->Clear();
  clear_has_league();
}
inline const ::CMsgDOTALeague& CMsgDOTALeagueScheduleResponse::league() const {
  const ::CMsgDOTALeague* p = league_;
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleResponse.league)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTALeague*>(
      &::_CMsgDOTALeague_default_instance_);
}
inline ::CMsgDOTALeague* CMsgDOTALeagueScheduleResponse::release_league() {
  // @@protoc_insertion_point(field_release:CMsgDOTALeagueScheduleResponse.league)
  clear_has_league();
  ::CMsgDOTALeague* temp = league_;
  league_ = NULL;
  return temp;
}
inline ::CMsgDOTALeague* CMsgDOTALeagueScheduleResponse::mutable_league() {
  set_has_league();
  if (league_ == NULL) {
    league_ = new ::CMsgDOTALeague;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeagueScheduleResponse.league)
  return league_;
}
inline void CMsgDOTALeagueScheduleResponse::set_allocated_league(::CMsgDOTALeague* league) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete league_;
  }
  if (league) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      league = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, league, submessage_arena);
    }
    set_has_league();
  } else {
    clear_has_league();
  }
  league_ = league;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALeagueScheduleResponse.league)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgDOTALeagueScheduleResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeagueScheduleResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeagueScheduleResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeagueScheduleResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTALeagueScheduleResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleResponse.eresult)
  return eresult_;
}
inline void CMsgDOTALeagueScheduleResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeagueScheduleResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTALeagueScheduleEdit

// optional uint32 league_id = 1;
inline bool CMsgDOTALeagueScheduleEdit::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeagueScheduleEdit::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTALeagueScheduleEdit::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleEdit.league_id)
  return league_id_;
}
inline void CMsgDOTALeagueScheduleEdit::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeagueScheduleEdit.league_id)
}

// optional .CMsgLeagueScheduleBlock schedule = 2;
inline bool CMsgDOTALeagueScheduleEdit::has_schedule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeagueScheduleEdit::set_has_schedule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_schedule() {
  if (schedule_ != NULL) schedule_->Clear();
  clear_has_schedule();
}
inline const ::CMsgLeagueScheduleBlock& CMsgDOTALeagueScheduleEdit::schedule() const {
  const ::CMsgLeagueScheduleBlock* p = schedule_;
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleEdit.schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgLeagueScheduleBlock*>(
      &::_CMsgLeagueScheduleBlock_default_instance_);
}
inline ::CMsgLeagueScheduleBlock* CMsgDOTALeagueScheduleEdit::release_schedule() {
  // @@protoc_insertion_point(field_release:CMsgDOTALeagueScheduleEdit.schedule)
  clear_has_schedule();
  ::CMsgLeagueScheduleBlock* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
inline ::CMsgLeagueScheduleBlock* CMsgDOTALeagueScheduleEdit::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) {
    schedule_ = new ::CMsgLeagueScheduleBlock;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeagueScheduleEdit.schedule)
  return schedule_;
}
inline void CMsgDOTALeagueScheduleEdit::set_allocated_schedule(::CMsgLeagueScheduleBlock* schedule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete schedule_;
  }
  if (schedule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schedule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALeagueScheduleEdit.schedule)
}

// optional bool delete_block = 3;
inline bool CMsgDOTALeagueScheduleEdit::has_delete_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALeagueScheduleEdit::set_has_delete_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_has_delete_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALeagueScheduleEdit::clear_delete_block() {
  delete_block_ = false;
  clear_has_delete_block();
}
inline bool CMsgDOTALeagueScheduleEdit::delete_block() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleEdit.delete_block)
  return delete_block_;
}
inline void CMsgDOTALeagueScheduleEdit::set_delete_block(bool value) {
  set_has_delete_block();
  delete_block_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeagueScheduleEdit.delete_block)
}

// -------------------------------------------------------------------

// CMsgDOTALeagueScheduleEditResponse

// optional .CMsgDOTALeague league = 1;
inline bool CMsgDOTALeagueScheduleEditResponse::has_league() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeagueScheduleEditResponse::set_has_league() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeagueScheduleEditResponse::clear_has_league() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeagueScheduleEditResponse::clear_league() {
  if (league_ != NULL) league_->Clear();
  clear_has_league();
}
inline const ::CMsgDOTALeague& CMsgDOTALeagueScheduleEditResponse::league() const {
  const ::CMsgDOTALeague* p = league_;
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleEditResponse.league)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTALeague*>(
      &::_CMsgDOTALeague_default_instance_);
}
inline ::CMsgDOTALeague* CMsgDOTALeagueScheduleEditResponse::release_league() {
  // @@protoc_insertion_point(field_release:CMsgDOTALeagueScheduleEditResponse.league)
  clear_has_league();
  ::CMsgDOTALeague* temp = league_;
  league_ = NULL;
  return temp;
}
inline ::CMsgDOTALeague* CMsgDOTALeagueScheduleEditResponse::mutable_league() {
  set_has_league();
  if (league_ == NULL) {
    league_ = new ::CMsgDOTALeague;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeagueScheduleEditResponse.league)
  return league_;
}
inline void CMsgDOTALeagueScheduleEditResponse::set_allocated_league(::CMsgDOTALeague* league) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete league_;
  }
  if (league) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      league = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, league, submessage_arena);
    }
    set_has_league();
  } else {
    clear_has_league();
  }
  league_ = league;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALeagueScheduleEditResponse.league)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgDOTALeagueScheduleEditResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeagueScheduleEditResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeagueScheduleEditResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeagueScheduleEditResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTALeagueScheduleEditResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeagueScheduleEditResponse.eresult)
  return eresult_;
}
inline void CMsgDOTALeagueScheduleEditResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeagueScheduleEditResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTALeaguesInMonthRequest

// optional uint32 month = 1;
inline bool CMsgDOTALeaguesInMonthRequest::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaguesInMonthRequest::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaguesInMonthRequest::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaguesInMonthRequest::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 CMsgDOTALeaguesInMonthRequest::month() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthRequest.month)
  return month_;
}
inline void CMsgDOTALeaguesInMonthRequest::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaguesInMonthRequest.month)
}

// optional uint32 year = 2;
inline bool CMsgDOTALeaguesInMonthRequest::has_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeaguesInMonthRequest::set_has_year() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeaguesInMonthRequest::clear_has_year() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeaguesInMonthRequest::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 CMsgDOTALeaguesInMonthRequest::year() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthRequest.year)
  return year_;
}
inline void CMsgDOTALeaguesInMonthRequest::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaguesInMonthRequest.year)
}

// -------------------------------------------------------------------

// CMsgDOTALeaguesInMonthResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDOTALeaguesInMonthResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALeaguesInMonthResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTALeaguesInMonthResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthResponse.eresult)
  return eresult_;
}
inline void CMsgDOTALeaguesInMonthResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaguesInMonthResponse.eresult)
}

// optional uint32 month = 2;
inline bool CMsgDOTALeaguesInMonthResponse::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaguesInMonthResponse::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 CMsgDOTALeaguesInMonthResponse::month() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthResponse.month)
  return month_;
}
inline void CMsgDOTALeaguesInMonthResponse::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaguesInMonthResponse.month)
}

// optional uint32 year = 3;
inline bool CMsgDOTALeaguesInMonthResponse::has_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALeaguesInMonthResponse::set_has_year() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_has_year() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALeaguesInMonthResponse::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 CMsgDOTALeaguesInMonthResponse::year() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthResponse.year)
  return year_;
}
inline void CMsgDOTALeaguesInMonthResponse::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaguesInMonthResponse.year)
}

// repeated .CMsgDOTALeague leagues = 4;
inline int CMsgDOTALeaguesInMonthResponse::leagues_size() const {
  return leagues_.size();
}
inline void CMsgDOTALeaguesInMonthResponse::clear_leagues() {
  leagues_.Clear();
}
inline const ::CMsgDOTALeague& CMsgDOTALeaguesInMonthResponse::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaguesInMonthResponse.leagues)
  return leagues_.Get(index);
}
inline ::CMsgDOTALeague* CMsgDOTALeaguesInMonthResponse::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeaguesInMonthResponse.leagues)
  return leagues_.Mutable(index);
}
inline ::CMsgDOTALeague* CMsgDOTALeaguesInMonthResponse::add_leagues() {
  // @@protoc_insertion_point(field_add:CMsgDOTALeaguesInMonthResponse.leagues)
  return leagues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTALeague >*
CMsgDOTALeaguesInMonthResponse::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeaguesInMonthResponse.leagues)
  return &leagues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALeague >&
CMsgDOTALeaguesInMonthResponse::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeaguesInMonthResponse.leagues)
  return leagues_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatchmakingStatsRequest

// -------------------------------------------------------------------

// CMsgDOTAMatchmakingStatsResponse

// repeated uint32 wait_times_by_group = 1;
inline int CMsgDOTAMatchmakingStatsResponse::wait_times_by_group_size() const {
  return wait_times_by_group_.size();
}
inline void CMsgDOTAMatchmakingStatsResponse::clear_wait_times_by_group() {
  wait_times_by_group_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchmakingStatsResponse::wait_times_by_group(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchmakingStatsResponse.wait_times_by_group)
  return wait_times_by_group_.Get(index);
}
inline void CMsgDOTAMatchmakingStatsResponse::set_wait_times_by_group(int index, ::google::protobuf::uint32 value) {
  wait_times_by_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchmakingStatsResponse.wait_times_by_group)
}
inline void CMsgDOTAMatchmakingStatsResponse::add_wait_times_by_group(::google::protobuf::uint32 value) {
  wait_times_by_group_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchmakingStatsResponse.wait_times_by_group)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchmakingStatsResponse::wait_times_by_group() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchmakingStatsResponse.wait_times_by_group)
  return wait_times_by_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchmakingStatsResponse::mutable_wait_times_by_group() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchmakingStatsResponse.wait_times_by_group)
  return &wait_times_by_group_;
}

// repeated uint32 searching_players_by_group = 2;
inline int CMsgDOTAMatchmakingStatsResponse::searching_players_by_group_size() const {
  return searching_players_by_group_.size();
}
inline void CMsgDOTAMatchmakingStatsResponse::clear_searching_players_by_group() {
  searching_players_by_group_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchmakingStatsResponse::searching_players_by_group(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchmakingStatsResponse.searching_players_by_group)
  return searching_players_by_group_.Get(index);
}
inline void CMsgDOTAMatchmakingStatsResponse::set_searching_players_by_group(int index, ::google::protobuf::uint32 value) {
  searching_players_by_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchmakingStatsResponse.searching_players_by_group)
}
inline void CMsgDOTAMatchmakingStatsResponse::add_searching_players_by_group(::google::protobuf::uint32 value) {
  searching_players_by_group_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchmakingStatsResponse.searching_players_by_group)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchmakingStatsResponse::searching_players_by_group() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchmakingStatsResponse.searching_players_by_group)
  return searching_players_by_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchmakingStatsResponse::mutable_searching_players_by_group() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchmakingStatsResponse.searching_players_by_group)
  return &searching_players_by_group_;
}

// optional uint32 disabled_groups = 3;
inline bool CMsgDOTAMatchmakingStatsResponse::has_disabled_groups() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchmakingStatsResponse::set_has_disabled_groups() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchmakingStatsResponse::clear_has_disabled_groups() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchmakingStatsResponse::clear_disabled_groups() {
  disabled_groups_ = 0u;
  clear_has_disabled_groups();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchmakingStatsResponse::disabled_groups() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchmakingStatsResponse.disabled_groups)
  return disabled_groups_;
}
inline void CMsgDOTAMatchmakingStatsResponse::set_disabled_groups(::google::protobuf::uint32 value) {
  set_has_disabled_groups();
  disabled_groups_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchmakingStatsResponse.disabled_groups)
}

// -------------------------------------------------------------------

// CMsgDOTASetMatchHistoryAccess

// optional bool allow_3rd_party_match_history = 1;
inline bool CMsgDOTASetMatchHistoryAccess::has_allow_3rd_party_match_history() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASetMatchHistoryAccess::set_has_allow_3rd_party_match_history() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASetMatchHistoryAccess::clear_has_allow_3rd_party_match_history() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASetMatchHistoryAccess::clear_allow_3rd_party_match_history() {
  allow_3rd_party_match_history_ = false;
  clear_has_allow_3rd_party_match_history();
}
inline bool CMsgDOTASetMatchHistoryAccess::allow_3rd_party_match_history() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetMatchHistoryAccess.allow_3rd_party_match_history)
  return allow_3rd_party_match_history_;
}
inline void CMsgDOTASetMatchHistoryAccess::set_allow_3rd_party_match_history(bool value) {
  set_has_allow_3rd_party_match_history();
  allow_3rd_party_match_history_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetMatchHistoryAccess.allow_3rd_party_match_history)
}

// -------------------------------------------------------------------

// CMsgDOTASetMatchHistoryAccessResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDOTASetMatchHistoryAccessResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASetMatchHistoryAccessResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASetMatchHistoryAccessResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASetMatchHistoryAccessResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTASetMatchHistoryAccessResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetMatchHistoryAccessResponse.eresult)
  return eresult_;
}
inline void CMsgDOTASetMatchHistoryAccessResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetMatchHistoryAccessResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTANotifyMatchHistoryAccessChange

// optional uint32 accountid = 1;
inline bool CMsgDOTANotifyMatchHistoryAccessChange::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgDOTANotifyMatchHistoryAccessChange::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTANotifyMatchHistoryAccessChange.accountid)
  return accountid_;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTANotifyMatchHistoryAccessChange.accountid)
}

// optional bool allow_3rd_party_match_history = 2;
inline bool CMsgDOTANotifyMatchHistoryAccessChange::has_allow_3rd_party_match_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::set_has_allow_3rd_party_match_history() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::clear_has_allow_3rd_party_match_history() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::clear_allow_3rd_party_match_history() {
  allow_3rd_party_match_history_ = false;
  clear_has_allow_3rd_party_match_history();
}
inline bool CMsgDOTANotifyMatchHistoryAccessChange::allow_3rd_party_match_history() const {
  // @@protoc_insertion_point(field_get:CMsgDOTANotifyMatchHistoryAccessChange.allow_3rd_party_match_history)
  return allow_3rd_party_match_history_;
}
inline void CMsgDOTANotifyMatchHistoryAccessChange::set_allow_3rd_party_match_history(bool value) {
  set_has_allow_3rd_party_match_history();
  allow_3rd_party_match_history_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTANotifyMatchHistoryAccessChange.allow_3rd_party_match_history)
}

// -------------------------------------------------------------------

// CMsgUpgradeLeagueItem

// optional uint32 match_id = 1;
inline bool CMsgUpgradeLeagueItem::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgUpgradeLeagueItem::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgUpgradeLeagueItem::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgUpgradeLeagueItem::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgUpgradeLeagueItem::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgUpgradeLeagueItem.match_id)
  return match_id_;
}
inline void CMsgUpgradeLeagueItem::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgUpgradeLeagueItem.match_id)
}

// optional uint32 league_id = 2;
inline bool CMsgUpgradeLeagueItem::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgUpgradeLeagueItem::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgUpgradeLeagueItem::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgUpgradeLeagueItem::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgUpgradeLeagueItem::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgUpgradeLeagueItem.league_id)
  return league_id_;
}
inline void CMsgUpgradeLeagueItem::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgUpgradeLeagueItem.league_id)
}

// -------------------------------------------------------------------

// CMsgUpgradeLeagueItemResponse

// -------------------------------------------------------------------

// CMsgGCWatchDownloadedReplay

// optional uint64 match_id = 1;
inline bool CMsgGCWatchDownloadedReplay::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCWatchDownloadedReplay::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCWatchDownloadedReplay::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCWatchDownloadedReplay::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCWatchDownloadedReplay::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCWatchDownloadedReplay.match_id)
  return match_id_;
}
inline void CMsgGCWatchDownloadedReplay::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCWatchDownloadedReplay.match_id)
}

// optional .DOTA_WatchReplayType watch_type = 2 [default = DOTA_WATCH_REPLAY_NORMAL];
inline bool CMsgGCWatchDownloadedReplay::has_watch_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCWatchDownloadedReplay::set_has_watch_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCWatchDownloadedReplay::clear_has_watch_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCWatchDownloadedReplay::clear_watch_type() {
  watch_type_ = 0;
  clear_has_watch_type();
}
inline ::DOTA_WatchReplayType CMsgGCWatchDownloadedReplay::watch_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCWatchDownloadedReplay.watch_type)
  return static_cast< ::DOTA_WatchReplayType >(watch_type_);
}
inline void CMsgGCWatchDownloadedReplay::set_watch_type(::DOTA_WatchReplayType value) {
  assert(::DOTA_WatchReplayType_IsValid(value));
  set_has_watch_type();
  watch_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCWatchDownloadedReplay.watch_type)
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.account_id)
  return account_id_;
}
inline void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2 [(.key_field) = true];
inline bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
inline ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.location_id)
  return location_id_;
}
inline void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.completed)
  return completed_;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgSetMapLocationState

// optional int32 location_id = 1;
inline bool CMsgSetMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSetMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSetMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSetMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
inline ::google::protobuf::int32 CMsgSetMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetMapLocationState.location_id)
  return location_id_;
}
inline void CMsgSetMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSetMapLocationState.location_id)
}

// optional bool completed = 2;
inline bool CMsgSetMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSetMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSetMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSetMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CMsgSetMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CMsgSetMapLocationState.completed)
  return completed_;
}
inline void CMsgSetMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CMsgSetMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgSetMapLocationStateResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgSetMapLocationStateResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSetMapLocationStateResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSetMapLocationStateResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSetMapLocationStateResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgSetMapLocationStateResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgSetMapLocationStateResponse.eresult)
  return eresult_;
}
inline void CMsgSetMapLocationStateResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgSetMapLocationStateResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgResetMapLocations

// -------------------------------------------------------------------

// CMsgResetMapLocationsResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgResetMapLocationsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgResetMapLocationsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgResetMapLocationsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgResetMapLocationsResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgResetMapLocationsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgResetMapLocationsResponse.eresult)
  return eresult_;
}
inline void CMsgResetMapLocationsResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgResetMapLocationsResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgRefreshPartnerAccountLink

// optional int32 partner_type = 1;
inline bool CMsgRefreshPartnerAccountLink::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRefreshPartnerAccountLink::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRefreshPartnerAccountLink::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRefreshPartnerAccountLink::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::google::protobuf::int32 CMsgRefreshPartnerAccountLink::partner_type() const {
  // @@protoc_insertion_point(field_get:CMsgRefreshPartnerAccountLink.partner_type)
  return partner_type_;
}
inline void CMsgRefreshPartnerAccountLink::set_partner_type(::google::protobuf::int32 value) {
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgRefreshPartnerAccountLink.partner_type)
}

// -------------------------------------------------------------------

// CMsgClientsRejoinChatChannels

// -------------------------------------------------------------------

// CMsgGCToGCGetUserChatInfo

// optional uint32 account_id = 1;
inline bool CMsgGCToGCGetUserChatInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetUserChatInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetUserChatInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetUserChatInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetUserChatInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserChatInfo.account_id)
  return account_id_;
}
inline void CMsgGCToGCGetUserChatInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserChatInfo.account_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetUserChatInfoResponse

// optional bool valid_session = 1;
inline bool CMsgGCToGCGetUserChatInfoResponse::has_valid_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_has_valid_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_has_valid_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_valid_session() {
  valid_session_ = false;
  clear_has_valid_session();
}
inline bool CMsgGCToGCGetUserChatInfoResponse::valid_session() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserChatInfoResponse.valid_session)
  return valid_session_;
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_valid_session(bool value) {
  set_has_valid_session();
  valid_session_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserChatInfoResponse.valid_session)
}

// optional .DOTA_PartnerAccountType partner_type = 2 [default = DOTA_PARTNER_NONE];
inline bool CMsgGCToGCGetUserChatInfoResponse::has_partner_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_has_partner_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline ::DOTA_PartnerAccountType CMsgGCToGCGetUserChatInfoResponse::partner_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserChatInfoResponse.partner_type)
  return static_cast< ::DOTA_PartnerAccountType >(partner_type_);
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_partner_type(::DOTA_PartnerAccountType value) {
  assert(::DOTA_PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserChatInfoResponse.partner_type)
}

// optional uint32 chat_ban_end = 3;
inline bool CMsgGCToGCGetUserChatInfoResponse::has_chat_ban_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_has_chat_ban_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_has_chat_ban_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToGCGetUserChatInfoResponse::clear_chat_ban_end() {
  chat_ban_end_ = 0u;
  clear_has_chat_ban_end();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetUserChatInfoResponse::chat_ban_end() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserChatInfoResponse.chat_ban_end)
  return chat_ban_end_;
}
inline void CMsgGCToGCGetUserChatInfoResponse::set_chat_ban_end(::google::protobuf::uint32 value) {
  set_has_chat_ban_end();
  chat_ban_end_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserChatInfoResponse.chat_ban_end)
}

// -------------------------------------------------------------------

// CMsgGCToGCLeaveAllChatChannels

// optional uint32 account_id = 1;
inline bool CMsgGCToGCLeaveAllChatChannels::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCLeaveAllChatChannels::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCLeaveAllChatChannels::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCLeaveAllChatChannels::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCLeaveAllChatChannels::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCLeaveAllChatChannels.account_id)
  return account_id_;
}
inline void CMsgGCToGCLeaveAllChatChannels::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCLeaveAllChatChannels.account_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCUpdateAccountChatBan

// optional uint32 account_id = 1;
inline bool CMsgGCToGCUpdateAccountChatBan::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCUpdateAccountChatBan::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCUpdateAccountChatBan::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCUpdateAccountChatBan::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateAccountChatBan::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateAccountChatBan.account_id)
  return account_id_;
}
inline void CMsgGCToGCUpdateAccountChatBan::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateAccountChatBan.account_id)
}

// optional uint32 chat_ban_end = 2;
inline bool CMsgGCToGCUpdateAccountChatBan::has_chat_ban_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCUpdateAccountChatBan::set_has_chat_ban_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCUpdateAccountChatBan::clear_has_chat_ban_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCUpdateAccountChatBan::clear_chat_ban_end() {
  chat_ban_end_ = 0u;
  clear_has_chat_ban_end();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateAccountChatBan::chat_ban_end() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateAccountChatBan.chat_ban_end)
  return chat_ban_end_;
}
inline void CMsgGCToGCUpdateAccountChatBan::set_chat_ban_end(::google::protobuf::uint32 value) {
  set_has_chat_ban_end();
  chat_ban_end_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateAccountChatBan.chat_ban_end)
}

// -------------------------------------------------------------------

// CMsgGCToGCCanInviteUser

// optional uint32 account_id = 1;
inline bool CMsgGCToGCCanInviteUser::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCCanInviteUser::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCCanInviteUser::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCCanInviteUser::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCCanInviteUser::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCanInviteUser.account_id)
  return account_id_;
}
inline void CMsgGCToGCCanInviteUser::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCCanInviteUser.account_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCCanInviteUserResponse

// optional bool can_invite = 1;
inline bool CMsgGCToGCCanInviteUserResponse::has_can_invite() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCCanInviteUserResponse::set_has_can_invite() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCCanInviteUserResponse::clear_has_can_invite() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCCanInviteUserResponse::clear_can_invite() {
  can_invite_ = false;
  clear_has_can_invite();
}
inline bool CMsgGCToGCCanInviteUserResponse::can_invite() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCanInviteUserResponse.can_invite)
  return can_invite_;
}
inline void CMsgGCToGCCanInviteUserResponse::set_can_invite(bool value) {
  set_has_can_invite();
  can_invite_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCCanInviteUserResponse.can_invite)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetUserRank

// optional uint32 account_id = 1;
inline bool CMsgGCToGCGetUserRank::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetUserRank::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetUserRank::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetUserRank::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetUserRank::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserRank.account_id)
  return account_id_;
}
inline void CMsgGCToGCGetUserRank::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserRank.account_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetUserRankResponse

// optional uint32 rank = 1;
inline bool CMsgGCToGCGetUserRankResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetUserRankResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetUserRankResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetUserRankResponse::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetUserRankResponse::rank() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetUserRankResponse.rank)
  return rank_;
}
inline void CMsgGCToGCGetUserRankResponse::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetUserRankResponse.rank)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetTeamRankChange

// optional uint32 winner_team_id = 1;
inline bool CMsgGCToGCGetTeamRankChange::has_winner_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetTeamRankChange::set_has_winner_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetTeamRankChange::clear_has_winner_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetTeamRankChange::clear_winner_team_id() {
  winner_team_id_ = 0u;
  clear_has_winner_team_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRankChange::winner_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankChange.winner_team_id)
  return winner_team_id_;
}
inline void CMsgGCToGCGetTeamRankChange::set_winner_team_id(::google::protobuf::uint32 value) {
  set_has_winner_team_id();
  winner_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankChange.winner_team_id)
}

// optional uint32 loser_team_id = 2;
inline bool CMsgGCToGCGetTeamRankChange::has_loser_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCGetTeamRankChange::set_has_loser_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCGetTeamRankChange::clear_has_loser_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCGetTeamRankChange::clear_loser_team_id() {
  loser_team_id_ = 0u;
  clear_has_loser_team_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRankChange::loser_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankChange.loser_team_id)
  return loser_team_id_;
}
inline void CMsgGCToGCGetTeamRankChange::set_loser_team_id(::google::protobuf::uint32 value) {
  set_has_loser_team_id();
  loser_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankChange.loser_team_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetTeamRankChangeResponse

// optional uint32 rank_change = 1;
inline bool CMsgGCToGCGetTeamRankChangeResponse::has_rank_change() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetTeamRankChangeResponse::set_has_rank_change() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetTeamRankChangeResponse::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetTeamRankChangeResponse::clear_rank_change() {
  rank_change_ = 0u;
  clear_has_rank_change();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRankChangeResponse::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankChangeResponse.rank_change)
  return rank_change_;
}
inline void CMsgGCToGCGetTeamRankChangeResponse::set_rank_change(::google::protobuf::uint32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankChangeResponse.rank_change)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetTeamRank

// optional uint32 team_id = 1;
inline bool CMsgGCToGCGetTeamRank::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetTeamRank::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetTeamRank::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetTeamRank::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRank::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRank.team_id)
  return team_id_;
}
inline void CMsgGCToGCGetTeamRank::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRank.team_id)
}

// repeated uint32 team_members = 2;
inline int CMsgGCToGCGetTeamRank::team_members_size() const {
  return team_members_.size();
}
inline void CMsgGCToGCGetTeamRank::clear_team_members() {
  team_members_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRank::team_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRank.team_members)
  return team_members_.Get(index);
}
inline void CMsgGCToGCGetTeamRank::set_team_members(int index, ::google::protobuf::uint32 value) {
  team_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRank.team_members)
}
inline void CMsgGCToGCGetTeamRank::add_team_members(::google::protobuf::uint32 value) {
  team_members_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCToGCGetTeamRank.team_members)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToGCGetTeamRank::team_members() const {
  // @@protoc_insertion_point(field_list:CMsgGCToGCGetTeamRank.team_members)
  return team_members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToGCGetTeamRank::mutable_team_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToGCGetTeamRank.team_members)
  return &team_members_;
}

// -------------------------------------------------------------------

// CMsgGCToGCGetTeamRankResponse

// optional bool valid_team = 1;
inline bool CMsgGCToGCGetTeamRankResponse::has_valid_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetTeamRankResponse::set_has_valid_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_has_valid_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_valid_team() {
  valid_team_ = false;
  clear_has_valid_team();
}
inline bool CMsgGCToGCGetTeamRankResponse::valid_team() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankResponse.valid_team)
  return valid_team_;
}
inline void CMsgGCToGCGetTeamRankResponse::set_valid_team(bool value) {
  set_has_valid_team();
  valid_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankResponse.valid_team)
}

// optional uint32 rank = 2;
inline bool CMsgGCToGCGetTeamRankResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCGetTeamRankResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRankResponse::rank() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankResponse.rank)
  return rank_;
}
inline void CMsgGCToGCGetTeamRankResponse::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankResponse.rank)
}

// optional uint32 games_won = 3;
inline bool CMsgGCToGCGetTeamRankResponse::has_games_won() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToGCGetTeamRankResponse::set_has_games_won() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_has_games_won() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToGCGetTeamRankResponse::clear_games_won() {
  games_won_ = 0u;
  clear_has_games_won();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetTeamRankResponse::games_won() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetTeamRankResponse.games_won)
  return games_won_;
}
inline void CMsgGCToGCGetTeamRankResponse::set_games_won(::google::protobuf::uint32 value) {
  set_has_games_won();
  games_won_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetTeamRankResponse.games_won)
}

// -------------------------------------------------------------------

// CMsgGCToGCUpdateTeamStats

// optional uint32 radiant_team = 1;
inline bool CMsgGCToGCUpdateTeamStats::has_radiant_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_radiant_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_radiant_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_radiant_team() {
  radiant_team_ = 0u;
  clear_has_radiant_team();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateTeamStats::radiant_team() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.radiant_team)
  return radiant_team_;
}
inline void CMsgGCToGCUpdateTeamStats::set_radiant_team(::google::protobuf::uint32 value) {
  set_has_radiant_team();
  radiant_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.radiant_team)
}

// optional bool radiant_team_complete = 2;
inline bool CMsgGCToGCUpdateTeamStats::has_radiant_team_complete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_radiant_team_complete() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_radiant_team_complete() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_radiant_team_complete() {
  radiant_team_complete_ = false;
  clear_has_radiant_team_complete();
}
inline bool CMsgGCToGCUpdateTeamStats::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.radiant_team_complete)
  return radiant_team_complete_;
}
inline void CMsgGCToGCUpdateTeamStats::set_radiant_team_complete(bool value) {
  set_has_radiant_team_complete();
  radiant_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.radiant_team_complete)
}

// optional uint32 dire_team = 3;
inline bool CMsgGCToGCUpdateTeamStats::has_dire_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_dire_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_dire_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_dire_team() {
  dire_team_ = 0u;
  clear_has_dire_team();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateTeamStats::dire_team() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.dire_team)
  return dire_team_;
}
inline void CMsgGCToGCUpdateTeamStats::set_dire_team(::google::protobuf::uint32 value) {
  set_has_dire_team();
  dire_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.dire_team)
}

// optional bool dire_team_complete = 4;
inline bool CMsgGCToGCUpdateTeamStats::has_dire_team_complete() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_dire_team_complete() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_dire_team_complete() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_dire_team_complete() {
  dire_team_complete_ = false;
  clear_has_dire_team_complete();
}
inline bool CMsgGCToGCUpdateTeamStats::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.dire_team_complete)
  return dire_team_complete_;
}
inline void CMsgGCToGCUpdateTeamStats::set_dire_team_complete(bool value) {
  set_has_dire_team_complete();
  dire_team_complete_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.dire_team_complete)
}

// optional uint32 lobby_type = 5;
inline bool CMsgGCToGCUpdateTeamStats::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateTeamStats::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.lobby_type)
  return lobby_type_;
}
inline void CMsgGCToGCUpdateTeamStats::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.lobby_type)
}

// optional uint32 league_id = 6;
inline bool CMsgGCToGCUpdateTeamStats::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCUpdateTeamStats::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.league_id)
  return league_id_;
}
inline void CMsgGCToGCUpdateTeamStats::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.league_id)
}

// optional bool radiant_team_won = 7;
inline bool CMsgGCToGCUpdateTeamStats::has_radiant_team_won() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToGCUpdateTeamStats::set_has_radiant_team_won() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_has_radiant_team_won() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToGCUpdateTeamStats::clear_radiant_team_won() {
  radiant_team_won_ = false;
  clear_has_radiant_team_won();
}
inline bool CMsgGCToGCUpdateTeamStats::radiant_team_won() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateTeamStats.radiant_team_won)
  return radiant_team_won_;
}
inline void CMsgGCToGCUpdateTeamStats::set_radiant_team_won(bool value) {
  set_has_radiant_team_won();
  radiant_team_won_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateTeamStats.radiant_team_won)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteTeamGuess

// optional uint32 league_id = 1;
inline bool CMsgDOTAPassportVoteTeamGuess::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.league_id)
  return league_id_;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.league_id)
}

// optional uint32 winner_id = 2;
inline bool CMsgDOTAPassportVoteTeamGuess::has_winner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_has_winner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_winner_id() {
  winner_id_ = 0u;
  clear_has_winner_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::winner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.winner_id)
  return winner_id_;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_winner_id(::google::protobuf::uint32 value) {
  set_has_winner_id();
  winner_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.winner_id)
}

// optional uint32 runnerup_id = 3;
inline bool CMsgDOTAPassportVoteTeamGuess::has_runnerup_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_has_runnerup_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_has_runnerup_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_runnerup_id() {
  runnerup_id_ = 0u;
  clear_has_runnerup_id();
}
inline ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::runnerup_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
  return runnerup_id_;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_runnerup_id(::google::protobuf::uint32 value) {
  set_has_runnerup_id();
  runnerup_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteGenericSelection

// optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_has_selection_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_has_selection_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection_index() {
  selection_index_ = 0;
  clear_has_selection_index();
}
inline ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::selection_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection_index)
  return static_cast< ::DOTA_2013PassportSelectionIndices >(selection_index_);
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  assert(::DOTA_2013PassportSelectionIndices_IsValid(value));
  set_has_selection_index();
  selection_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection_index)
}

// optional uint32 selection = 2;
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_has_selection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_has_selection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection() {
  selection_ = 0u;
  clear_has_selection();
}
inline ::google::protobuf::uint32 CMsgDOTAPassportVoteGenericSelection::selection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection)
  return selection_;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection(::google::protobuf::uint32 value) {
  set_has_selection();
  selection_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportStampedPlayer

// optional uint64 steam_id = 1;
inline bool CMsgDOTAPassportStampedPlayer::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPassportStampedPlayer::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPassportStampedPlayer::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPassportStampedPlayer::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAPassportStampedPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.steam_id)
  return steam_id_;
}
inline void CMsgDOTAPassportStampedPlayer::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.steam_id)
}

// optional uint32 stamp_level = 2;
inline bool CMsgDOTAPassportStampedPlayer::has_stamp_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPassportStampedPlayer::set_has_stamp_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPassportStampedPlayer::clear_has_stamp_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPassportStampedPlayer::clear_stamp_level() {
  stamp_level_ = 0u;
  clear_has_stamp_level();
}
inline ::google::protobuf::uint32 CMsgDOTAPassportStampedPlayer::stamp_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.stamp_level)
  return stamp_level_;
}
inline void CMsgDOTAPassportStampedPlayer::set_stamp_level(::google::protobuf::uint32 value) {
  set_has_stamp_level();
  stamp_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.stamp_level)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVote

// repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
inline int CMsgDOTAPassportVote::team_votes_size() const {
  return team_votes_.size();
}
inline void CMsgDOTAPassportVote::clear_team_votes() {
  team_votes_.Clear();
}
inline const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::team_votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Get(index);
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::mutable_team_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Mutable(index);
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::add_team_votes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
CMsgDOTAPassportVote::mutable_team_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.team_votes)
  return &team_votes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
CMsgDOTAPassportVote::team_votes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.team_votes)
  return team_votes_;
}

// repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
inline int CMsgDOTAPassportVote::generic_selections_size() const {
  return generic_selections_.size();
}
inline void CMsgDOTAPassportVote::clear_generic_selections() {
  generic_selections_.Clear();
}
inline const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::generic_selections(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Get(index);
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::mutable_generic_selections(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Mutable(index);
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::add_generic_selections() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
CMsgDOTAPassportVote::mutable_generic_selections() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.generic_selections)
  return &generic_selections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
CMsgDOTAPassportVote::generic_selections() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_;
}

// repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
inline int CMsgDOTAPassportVote::stamped_players_size() const {
  return stamped_players_.size();
}
inline void CMsgDOTAPassportVote::clear_stamped_players() {
  stamped_players_.Clear();
}
inline const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::stamped_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Get(index);
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::mutable_stamped_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Mutable(index);
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::add_stamped_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
CMsgDOTAPassportVote::mutable_stamped_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.stamped_players)
  return &stamped_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
CMsgDOTAPassportVote::stamped_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_;
}

// -------------------------------------------------------------------

// CMsgPassportDataRequest

// optional uint32 account_id = 1;
inline bool CMsgPassportDataRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPassportDataRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPassportDataRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPassportDataRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataRequest.account_id)
  return account_id_;
}
inline void CMsgPassportDataRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataRequest.account_id)
}

// -------------------------------------------------------------------

// CMsgPassportDataResponse

// optional uint32 account_id = 1;
inline bool CMsgPassportDataResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPassportDataResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPassportDataResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPassportDataResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.account_id)
  return account_id_;
}
inline void CMsgPassportDataResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.account_id)
}

// optional uint32 result = 2 [default = 2];
inline bool CMsgPassportDataResponse::has_result() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgPassportDataResponse::set_has_result() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgPassportDataResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgPassportDataResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.result)
  return result_;
}
inline void CMsgPassportDataResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.result)
}

// optional .CMsgDOTATournament east_qualifiers = 3;
inline bool CMsgPassportDataResponse::has_east_qualifiers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPassportDataResponse::set_has_east_qualifiers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPassportDataResponse::clear_has_east_qualifiers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPassportDataResponse::clear_east_qualifiers() {
  if (east_qualifiers_ != NULL) east_qualifiers_->Clear();
  clear_has_east_qualifiers();
}
inline const ::CMsgDOTATournament& CMsgPassportDataResponse::east_qualifiers() const {
  const ::CMsgDOTATournament* p = east_qualifiers_;
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATournament*>(
      &::_CMsgDOTATournament_default_instance_);
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::release_east_qualifiers() {
  // @@protoc_insertion_point(field_release:CMsgPassportDataResponse.east_qualifiers)
  clear_has_east_qualifiers();
  ::CMsgDOTATournament* temp = east_qualifiers_;
  east_qualifiers_ = NULL;
  return temp;
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::mutable_east_qualifiers() {
  set_has_east_qualifiers();
  if (east_qualifiers_ == NULL) {
    east_qualifiers_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.east_qualifiers)
  return east_qualifiers_;
}
inline void CMsgPassportDataResponse::set_allocated_east_qualifiers(::CMsgDOTATournament* east_qualifiers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete east_qualifiers_;
  }
  if (east_qualifiers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      east_qualifiers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, east_qualifiers, submessage_arena);
    }
    set_has_east_qualifiers();
  } else {
    clear_has_east_qualifiers();
  }
  east_qualifiers_ = east_qualifiers;
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.east_qualifiers)
}

// optional .CMsgDOTATournament west_qualifiers = 4;
inline bool CMsgPassportDataResponse::has_west_qualifiers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPassportDataResponse::set_has_west_qualifiers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPassportDataResponse::clear_has_west_qualifiers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPassportDataResponse::clear_west_qualifiers() {
  if (west_qualifiers_ != NULL) west_qualifiers_->Clear();
  clear_has_west_qualifiers();
}
inline const ::CMsgDOTATournament& CMsgPassportDataResponse::west_qualifiers() const {
  const ::CMsgDOTATournament* p = west_qualifiers_;
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATournament*>(
      &::_CMsgDOTATournament_default_instance_);
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::release_west_qualifiers() {
  // @@protoc_insertion_point(field_release:CMsgPassportDataResponse.west_qualifiers)
  clear_has_west_qualifiers();
  ::CMsgDOTATournament* temp = west_qualifiers_;
  west_qualifiers_ = NULL;
  return temp;
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::mutable_west_qualifiers() {
  set_has_west_qualifiers();
  if (west_qualifiers_ == NULL) {
    west_qualifiers_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.west_qualifiers)
  return west_qualifiers_;
}
inline void CMsgPassportDataResponse::set_allocated_west_qualifiers(::CMsgDOTATournament* west_qualifiers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete west_qualifiers_;
  }
  if (west_qualifiers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      west_qualifiers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, west_qualifiers, submessage_arena);
    }
    set_has_west_qualifiers();
  } else {
    clear_has_west_qualifiers();
  }
  west_qualifiers_ = west_qualifiers;
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.west_qualifiers)
}

// optional .CMsgDOTATournament international = 5;
inline bool CMsgPassportDataResponse::has_international() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPassportDataResponse::set_has_international() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPassportDataResponse::clear_has_international() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPassportDataResponse::clear_international() {
  if (international_ != NULL) international_->Clear();
  clear_has_international();
}
inline const ::CMsgDOTATournament& CMsgPassportDataResponse::international() const {
  const ::CMsgDOTATournament* p = international_;
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.international)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTATournament*>(
      &::_CMsgDOTATournament_default_instance_);
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::release_international() {
  // @@protoc_insertion_point(field_release:CMsgPassportDataResponse.international)
  clear_has_international();
  ::CMsgDOTATournament* temp = international_;
  international_ = NULL;
  return temp;
}
inline ::CMsgDOTATournament* CMsgPassportDataResponse::mutable_international() {
  set_has_international();
  if (international_ == NULL) {
    international_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.international)
  return international_;
}
inline void CMsgPassportDataResponse::set_allocated_international(::CMsgDOTATournament* international) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete international_;
  }
  if (international) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      international = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, international, submessage_arena);
    }
    set_has_international();
  } else {
    clear_has_international();
  }
  international_ = international;
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.international)
}

// optional uint32 east_qualifiers_predict_end_time = 7;
inline bool CMsgPassportDataResponse::has_east_qualifiers_predict_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPassportDataResponse::set_has_east_qualifiers_predict_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPassportDataResponse::clear_has_east_qualifiers_predict_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPassportDataResponse::clear_east_qualifiers_predict_end_time() {
  east_qualifiers_predict_end_time_ = 0u;
  clear_has_east_qualifiers_predict_end_time();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_predict_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_predict_end_time)
  return east_qualifiers_predict_end_time_;
}
inline void CMsgPassportDataResponse::set_east_qualifiers_predict_end_time(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_predict_end_time();
  east_qualifiers_predict_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_predict_end_time)
}

// optional uint32 west_qualifiers_predict_end_time = 8;
inline bool CMsgPassportDataResponse::has_west_qualifiers_predict_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPassportDataResponse::set_has_west_qualifiers_predict_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPassportDataResponse::clear_has_west_qualifiers_predict_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPassportDataResponse::clear_west_qualifiers_predict_end_time() {
  west_qualifiers_predict_end_time_ = 0u;
  clear_has_west_qualifiers_predict_end_time();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_predict_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_predict_end_time)
  return west_qualifiers_predict_end_time_;
}
inline void CMsgPassportDataResponse::set_west_qualifiers_predict_end_time(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_predict_end_time();
  west_qualifiers_predict_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_predict_end_time)
}

// optional uint32 allstar_match_end_time = 9;
inline bool CMsgPassportDataResponse::has_allstar_match_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPassportDataResponse::set_has_allstar_match_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPassportDataResponse::clear_has_allstar_match_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPassportDataResponse::clear_allstar_match_end_time() {
  allstar_match_end_time_ = 0u;
  clear_has_allstar_match_end_time();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::allstar_match_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.allstar_match_end_time)
  return allstar_match_end_time_;
}
inline void CMsgPassportDataResponse::set_allstar_match_end_time(::google::protobuf::uint32 value) {
  set_has_allstar_match_end_time();
  allstar_match_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.allstar_match_end_time)
}

// optional .CMsgDOTAPassportVote league_guesses = 6;
inline bool CMsgPassportDataResponse::has_league_guesses() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPassportDataResponse::set_has_league_guesses() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPassportDataResponse::clear_has_league_guesses() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPassportDataResponse::clear_league_guesses() {
  if (league_guesses_ != NULL) league_guesses_->Clear();
  clear_has_league_guesses();
}
inline const ::CMsgDOTAPassportVote& CMsgPassportDataResponse::league_guesses() const {
  const ::CMsgDOTAPassportVote* p = league_guesses_;
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.league_guesses)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgDOTAPassportVote*>(
      &::_CMsgDOTAPassportVote_default_instance_);
}
inline ::CMsgDOTAPassportVote* CMsgPassportDataResponse::release_league_guesses() {
  // @@protoc_insertion_point(field_release:CMsgPassportDataResponse.league_guesses)
  clear_has_league_guesses();
  ::CMsgDOTAPassportVote* temp = league_guesses_;
  league_guesses_ = NULL;
  return temp;
}
inline ::CMsgDOTAPassportVote* CMsgPassportDataResponse::mutable_league_guesses() {
  set_has_league_guesses();
  if (league_guesses_ == NULL) {
    league_guesses_ = new ::CMsgDOTAPassportVote;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.league_guesses)
  return league_guesses_;
}
inline void CMsgPassportDataResponse::set_allocated_league_guesses(::CMsgDOTAPassportVote* league_guesses) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete league_guesses_;
  }
  if (league_guesses) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      league_guesses = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, league_guesses, submessage_arena);
    }
    set_has_league_guesses();
  } else {
    clear_has_league_guesses();
  }
  league_guesses_ = league_guesses;
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.league_guesses)
}

// optional uint32 east_qualifiers_winner_team_id = 10;
inline bool CMsgPassportDataResponse::has_east_qualifiers_winner_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPassportDataResponse::set_has_east_qualifiers_winner_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPassportDataResponse::clear_has_east_qualifiers_winner_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPassportDataResponse::clear_east_qualifiers_winner_team_id() {
  east_qualifiers_winner_team_id_ = 0u;
  clear_has_east_qualifiers_winner_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_winner_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_winner_team_id)
  return east_qualifiers_winner_team_id_;
}
inline void CMsgPassportDataResponse::set_east_qualifiers_winner_team_id(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_winner_team_id();
  east_qualifiers_winner_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_winner_team_id)
}

// optional uint32 east_qualifiers_runner_up_team_id = 11;
inline bool CMsgPassportDataResponse::has_east_qualifiers_runner_up_team_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPassportDataResponse::set_has_east_qualifiers_runner_up_team_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPassportDataResponse::clear_has_east_qualifiers_runner_up_team_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPassportDataResponse::clear_east_qualifiers_runner_up_team_id() {
  east_qualifiers_runner_up_team_id_ = 0u;
  clear_has_east_qualifiers_runner_up_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_runner_up_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_runner_up_team_id)
  return east_qualifiers_runner_up_team_id_;
}
inline void CMsgPassportDataResponse::set_east_qualifiers_runner_up_team_id(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_runner_up_team_id();
  east_qualifiers_runner_up_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_runner_up_team_id)
}

// optional uint32 west_qualifiers_winner_team_id = 12;
inline bool CMsgPassportDataResponse::has_west_qualifiers_winner_team_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPassportDataResponse::set_has_west_qualifiers_winner_team_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPassportDataResponse::clear_has_west_qualifiers_winner_team_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPassportDataResponse::clear_west_qualifiers_winner_team_id() {
  west_qualifiers_winner_team_id_ = 0u;
  clear_has_west_qualifiers_winner_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_winner_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_winner_team_id)
  return west_qualifiers_winner_team_id_;
}
inline void CMsgPassportDataResponse::set_west_qualifiers_winner_team_id(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_winner_team_id();
  west_qualifiers_winner_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_winner_team_id)
}

// optional uint32 west_qualifiers_runner_up_team_id = 13;
inline bool CMsgPassportDataResponse::has_west_qualifiers_runner_up_team_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPassportDataResponse::set_has_west_qualifiers_runner_up_team_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPassportDataResponse::clear_has_west_qualifiers_runner_up_team_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPassportDataResponse::clear_west_qualifiers_runner_up_team_id() {
  west_qualifiers_runner_up_team_id_ = 0u;
  clear_has_west_qualifiers_runner_up_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_runner_up_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_runner_up_team_id)
  return west_qualifiers_runner_up_team_id_;
}
inline void CMsgPassportDataResponse::set_west_qualifiers_runner_up_team_id(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_runner_up_team_id();
  west_qualifiers_runner_up_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_runner_up_team_id)
}

// optional uint32 passports_bought = 14;
inline bool CMsgPassportDataResponse::has_passports_bought() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgPassportDataResponse::set_has_passports_bought() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgPassportDataResponse::clear_has_passports_bought() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgPassportDataResponse::clear_passports_bought() {
  passports_bought_ = 0u;
  clear_has_passports_bought();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::passports_bought() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.passports_bought)
  return passports_bought_;
}
inline void CMsgPassportDataResponse::set_passports_bought(::google::protobuf::uint32 value) {
  set_has_passports_bought();
  passports_bought_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.passports_bought)
}

// optional uint32 original_purchaser_id = 15;
inline bool CMsgPassportDataResponse::has_original_purchaser_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgPassportDataResponse::set_has_original_purchaser_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgPassportDataResponse::clear_has_original_purchaser_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgPassportDataResponse::clear_original_purchaser_id() {
  original_purchaser_id_ = 0u;
  clear_has_original_purchaser_id();
}
inline ::google::protobuf::uint32 CMsgPassportDataResponse::original_purchaser_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.original_purchaser_id)
  return original_purchaser_id_;
}
inline void CMsgPassportDataResponse::set_original_purchaser_id(::google::protobuf::uint32 value) {
  set_has_original_purchaser_id();
  original_purchaser_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.original_purchaser_id)
}

// -------------------------------------------------------------------

// CMsgPassportFeaturedMatchRequest

// optional uint32 league_id = 1;
inline bool CMsgPassportFeaturedMatchRequest::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPassportFeaturedMatchRequest::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPassportFeaturedMatchRequest::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPassportFeaturedMatchRequest::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchRequest.league_id)
  return league_id_;
}
inline void CMsgPassportFeaturedMatchRequest::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchRequest.league_id)
}

// -------------------------------------------------------------------

// CMsgPassportFeaturedMatchResponse

// optional uint32 result = 1 [default = 2];
inline bool CMsgPassportFeaturedMatchResponse::has_result() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_result() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.result)
  return result_;
}
inline void CMsgPassportFeaturedMatchResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.result)
}

// optional uint32 league_id = 2;
inline bool CMsgPassportFeaturedMatchResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.league_id)
  return league_id_;
}
inline void CMsgPassportFeaturedMatchResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.league_id)
}

// optional uint32 featured_match_id = 3;
inline bool CMsgPassportFeaturedMatchResponse::has_featured_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_featured_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_featured_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_featured_match_id() {
  featured_match_id_ = 0u;
  clear_has_featured_match_id();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::featured_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.featured_match_id)
  return featured_match_id_;
}
inline void CMsgPassportFeaturedMatchResponse::set_featured_match_id(::google::protobuf::uint32 value) {
  set_has_featured_match_id();
  featured_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.featured_match_id)
}

// optional uint32 radiant_team_id = 4;
inline bool CMsgPassportFeaturedMatchResponse::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.radiant_team_id)
}

// optional uint64 radiant_team_logo = 5;
inline bool CMsgPassportFeaturedMatchResponse::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
inline ::google::protobuf::uint64 CMsgPassportFeaturedMatchResponse::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.radiant_team_logo)
}

// optional string radiant_team_name = 6;
inline bool CMsgPassportFeaturedMatchResponse::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_name();
}
inline const ::std::string& CMsgPassportFeaturedMatchResponse::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.radiant_team_name)
}
#if LANG_CXX11
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_name(::std::string&& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPassportFeaturedMatchResponse.radiant_team_name)
}
#endif
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPassportFeaturedMatchResponse.radiant_team_name)
}
inline void CMsgPassportFeaturedMatchResponse::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPassportFeaturedMatchResponse.radiant_team_name)
}
inline ::std::string* CMsgPassportFeaturedMatchResponse::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgPassportFeaturedMatchResponse.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPassportFeaturedMatchResponse::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:CMsgPassportFeaturedMatchResponse.radiant_team_name)
  clear_has_radiant_team_name();
  return radiant_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPassportFeaturedMatchResponse::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != NULL) {
    set_has_radiant_team_name();
  } else {
    clear_has_radiant_team_name();
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportFeaturedMatchResponse.radiant_team_name)
}

// repeated uint32 radiant_heroes = 7;
inline int CMsgPassportFeaturedMatchResponse::radiant_heroes_size() const {
  return radiant_heroes_.size();
}
inline void CMsgPassportFeaturedMatchResponse::clear_radiant_heroes() {
  radiant_heroes_.Clear();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::radiant_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.radiant_heroes)
  return radiant_heroes_.Get(index);
}
inline void CMsgPassportFeaturedMatchResponse::set_radiant_heroes(int index, ::google::protobuf::uint32 value) {
  radiant_heroes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.radiant_heroes)
}
inline void CMsgPassportFeaturedMatchResponse::add_radiant_heroes(::google::protobuf::uint32 value) {
  radiant_heroes_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgPassportFeaturedMatchResponse.radiant_heroes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgPassportFeaturedMatchResponse::radiant_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgPassportFeaturedMatchResponse.radiant_heroes)
  return radiant_heroes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgPassportFeaturedMatchResponse::mutable_radiant_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPassportFeaturedMatchResponse.radiant_heroes)
  return &radiant_heroes_;
}

// optional uint32 dire_team_id = 8;
inline bool CMsgPassportFeaturedMatchResponse::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.dire_team_id)
  return dire_team_id_;
}
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.dire_team_id)
}

// optional uint64 dire_team_logo = 9;
inline bool CMsgPassportFeaturedMatchResponse::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
inline ::google::protobuf::uint64 CMsgPassportFeaturedMatchResponse::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.dire_team_logo)
}

// optional string dire_team_name = 10;
inline bool CMsgPassportFeaturedMatchResponse::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_name();
}
inline const ::std::string& CMsgPassportFeaturedMatchResponse::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.dire_team_name)
  return dire_team_name_.GetNoArena();
}
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.dire_team_name)
}
#if LANG_CXX11
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_name(::std::string&& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgPassportFeaturedMatchResponse.dire_team_name)
}
#endif
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgPassportFeaturedMatchResponse.dire_team_name)
}
inline void CMsgPassportFeaturedMatchResponse::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgPassportFeaturedMatchResponse.dire_team_name)
}
inline ::std::string* CMsgPassportFeaturedMatchResponse::mutable_dire_team_name() {
  set_has_dire_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgPassportFeaturedMatchResponse.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgPassportFeaturedMatchResponse::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:CMsgPassportFeaturedMatchResponse.dire_team_name)
  clear_has_dire_team_name();
  return dire_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgPassportFeaturedMatchResponse::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != NULL) {
    set_has_dire_team_name();
  } else {
    clear_has_dire_team_name();
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportFeaturedMatchResponse.dire_team_name)
}

// repeated uint32 dire_heroes = 11;
inline int CMsgPassportFeaturedMatchResponse::dire_heroes_size() const {
  return dire_heroes_.size();
}
inline void CMsgPassportFeaturedMatchResponse::clear_dire_heroes() {
  dire_heroes_.Clear();
}
inline ::google::protobuf::uint32 CMsgPassportFeaturedMatchResponse::dire_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.dire_heroes)
  return dire_heroes_.Get(index);
}
inline void CMsgPassportFeaturedMatchResponse::set_dire_heroes(int index, ::google::protobuf::uint32 value) {
  dire_heroes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.dire_heroes)
}
inline void CMsgPassportFeaturedMatchResponse::add_dire_heroes(::google::protobuf::uint32 value) {
  dire_heroes_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgPassportFeaturedMatchResponse.dire_heroes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgPassportFeaturedMatchResponse::dire_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgPassportFeaturedMatchResponse.dire_heroes)
  return dire_heroes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgPassportFeaturedMatchResponse::mutable_dire_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPassportFeaturedMatchResponse.dire_heroes)
  return &dire_heroes_;
}

// optional bool has_passport = 12;
inline bool CMsgPassportFeaturedMatchResponse::has_has_passport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_has_passport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_has_passport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPassportFeaturedMatchResponse::clear_has_passport() {
  has_passport_ = false;
  clear_has_has_passport();
}
inline bool CMsgPassportFeaturedMatchResponse::has_passport() const {
  // @@protoc_insertion_point(field_get:CMsgPassportFeaturedMatchResponse.has_passport)
  return has_passport_;
}
inline void CMsgPassportFeaturedMatchResponse::set_has_passport(bool value) {
  set_has_has_passport();
  has_passport_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportFeaturedMatchResponse.has_passport)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetLeagueAdmin

// optional uint32 account_id = 1;
inline bool CMsgGCToGCGetLeagueAdmin::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetLeagueAdmin::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetLeagueAdmin::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetLeagueAdmin::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetLeagueAdmin::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetLeagueAdmin.account_id)
  return account_id_;
}
inline void CMsgGCToGCGetLeagueAdmin::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetLeagueAdmin.account_id)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToGCGetLeagueAdmin::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToGCGetLeagueAdmin::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToGCGetLeagueAdmin::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToGCGetLeagueAdmin::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToGCGetLeagueAdmin::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetLeagueAdmin.league_id)
  return league_id_;
}
inline void CMsgGCToGCGetLeagueAdmin::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetLeagueAdmin.league_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCGetLeagueAdminResponse

// optional bool has_admin_access = 1;
inline bool CMsgGCToGCGetLeagueAdminResponse::has_has_admin_access() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCGetLeagueAdminResponse::set_has_has_admin_access() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCGetLeagueAdminResponse::clear_has_has_admin_access() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCGetLeagueAdminResponse::clear_has_admin_access() {
  has_admin_access_ = false;
  clear_has_has_admin_access();
}
inline bool CMsgGCToGCGetLeagueAdminResponse::has_admin_access() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCGetLeagueAdminResponse.has_admin_access)
  return has_admin_access_;
}
inline void CMsgGCToGCGetLeagueAdminResponse::set_has_admin_access(bool value) {
  set_has_has_admin_access();
  has_admin_access_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCGetLeagueAdminResponse.has_admin_access)
}

// -------------------------------------------------------------------

// CMsgRequestLeaguePrizePool

// optional uint32 league_id = 1;
inline bool CMsgRequestLeaguePrizePool::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRequestLeaguePrizePool::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRequestLeaguePrizePool::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRequestLeaguePrizePool::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgRequestLeaguePrizePool::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgRequestLeaguePrizePool.league_id)
  return league_id_;
}
inline void CMsgRequestLeaguePrizePool::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestLeaguePrizePool.league_id)
}

// -------------------------------------------------------------------

// CMsgRequestLeaguePrizePoolResponse

// optional uint32 league_id = 1;
inline bool CMsgRequestLeaguePrizePoolResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRequestLeaguePrizePoolResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRequestLeaguePrizePoolResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRequestLeaguePrizePoolResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgRequestLeaguePrizePoolResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgRequestLeaguePrizePoolResponse.league_id)
  return league_id_;
}
inline void CMsgRequestLeaguePrizePoolResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestLeaguePrizePoolResponse.league_id)
}

// optional uint32 prize_pool = 2;
inline bool CMsgRequestLeaguePrizePoolResponse::has_prize_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRequestLeaguePrizePoolResponse::set_has_prize_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRequestLeaguePrizePoolResponse::clear_has_prize_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRequestLeaguePrizePoolResponse::clear_prize_pool() {
  prize_pool_ = 0u;
  clear_has_prize_pool();
}
inline ::google::protobuf::uint32 CMsgRequestLeaguePrizePoolResponse::prize_pool() const {
  // @@protoc_insertion_point(field_get:CMsgRequestLeaguePrizePoolResponse.prize_pool)
  return prize_pool_;
}
inline void CMsgRequestLeaguePrizePoolResponse::set_prize_pool(::google::protobuf::uint32 value) {
  set_has_prize_pool();
  prize_pool_ = value;
  // @@protoc_insertion_point(field_set:CMsgRequestLeaguePrizePoolResponse.prize_pool)
}

// -------------------------------------------------------------------

// CMsgGCToGCUpdateMatchmakingStats

// optional bytes msg_body = 1;
inline bool CMsgGCToGCUpdateMatchmakingStats::has_msg_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToGCUpdateMatchmakingStats::set_has_msg_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToGCUpdateMatchmakingStats::clear_has_msg_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToGCUpdateMatchmakingStats::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_body();
}
inline const ::std::string& CMsgGCToGCUpdateMatchmakingStats::msg_body() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateMatchmakingStats.msg_body)
  return msg_body_.GetNoArena();
}
inline void CMsgGCToGCUpdateMatchmakingStats::set_msg_body(const ::std::string& value) {
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateMatchmakingStats.msg_body)
}
#if LANG_CXX11
inline void CMsgGCToGCUpdateMatchmakingStats::set_msg_body(::std::string&& value) {
  set_has_msg_body();
  msg_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCToGCUpdateMatchmakingStats.msg_body)
}
#endif
inline void CMsgGCToGCUpdateMatchmakingStats::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCToGCUpdateMatchmakingStats.msg_body)
}
inline void CMsgGCToGCUpdateMatchmakingStats::set_msg_body(const void* value, size_t size) {
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToGCUpdateMatchmakingStats.msg_body)
}
inline ::std::string* CMsgGCToGCUpdateMatchmakingStats::mutable_msg_body() {
  set_has_msg_body();
  // @@protoc_insertion_point(field_mutable:CMsgGCToGCUpdateMatchmakingStats.msg_body)
  return msg_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToGCUpdateMatchmakingStats::release_msg_body() {
  // @@protoc_insertion_point(field_release:CMsgGCToGCUpdateMatchmakingStats.msg_body)
  clear_has_msg_body();
  return msg_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToGCUpdateMatchmakingStats::set_allocated_msg_body(::std::string* msg_body) {
  if (msg_body != NULL) {
    set_has_msg_body();
  } else {
    clear_has_msg_body();
  }
  msg_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToGCUpdateMatchmakingStats.msg_body)
}

// -------------------------------------------------------------------

// CMsgGCGetHeroStandings

// -------------------------------------------------------------------

// CMsgGCGetHeroStandingsResponse_Hero

// optional uint32 hero_id = 1;
inline bool CMsgGCGetHeroStandingsResponse_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGCGetHeroStandingsResponse_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetHeroStandingsResponse.Hero.hero_id)
  return hero_id_;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetHeroStandingsResponse.Hero.hero_id)
}

// optional uint32 wins = 2;
inline bool CMsgGCGetHeroStandingsResponse_Hero::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CMsgGCGetHeroStandingsResponse_Hero::wins() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetHeroStandingsResponse.Hero.wins)
  return wins_;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetHeroStandingsResponse.Hero.wins)
}

// optional uint32 losses = 3;
inline bool CMsgGCGetHeroStandingsResponse_Hero::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CMsgGCGetHeroStandingsResponse_Hero::losses() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetHeroStandingsResponse.Hero.losses)
  return losses_;
}
inline void CMsgGCGetHeroStandingsResponse_Hero::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCGetHeroStandingsResponse.Hero.losses)
}

// -------------------------------------------------------------------

// CMsgGCGetHeroStandingsResponse

// repeated .CMsgGCGetHeroStandingsResponse.Hero standings = 1;
inline int CMsgGCGetHeroStandingsResponse::standings_size() const {
  return standings_.size();
}
inline void CMsgGCGetHeroStandingsResponse::clear_standings() {
  standings_.Clear();
}
inline const ::CMsgGCGetHeroStandingsResponse_Hero& CMsgGCGetHeroStandingsResponse::standings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetHeroStandingsResponse.standings)
  return standings_.Get(index);
}
inline ::CMsgGCGetHeroStandingsResponse_Hero* CMsgGCGetHeroStandingsResponse::mutable_standings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCGetHeroStandingsResponse.standings)
  return standings_.Mutable(index);
}
inline ::CMsgGCGetHeroStandingsResponse_Hero* CMsgGCGetHeroStandingsResponse::add_standings() {
  // @@protoc_insertion_point(field_add:CMsgGCGetHeroStandingsResponse.standings)
  return standings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCGetHeroStandingsResponse_Hero >*
CMsgGCGetHeroStandingsResponse::mutable_standings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetHeroStandingsResponse.standings)
  return &standings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCGetHeroStandingsResponse_Hero >&
CMsgGCGetHeroStandingsResponse::standings() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetHeroStandingsResponse.standings)
  return standings_;
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReservationsRequest

// -------------------------------------------------------------------

// CMsgGCItemEditorReservation

// optional uint32 def_index = 1;
inline bool CMsgGCItemEditorReservation::has_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCItemEditorReservation::set_has_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCItemEditorReservation::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCItemEditorReservation::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReservation::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReservation.def_index)
  return def_index_;
}
inline void CMsgGCItemEditorReservation::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReservation.def_index)
}

// optional string name = 2;
inline bool CMsgGCItemEditorReservation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCItemEditorReservation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCItemEditorReservation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCItemEditorReservation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgGCItemEditorReservation::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReservation.name)
  return name_.GetNoArena();
}
inline void CMsgGCItemEditorReservation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReservation.name)
}
#if LANG_CXX11
inline void CMsgGCItemEditorReservation::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCItemEditorReservation.name)
}
#endif
inline void CMsgGCItemEditorReservation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCItemEditorReservation.name)
}
inline void CMsgGCItemEditorReservation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCItemEditorReservation.name)
}
inline ::std::string* CMsgGCItemEditorReservation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCItemEditorReservation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCItemEditorReservation::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGCItemEditorReservation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCItemEditorReservation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCItemEditorReservation.name)
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReservationsResponse

// repeated .CMsgGCItemEditorReservation reservations = 1;
inline int CMsgGCItemEditorReservationsResponse::reservations_size() const {
  return reservations_.size();
}
inline void CMsgGCItemEditorReservationsResponse::clear_reservations() {
  reservations_.Clear();
}
inline const ::CMsgGCItemEditorReservation& CMsgGCItemEditorReservationsResponse::reservations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReservationsResponse.reservations)
  return reservations_.Get(index);
}
inline ::CMsgGCItemEditorReservation* CMsgGCItemEditorReservationsResponse::mutable_reservations(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCItemEditorReservationsResponse.reservations)
  return reservations_.Mutable(index);
}
inline ::CMsgGCItemEditorReservation* CMsgGCItemEditorReservationsResponse::add_reservations() {
  // @@protoc_insertion_point(field_add:CMsgGCItemEditorReservationsResponse.reservations)
  return reservations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCItemEditorReservation >*
CMsgGCItemEditorReservationsResponse::mutable_reservations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCItemEditorReservationsResponse.reservations)
  return &reservations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCItemEditorReservation >&
CMsgGCItemEditorReservationsResponse::reservations() const {
  // @@protoc_insertion_point(field_list:CMsgGCItemEditorReservationsResponse.reservations)
  return reservations_;
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReserveItemDef

// optional uint32 def_index = 1;
inline bool CMsgGCItemEditorReserveItemDef::has_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCItemEditorReserveItemDef::set_has_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCItemEditorReserveItemDef::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCItemEditorReserveItemDef::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReserveItemDef::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReserveItemDef.def_index)
  return def_index_;
}
inline void CMsgGCItemEditorReserveItemDef::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReserveItemDef.def_index)
}

// optional string username = 2;
inline bool CMsgGCItemEditorReserveItemDef::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCItemEditorReserveItemDef::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCItemEditorReserveItemDef::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCItemEditorReserveItemDef::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& CMsgGCItemEditorReserveItemDef::username() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReserveItemDef.username)
  return username_.GetNoArena();
}
inline void CMsgGCItemEditorReserveItemDef::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReserveItemDef.username)
}
#if LANG_CXX11
inline void CMsgGCItemEditorReserveItemDef::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCItemEditorReserveItemDef.username)
}
#endif
inline void CMsgGCItemEditorReserveItemDef::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCItemEditorReserveItemDef.username)
}
inline void CMsgGCItemEditorReserveItemDef::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCItemEditorReserveItemDef.username)
}
inline ::std::string* CMsgGCItemEditorReserveItemDef::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CMsgGCItemEditorReserveItemDef.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCItemEditorReserveItemDef::release_username() {
  // @@protoc_insertion_point(field_release:CMsgGCItemEditorReserveItemDef.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCItemEditorReserveItemDef::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCItemEditorReserveItemDef.username)
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReserveItemDefResponse

// optional uint32 def_index = 1;
inline bool CMsgGCItemEditorReserveItemDefResponse::has_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_has_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReserveItemDefResponse::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReserveItemDefResponse.def_index)
  return def_index_;
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReserveItemDefResponse.def_index)
}

// optional string username = 2;
inline bool CMsgGCItemEditorReserveItemDefResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& CMsgGCItemEditorReserveItemDefResponse::username() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReserveItemDefResponse.username)
  return username_.GetNoArena();
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReserveItemDefResponse.username)
}
#if LANG_CXX11
inline void CMsgGCItemEditorReserveItemDefResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCItemEditorReserveItemDefResponse.username)
}
#endif
inline void CMsgGCItemEditorReserveItemDefResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCItemEditorReserveItemDefResponse.username)
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCItemEditorReserveItemDefResponse.username)
}
inline ::std::string* CMsgGCItemEditorReserveItemDefResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CMsgGCItemEditorReserveItemDefResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCItemEditorReserveItemDefResponse::release_username() {
  // @@protoc_insertion_point(field_release:CMsgGCItemEditorReserveItemDefResponse.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCItemEditorReserveItemDefResponse.username)
}

// optional uint32 result = 3;
inline bool CMsgGCItemEditorReserveItemDefResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCItemEditorReserveItemDefResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReserveItemDefResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReserveItemDefResponse.result)
  return result_;
}
inline void CMsgGCItemEditorReserveItemDefResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReserveItemDefResponse.result)
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReleaseReservation

// optional uint32 def_index = 1;
inline bool CMsgGCItemEditorReleaseReservation::has_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCItemEditorReleaseReservation::set_has_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCItemEditorReleaseReservation::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCItemEditorReleaseReservation::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReleaseReservation::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReleaseReservation.def_index)
  return def_index_;
}
inline void CMsgGCItemEditorReleaseReservation::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReleaseReservation.def_index)
}

// optional string username = 2;
inline bool CMsgGCItemEditorReleaseReservation::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCItemEditorReleaseReservation::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCItemEditorReleaseReservation::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCItemEditorReleaseReservation::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& CMsgGCItemEditorReleaseReservation::username() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReleaseReservation.username)
  return username_.GetNoArena();
}
inline void CMsgGCItemEditorReleaseReservation::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReleaseReservation.username)
}
#if LANG_CXX11
inline void CMsgGCItemEditorReleaseReservation::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCItemEditorReleaseReservation.username)
}
#endif
inline void CMsgGCItemEditorReleaseReservation::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCItemEditorReleaseReservation.username)
}
inline void CMsgGCItemEditorReleaseReservation::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCItemEditorReleaseReservation.username)
}
inline ::std::string* CMsgGCItemEditorReleaseReservation::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CMsgGCItemEditorReleaseReservation.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCItemEditorReleaseReservation::release_username() {
  // @@protoc_insertion_point(field_release:CMsgGCItemEditorReleaseReservation.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCItemEditorReleaseReservation::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCItemEditorReleaseReservation.username)
}

// -------------------------------------------------------------------

// CMsgGCItemEditorReleaseReservationResponse

// optional uint32 def_index = 1;
inline bool CMsgGCItemEditorReleaseReservationResponse::has_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCItemEditorReleaseReservationResponse::set_has_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCItemEditorReleaseReservationResponse::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCItemEditorReleaseReservationResponse::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgGCItemEditorReleaseReservationResponse::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReleaseReservationResponse.def_index)
  return def_index_;
}
inline void CMsgGCItemEditorReleaseReservationResponse::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReleaseReservationResponse.def_index)
}

// optional bool released = 2;
inline bool CMsgGCItemEditorReleaseReservationResponse::has_released() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCItemEditorReleaseReservationResponse::set_has_released() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCItemEditorReleaseReservationResponse::clear_has_released() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCItemEditorReleaseReservationResponse::clear_released() {
  released_ = false;
  clear_has_released();
}
inline bool CMsgGCItemEditorReleaseReservationResponse::released() const {
  // @@protoc_insertion_point(field_get:CMsgGCItemEditorReleaseReservationResponse.released)
  return released_;
}
inline void CMsgGCItemEditorReleaseReservationResponse::set_released(bool value) {
  set_has_released();
  released_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCItemEditorReleaseReservationResponse.released)
}

// -------------------------------------------------------------------

// CMsgDOTARewardTutorialPrizes

// optional uint32 location_id = 1;
inline bool CMsgDOTARewardTutorialPrizes::has_location_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARewardTutorialPrizes::set_has_location_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARewardTutorialPrizes::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARewardTutorialPrizes::clear_location_id() {
  location_id_ = 0u;
  clear_has_location_id();
}
inline ::google::protobuf::uint32 CMsgDOTARewardTutorialPrizes::location_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARewardTutorialPrizes.location_id)
  return location_id_;
}
inline void CMsgDOTARewardTutorialPrizes::set_location_id(::google::protobuf::uint32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARewardTutorialPrizes.location_id)
}

// -------------------------------------------------------------------

// CMsgDOTALastHitChallengeHighScorePost

// optional uint32 hero_id = 1;
inline bool CMsgDOTALastHitChallengeHighScorePost::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALastHitChallengeHighScorePost::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScorePost::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScorePost::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTALastHitChallengeHighScorePost::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALastHitChallengeHighScorePost.hero_id)
  return hero_id_;
}
inline void CMsgDOTALastHitChallengeHighScorePost::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALastHitChallengeHighScorePost.hero_id)
}

// optional uint32 high_score = 2;
inline bool CMsgDOTALastHitChallengeHighScorePost::has_high_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALastHitChallengeHighScorePost::set_has_high_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALastHitChallengeHighScorePost::clear_has_high_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALastHitChallengeHighScorePost::clear_high_score() {
  high_score_ = 0u;
  clear_has_high_score();
}
inline ::google::protobuf::uint32 CMsgDOTALastHitChallengeHighScorePost::high_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALastHitChallengeHighScorePost.high_score)
  return high_score_;
}
inline void CMsgDOTALastHitChallengeHighScorePost::set_high_score(::google::protobuf::uint32 value) {
  set_has_high_score();
  high_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALastHitChallengeHighScorePost.high_score)
}

// -------------------------------------------------------------------

// CMsgDOTALastHitChallengeHighScoreRequest

// optional uint32 hero_id = 1;
inline bool CMsgDOTALastHitChallengeHighScoreRequest::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALastHitChallengeHighScoreRequest::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScoreRequest::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScoreRequest::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTALastHitChallengeHighScoreRequest::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALastHitChallengeHighScoreRequest.hero_id)
  return hero_id_;
}
inline void CMsgDOTALastHitChallengeHighScoreRequest::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALastHitChallengeHighScoreRequest.hero_id)
}

// -------------------------------------------------------------------

// CMsgDOTALastHitChallengeHighScoreResponse

// optional uint32 score = 1;
inline bool CMsgDOTALastHitChallengeHighScoreResponse::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTALastHitChallengeHighScoreResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALastHitChallengeHighScoreResponse.score)
  return score_;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALastHitChallengeHighScoreResponse.score)
}

// optional uint32 eresult = 2;
inline bool CMsgDOTALastHitChallengeHighScoreResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTALastHitChallengeHighScoreResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALastHitChallengeHighScoreResponse.eresult)
  return eresult_;
}
inline void CMsgDOTALastHitChallengeHighScoreResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALastHitChallengeHighScoreResponse.eresult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CSODOTAParty_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_LobbyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerInfo_ServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerInfo_ServerType>() {
  return ::CMsgGameServerInfo_ServerType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAMatch_ReplayState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAMatch_ReplayState>() {
  return ::CMsgDOTAMatch_ReplayState_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARequestMatches_SkillLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARequestMatches_SkillLevel>() {
  return ::CMsgDOTARequestMatches_SkillLevel_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAPopup_PopupID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAPopup_PopupID>() {
  return ::CMsgDOTAPopup_PopupID_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTACreateTeamResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTACreateTeamResponse_Result>() {
  return ::CMsgDOTACreateTeamResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAEditTeamLogoResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAEditTeamLogoResponse_Result>() {
  return ::CMsgDOTAEditTeamLogoResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAEditTeamDetailsResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAEditTeamDetailsResponse_Result>() {
  return ::CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTADisbandTeamResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTADisbandTeamResponse_Result>() {
  return ::CMsgDOTADisbandTeamResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARequestTeamDataResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARequestTeamDataResponse_Result>() {
  return ::CMsgDOTARequestTeamDataResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result>() {
  return ::CMsgDOTATeamInvite_GCImmediateResponseToInviter_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTATeamInvite_InviteeResponseToGC_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTATeamInvite_InviteeResponseToGC_Result>() {
  return ::CMsgDOTATeamInvite_InviteeResponseToGC_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTATeamInvite_GCResponseToInviter_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTATeamInvite_GCResponseToInviter_Result>() {
  return ::CMsgDOTATeamInvite_GCResponseToInviter_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTATeamInvite_GCResponseToInvitee_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTATeamInvite_GCResponseToInvitee_Result>() {
  return ::CMsgDOTATeamInvite_GCResponseToInvitee_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAKickTeamMemberResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAKickTeamMemberResponse_Result>() {
  return ::CMsgDOTAKickTeamMemberResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTATransferTeamAdminResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTATransferTeamAdminResponse_Result>() {
  return ::CMsgDOTATransferTeamAdminResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTALeaveTeamResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTALeaveTeamResponse_Result>() {
  return ::CMsgDOTALeaveTeamResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>() {
  return ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t>() {
  return ::CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildCreateResponse_EError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildCreateResponse_EError>() {
  return ::CMsgDOTAGuildCreateResponse_EError_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildSetAccountRoleResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildSetAccountRoleResponse_EResult>() {
  return ::CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildInviteAccountResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildInviteAccountResponse_EResult>() {
  return ::CMsgDOTAGuildInviteAccountResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildCancelInviteResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildCancelInviteResponse_EResult>() {
  return ::CMsgDOTAGuildCancelInviteResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildUpdateDetailsResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildUpdateDetailsResponse_EResult>() {
  return ::CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAPartySetOpenGuildResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAPartySetOpenGuildResponse_EResult>() {
  return ::CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAJoinOpenGuildPartyResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAJoinOpenGuildPartyResponse_EResult>() {
  return ::CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAGuildEditLogoResponse_EResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAGuildEditLogoResponse_EResult>() {
  return ::CMsgDOTAGuildEditLogoResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgWatchGameResponse_WatchGameResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgWatchGameResponse_WatchGameResult>() {
  return ::CMsgWatchGameResponse_WatchGameResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerSaveGameResult_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerSaveGameResult_Result>() {
  return ::CMsgGameServerSaveGameResult_Result_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCMsg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCMsg>() {
  return ::EDOTAGCMsg_descriptor();
}
template <> struct is_proto_enum< ::DOTA_PartnerAccountType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_PartnerAccountType>() {
  return ::DOTA_PartnerAccountType_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameMode>() {
  return ::DOTA_GameMode_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameState>() {
  return ::DOTA_GameState_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GC_TEAM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GC_TEAM>() {
  return ::DOTA_GC_TEAM_descriptor();
}
template <> struct is_proto_enum< ::DOTA_CM_PICK> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_CM_PICK>() {
  return ::DOTA_CM_PICK_descriptor();
}
template <> struct is_proto_enum< ::DOTALeaverStatus_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALeaverStatus_t>() {
  return ::DOTALeaverStatus_t_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyReadyState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyReadyState>() {
  return ::DOTALobbyReadyState_descriptor();
}
template <> struct is_proto_enum< ::DOTAGameVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAGameVersion>() {
  return ::DOTAGameVersion_descriptor();
}
template <> struct is_proto_enum< ::DOTAJoinLobbyResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAJoinLobbyResult>() {
  return ::DOTAJoinLobbyResult_descriptor();
}
template <> struct is_proto_enum< ::DOTAMatchVote> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAMatchVote>() {
  return ::DOTAMatchVote_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaTVDelay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaTVDelay>() {
  return ::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::DOTAChatChannelType_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTAChatChannelType_t>() {
  return ::DOTAChatChannelType_t_descriptor();
}
template <> struct is_proto_enum< ::DOTA_TournamentEvents> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_TournamentEvents>() {
  return ::DOTA_TournamentEvents_descriptor();
}
template <> struct is_proto_enum< ::DOTA_WatchReplayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_WatchReplayType>() {
  return ::DOTA_WatchReplayType_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Roles> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Roles>() {
  return ::Fantasy_Roles_descriptor();
}
template <> struct is_proto_enum< ::Fantasy_Team_Slots> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fantasy_Team_Slots>() {
  return ::Fantasy_Team_Slots_descriptor();
}
template <> struct is_proto_enum< ::DOTA_2013PassportSelectionIndices> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_2013PassportSelectionIndices>() {
  return ::DOTA_2013PassportSelectionIndices_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCSessionNeed> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCSessionNeed>() {
  return ::EDOTAGCSessionNeed_descriptor();
}
template <> struct is_proto_enum< ::EItemEditorReservationResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EItemEditorReservationResult>() {
  return ::EItemEditorReservationResult_descriptor();
}
template <> struct is_proto_enum< ::DOTASelectionPriorityRules> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTASelectionPriorityRules>() {
  return ::DOTASelectionPriorityRules_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaPauseSetting> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaPauseSetting>() {
  return ::LobbyDotaPauseSetting_descriptor();
}
template <> struct is_proto_enum< ::DOTALobbyVisibility> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTALobbyVisibility>() {
  return ::DOTALobbyVisibility_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_2eproto__INCLUDED
